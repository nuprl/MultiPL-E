language: cs
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        var min = arr.Where(x\
    \ => x % 2 == 0).DefaultIfEmpty().Min();\n        if (min == 0) {\n          \
    \  result.Add(min);\n            result.Add(arr.FindIndex(x => x == min));\n \
    \       } else if (min == int.MaxValue) {\n            return result;\n      \
    \  } else {\n            result.Add(min);\n            result.Add(arr.FindIndex(x\
    \ => x == min));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac839757c2da46e4a0f7f67f637fd50d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac839757c2da46e4a0f7f67f637fd50d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long m = Int64.MaxValue;\n        int i = -1;\n        for (int\
    \ j = 0; j < arr.Count; j++) {\n            long n = arr[j];\n            if (n\
    \ < m && n % 2 == 0) {\n                m = n;\n                i = j;\n     \
    \       }\n        }\n        if (i == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { m, i };\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf1cd782ac9a4f028cbfbe78ff2c080c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf1cd782ac9a4f028cbfbe78ff2c080c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count <= 0) {\n            return new List<long>();\n\
    \        }\n        long min = long.MaxValue;\n        List<long> res = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                res.Clear();\n\
    \                res.Add(min);\n                res.Add(i);\n            }\n \
    \       }\n        if (res.Count == 0) {\n            return new List<long>();\n\
    \        }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fc4e9ce8502491b995322fe5345fd2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fc4e9ce8502491b995322fe5345fd2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long minE = long.MaxValue;\n        long minI = long.MaxValue;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            long e = arr[(int)i];\n\
    \            if (e % 2 == 0 && e < minE) {\n                minE = e;\n      \
    \          minI = i;\n            }\n        }\n        if (minE != long.MaxValue)\
    \ {\n            return new List<long>(new long[]{minE, minI});\n        }\n \
    \       return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ac0b4d69b3d458680fab52679497384>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ac0b4d69b3d458680fab52679497384>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <cc68f7d161a240408dba3c497e31c1f7>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <cc68f7d161a240408dba3c497e31c1f7>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // First we check if there are any even numbers in the array\n\
    \        bool containsEven = false;\n        foreach (long l in arr) {\n     \
    \       if (l % 2 == 0) {\n                containsEven = true;\n            \
    \    break;\n            }\n        }\n        // If not return an empty list\n\
    \        if (!containsEven) {\n            return new List<long>();\n        }\n\
    \        // Otherwise we need to find the smallest even number\n        long minEven\
    \ = long.MaxValue;\n        int minEvenIndex = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n\
    \                minEven = arr[i];\n                minEvenIndex = i;\n      \
    \      }\n        }\n        // And return a list containing the value and index\
    \ of the smallest even\n        return new List<long> { minEven, minEvenIndex\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11ef8227a2764594b71bf70e00d24167>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11ef8227a2764594b71bf70e00d24167>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e089cfef2224773b6fd02238162ff85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e089cfef2224773b6fd02238162ff85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e089cfef2224773b6fd02238162ff85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e089cfef2224773b6fd02238162ff85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long lowest = long.MaxValue;\n        long index = -1;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < lowest) {\n                lowest = arr[i];\n                index\
    \ = i;\n            }\n        }\n        return index == -1 ? new List<long>()\
    \ : new List<long>{ lowest, index + 1 };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <331b1fb611464a82a70d6aae190b842c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <331b1fb611464a82a70d6aae190b842c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = long.MaxValue;\n        int minIdx = -1;\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = arr[i];\n                minIdx = i;\n\
    \            }\n        }\n        if (minIdx == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long>() { min, minIdx };\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e123c2d3b12b447d9fc1708c78c8e15c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e123c2d3b12b447d9fc1708c78c8e15c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // This problem is easy to solve.\n        // It gets harder,\
    \ when you have to consider the performance.\n        // So, let's pretend that\
    \ we have to solve it in the most efficient way possible.\n        // The first\
    \ thing we can do is to sort the array.\n        // Sort is O(n log n), so we\
    \ can do that.\n        // Then we can iterate over the array and return the first\
    \ even number.\n        // That's O(n) time, so the solution has time complexity\
    \ of O(n log n).\n        // But can we make the solution faster?\n        //\
    \ We know that the array is sorted.\n        // If there are no even numbers in\
    \ the array, then it doesn't matter, because we'll return an empty list anyway.\n\
    \        // If there are even numbers in the array, then they are somewhere in\
    \ the middle.\n        // The highest even number is probably somewhere at the\
    \ end of the array.\n        // If we check if the last element is even, and if\
    \ it is, we can return it.\n        // That would be O(1) time, but it is highly\
    \ unlikely that the highest even number is in the end of the array.\n        //\
    \ It's more likely to be the last even number.\n        // But we don't know how\
    \ many even numbers there are.\n        // Let's make an assumption, that there\
    \ are at least 4 even numbers.\n        // The first even number is at the index\
    \ 1, and the last even number is at the index n.\n        // If that's the case,\
    \ we can start from the index n/2, and then go left and right, until we find an\
    \ even number.\n        // For example, if n = 10, the even numbers are (1, 2,\
    \ 3, 4, 6, 7, 8, 9).\n        // We can start from the index 5 (n/2 = 10/2 = 5),\
    \ then go left and find the index 4, and then go right and find the index 6.\n\
    \        // By doing this, we go left and right and find the first even number\
    \ in O(log n) time.\n        // We can implement the algorithm, which we described\
    \ above.\n        // If we know that there are at least 4 even numbers, then that's\
    \ all we need.\n        // If we don't know that there are at least 4\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ngih8w3.cs(34,30): error CS0161: ''Problem.Pluck(List<long>)'': not all
    code paths return a value

    '
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = -1;\n        long index = -1;\n        long i = 0;\n\
    \        foreach (long l in arr) {\n            i += 1;\n            if (l % 2\
    \ == 0) {\n                if (min < 0 || l < min) {\n                    min\
    \ = l;\n                    index = i;\n                }\n            }\n   \
    \     }\n        if (min < 0) {\n            return new List<long>();\n      \
    \  }\n        return new List<long> { min, index };\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db9a1b5648e14cb28e62a1da96c15825>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db9a1b5648e14cb28e62a1da96c15825>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Write code here\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef8f85378803455c8406ee6389bde6b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef8f85378803455c8406ee6389bde6b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Code here :)\n        List<long> result = new List<long>();\n\
    \        List<long> even = new List<long>();\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[(int)i] % 2 == 0) {\n                even.Add(arr[(int)i]);\n\
    \            }\n        }\n        if (even.Count != 0) {\n            long smallest\
    \ = even[0];\n            long idx = 0;\n            for (long i = 0; i < even.Count;\
    \ i++) {\n                if (even[(int)i] < smallest) {\n                   \
    \ smallest = even[(int)i];\n                    idx = i;\n                }\n\
    \            }\n            result.Add(smallest);\n            result.Add(idx);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58480ddd5b5648fd94baa3da513257fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58480ddd5b5648fd94baa3da513257fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallest = long.MaxValue;\n        long index = -1;\n \
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0\
    \ && arr[i] < smallest) {\n                smallest = arr[i];\n              \
    \  index = i;\n            }\n        }\n        if (index == -1) {\n        \
    \    return new List<long>();\n        }\n        return new List<long>() { smallest,\
    \ index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d69ffb364433429e81d7cc61c9c0c11c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d69ffb364433429e81d7cc61c9c0c11c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long minIdx = -1;\n        long minVal = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            long val = arr[i];\n            if\
    \ (val == 0) {\n                if (minIdx == -1) {\n                    minIdx\
    \ = i;\n                    minVal = val;\n                }\n            } else\
    \ if (val % 2 == 0) {\n                if (minIdx == -1 || val < minVal) {\n \
    \                   minIdx = i;\n                    minVal = val;\n         \
    \       }\n            }\n        }\n        if (minIdx == -1) {\n           \
    \ return new List<long>();\n        } else {\n            return new List<long>()\
    \ { minVal, minIdx };\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7035c8eec81647f3bcfb03ce43bb07ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7035c8eec81647f3bcfb03ce43bb07ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // smallest even value\n        long smallest = long.MaxValue;\n\
    \        List<long> smallestArr = new List<long>();\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallest) {\n\
    \                smallest = arr[i];\n                smallestArr = new List<long>()\
    \ { smallest, i };\n            }\n        }\n        return smallestArr;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1155e269c4c4216a8762998f033d669>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1155e269c4c4216a8762998f033d669>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> list = new List<long>();\n        // your code here\n\
    \        return list;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <348752658446459583d1c9ce12fdc0e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <348752658446459583d1c9ce12fdc0e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return arr.Where(i => i % 2 == 0).DefaultIfEmpty().Min() switch\
    \ {\n            0 => new List<long>(),\n            var a => new List<long> {\
    \ a, arr.IndexOf(a) + 1 },\n        };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6afa64cd2d2246f4a4ee3c842a5a3a1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6afa64cd2d2246f4a4ee3c842a5a3a1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if(arr.Count() == 0) {\n            return new List<long>();\n\
    \        }\n        else {\n            // int idx = 0;\n            long minval\
    \ = 10000;\n            int minidx = 10000;\n            for(int i = 0; i < arr.Count();\
    \ i++) {\n                if(arr[i] % 2 == 0 && arr[i] < minval) {\n         \
    \           minval = arr[i];\n                    minidx = i;\n              \
    \  }\n            }\n            if(minval != 10000) {\n                return\
    \ new List<long> { minval, minidx };\n            }\n            else {\n    \
    \            return new List<long>();\n            }\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00c6ad0111b94725848adb27241fdcf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00c6ad0111b94725848adb27241fdcf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return new List<long> {0, 0};\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f017c08ce18744adad037c3a7c33ef5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f017c08ce18744adad037c3a7c33ef5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Your solution begins here.\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <ddec6d1e9da74e68bf98ab03abda2092>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <ddec6d1e9da74e68bf98ab03abda2092>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return arr.Select((num, i) => (num, i)).Where(tup => tup.num\
    \ % 2 == 0).OrderBy(tup => tup.num).ThenBy(tup => tup.i).Select(tup => new List<long>{tup.num,\
    \ tup.i}).FirstOrDefault() ?? new List<long>();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a40ec1fac1845159babadc6dc3a238b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a40ec1fac1845159babadc6dc3a238b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        int min = int.MaxValue;\n        int min_index = -1;\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = (int)arr[i];\n                min_index\
    \ = i;\n            }\n        }\n        if (min_index == -1) return new List<long>();\n\
    \        return new List<long> { min, min_index };\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e1f398c6b3c4d26a007704d7a4429c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e1f398c6b3c4d26a007704d7a4429c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var list = new List<long>();\n        var arrL = arr.ToList();\n\
    \        for (var i = 0; i < arrL.Count; i++) {\n            if (arrL[i] % 2 ==\
    \ 0) {\n                list.Add(arrL[i]);\n            }\n        }\n       \
    \ if (list.Count == 0) {\n            return new List<long>();\n        }\n  \
    \      var s = list.Min();\n        var ind = arrL.IndexOf(s);\n        var l\
    \ = new List<long>();\n        l.Add(s);\n        l.Add(ind);\n        return\
    \ l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dde6dc8c430b48f7b50d461c8b8f9c5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dde6dc8c430b48f7b50d461c8b8f9c5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var minEven = arr.FirstOrDefault(e => e % 2 == 0);\n       \
    \ var minEvenIdx = arr.IndexOf(minEven);\n        if (minEvenIdx < 0) {\n    \
    \        return new List<long>();\n        }\n        return new List<long> {\
    \ minEven, minEvenIdx };\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67e2bf05aac84617af37c16b66cec7fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67e2bf05aac84617af37c16b66cec7fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> outList = new List<long>();\n        bool oddFound\
    \ = false;\n        bool evenFound = false;\n        foreach (long l in arr) {\n\
    \            if (l % 2 == 0) {\n                if (!evenFound) {\n          \
    \          outList.Add(l);\n                    outList.Add(arr.IndexOf(l));\n\
    \                    evenFound = true;\n                } else if (l < outList[0])\
    \ {\n                    outList[0] = l;\n                    outList[1] = arr.IndexOf(l);\n\
    \                }\n            } else {\n                oddFound = true;\n \
    \           }\n        }\n        if (oddFound)\n            return new List<long>();\n\
    \        return outList;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <063ef63641e24a1c9b2a88800f806262>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <063ef63641e24a1c9b2a88800f806262>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = long.MaxValue;\n        int index = -1;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == 0 && index\
    \ == -1) {\n                index = i;\n            }\n            if (arr[i]\
    \ > 0 && arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n \
    \               index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>\
    \ { min, index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d400dbec439149a59b33f3a13e10d824>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d400dbec439149a59b33f3a13e10d824>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        var min_even = arr.Where(n => n % 2 == 0).Min();\n       \
    \ var min_even_index = arr.IndexOf(min_even);\n        return new List<long>{min_even,\
    \ min_even_index};\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46a681fdcdb94fcc99408098e6acd22e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46a681fdcdb94fcc99408098e6acd22e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Your code here\n        return arr;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a62b947600f43adb1295d4a87d1ce99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a62b947600f43adb1295d4a87d1ce99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = -1;\n        int minIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       if (min == -1 || arr[i] < min) {\n                    min = arr[i];\n\
    \                    minIndex = i;\n                }\n            }\n       \
    \ }\n        if (min == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, minIndex };\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f952687adf914fd487cb9363b48c84b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f952687adf914fd487cb9363b48c84b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long even = 0;\n        var smallest = arr.Where(x => x % 2\
    \ == 0).OrderBy(x => x).FirstOrDefault();\n        var result = new List<long>\
    \ {\n            smallest,\n            arr.FindIndex(x => x == smallest)\n  \
    \      };\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95c8264911e4415cb3ac9a6f7d813a81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95c8264911e4415cb3ac9a6f7d813a81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = long.MaxValue;\n        int index = -1;\n       \
    \ int ind = 0;\n        foreach (long x in arr) {\n            if (x % 2 == 0\
    \ && x < min) {\n                min = x;\n                index = ind;\n    \
    \        }\n            ind++;\n        }\n        if (index == -1)\n        \
    \    return new List<long>();\n        return new List<long>() { min, index };\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2eb587816f849cc9b86d03018de28a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2eb587816f849cc9b86d03018de28a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code goes here\n        List<long> plucked = new List<long>();\n\
    \        if (arr.Count == 0) return plucked;\n        int index = -1;\n      \
    \  long val = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (!found) {\n\
    \                    index = i;\n                    val = arr[i];\n         \
    \           found = true;\n                } else {\n                    if (arr[i]\
    \ < val) {\n                        index = i;\n                        val =\
    \ arr[i];\n                    }\n                }\n            }\n        }\n\
    \        if (found) {\n            plucked.Add(val);\n            plucked.Add(index);\n\
    \        }\n        return plucked;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63843178f78f4c90bc1574e56b255683>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63843178f78f4c90bc1574e56b255683>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        result.Add(0);\n\
    \        result.Add(0);\n        // get even values and their indices\n      \
    \  var evens = arr.Select((x, i) => new { Value = x, Index = i }).Where(x => x.Value\
    \ % 2 == 0);\n        // check if empty list was passed\n        if (evens.Count()\
    \ == 0) {\n            return result;\n        }\n        // get min even value\n\
    \        long minEven = evens.Select(x => x.Value).Min();\n        // get indices\
    \ of even values\n        List<long> evensIndices = evens.Where(x => x.Value ==\
    \ minEven).Select(x => x.Index).ToList();\n        // get minimum index\n    \
    \    long minIndex = evensIndices.Min();\n        // add even values to result\n\
    \        result[0] = minEven;\n        result[1] = minIndex;\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo83p4e6v.cs(47,35): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<int>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long minValue = long.MaxValue;\n        long minIndex = long.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            long n = arr[i];\n\
    \            if (n % 2 == 0 && n < minValue) {\n                minValue = n;\n\
    \                minIndex = i;\n            }\n        }\n        if (minValue\
    \ == long.MaxValue) {\n            return new List<long>();\n        }\n     \
    \   return new List<long>() { minValue, minIndex };\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14daef0efbec42479b0f0433ca30135c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14daef0efbec42479b0f0433ca30135c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // sort the array\n        arr.Sort();\n        // create a\
    \ list that holds the indices of all the even elements in the list\n        List<long>\
    \ evenIndices = new List<long>();\n        // loop through the list arr and find\
    \ all the even indices\n        // add the indices of the even elements to the\
    \ list evenIndices\n        for (int i = 0; i < arr.Count; i++) {\n          \
    \  if (arr[i] % 2 == 0) {\n                evenIndices.Add(i);\n            }\n\
    \        }\n        // initialise the variable that will hold the index of the\
    \ smallest even element in the list\n        long smallestEven = 0;\n        //\
    \ check if the list evenIndices is empty\n        if (evenIndices.Count == 0)\
    \ {\n            // if it is empty then return an empty list\n            return\
    \ new List<long>();\n        } else {\n            // if it is not empty then\
    \ set the smallestEven to the first index in the list\n            smallestEven\
    \ = evenIndices[0];\n        }\n        // loop through the list evenIndices and\
    \ find the smallest index\n        // assign the value of the smallest index to\
    \ the variable smallestEven\n        for (int i = 0; i < evenIndices.Count; i++)\
    \ {\n            if (evenIndices[i] < smallestEven) {\n                smallestEven\
    \ = evenIndices[i];\n            }\n        }\n        // create a list to hold\
    \ the even values and the indices\n        List<long> result = new List<long>();\n\
    \        // add the value at smallestEven to the result list\n        result.Add(arr[smallestEven]);\n\
    \        // add the smallestEven index to the result list\n        result.Add(smallestEven);\n\
    \        // return the result list\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpilyhhj16.cs(66,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // TODO: Write some code here to return the correct value.\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <c2c4ac72984d42b9ad4860a48a8d7224>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <c2c4ac72984d42b9ad4860a48a8d7224>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> res = new List<long>();\n        int idx = 0;\n \
    \       foreach (long x in arr) {\n            if (x % 2 == 0) {\n           \
    \     if (res.Count == 0) res.Add(x);\n                else if (res[0] > x) {\n\
    \                    res[0] = x;\n                    res.Add(idx);\n        \
    \        }\n            }\n            idx++;\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2590a3e25e5548e9ab3577d458ac5fa6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2590a3e25e5548e9ab3577d458ac5fa6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallest = long.MaxValue;\n        int index = -1;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0\
    \ && arr[i] < smallest) {\n                smallest = arr[i];\n              \
    \  index = i;\n            }\n        }\n        if (index != -1) {\n        \
    \    List<long> ret = new List<long>();\n            ret.Add(smallest);\n    \
    \        ret.Add(index);\n            return ret;\n        }\n        return new\
    \ List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75930d5ca0204c308cff88e12720fe58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75930d5ca0204c308cff88e12720fe58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return arr.Select((val, ind) => new Tuple<long, long>(val, ind))\n\
    \            .Where(tup => tup.Item1 % 2 == 0)\n            .OrderBy(tup => tup.Item1)\n\
    \            .ThenBy(tup => tup.Item2)\n            .Select(tup => new List<long>()\
    \ { tup.Item1, tup.Item2 })\n            .FirstOrDefault() ?? new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78991ea1905b4e91ae62642cfafc36a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78991ea1905b4e91ae62642cfafc36a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) return new List<long>();\n        long?\
    \ min = null;\n        long? minIndex = null;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (min == null\
    \ || arr[i] < min) {\n                    min = arr[i];\n                    minIndex\
    \ = i;\n                }\n            }\n        }\n        if (min == null)\
    \ return new List<long>();\n        return new List<long> { min.Value, minIndex.Value\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4bc2acdd4ff346e2aa234d800908e3be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4bc2acdd4ff346e2aa234d800908e3be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if(arr.Count == 0) return new List<long>();\n        var evenValues\
    \ = arr.Where(x => x % 2 == 0).ToList();\n        if(evenValues.Count == 0) return\
    \ new List<long>();\n        long lowestEven = evenValues.Min();\n        long\
    \ index = arr.IndexOf(lowestEven);\n        return new List<long> { lowestEven,\
    \ index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9abbcbdf9be4f49bab335a44d124e59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9abbcbdf9be4f49bab335a44d124e59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long? minEven = arr.Where(x => x % 2 == 0).Min();\n        if\
    \ (minEven == null) {\n            return new List<long>();\n        }\n     \
    \   return new List<long>() { (long)minEven, arr.IndexOf((long)minEven) };\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df6ea19ea43b44b3a1997c1e699b3e49>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df6ea19ea43b44b3a1997c1e699b3e49>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00028] in\
    \ <df6ea19ea43b44b3a1997c1e699b3e49>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count() == 0) {\n            return new List<long>();\n\
    \        }\n        if (arr.Count() == 1) {\n            if (arr[0] % 2 == 0)\
    \ {\n                return new List<long>() { arr[0], 0 };\n            } else\
    \ {\n                return new List<long>();\n            }\n        }\n    \
    \    long min = arr[0];\n        long minIndex = 0;\n        for (long i = 0;\
    \ i < arr.Count(); i++) {\n            if (arr[(int)i] % 2 == 0) {\n         \
    \       if (arr[(int)i] < min) {\n                    min = arr[(int)i];\n   \
    \                 minIndex = i;\n                }\n            }\n        }\n\
    \        if (min % 2 == 0) {\n            return new List<long>() { min, minIndex\
    \ };\n        } else {\n            return new List<long>();\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c2b6edffd7349ccaedcda7344eef7af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c2b6edffd7349ccaedcda7344eef7af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long minIndex = long.MaxValue;\n        long minEven = long.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < minEven) {\n                minEven = arr[i];\n              \
    \  minIndex = i;\n            }\n        }\n        if (minIndex == long.MaxValue)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { minEven, minIndex };\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <060dd6119dd74c3b922345d46d470fcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <060dd6119dd74c3b922345d46d470fcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code here\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf85324f21f41ec9f835a088c90715a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf85324f21f41ec9f835a088c90715a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        var even = arr.Where(x => x % 2 == 0).OrderBy(x => x).First();\n\
    \        if (even == 0) {\n            return new List<long> { even, arr.IndexOf(even)\
    \ };\n        }\n        var i = arr.IndexOf(even);\n        return new List<long>\
    \ { even, i };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eecd4723ac2540b38e507ac538e4e1c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eecd4723ac2540b38e507ac538e4e1c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var evens = arr.Where(e => e % 2 == 0).ToList();\n        if(evens.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        var min =\
    \ evens.Min();\n        var idx = arr.IndexOf(min);\n        return new List<long>()\
    \ { min, idx };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47a2aad451c54c64ae871661e72c5fdb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47a2aad451c54c64ae871661e72c5fdb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return arr.Select((x, i) => (x, i)).Where(x => x.x % 2 == 0).OrderBy(x\
    \ => x.x).ThenBy(x => x.i).Select(x => new List<long>() { x.x, x.i }).FirstOrDefault()\
    \ ?? new List<long>();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db15729b18f64137ba14036513353c05>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db15729b18f64137ba14036513353c05>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = 0;\n        int index = 0;\n        bool found =\
    \ false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (!found) {\n                    found = true;\n\
    \                    min = arr[i];\n                    index = i;\n         \
    \       } else {\n                    if (arr[i] < min) {\n                  \
    \      min = arr[i];\n                        index = i;\n                   \
    \ }\n                }\n            }\n        }\n        if (found) {\n     \
    \       return new List<long>() {min, index};\n        } else {\n            return\
    \ new List<long>();\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e17cdab476c464cb7574ccd8b282c83>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e17cdab476c464cb7574ccd8b282c83>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code goes here\n        int len = arr.Count;\n     \
    \   if (len == 0) {\n            return new List<long>();\n        }\n       \
    \ long evenMin = Int64.MaxValue;\n        int evenMinIndex = -1;\n        for\
    \ (int i = 0; i < len; i++) {\n            long val = arr[i];\n            if\
    \ (val % 2 == 0 && val < evenMin) {\n                evenMin = val;\n        \
    \        evenMinIndex = i;\n            }\n        }\n        if (evenMinIndex\
    \ != -1) {\n            return new List<long> { evenMin, evenMinIndex };\n   \
    \     }\n        return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4dcad817ffe74950a8249d8014e2af2e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4dcad817ffe74950a8249d8014e2af2e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var evens = arr.Where(a => a % 2 == 0).ToList();\n        if\
    \ (evens.Count == 0) {\n            return new List<long>();\n        }\n    \
    \    var minEven = evens.Min();\n        var index = arr.IndexOf(minEven);\n \
    \       return new List<long> { minEven, index };\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1f6125e820e4d2d99ce16b72df0f180>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1f6125e820e4d2d99ce16b72df0f180>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallestEven = int.MaxValue;\n        int minIndex = int.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < smallestEven) {\n                smallestEven = arr[i];\n    \
    \            minIndex = i;\n            }\n        }\n        if (smallestEven\
    \ == int.MaxValue) return new List<long>();\n        return new List<long>() {\
    \ smallestEven, minIndex };\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05efb1a4973144a0b3661c3f83c330f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05efb1a4973144a0b3661c3f83c330f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = long.MaxValue;\n        int index = -1;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                index = i;\n      \
    \      }\n        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, index };\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b4e8556c1d042a78924f3b83d2e2ccd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b4e8556c1d042a78924f3b83d2e2ccd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code here\n        var even = arr.Select((long node,\
    \ int index) => {\n            return new Tuple<long, int, long>(node, index,\
    \ node % 2L);\n        }).Where((t) => {\n            return t.Item3 == 0L;\n\
    \        }).OrderBy((t) => {\n            return t.Item1;\n        }).ThenBy((t)\
    \ => {\n            return t.Item2;\n        }).ToList();\n        return even.Count\
    \ == 0 ? new List<long>() : new List<long>() {\n            even[0].Item1,\n \
    \           even[0].Item2\n        };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6cfe3ac6fba542f0a5d669b264fb42ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6cfe3ac6fba542f0a5d669b264fb42ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // This was fun; I wanted to try writing a problem that sort\
    \ of depended on a\n        // particular function being tail recursive.  I think\
    \ it worked.\n        long idx = 1;\n        long min = 0;\n        bool found\
    \ = false;\n        foreach (long val in arr) {\n            if (val % 2 == 0)\
    \ {\n                if (!found) {\n                    min = val;\n         \
    \           found = true;\n                } else if (val < min) {\n         \
    \           min = val;\n                    idx = 1;\n                } else if\
    \ (val == min) {\n                    idx += 1;\n                }\n         \
    \   }\n        }\n        if (found) {\n            return new List<long>(new\
    \ long[] {min, idx});\n        } else {\n            return new List<long>();\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <193d2ef7e4ca418bac9dfc46bba01a3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <193d2ef7e4ca418bac9dfc46bba01a3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> smallestEven = new List<long>();\n        List<long>\
    \ nullList = new List<long>();\n        if (arr.Count == 0) {\n            return\
    \ nullList;\n        }\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0) {\n                smallestEven.Add(arr[i]);\n   \
    \         }\n        }\n        if (smallestEven.Count == 0) {\n            return\
    \ nullList;\n        }\n        long smallestEvenIndex = smallestEven.Min();\n\
    \        List<long> result = new List<long>();\n        result.Add(smallestEvenIndex);\n\
    \        result.Add(arr.IndexOf(smallestEvenIndex));\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a73acd3a491451da58afbb38fe71d56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a73acd3a491451da58afbb38fe71d56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                return new List<long>() { arr[i], i };\n      \
    \      }\n        }\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0917562eeeec449f9b8f4cfbec02ef9a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0917562eeeec449f9b8f4cfbec02ef9a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallestEven = long.MaxValue;\n        int index = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < smallestEven) {\n                smallestEven = arr[i];\n    \
    \            index = i;\n            }\n        }\n        if (index == -1) {\n\
    \            return new List<long>();\n        }\n        return new List<long>\
    \ { smallestEven, index };\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b741c60e444b45e28671b7de8c34f61e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b741c60e444b45e28671b7de8c34f61e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        int l = arr.Count;\n        if (l == 0) return new List<long>();\n\
    \        long smalestEven = arr[0];\n        int smalestEvenIndex = 0;\n     \
    \   for (int i = 0; i < l; i++) {\n            if (arr[i] % 2 == 0 && arr[i] <\
    \ smalestEven) {\n                smalestEven = arr[i];\n                smalestEvenIndex\
    \ = i;\n            }\n        }\n        if (smalestEven % 2 == 0) return new\
    \ List<long>{smalestEven, smalestEvenIndex};\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94b7dc3914764bc1b88ec976910089ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94b7dc3914764bc1b88ec976910089ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long minval = Int64.MaxValue;\n        long minindex = -1;\n\
    \        long index = 0;\n        foreach (long x in arr) {\n            if (x\
    \ % 2 == 0 && x < minval) {\n                minval = x;\n                minindex\
    \ = index;\n            }\n            index++;\n        }\n        if (minindex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { minval, minindex };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f470342434a4d7992295a9a5aac79df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f470342434a4d7992295a9a5aac79df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var evens = from value in arr where value % 2 == 0 select value;\n\
    \        if (!evens.Any()) {\n            return new List<long>();\n        }\n\
    \        long min = evens.Min();\n        int index = arr.IndexOf(min);\n    \
    \    return new List<long>() { min, index };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2550a90dcbeb4214a1da59d50ad6da5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2550a90dcbeb4214a1da59d50ad6da5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> ret = new List<long>();\n        long smallest_even\
    \ = arr.Where(x => x % 2 == 0).DefaultIfEmpty(long.MaxValue).Min();\n        if\
    \ (smallest_even < long.MaxValue) {\n            int index = arr.IndexOf(smallest_even);\n\
    \            ret.Add(smallest_even);\n            ret.Add(index);\n        }\n\
    \        return ret;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d896a8d730943d4889a1793d9114a16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d896a8d730943d4889a1793d9114a16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> ans = new List<long>();\n        if (arr.Count ==\
    \ 0) return ans;\n        long minimum = arr[0];\n        long minimumindex =\
    \ 0;\n        bool seen = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long item = arr[i];\n            if (item == 0) {\n         \
    \       if (!seen) {\n                    minimum = item;\n                  \
    \  minimumindex = i;\n                    seen = true;\n                }\n  \
    \          } else if (item % 2 == 0) {\n                if (!seen) {\n       \
    \             minimum = item;\n                    minimumindex = i;\n       \
    \             seen = true;\n                } else if (item < minimum) {\n   \
    \                 minimum = item;\n                    minimumindex = i;\n   \
    \             }\n            }\n        }\n        if (seen) {\n            ans.Add(minimum);\n\
    \            ans.Add(minimumindex);\n        }\n        return ans;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ed60a14fe4400f9bf0a1d3acb9be41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8ed60a14fe4400f9bf0a1d3acb9be41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long? smallest_even = null;\n        int smallest_even_index\
    \ = -1;\n        int index = 0;\n        foreach (long e in arr) {\n         \
    \   if (e % 2 == 0) {\n                if (smallest_even == null || e < smallest_even)\
    \ {\n                    smallest_even = e;\n                    smallest_even_index\
    \ = index;\n                }\n            }\n            index++;\n        }\n\
    \        if (smallest_even == null) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { smallest_even.Value, smallest_even_index\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d89546c14984cc9b3eb093efc097476>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d89546c14984cc9b3eb093efc097476>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> t = new List<long>();\n        if (arr.Count == 0)\
    \ return t;\n        long minVal = Int64.MaxValue;\n        long idx = -1;\n \
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0\
    \ && arr[i] < minVal) {\n                minVal = arr[i];\n                idx\
    \ = i;\n            }\n        }\n        if (idx != -1) {\n            t.Add(minVal);\n\
    \            t.Add(idx);\n        }\n        return t;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5424aa345d0c486692f5e635a6d89680>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5424aa345d0c486692f5e635a6d89680>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Write your code here.\n        long min = 0;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                if (!found) {\n                    min\
    \ = arr[i];\n                    found = true;\n                } else {\n   \
    \                 if (arr[i] < min) {\n                        min = arr[i];\n\
    \                    }\n                }\n            }\n        }\n        List<long>\
    \ ret = new List<long>();\n        if (found) {\n            ret.Add(min);\n \
    \           ret.Add(arr.IndexOf(min));\n        }\n        return ret;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <79ebd6c5bb2642259c6a79cd85e35d94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <79ebd6c5bb2642259c6a79cd85e35d94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) return new List<long>();\n        var evens\
    \ = arr.Where(x => x % 2 == 0).ToList();\n        if (evens.Count == 0) return\
    \ new List<long>();\n        var min = evens.Min();\n        return new List<long>{min,\
    \ arr.IndexOf(min)};\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a9b67ead5234f2aa738cd37192914a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a9b67ead5234f2aa738cd37192914a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallestEven = long.MaxValue;\n        int smallestEvenIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < smallestEven) {\n                smallestEven = arr[i];\n\
    \                smallestEvenIndex = i;\n            }\n        }\n        if\
    \ (smallestEvenIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { smallestEven, smallestEvenIndex };\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5738308e49004f18b03f01d4f48c1c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5738308e49004f18b03f01d4f48c1c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code here!\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0818c8b13b574c66996a3d1627d6cd0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0818c8b13b574c66996a3d1627d6cd0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count() == 0) return new List<long>();\n        List<long>\
    \ ret = new List<long>();\n        long val = -1, idx = -1;\n        for (int\
    \ i = 0; i < arr.Count(); i++) {\n            if (arr[i] % 2 == 0) {\n       \
    \         if (val == -1 || arr[i] < val) {\n                    val = arr[i];\n\
    \                    idx = i;\n                }\n            }\n        }\n \
    \       if (val != -1) {\n            ret.Add(val);\n            ret.Add(idx);\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a60dd28957cf46e1bc89730e876ed185>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a60dd28957cf46e1bc89730e876ed185>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long[] values = arr.ToArray();\n        int? smallestIndex =\
    \ null;\n        long smallestValue = -1;\n        for (int i = 0; i < values.Length;\
    \ i++) {\n            if (values[i] % 2 == 0) {\n                if (smallestIndex\
    \ == null || values[i] < smallestValue) {\n                    smallestIndex =\
    \ i;\n                    smallestValue = values[i];\n                }\n    \
    \        }\n        }\n        if (smallestIndex == null) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { smallestValue,\
    \ smallestIndex.Value };\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31ebe751020740a49ef069fc05f4d384>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31ebe751020740a49ef069fc05f4d384>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return arr.Select((x, i) => (x, i)).Where(x => x.x % 2 == 0).OrderBy(x\
    \ => x.x).ThenBy(x => x.i).Select(x => x.x).Take(1).Concat(arr.Select((x, i) =>\
    \ (x, i)).Where(x => x.x % 2 == 0).OrderBy(x => x.x).ThenBy(x => x.i).Select(x\
    \ => x.i).Take(1)).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo2un66rm.cs(35,16): error CS1929: ''IEnumerable<long>'' does not contain
    a definition for ''Concat'' and the best extension method overload ''ParallelEnumerable.Concat<int>(ParallelQuery<int>,
    IEnumerable<int>)'' requires a receiver of type ''ParallelQuery<int>''

    '
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        int len = arr.Count;\n        int minVal = int.MaxValue;\n \
    \       int minIndex = -1;\n        int minVal2 = int.MaxValue;\n        int minIndex2\
    \ = -1;\n        bool hasZero = false;\n        bool hasEven = false;\n      \
    \  bool hasOdd = false;\n        for (int i = 0; i < len; i++) {\n           \
    \ if (arr[i] == 0) {\n                hasZero = true;\n                if (minVal2\
    \ > arr[i]) {\n                    minVal2 = (int)arr[i];\n                  \
    \  minIndex2 = i;\n                }\n            } else if (arr[i] % 2 == 0)\
    \ {\n                hasEven = true;\n                if (minVal > arr[i]) {\n\
    \                    minVal = (int)arr[i];\n                    minIndex = i;\n\
    \                }\n            } else {\n                hasOdd = true;\n   \
    \         }\n        }\n        if (hasZero && !hasEven) {\n            return\
    \ new List<long> { minVal2, minIndex2 };\n        } else if (hasZero && hasEven)\
    \ {\n            return new List<long> { minVal, minIndex };\n        } else if\
    \ (!hasZero && hasEven) {\n            return new List<long> { minVal, minIndex\
    \ };\n        } else {\n            return new List<long>();\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee57e4da970246c2b195b7b3a8ef0be2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee57e4da970246c2b195b7b3a8ef0be2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = arr.Count > 0 ? arr[0] : 0;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n            }\n        }\n        return new List<long>()\
    \ { min, arr.IndexOf(min) };\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca12f437af814138a048415e22f1ca16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca12f437af814138a048415e22f1ca16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        int idx = 0;\n\
    \        long smallestEvenValue = 0;\n        bool hasEvenValue = false;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                hasEvenValue = true;\n                if (arr[i] < smallestEvenValue\
    \ || smallestEvenValue == 0) {\n                    smallestEvenValue = arr[i];\n\
    \                    idx = i;\n                }\n            }\n        }\n \
    \       if (hasEvenValue) {\n            result.Add(smallestEvenValue);\n    \
    \        result.Add(idx);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52ab7931d9c84ac286e3b4d7df83b565>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52ab7931d9c84ac286e3b4d7df83b565>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Write your code here\n        if (arr.Count < 1) {\n    \
    \        return new List<long>();\n        }\n\n        if (arr.Count < 2) {\n\
    \            if (arr[0] % 2 == 0) {\n                return new List<long> { arr[0],\
    \ 1 };\n            }\n            return new List<long>();\n        }\n\n   \
    \     // check if all even number\n        bool allEven = true;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 != 0) {\n         \
    \       allEven = false;\n                break;\n            }\n        }\n\n\
    \        if (allEven) {\n            // find minimum\n            long min = arr[0];\n\
    \            int minIndex = 0;\n            for (int i = 1; i < arr.Count; i++)\
    \ {\n                if (arr[i] < min) {\n                    min = arr[i];\n\
    \                    minIndex = i;\n                }\n            }\n       \
    \     return new List<long> { min, minIndex + 1 };\n        }\n\n        // find\
    \ first even number\n        for (int i = 0; i < arr.Count; i++) {\n         \
    \   if (arr[i] % 2 == 0) {\n                return new List<long> { arr[i], i\
    \ + 1 };\n            }\n        }\n\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea960cde16ee421585bf65e06385e67b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea960cde16ee421585bf65e06385e67b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) return new List<long>();\n        int index\
    \ = 0;\n        long min = long.MaxValue;\n        bool found = false;\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = arr[i];\n                index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            return new List<long>() { min, index };\n        }\n        return\
    \ new List<long>();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcffaa3ea8b147d2a92dddf91bd25ccb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcffaa3ea8b147d2a92dddf91bd25ccb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = long.MaxValue;\n        int index = -1;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                index = i;\n      \
    \      }\n        }\n        return index == -1 ? new List<long>() : new List<long>()\
    \ { min, index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47847dcfdc7844cb9283c94dcef86244>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47847dcfdc7844cb9283c94dcef86244>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code here\n        if (arr.Count == 0) {\n         \
    \   return new List<long>();\n        }\n\n        // sort the array\n       \
    \ arr.Sort();\n\n        // find the first even number\n        int firstEvenIndex\
    \ = arr.FindIndex(x => x % 2 == 0);\n\n        // if firstEvenIndex < 0, there\
    \ are no even numbers, return\n        if (firstEvenIndex < 0) {\n           \
    \ return new List<long>();\n        }\n\n        // return the even number\n \
    \       return new List<long>() { arr[firstEvenIndex], firstEvenIndex };\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32c374f9e44445859d5dbfe5b0cd1b61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32c374f9e44445859d5dbfe5b0cd1b61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallest = arr.FirstOrDefault(x => x % 2 == 0);\n     \
    \   if (smallest == 0) return new List<long>();\n        return new List<long>\
    \ { arr.First(x => x == smallest), arr.IndexOf(smallest) };\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ee69bff5c194c408aa1586a224d4433>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ee69bff5c194c408aa1586a224d4433>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> res = new List<long>();\n        long min = arr.Where(x\
    \ => x % 2 == 0).DefaultIfEmpty().Min();\n        int minIndex = arr.FindIndex(x\
    \ => x == min);\n        res.Add(min);\n        res.Add(minIndex);\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53fcb4cd174744069cc3369aa8eec2cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53fcb4cd174744069cc3369aa8eec2cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallest = long.MaxValue;\n        long smallestIndex =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < smallest) {\n                smallest = arr[i];\n       \
    \         smallestIndex = i;\n            }\n        }\n        if (smallestIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { smallest, smallestIndex };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9b5922dd6d1408f9da729d1fcbbbf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9b5922dd6d1408f9da729d1fcbbbf55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return arr.Where(x => x % 2 == 0).OrderBy(x => x).Select((x,\
    \ i) => new {x, i}).Take(1).Select(x => new List<long>{x.x, x.i}).FirstOrDefault()\
    \ ?? new List<long>();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e60ed2328bed4e0993b812945267ede6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e60ed2328bed4e0993b812945267ede6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        int i = 0;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                // We found the smallest even value\n      \
    \          return new List<long> { n, i };\n            }\n            i++;\n\
    \        }\n        return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9eea1544cc1b4c4bb3ea794d412a0c68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9eea1544cc1b4c4bb3ea794d412a0c68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = Int64.MaxValue;\n        long min_idx = Int64.MaxValue;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                min_idx = i;\n                found = true;\n            }\n\
    \        }\n        if (found) {\n            return new List<long>() { min, min_idx\
    \ };\n        }\n        return new List<long>();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fbc453b9e38c4442924bca3798a21cc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fbc453b9e38c4442924bca3798a21cc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var l = arr.Count();\n        var min = arr.Where(i => i % 2\
    \ == 0).DefaultIfEmpty().Min();\n        if (min == 0 && !arr.Contains(0)) return\
    \ new List<long>();\n        return new List<long>() { arr.FindIndex(i => i ==\
    \ min), min };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eeaa78aef3ed4930a00ccbf057c198ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eeaa78aef3ed4930a00ccbf057c198ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count() == 0) {\n            return new List<long>();\n\
    \        }\n        var even = new List<long>();\n        for (int i = 0; i <\
    \ arr.Count(); i++) {\n            if (arr[i] % 2 == 0) {\n                even.Add(arr[i]);\n\
    \            }\n        }\n        if (even.Count() == 0) {\n            return\
    \ new List<long>();\n        }\n        var min = even.Min();\n        for (int\
    \ i = 0; i < arr.Count(); i++) {\n            if (arr[i] == min) {\n         \
    \       return new List<long>() { arr[i], i };\n            }\n        }\n   \
    \     return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3fea50d0be914f60bb81f910b37b2e87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3fea50d0be914f60bb81f910b37b2e87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Write your code here.\n        List<long> result = new List<long>();\n\
    \        int smallest_even_value = -1;\n        int smallest_even_value_index\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallest_even_value == -1) {\n            \
    \        smallest_even_value = (int)arr[i];\n                    smallest_even_value_index\
    \ = i;\n                } else if (arr[i] < smallest_even_value) {\n         \
    \           smallest_even_value = (int)arr[i];\n                    smallest_even_value_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_even_value_index\
    \ != -1) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_value_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccec65c92cec4a4dbf69db537cd5323c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccec65c92cec4a4dbf69db537cd5323c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = long.MaxValue;\n        long min_index = -1;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n                min = arr[i];\n                min_index\
    \ = i;\n            }\n        }\n        if (min == long.MaxValue) {\n      \
    \      return new List<long>();\n        }\n        return new List<long> { min,\
    \ min_index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7297ba68b8d4b1491b83771f59568da>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7297ba68b8d4b1491b83771f59568da>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long minVal = long.MaxValue;\n        long minValIndex = long.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < minVal) {\n                minVal = arr[i];\n                minValIndex\
    \ = i;\n            }\n        }\n        if (minVal == long.MaxValue) return\
    \ new List<long>();\n        return new List<long>() { minVal, minValIndex };\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6305308cb8245f080a10550148a7ba6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6305308cb8245f080a10550148a7ba6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        // if the array\
    \ is empty, return an empty list\n        if (arr.Count == 0) return result;\n\
    \        // otherwise, find the first even value\n        int i = 0;\n       \
    \ while (i < arr.Count && arr[i] % 2 != 0) i++;\n        // if the loop ended,\
    \ there are no even numbers in the list\n        if (i == arr.Count) return result;\n\
    \        // otherwise, we have found the first even number, so store its index\
    \ and value\n        long minVal = arr[i];\n        int minIndex = i;\n      \
    \  // loop through the rest of the list looking for smaller even numbers\n   \
    \     for (; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < minVal) {\n                minVal = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n        // return the list containing the smallest\
    \ even value and its index\n        result.Add(minVal);\n        result.Add(minIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13e3410cd108420dadeaeac35845dddb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13e3410cd108420dadeaeac35845dddb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> ret = new List<long>();\n        long idx = 0;\n\
    \        long? val = null;\n        long lastIdx = 0;\n        bool bHasEven =\
    \ false;\n        foreach (long i in arr) {\n            if (i % 2 == 0) {\n \
    \               bHasEven = true;\n                if (val == null || i < val)\
    \ {\n                    val = i;\n                    idx = lastIdx;\n      \
    \          }\n            }\n            lastIdx++;\n        }\n        if (bHasEven)\
    \ {\n            ret.Add(val.Value);\n            ret.Add(idx);\n        }\n \
    \       return ret;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b69e6f81573c4b50a25729837fc0eb94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b69e6f81573c4b50a25729837fc0eb94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var ret = new List<long>();\n        long? minEven = null;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (minEven == null || arr[i] < minEven) {\n         \
    \           minEven = arr[i];\n                    ret.Clear();\n            \
    \        ret.Add(minEven.Value);\n                    ret.Add(i);\n          \
    \      }\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15c9931cfcd4481f93be3c3bc151b695>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15c9931cfcd4481f93be3c3bc151b695>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        int smallestIndex = -1;\n        long smallestValue = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestIndex == -1 || arr[i] < smallestValue) {\n\
    \                    smallestIndex = i;\n                    smallestValue = arr[i];\n\
    \                }\n            }\n        }\n        if (smallestIndex == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>{\
    \ smallestValue, smallestIndex };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <439793814fd54e45bbe86c00ceb7d3d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <439793814fd54e45bbe86c00ceb7d3d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Your code goes here.\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78eb7611997043a08d537d7ba48073e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78eb7611997043a08d537d7ba48073e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> ret = new List<long>();\n        long smallest =\
    \ -1;\n        long smallest_idx = -1;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[(int)i] % 2 == 0) {\n                if (smallest\
    \ == -1 || arr[(int)i] < smallest) {\n                    smallest = arr[(int)i];\n\
    \                    smallest_idx = i;\n                }\n            }\n   \
    \     }\n        if (smallest == -1) {\n            return ret;\n        }\n \
    \       ret.Add(smallest);\n        ret.Add(smallest_idx);\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e53b2f0a3a9f4d7b82269305c2ca482d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e53b2f0a3a9f4d7b82269305c2ca482d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even\
    \ = Int64.MaxValue;\n        long smallest_index = 0;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallest_even)\
    \ {\n                smallest_even = arr[i];\n                smallest_index =\
    \ i;\n            }\n        }\n        if (smallest_even == Int64.MaxValue) {\n\
    \            return result;\n        }\n        result.Add(smallest_even);\n \
    \       result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35c33724e91a4794b4ae611f446e9cd8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35c33724e91a4794b4ae611f446e9cd8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var min_even = long.MaxValue;\n        var min_even_index =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n       \
    \         min_even_index = i;\n            }\n        }\n        if (min_even_index\
    \ == -1) return new List<long>();\n        return new List<long>{min_even, min_even_index};\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ab927387d314a71925cb6e349703845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ab927387d314a71925cb6e349703845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Your code here\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c09c1858331a45e488e3c5738b8f1d13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c09c1858331a45e488e3c5738b8f1d13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code here\n        return arr;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75e623a52f684244a6d2c1e1151c9862>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75e623a52f684244a6d2c1e1151c9862>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        //Your code here\n        long min = long.MaxValue;\n      \
    \  int idx = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n       \
    \         idx = i;\n            }\n        }\n        return idx == -1 ? new List<long>()\
    \ : new List<long> { min, idx };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adbe0a71423243a0838d83e3d0a1ea60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adbe0a71423243a0838d83e3d0a1ea60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Your code here!\n        int smallestValueIndex = arr.FindIndex(x\
    \ => x % 2 == 0);\n        // if(smallestValueIndex == -1)\n        // {\n   \
    \     //     return new List<long>();\n        // }\n        return arr.Select((value,\
    \ index) => new { Value = value, Index = index })\n        .Where(x => x.Value\
    \ % 2 == 0)\n        .OrderBy(x => x.Value)\n        .ThenBy(x => x.Index)\n \
    \       .Select(x => new List<long>{x.Value, (long)x.Index})\n        .FirstOrDefault();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c3d8a20926f4b409796f9c0165497c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c3d8a20926f4b409796f9c0165497c6>:0 \n\nUnhandled Exception:\n\
    System.NullReferenceException: Object reference not set to an instance of an object\n\
    \  at Problem.Main (System.String[] args) [0x00086] in <7c3d8a20926f4b409796f9c0165497c6>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.S"
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var min = arr.Where(x => x % 2 == 0).Min();\n        if (min\
    \ == 0 && arr.IndexOf(min) != arr.LastIndexOf(min)) {\n            return new\
    \ List<long>{min, arr.IndexOf(min)};\n        }\n        if (min == 0) {\n   \
    \         return new List<long>{};\n        }\n        return new List<long>{min,\
    \ arr.IndexOf(min)};\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0edab1a14f04eb1926719857fbf8edc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0edab1a14f04eb1926719857fbf8edc>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00026] in\
    \ <c0edab1a14f04eb1926719857fbf8edc>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var nodes = new List<Node>();\n        var targetNode = new\
    \ Node();\n        var i = 1;\n        foreach (var e in arr) {\n            var\
    \ node = new Node();\n            node.value = e;\n            node.index = i;\n\
    \            nodes.Add(node);\n            i++;\n        }\n        if (nodes.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        if (nodes.Count\
    \ == 1) {\n            if (nodes[0].value % 2 == 0) {\n                return\
    \ new List<long> { nodes[0].value, nodes[0].index };\n            } else {\n \
    \               return new List<long>();\n            }\n        }\n\n       \
    \ targetNode = nodes[0];\n        for (i = 1; i < nodes.Count; i++) {\n      \
    \      if (nodes[i].value % 2 == 0) {\n                if (targetNode.value %\
    \ 2 == 0) {\n                    if (nodes[i].value < targetNode.value) {\n  \
    \                      targetNode = nodes[i];\n                    }\n       \
    \         } else {\n                    targetNode = nodes[i];\n             \
    \   }\n            }\n        }\n        if (targetNode.value % 2 == 0) {\n  \
    \          return new List<long> { targetNode.value, targetNode.index };\n   \
    \     } else {\n            return new List<long>();\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt9cfo8t0.cs(35,30): error CS0246: The type or namespace name ''Node''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpt9cfo8t0.cs(36,30): error CS0246: The type or namespace name ''Node''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpt9cfo8t0.cs(39,28): error CS0246: The type or namespace name ''Node''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        var indexes = new List<long>();\n        long minVal = long.MaxValue;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] %\
    \ 2 == 0 && arr[(int)i] < minVal) {\n                minVal = arr[(int)i];\n \
    \               indexes.Clear();\n                indexes.Add(i);\n          \
    \  } else if (arr[(int)i] % 2 == 0 && arr[(int)i] == minVal) {\n             \
    \   indexes.Add(i);\n            }\n        }\n        if (indexes.Count == 0)\
    \ {\n            return new List<long>();\n        }\n        long minIndex =\
    \ indexes[0];\n        for (long i = 1; i < indexes.Count; i++) {\n          \
    \  if (indexes[(int)i] < minIndex) {\n                minIndex = indexes[(int)i];\n\
    \            }\n        }\n        return new List<long>() { minVal, minIndex\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57648b8a57fa4cfa991f568c6daa4f76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57648b8a57fa4cfa991f568c6daa4f76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long minVal =\
    \ long.MaxValue;\n        long index = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minVal) {\n            \
    \    minVal = arr[i];\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.Add(minVal);\n            result.Add(index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebf128c536ea42b1ad740d9528d79919>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebf128c536ea42b1ad740d9528d79919>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var min = long.MaxValue;\n        var minIndex = -1;\n     \
    \   var index = 0;\n        foreach (var item in arr) {\n            if (item\
    \ > 0 && item % 2 == 0 && item < min) {\n                min = item;\n       \
    \         minIndex = index;\n            }\n            index++;\n        }\n\
    \        if (minIndex == -1) {\n            return new List<long>();\n       \
    \ }\n        return new List<long> { min, minIndex };\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a231c2d7dae4d19be6f766124e7b204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a231c2d7dae4d19be6f766124e7b204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> plucked = new List<long>();\n        int index =\
    \ 0;\n        long min_even = arr.Min();\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] <= min_even) {\n         \
    \       min_even = arr[i];\n                index = i;\n            }\n      \
    \  }\n        if (min_even % 2 == 0) {\n            plucked.Add(min_even);\n \
    \           plucked.Add(index);\n        }\n        return plucked;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de2a8c1d58594bd59d2af7e9f82992af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de2a8c1d58594bd59d2af7e9f82992af>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00009] in\
    \ <de2a8c1d58594bd59d2af7e9f82992af>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var ret = new List<long>();\n        if (arr.Count == 0) return\
    \ ret;\n        var min = arr.Min();\n        while (min % 2 != 0) {\n       \
    \     arr.Remove(min);\n            if (arr.Count == 0) return ret;\n        \
    \    min = arr.Min();\n        }\n        var mindex = arr.IndexOf(min);\n   \
    \     ret.Add(min);\n        ret.Add(mindex);\n        return ret;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f0eac983ad5437ca64d11b627325eb5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f0eac983ad5437ca64d11b627325eb5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> lst = new List<long>();\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                lst.Add(arr[i]);\n\
    \            }\n        }\n        if (lst.Count > 0) {\n            lst.Sort();\n\
    \            return new List<long> { lst[0], arr.IndexOf(lst[0]) };\n        }\n\
    \        return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f23e51479e4447bcbd39b72bcfec9037>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f23e51479e4447bcbd39b72bcfec9037>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // find the smallest even value in the list\n        long smallestEven\
    \ = -1;\n        // index of the smallest value\n        long smallestIndex =\
    \ -1;\n        // loop through the array of numbers\n        for (long i = 0;\
    \ i < arr.Count; i++) {\n            // if the smallest even value has not been\
    \ set yet\n            if (smallestEven == -1) {\n                // if the number\
    \ is even, set the smallest even value\n                if (arr[(int)i] % 2 ==\
    \ 0) {\n                    smallestEven = arr[(int)i];\n                    smallestIndex\
    \ = i;\n                }\n            } else {\n                // if the number\
    \ is even and smaller than the current smallest even value\n                if\
    \ (arr[(int)i] % 2 == 0 && arr[(int)i] < smallestEven) {\n                   \
    \ // set the new smallest even value\n                    smallestEven = arr[(int)i];\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        // if there are no even numbers in the list\n        if (smallestEven\
    \ == -1) {\n            // return an empty list\n            return new List<long>();\n\
    \        }\n        // return the list of the smallest even value and its index\n\
    \        return new List<long> { smallestEven, smallestIndex };\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a495565b165a4104a5ba615976df16e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a495565b165a4104a5ba615976df16e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = Int64.MaxValue;\n        int minIndex = -1;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n        if (minIndex == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long>() { min, minIndex };\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30c52c95a7fc4eefb3bd59d2e4ee054d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30c52c95a7fc4eefb3bd59d2e4ee054d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return arr.Select((e,i) => new {v=e,i=i})\n                \
    \  .Where(e => e.v % 2 == 0)\n                  .OrderBy(e => e.v)\n         \
    \         .Select(e => new List<long>{e.v, (long)e.i})\n                  .FirstOrDefault()\
    \ ?? new List<long>();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eccadd99de8490f9f3af733646d0b2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eccadd99de8490f9f3af733646d0b2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long minEven = Int64.MaxValue;\n        long minEvenIndex =\
    \ Int64.MaxValue;\n        long currIndex = -1;\n        foreach (long l in arr)\
    \ {\n            currIndex += 1;\n            if (l % 2 == 0 && l < minEven) {\n\
    \                minEven = l;\n                minEvenIndex = currIndex;\n   \
    \         }\n        }\n        if (minEven == Int64.MaxValue) {\n           \
    \ return new List<long>();\n        }\n        return new List<long>() { minEven,\
    \ minEvenIndex };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b668a0f60b414cbebaee3099e15d56e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b668a0f60b414cbebaee3099e15d56e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> ans = new List<long>();\n        long minEven = 10001;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven\
    \ = arr[i];\n                minEvenIndex = i;\n            }\n        }\n   \
    \     if (minEvenIndex >= 0) {\n            ans.Add(minEven);\n            ans.Add(minEvenIndex);\n\
    \        }\n        return ans;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9376a90ab0d34efea00a7d48a1c99681>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9376a90ab0d34efea00a7d48a1c99681>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        int len = arr.Count;\n        int min = len - 1;\n        int\
    \ mineven = len - 1;\n        for (int i = 0; i < len; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                if (min == len - 1) {\n               \
    \     min = i;\n                }\n                mineven = Math.Min(min, i);\n\
    \            }\n        }\n        if (min == len - 1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long>() { arr[mineven], mineven\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c89137b1bb1642048c006054d71a4772>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c89137b1bb1642048c006054d71a4772>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = long.MaxValue;\n        int idx = -1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                idx = i;\n        \
    \    }\n        }\n        if (idx == -1) return new List<long>();\n        return\
    \ new List<long> { min, idx };\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9014b9a888dd45049b5d80bc73dd03f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9014b9a888dd45049b5d80bc73dd03f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var index = -1;\n        var minValue = arr.Where(x => x % 2\
    \ == 0).Min();\n        if (minValue == long.MaxValue)\n            return new\
    \ List<long>();\n        return new List<long> { minValue, arr.IndexOf(minValue)\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ea5a9004db84231957c17f811db89cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ea5a9004db84231957c17f811db89cf>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00028] in\
    \ <9ea5a9004db84231957c17f811db89cf>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long minVal = arr.Min();\n        if (minVal == 0 || arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        if (minVal\
    \ % 2 == 0) {\n            return new List<long> { minVal, arr.IndexOf(minVal)\
    \ };\n        }\n        List<long> evens = arr.Where(x => x % 2 == 0).ToList();\n\
    \        minVal = evens.Min();\n        return new List<long> { minVal, arr.IndexOf(minVal)\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <376f6214ea1b471b8afe03eea84e7a7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <376f6214ea1b471b8afe03eea84e7a7c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <376f6214ea1b471b8afe03eea84e7a7c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code\n        int bestIndex = -1;\n        long bestValue\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (bestIndex == -1 || arr[i] < bestValue) {\n\
    \                    bestIndex = i;\n                    bestValue = arr[i];\n\
    \                }\n            }\n        }\n        if (bestIndex == -1) {\n\
    \            return new List<long>();\n        }\n        return new List<long>()\
    \ { bestValue, bestIndex };\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <116c92f21c0446129b9210302b4e8cfe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <116c92f21c0446129b9210302b4e8cfe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code here\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf85324f21f41ec9f835a088c90715a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddf85324f21f41ec9f835a088c90715a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976275
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Write your code here.\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3347420d1f024807a7c6610298e24b12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3347420d1f024807a7c6610298e24b12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // EDGE CASE\n        if (arr.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        // Find index of first even int\n    \
    \    long firstEven = 0;\n        long firstEvenIndex = 0;\n        bool foundFirstEven\
    \ = false;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i]\
    \ % 2 == 0) {\n                firstEven = arr[(int)i];\n                firstEvenIndex\
    \ = i;\n                foundFirstEven = true;\n                break;\n     \
    \       }\n        }\n        // Make list with answer\n        if (foundFirstEven)\
    \ {\n            List<long> pluckedNode = new List<long>();\n            pluckedNode.Add(firstEven);\n\
    \            pluckedNode.Add(firstEvenIndex);\n            return pluckedNode;\n\
    \        } else {\n            return new List<long>();\n        }\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5388db84a4394eb08f3e55ca8818601d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5388db84a4394eb08f3e55ca8818601d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <6f6af65da1934be189b85b5d4f464482>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <6f6af65da1934be189b85b5d4f464482>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // TODO\n        long smallestEven = 0;\n        long smallestEvenIndex\
    \ = 0;\n        bool foundSmallestEven = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (!foundSmallestEven)\
    \ {\n                    smallestEven = arr[i];\n                    smallestEvenIndex\
    \ = i;\n                    foundSmallestEven = true;\n                } else\
    \ {\n                    if (arr[i] < smallestEven) {\n                      \
    \  smallestEven = arr[i];\n                        smallestEvenIndex = i;\n  \
    \                  }\n                }\n            }\n        }\n        List<long>\
    \ outList = new List<long>();\n        if (foundSmallestEven) {\n            outList.Add(smallestEven);\n\
    \            outList.Add(smallestEvenIndex);\n        }\n        return outList;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bde1a70d2de4b11a67cab2ea2bdcaba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bde1a70d2de4b11a67cab2ea2bdcaba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        int idx = 0;\n        long currentMin = 0;\n        int minIdx\
    \ = 0;\n        for (idx = 0; idx < arr.Count; idx++) {\n            var number\
    \ = arr[idx];\n            if (number % 2 == 0) {\n                if (currentMin\
    \ == 0) {\n                    currentMin = number;\n                    minIdx\
    \ = idx;\n                } else if (number < currentMin) {\n                \
    \    currentMin = number;\n                    minIdx = idx;\n               \
    \ }\n            }\n        }\n        if (currentMin == 0) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>{currentMin, minIdx};\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e200b3796a7d49adb8a6410ba15fe10a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e200b3796a7d49adb8a6410ba15fe10a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> lst = new List<long>();\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                lst.Add(arr[i]);\n\
    \            }\n        }\n        lst.Sort();\n        if (lst.Count > 0) {\n\
    \            long val = lst[0];\n            for (int i = 0; i < arr.Count; i++)\
    \ {\n                if (arr[i] == val) {\n                    return new List<long>\
    \ { val, i };\n                }\n            }\n        }\n        return new\
    \ List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e78e320e10a48b6a4b4bec9eea5962f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e78e320e10a48b6a4b4bec9eea5962f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Your solution here\n        long smallestEven = -1;\n   \
    \     long smallestEvenIndex = -1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            long current = arr[(int)i];\n            if (current % 2 == 0)\
    \ {\n                if (smallestEven == -1 || current < smallestEven) {\n   \
    \                 smallestEven = current;\n                    smallestEvenIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEven\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>(new long[]{smallestEven, smallestEvenIndex});\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5edf12b42b2443f4a0968ae27ce1517b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5edf12b42b2443f4a0968ae27ce1517b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long? smallest = null;\n        long? index = null;\n      \
    \  for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 ==\
    \ 0) {\n                if (smallest == null || arr[(int)i] < smallest) {\n  \
    \                  smallest = arr[(int)i];\n                    index = i;\n \
    \               }\n            }\n        }\n        if (smallest == null) {\n\
    \            return new List<long>();\n        }\n        return new List<long>\
    \ { smallest.Value, index.Value };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ae5067559a94aa585c76a8d70520d6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ae5067559a94aa585c76a8d70520d6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Definition:\n        // The 'head' of a list is the first\
    \ element.\n        // The 'tail' of a list is everything except the head.\n \
    \       // We can define a function that takes a list as an argument and returns\
    \ the head, like this:\n        // def get_head(arr):\n        //     return arr[0]\n\
    \        // We can also define a function that takes a list as an argument and\
    \ returns the tail, like this:\n        // def get_tail(arr):\n        //    \
    \ return arr[1:]\n        // In this function you need to find the smallest even\
    \ value in the list.\n        // You will start by finding the head of the list.\n\
    \        // If the head is even and smaller than all other even elements, you\
    \ need to return it.\n        // If the head is even and not smaller than all\
    \ other even elements,\n        // or if the head is odd, you need to keep searching\
    \ for smaller even elements.\n        // You will do that by using recursion.\n\
    \        // Suppose you have an array called 'arr' representing the argument passed\
    \ to the function.\n        // You need to write an if-statement like this:\n\
    \        // if (arr is empty):\n        //     return []\n        // If the array\
    \ is empty, you should return an empty array.\n        // The empty array is written\
    \ like this: []\n        // Next, you need to write an else-statement to handle\
    \ the case where the array is not empty.\n        // Your else-statement needs\
    \ to include a recursive call to the function.\n        // The recursive call\
    \ needs to be on the tail of the array.\n        // To make that recursive call,\
    \ you need to define a new variable called 'new_arr'.\n        // The value of\
    \ new_arr should be get_tail(arr)\n        // Then, inside the else-statement,\
    \ you need to make the recursive call.\n        // It should look like this:\n\
    \        // else:\n        //     new_arr = get_tail(arr)\n        //     return\
    \ Pluck(new_arr)\n        // At this point your function will compile,\n     \
    \   // but it won't be correct because it will always return [].\n        // What\
    \ you need to do next is add a variable called 'head' that takes the value of\
    \ get_head(arr).\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoq_l4lrg.cs(34,30): error CS0161: ''Problem.Pluck(List<long>)'': not all
    code paths return a value

    '
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // insert code here\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8da6a7c56c9b40bd8ac21e64f5e9952b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8da6a7c56c9b40bd8ac21e64f5e9952b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = long.MaxValue;\n        int index = 0;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                index = i;\n      \
    \      }\n        }\n        if (min == long.MaxValue) {\n            return new\
    \ List<long>();\n        }\n        return new List<long>{min, index};\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dba1d9434cd842cdb89a77345e0342ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dba1d9434cd842cdb89a77345e0342ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i%2 == 0) {\n                result.Add(i);\n \
    \           }\n        }\n        if (result.Count != 0) {\n            result.Sort();\n\
    \            long index = arr.IndexOf(result[0]);\n            List<long> ans\
    \ = new List<long>();\n            ans.Add(result[0]);\n            ans.Add(index);\n\
    \            return ans;\n        }\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1867c16a8bac416398bfcfe8dc8875c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1867c16a8bac416398bfcfe8dc8875c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var even = arr.Where(x => x % 2 == 0).ToList();\n        if\
    \ (even.Count == 0) {\n            return new List<long>();\n        }\n     \
    \   var min = even.Min();\n        var idx = arr.IndexOf(min);\n        return\
    \ new List<long>() { min, idx };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13b6077e8916442cbe3dc935c6c767a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13b6077e8916442cbe3dc935c6c767a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = long.MaxValue;\n        long index = 0;\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = arr[i];\n                index = i;\n\
    \            }\n        }\n        if (min == long.MaxValue) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() {min, index};\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27e5185f50e84f30b1559860f0c7da96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27e5185f50e84f30b1559860f0c7da96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long mi = -1;\n        long miVal = long.MaxValue;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == 0) {\n    \
    \            return new List<long>() { arr[i], (long)i };\n            }\n   \
    \         if (arr[i] % 2 == 0 && arr[i] < miVal) {\n                mi = i;\n\
    \                miVal = arr[i];\n            }\n        }\n        if (mi ==\
    \ -1) {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { miVal, mi };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7816fa840fbb49d8a361bdcffe79ac50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7816fa840fbb49d8a361bdcffe79ac50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code goes here\n        return new List<long>();\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b86a6690bb3e4da0929a6c2574168c40>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b86a6690bb3e4da0929a6c2574168c40>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code here\n        if (arr.Count == 0) return new List<long>();\n\
    \        long best = -1;\n        long ind = -1;\n        for (long i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0) {\n               \
    \ if (best == -1 || arr[(int)i] < best) {\n                    best = arr[(int)i];\n\
    \                    ind = i;\n                }\n            }\n        }\n \
    \       if (best == -1) return new List<long>();\n        return new List<long>()\
    \ { best, ind };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ad3c6b93c514015905a760fe2a8ea0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ad3c6b93c514015905a760fe2a8ea0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = 0;\n        long index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n           \
    \     if (index == -1 || arr[i] < min) {\n                    min = arr[i];\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \        if (index == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, index };\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d93d123667fb4f9db7b36a749ae56258>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d93d123667fb4f9db7b36a749ae56258>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e089cfef2224773b6fd02238162ff85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e089cfef2224773b6fd02238162ff85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallestEvenValue = Int64.MaxValue;\n        long smallestEvenValueIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < smallestEvenValue) {\n                smallestEvenValue\
    \ = arr[i];\n                smallestEvenValueIndex = i;\n            }\n    \
    \    }\n        if (smallestEvenValueIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { smallestEvenValue, smallestEvenValueIndex\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdf69878a1e149208669767f19612ff8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdf69878a1e149208669767f19612ff8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long bestValue = long.MaxValue;\n        long bestIndex = long.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n\
    \            if (value % 2 == 0 && value < bestValue) {\n                bestValue\
    \ = value;\n                bestIndex = i;\n            }\n        }\n       \
    \ if (bestValue == long.MaxValue) {\n            return new List<long>();\n  \
    \      }\n        return new List<long> {bestValue, bestIndex};\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bb2e24ffe6547e0b4dd9941f1428f23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bb2e24ffe6547e0b4dd9941f1428f23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallestEven = long.MaxValue;\n        int smallestEvenIndex\
    \ = -1;\n        // search through the given array\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            // if the current value is even and less than\
    \ the smallestEven\n            if (arr[i] % 2 == 0 && arr[i] < smallestEven)\
    \ {\n                // smallestEven becomes the current value\n             \
    \   smallestEven = arr[i];\n                // smallestEvenIndex becomes the current\
    \ index\n                smallestEvenIndex = i;\n            }\n        }\n  \
    \      // if the smallestEvenIndex was never changed\n        if (smallestEvenIndex\
    \ == -1) {\n            // return an empty list\n            return new List<long>();\n\
    \        }\n        // else return a list with the smallestEven and smallestEvenIndex\n\
    \        return new List<long>() { smallestEven, smallestEvenIndex };\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <300c142261014664b21a73a9fe1245d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <300c142261014664b21a73a9fe1245d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long minEvenIndex = -1;\n        long minEvenValue = -1;\n \
    \       long index = 0;\n        foreach (long value in arr) {\n            if\
    \ (value % 2 == 0) {\n                if (minEvenIndex == -1 || value < minEvenValue)\
    \ {\n                    minEvenIndex = index;\n                    minEvenValue\
    \ = value;\n                }\n            }\n            index++;\n        }\n\
    \        if (minEvenIndex == -1) {\n            return new List<long>();\n   \
    \     }\n        return new List<long> { minEvenValue, minEvenIndex };\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed6b0f61c1e144db86d0c139f1f1b59a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed6b0f61c1e144db86d0c139f1f1b59a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> res = new List<long>();\n        long min = 10001;\n\
    \        long index = 10001;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (min != 10001)\
    \ {\n            res.Add(min);\n            res.Add(index);\n        }\n     \
    \   return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5ae3cd127f84c8282e197fe8e10eb86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5ae3cd127f84c8282e197fe8e10eb86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long minEven = long.MaxValue;\n        long minEvenIndex = long.MaxValue;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] !=\
    \ 0 && arr[(int)i] % 2 == 0 && arr[(int)i] < minEven) {\n                minEven\
    \ = arr[(int)i];\n                minEvenIndex = i;\n            }\n        }\n\
    \        if (minEvenIndex == long.MaxValue) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { minEven, minEvenIndex };\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66850cc80fb24298b437e02b844db69e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66850cc80fb24298b437e02b844db69e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = long.MaxValue;\n        int minIndex = -1;\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == 0) {\n \
    \               if (minIndex == -1) {\n                    minIndex = i;\n   \
    \             }\n            } else if (arr[i] % 2 == 0 && arr[i] < min) {\n \
    \               min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> {min, minIndex};\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <193583cbe368478eb6604d1f03cb19a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <193583cbe368478eb6604d1f03cb19a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> t = new List<long>();\n        t.Add(arr[0]);\n\
    \        for (long i = 1; i < arr.Count; i++) {\n            if (arr[(int)i] <\
    \ t[0]) {\n                t.Clear();\n                t.Add(arr[(int)i]);\n \
    \               t.Add(i);\n            } else if (arr[(int)i] == t[0]) {\n   \
    \             t.Add(i);\n            }\n        }\n        if (t.Count == 1) {\n\
    \            return new List<long>();\n        }\n        t.RemoveAt(0);\n   \
    \     return t;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e94f8bfef0b47579d5292a1ff2199dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e94f8bfef0b47579d5292a1ff2199dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return arr.Aggregate(new[] { long.MaxValue, long.MaxValue },\
    \ (a, v) =>\n            v % 2 == 0 && v < a[0] ? new[] { v, arr.IndexOf(v) }\
    \ : a\n        ).Take(2).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4282eaf7c13c4f9ba1f36fb06edc3855>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4282eaf7c13c4f9ba1f36fb06edc3855>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // find smallest even value and its index\n        var minEven\
    \ = arr.Where(x => x % 2 == 0).Min();\n        var minEvenIndex = arr.IndexOf(minEven);\n\
    \        return new List<long> { minEven, minEvenIndex };\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ec56b647901471e9da0205625a55271>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ec56b647901471e9da0205625a55271>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00026] in\
    \ <5ec56b647901471e9da0205625a55271>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Write your code here.\n        return arr;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8aa6a8351d45466dac74afb4adec1e7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8aa6a8351d45466dac74afb4adec1e7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var evenValues = arr.Where(x => x % 2 == 0).ToList();\n    \
    \    if (evenValues.Count == 0) {\n            return new List<long>();\n    \
    \    }\n        var minValue = evenValues.Min();\n        return new List<long>\
    \ { minValue, arr.IndexOf(minValue) };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afa9c040b64a4cfbb246d3b1f0a23bd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afa9c040b64a4cfbb246d3b1f0a23bd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count() == 0) {\n            return new List<long>();\n\
    \        }\n        if (arr.Count() == 1) {\n            if (arr[0] % 2 == 0)\
    \ {\n                return new List<long> { arr[0], 1 };\n            } else\
    \ {\n                return new List<long>();\n            }\n        }\n    \
    \    long smallest = arr[0];\n        long index = 1;\n        for (long i = 1;\
    \ i < arr.Count(); i++) {\n            if (arr[i] < smallest && arr[i] % 2 ==\
    \ 0) {\n                smallest = arr[i];\n                index = i + 1;\n \
    \           }\n        }\n        if (smallest % 2 == 0) {\n            return\
    \ new List<long> { smallest, index };\n        } else {\n            return new\
    \ List<long>();\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgsgty66d.cs(48,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgsgty66d.cs(48,42): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgsgty66d.cs(49,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min_even = Int64.MaxValue;\n        int min_even_idx =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            long value =\
    \ arr[i];\n            if (value % 2 == 0 && value < min_even) {\n           \
    \     min_even = value;\n                min_even_idx = i;\n            }\n  \
    \      }\n        if (min_even_idx == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> {min_even, min_even_idx};\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9a169ddb3924e8ba348b104e4d695a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9a169ddb3924e8ba348b104e4d695a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var evens = arr.Where(x => x % 2 == 0).OrderBy(x => x).ToList();\n\
    \        if (evens.Count == 0) {\n            return new List<long>();\n     \
    \   }\n        var minValue = evens[0];\n        var minIndex = arr.IndexOf(minValue);\n\
    \        return new List<long>() { minValue, minIndex };\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6221351c79ff47d6829d9795f74d85f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6221351c79ff47d6829d9795f74d85f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976280
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if(arr.Count <= 0) {\n            return new List<long>();\n\
    \        }\n        long minSoFar = arr[0];\n        int minIndex = 0;\n     \
    \   for(int i = 0; i < arr.Count; i++) {\n            if(arr[i] < minSoFar &&\
    \ arr[i] % 2 == 0) {\n                minSoFar = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        if(minSoFar % 2 == 0) {\n          \
    \  return new List<long>() { minSoFar, minIndex };\n        }\n        return\
    \ new List<long>();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84480158bc264c13821055ba86b8a014>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84480158bc264c13821055ba86b8a014>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        throw new Exception(\"not implemented\");\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Exception: not implemented\n  at Problem.Main\
    \ (System.String[] args) [0x00017] in <72954308cef84446b97e36f0442b4881>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: not implemented\n  at Problem.Main\
    \ (System.String[] args) [0x00017] in <72954308cef84446b97e36f0442b4881>:0 \n"
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> ret = new List<long>();\n        bool flag = false;\n\
    \        long min = 0;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0) {\n                if (!flag) {\n                \
    \    flag = true;\n                    min = arr[i];\n                    ret.Add(min);\n\
    \                    ret.Add(i);\n                } else {\n                 \
    \   if (arr[i] < min) {\n                        min = arr[i];\n             \
    \           ret[0] = min;\n                        ret[1] = i;\n             \
    \       }\n                }\n            }\n        }\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54fa68a2aeba423c8cdc9e11d4d823d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54fa68a2aeba423c8cdc9e11d4d823d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> sol = new List<long>();\n        int min = Int32.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            int x = Convert.ToInt32(arr[i]);\n\
    \            if (x % 2 == 0 && x < min) {\n                min = x;\n        \
    \        sol.Clear();\n                sol.Add(x);\n                sol.Add(i);\n\
    \            }\n        }\n        return sol;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d874cddffaf84c52a8e2a87b28b55139>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d874cddffaf84c52a8e2a87b28b55139>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Best case, arr is empty\n        if (arr.Count == 0) {\n\
    \            return new List<long>();\n        }\n        // Get the first even\
    \ number, or -1 if none\n        var firstEvenNumber = arr.Select((n, i) => new\
    \ { n, i }).Where(n => n.n % 2 == 0).Select(n => n.n).FirstOrDefault();\n    \
    \    // If there is a first even number, get its index\n        if (firstEvenNumber\
    \ != -1) {\n            var idx = arr.Select((n, i) => new { n, i }).Where(n =>\
    \ n.n == firstEvenNumber).Select(n => n.i).First();\n            return new List<long>()\
    \ { firstEvenNumber, idx };\n        }\n        // If none, return empty list\n\
    \        return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <558aa7c04fdf438eae8b95790da7f85b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <558aa7c04fdf438eae8b95790da7f85b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = Int64.MaxValue;\n        int minPos = Int32.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            long e = arr[i];\n\
    \            if (e % 2 == 0 && e < min) {\n                min = e;\n        \
    \        minPos = i;\n            }\n        }\n        if (min == Int64.MaxValue)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>\
    \ { min, minPos };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec3346c156e4a498a92ae80665ccd91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ec3346c156e4a498a92ae80665ccd91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var even = Enumerable.Range(0, arr.Count)\n            .Where(i\
    \ => arr[i] % 2 == 0)\n            .ToList();\n        if (even.Count == 0) return\
    \ new List<long>();\n        var minIdx = even[0];\n        var min = arr[minIdx];\n\
    \        for (int i = 1; i < even.Count; i++) {\n            var idx = even[i];\n\
    \            var v = arr[idx];\n            if (v < min) {\n                min\
    \ = v;\n                minIdx = idx;\n            }\n        }\n        return\
    \ new List<long>() { min, minIdx };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6491eee108d54ae8b95f8b3f67e978d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6491eee108d54ae8b95f8b3f67e978d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Your code here\n        List<long> answer = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return answer;\n        }\n      \
    \  long minEven = arr[0];\n        int index = 0;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                minEven\
    \ = arr[i];\n                index = i;\n                break;\n            }\n\
    \        }\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ < minEven && arr[i] % 2 == 0) {\n                minEven = arr[i];\n       \
    \         index = i;\n            }\n        }\n        if (minEven % 2 == 0)\
    \ {\n            answer.Add(minEven);\n            answer.Add(index);\n      \
    \  }\n        return answer;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b85d2d39dda641fc8bbbffeff2675091>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b85d2d39dda641fc8bbbffeff2675091>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n        // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n        long mindex = long.MaxValue;\n        long min = long.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                mindex\
    \ = i;\n            }\n        }\n        List<long> pair = new List<long>();\n\
    \        if (min != long.MaxValue) {\n            pair.Add(min);\n           \
    \ pair.Add(mindex);\n        }\n        return pair;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f379adfbcca4876b78bc7aa8b063265>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f379adfbcca4876b78bc7aa8b063265>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Print the list\n        //Console.Write(\"[\");\n       \
    \ //foreach (long a in arr) {\n        //    Console.Write(a + \", \");\n    \
    \    //}\n        //Console.WriteLine(\"]\");\n        //Console.WriteLine(arr.Count);\n\
    \        if (arr.Count == 0) {\n            return new List<long>();\n       \
    \ }\n        long min = arr[0];\n        long index = 0;\n        bool hasEven\
    \ = false;\n        bool hasZeros = false;\n        // Console.WriteLine(\"Range:\
    \ \" + Enumerable.Range(0, arr.Count));\n        foreach (long i in Enumerable.Range(0,\
    \ arr.Count)) {\n            // Console.WriteLine(\"Index: \" + i);\n        \
    \    if (arr[(int)i] == 0) {\n                hasZeros = true;\n            }\n\
    \            if (arr[(int)i] % 2 == 0) {\n                hasEven = true;\n  \
    \              if (arr[(int)i] < min) {\n                    min = arr[(int)i];\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \        // Console.WriteLine(\"Min: \" + min);\n        // Console.WriteLine(\"\
    Index: \" + index);\n        // Console.WriteLine(\"HasZeros: \" + hasZeros);\n\
    \        // Console.WriteLine(\"HasEven: \" + hasEven);\n        // Return [min,\
    \ index]\n        if (hasZeros && !hasEven) {\n            return new List<long>\
    \ { 0, 0 };\n        }\n        if (hasEven) {\n            return new List<long>\
    \ { min, index };\n        }\n        return new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f4c329230c24d11a65e1d75a644b5bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f4c329230c24d11a65e1d75a644b5bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count()\
    \ > 0) {\n            long min = Int64.MaxValue;\n            long index = 0;\n\
    \            long idx = 0;\n            foreach (long i in arr) {\n          \
    \      if (i > 0 && i % 2 == 0 && i < min) {\n                    min = i;\n \
    \                   index = idx;\n                }\n                idx++;\n\
    \            }\n            if (min != Int64.MaxValue) {\n                result.Add(min);\n\
    \                result.Add(index);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <755c9f4446db4cf9a91f40f3199016a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <755c9f4446db4cf9a91f40f3199016a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long ret = arr.Find(x => x%2 == 0);\n        return arr.Contains(ret)\
    \ ? new List<long>{ret, arr.IndexOf(ret)} : new List<long>();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b3903af11f84bc49a04360377e967dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b3903af11f84bc49a04360377e967dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var even = arr.Where(a => a % 2 == 0).ToList();\n        if\
    \ (even.Count == 0) {\n            return new List<long>();\n        }\n     \
    \   var min = even.Min();\n        var idx = arr.IndexOf(min);\n        return\
    \ new List<long> { min, idx };\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a15b7347692b4e26b0542cbf5be9b860>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a15b7347692b4e26b0542cbf5be9b860>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // using System;\n        // using System.Numerics;\n      \
    \  // using System.Diagnostics;\n        // using System.Collections.Generic;\n\
    \        // using System.Linq;\n        // using System.Text;\n        // using\
    \ System.Security.Cryptography;\n        long i = 0L;\n        long value = long.MaxValue;\n\
    \        long index = -1L;\n        while ((long)i < (long)arr.Count) {\n    \
    \        if ((long)arr[(int)i] % (long)2L == (long)0L && (long)arr[(int)i] < value)\
    \ {\n                value = arr[(int)i];\n                index = i;\n      \
    \      }\n            i = (long)i + (long)1L;\n        }\n        if (index ==\
    \ -1L) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>(new long[] { value, index });\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f7760f275ee450bbf982abea1ab3782>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f7760f275ee450bbf982abea1ab3782>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long minEven = long.MaxValue;\n        long minEvenIndex = long.MaxValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < minEven) {\n                minEven = arr[i];\n              \
    \  minEvenIndex = i;\n            }\n        }\n        if (minEven == long.MaxValue)\
    \ return new List<long>();\n        return new List<long>() { minEven, minEvenIndex\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <734bb705533e45089a0f506b389cf958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <734bb705533e45089a0f506b389cf958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        long min = -1;\n   \
    \     long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         long curr = arr[i];\n            if (curr % 2 == 0) {\n            \
    \    if (min == -1 || curr < min) {\n                    min = curr;\n       \
    \             minIndex = i;\n                }\n            }\n        }\n   \
    \     if (min == -1) {\n            return result;\n        }\n        result.Add(min);\n\
    \        result.Add(minIndex);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94e362a67f9e485fb1db00e58a584886>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94e362a67f9e485fb1db00e58a584886>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var x = from i in arr.IndexOfRange()\n                where\
    \ i % 2 == 0\n                select i;\n        if (x.Count() == 0) return new\
    \ List<long>();\n        return new List<long> { arr[x.First()], x.First() };\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ixtnv3c.cs(35,31): error CS1061: ''List<long>'' does not contain a definition
    for ''IndexOfRange'' and no accessible extension method ''IndexOfRange'' accepting
    a first argument of type ''List<long>'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min_value = -1;\n        long min_index = -1;\n       \
    \ for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0)\
    \ {\n                if (min_value == -1 || arr[(int)i] < min_value) {\n     \
    \               min_value = arr[(int)i];\n                    min_index = i;\n\
    \                }\n            }\n        }\n        if (min_value == -1) {\n\
    \            return new List<long>();\n        }\n        return new List<long>(new\
    \ long[]{(long)min_value, (long)min_index});\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5019db1f61a941a8bcce1cefcd921eec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5019db1f61a941a8bcce1cefcd921eec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // This is the first version of my solution\n        // It is\
    \ the fastest of all my solutions\n        // but not the fastest overall\n  \
    \      // this version is the slowest of all my version but the fastest overall\n\
    \        // I think it is because the ternary operator is being used twice which\
    \ requires two \n        // if/else statements.\n        long min = arr.Where(num\
    \ => num % 2 == 0).DefaultIfEmpty(0).Min();\n        if (min == 0) {\n       \
    \     return new List<long>();\n        }\n        return new List<long>{\n  \
    \          min,\n            arr.Where(num => num == min).DefaultIfEmpty(0).Min()\n\
    \        };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d52bb13ed8e943ff96926f987bb570aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d52bb13ed8e943ff96926f987bb570aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        var e = arr.FindAll(n => n % 2 == 0);\n        if (e.Count ==\
    \ 0) return new List<long>();\n        var min = e.Min();\n        return new\
    \ List<long> { min, arr.IndexOf(min) };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <372dbb00402f462fb7258a8334a1306c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <372dbb00402f462fb7258a8334a1306c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        throw new NotImplementedException();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <a607499528424318a2c1c4c36d3cdec7>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]\
    \ in <a607499528424318a2c1c4c36d3cdec7>:0 \n"
  stdout: ''
  timestamp: 1659976281
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallest = arr.Min();\n        long index = arr.IndexOf(smallest);\n\
    \        // Console.WriteLine(\"smallest: \" + smallest + \"  index: \" + index);\n\
    \        return new List<long>() { smallest, index };\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7be00f5c056418e8432b0aca6e9043c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7be00f5c056418e8432b0aca6e9043c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <e7be00f5c056418e8432b0aca6e9043c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long prev = -1;\n        long current = -1;\n        long index\
    \ = -1;\n        long counter = 0;\n        foreach (long val in arr) {\n    \
    \        if (val % 2 == 0) {\n                if (val < prev || prev == -1) {\n\
    \                    current = val;\n                    index = counter;\n  \
    \              }\n            }\n            prev = val;\n            counter++;\n\
    \        }\n        List<long> result = new List<long>();\n        if (current\
    \ != -1) {\n            result.Add(current);\n            result.Add(index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad70aa6c020241aab0f578d785d6cff5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad70aa6c020241aab0f578d785d6cff5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976281
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long num = 0;\n        int index = 0;\n        int x = 0;\n\
    \        for (x = 0; x < arr.Count; x++) {\n            if (arr[x] % 2 == 0) {\n\
    \                num = arr[x];\n                index = x;\n                break;\n\
    \            }\n        }\n        for (int y = x + 1; y < arr.Count; y++) {\n\
    \            if (arr[y] % 2 == 0 && arr[y] < num) {\n                num = arr[y];\n\
    \                index = y;\n            }\n        }\n        if (num == 0) {\n\
    \            return new List<long>();\n        }\n        return new List<long>()\
    \ { num, index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac63b5004ef64a2f993381e192365d21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac63b5004ef64a2f993381e192365d21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // return arr.Where(x => x % 2 == 0).OrderBy(x => x).Take(1).Select(x\
    \ => new List<long>{x, arr.IndexOf(x)}).FirstOrDefault() ?? new List<long>();\n\
    \        // return arr.Select((x, i) => new List<long>{x, i}).Where(x => x[0]\
    \ % 2 == 0).OrderBy(x => x[0]).Take(1).Select(x => new List<long>{x[0], x[1]}).FirstOrDefault()\
    \ ?? new List<long>();\n        // return arr.Select((x, i) => new List<long>{x,\
    \ i}).OrderBy(x => x[0]).Take(1).Where(x => x[0] % 2 == 0).Select(x => new List<long>{x[0],\
    \ x[1]}).FirstOrDefault() ?? new List<long>();\n        return arr.Select((x,\
    \ i) => new List<long>{x, i}).OrderBy(x => x[0]).Take(1).Where(x => x[0] % 2 ==\
    \ 0).FirstOrDefault() ?? new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d76476e976c4150a37c418b3f4528e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d76476e976c4150a37c418b3f4528e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> evens = new List<long>();\n        foreach (long\
    \ item in arr) {\n            if (item % 2 == 0) evens.Add(item);\n        }\n\
    \        if (evens.Count == 0) return new List<long>();\n        return new List<long>()\
    \ {evens.Min(), arr.IndexOf(evens.Min())};\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80e58bb454904ce8818e070eb49b5955>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80e58bb454904ce8818e070eb49b5955>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return Enumerable.Range(0, arr.Count).Select(x => new { x, v\
    \ = arr[x] }).Where(x => x.v % 2 == 0).OrderBy(x => x.v).ThenBy(x => x.x).Select(x\
    \ => new List<long> { x.v, x.x }).FirstOrDefault() ?? new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39ed9015494144c09924c3470834ec58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39ed9015494144c09924c3470834ec58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        int idx = -1;\n        long small = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n           \
    \     if (small == -1 || arr[i] < small) {\n                    small = arr[i];\n\
    \                    idx = i;\n                }\n            }\n        }\n \
    \       if (idx == -1) {\n            return new List<long>();\n        }\n  \
    \      return new List<long>() { small, idx };\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35ac078191a94d0baad37705bc179e21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35ac078191a94d0baad37705bc179e21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return arr.Select((x, i) => (x, i)).Where(x => x.x % 2 == 0).Min().ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe6i8bje0.cs(35,76): error CS1061: ''(long x, int i)'' does not contain
    a definition for ''ToList'' and no accessible extension method ''ToList'' accepting
    a first argument of type ''(long x, int i)'' could be found (are you missing a
    using directive or an assembly reference?)

    '
  timestamp: 1659976282
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00031] in <6f6af65da1934be189b85b5d4f464482>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00031] in <6f6af65da1934be189b85b5d4f464482>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976279
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> smallestEven = new List<long>();\n        long smallestEvenIndex\
    \ = -1;\n        long smallestEvenValue = -1;\n        long currentIndex = 0;\n\
    \        foreach (long node in arr) {\n            if (node == 0 && smallestEvenValue\
    \ == -1) {\n                smallestEvenValue = 0;\n                smallestEvenIndex\
    \ = currentIndex;\n            }\n            if (node % 2 == 0 && node < smallestEvenValue\
    \ || smallestEvenValue == -1) {\n                smallestEvenValue = node;\n \
    \               smallestEvenIndex = currentIndex;\n            }\n           \
    \ currentIndex++;\n        }\n        if (smallestEvenValue == -1) {\n       \
    \     return new List<long>();\n        }\n        return new List<long>() { smallestEvenValue,\
    \ smallestEvenIndex };\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ba6835fc4fd419bb98c208f7e3592cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ba6835fc4fd419bb98c208f7e3592cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long minValue\
    \ = long.MaxValue;\n        long minIndex = long.MaxValue;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            long node = arr[i];\n            if\
    \ (node % 2 == 0 && node < minValue) {\n                minValue = node;\n   \
    \             minIndex = i;\n            }\n        }\n        if (minValue !=\
    \ long.MaxValue) {\n            result.Add(minValue);\n            result.Add(minIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05345167a47d4b26b340c34c8f42bda3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05345167a47d4b26b340c34c8f42bda3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> res = new List<long>();\n        if (arr.Count ==\
    \ 0) {\n            return res;\n        }\n        long smallest = arr[0];\n\
    \        int smallestIndex = 0;\n        bool foundEven = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            foundEven = true;\n                if (arr[i] < smallest) {\n   \
    \                 smallest = arr[i];\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        if (foundEven) {\n     \
    \       res.Add(smallest);\n            res.Add(smallestIndex);\n        }\n \
    \       return res;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3ca6cb5dd634851b53db64d5410e91d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3ca6cb5dd634851b53db64d5410e91d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long curr = long.MaxValue;\n        int idx = -1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            long temp = arr[i];\n       \
    \     if (temp % 2 == 0 && temp < curr) {\n                curr = temp;\n    \
    \            idx = i;\n            }\n        }\n        if (idx == -1) {\n  \
    \          return new List<long>();\n        }\n        return new List<long>()\
    \ { curr, idx };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5432a7f3be6c421f9328a16ad1037687>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5432a7f3be6c421f9328a16ad1037687>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> output = new List<long>();\n        if (arr.Count\
    \ > 0) {\n            long minEven = Int64.MaxValue;\n            long minEvenIndex\
    \ = -1;\n            for (int i = 0; i < arr.Count; i++) {\n                if\
    \ (arr[i] % 2 == 0 && arr[i] < minEven) {\n                    minEven = arr[i];\n\
    \                    minEvenIndex = i;\n                }\n            }\n   \
    \         if (minEvenIndex != -1) {\n                output.Add(minEven);\n  \
    \              output.Add(minEvenIndex);\n            }\n        }\n        return\
    \ output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59402442a565478c8c03bfc8a82bb410>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59402442a565478c8c03bfc8a82bb410>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long minEven = long.MaxValue;\n        int index = -1;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < minEven) {\n                minEven = arr[i];\n                index\
    \ = i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>{minEven, index};\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffa12ecca2ec4500b00ec02672ba9dc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffa12ecca2ec4500b00ec02672ba9dc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // To do: code here\n\n        List<long> result = new List<long>();\n\
    \        long minEven = long.MaxValue;\n        int minEvenIdx = -1;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == 0) {\n    \
    \            result.Add(0);\n                result.Add(i);\n                return\
    \ result;\n            }\n            if (arr[i] % 2 == 0 && arr[i] < minEven)\
    \ {\n                minEven = arr[i];\n                minEvenIdx = i;\n    \
    \        }\n        }\n        if (minEvenIdx == -1) {\n            return result;\n\
    \        }\n        result.Add(minEven);\n        result.Add(minEvenIdx);\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa7b7c6cd153449ca5355cfa34549a7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa7b7c6cd153449ca5355cfa34549a7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long v = arr.Find(x => x % 2 == 0);\n        int i = arr.FindIndex(x\
    \ => x == v);\n        return new List<long>() { v, i };\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2392ed72617747c6b8bbf92790ca77e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2392ed72617747c6b8bbf92790ca77e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        // Initialize the initial sum.\n        long min = 10001;\n\
    \        long min_idx = 0;\n        // Initialize the sum at the 0th index.\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] %\
    \ 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n       \
    \         min_idx = i;\n            }\n        }\n        // If the sum is still\
    \ 0, return 0.\n        if (min > 10000) {\n            return new List<long>();\n\
    \        }\n        // Convert the minimum to a long, and return it.\n       \
    \ return new List<long>{ min, min_idx };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <099dc9ebe9904bb2868bf9aa0955cf11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <099dc9ebe9904bb2868bf9aa0955cf11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return Enumerable.Range(0, arr.Count).Where(n => arr[n] % 2\
    \ == 0).OrderBy(n => arr[n]).Select(n => new List<long>() { arr[n], n }).FirstOrDefault()\
    \ ?? new List<long>();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7fd5c4b8d5c4f85a44c41fc8beef294>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7fd5c4b8d5c4f85a44c41fc8beef294>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long min = long.MaxValue;\n        long idx = -1;\n        for\
    \ (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 &&\
    \ arr[(int)i] < min) {\n                min = arr[(int)i];\n                idx\
    \ = i;\n            }\n        }\n        if (idx == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>(new long[]{(long)min,\
    \ (long)idx});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e90afcd9e6d4ea09f8aa032cbfa7a34>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e90afcd9e6d4ea09f8aa032cbfa7a34>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        return Enumerable.Range(0, arr.Count).OrderBy(i => arr[i]).ThenBy(i\
    \ => i).FirstOrDefault(i => arr[i] % 2 == 0) != default ? new List<long> { arr[Enumerable.Range(0,\
    \ arr.Count).OrderBy(i => arr[i]).ThenBy(i => i).FirstOrDefault(i => arr[i] %\
    \ 2 == 0)], Enumerable.Range(0, arr.Count).OrderBy(i => arr[i]).ThenBy(i => i).FirstOrDefault(i\
    \ => arr[i] % 2 == 0) } : new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5daa20348b284461ad30b10dcbfec925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5daa20348b284461ad30b10dcbfec925>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> arr2 = new List<long>();\n        long min = 1;\n\
    \        if (arr.Count == 0) {\n            return arr2;\n        }\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (arr[i] < min) {\n                    min = arr[i];\n        \
    \            arr2.Clear();\n                    arr2.Add(min);\n             \
    \       arr2.Add(i);\n                }\n            }\n        }\n        if\
    \ (arr2.Count == 0) {\n            return arr2;\n        }\n        return arr2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8b69a85f61b4f8ab99b0c28de714690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8b69a85f61b4f8ab99b0c28de714690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976282
