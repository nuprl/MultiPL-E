language: cs
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // find the sum of the odd elements\
    \ of even position\n        long sum = 0;\n        for (long it = 0; it < lst.Count;\
    \ it++) {\n            long element = lst[(int)it];\n            if (element %\
    \ 2 == 1 && it % 2 == 0) {\n                sum += element;\n            }\n \
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long ret = 0;\n        // Do\
    \ your magic here\n        int count = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (count % 2 == 0 && lst[i] % 2 != 0) {\n             \
    \   ret += lst[i];\n            }\n            count++;\n        }\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long ans = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                ans += lst[i];\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        bool\
    \ isEven = true;\n        foreach (long n in lst) {\n            if (isEven &&\
    \ n % 2 == 1) {\n                sum += n;\n            }\n            isEven\
    \ = !isEven;\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // your code here\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n                sum += lst[i];\n            }\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        //Type your answer here.\n \
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e56eebff8fd48ed9ecd309b83dd1f73>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e56eebff8fd48ed9ecd309b83dd1f73>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        var odds = lst.Where((v, i)\
    \ => (i & 1) == 0 && (v & 1) == 1);\n        return odds.Sum();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        foreach\
    \ (long i in lst) {\n            if (i % 2 != 0 && lst.IndexOf(i) % 2 == 0) {\n\
    \                sum += i;\n            }\n        }\n        return sum;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a64efd327c2448b2979352b5b6da7398>:0 \n"
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        //>>> print(lst[1::2])\n   \
    \     //[8, 1]\n        long oddEvenSum = 0;\n        //Trace.WriteLine(lst.Count);\n\
    \        for (int i = 1; i < lst.Count; i += 2) {\n            //Trace.WriteLine(i);\n\
    \            if (lst[i] % 2 != 0) {\n                oddEvenSum += lst[i];\n \
    \           }\n        }\n        return oddEvenSum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ce1010f1d5e4d22a9cf63c4643ec702>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ce1010f1d5e4d22a9cf63c4643ec702>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // your code goes here\n   \
    \     long i=0;\n        long ret=0;\n        while (i<lst.Count){\n         \
    \   if (i%2==0 && lst[(int)i]%2==1){\n                ret+=lst[(int)i];\n    \
    \        }\n            i++;\n        }\n        return ret;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long s = 0;\n        for (long\
    \ i = 0; i < lst.Count; i += 1) {\n            if (i % 2 != 0 && lst[(int)i] %\
    \ 2 != 0) {\n                s += lst[(int)i];\n            }\n        }\n   \
    \     return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9917923d38746a48d5e18c41d96aaf1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9917923d38746a48d5e18c41d96aaf1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        int idx\
    \ = 0;\n        while (idx < lst.Count) {\n            long i = lst[idx];\n  \
    \          if (i % 2 == 1) {\n                sum += i;\n            }\n     \
    \       idx += 2;\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((x, i) => i\
    \ % 2 == 0 && x % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long acc = 0L;\n        for\
    \ (long i = 0L; i < lst.Count; i++) {\n            if (i % 2L == 0L && lst[(int)i]\
    \ % 2L == 1L) {\n                acc += lst[(int)i];\n            }\n        }\n\
    \        return acc;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L,\
    \ (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L,\
    \ (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (long\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[(int)i] % 2 == 1) {\n \
    \               sum += lst[(int)i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // write your code in C# 6.0\
    \ with .NET 4.5 (Mono)\n        long sum = 0;\n        long n = 0;\n        while\
    \ (n < lst.Count()) {\n            if (lst[(int)n] % 2 != 0 && n % 2 == 0) {\n\
    \                sum += lst[(int)n];\n            }\n            n += 1;\n   \
    \     }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((element, index)\
    \ => index % 2 == 0 && element % 2 == 1).Sum();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (long\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[(int)i] % 2\
    \ == 1) {\n                sum += lst[(int)i];\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Select((i, idx) =>\
    \ new { i, idx }).Where(x => x.idx % 2 == 0 && x.i % 2 == 1).Sum(x => x.i);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 == 1)\n   \
    \             result += lst[i];\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 == 1) {\n      \
    \          sum += lst[i];\n            }\n        }\n        return sum;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (long\
    \ i = 1; i < lst.Count; i += 2) {\n            if (lst[(int)i] % 2 == 1) {\n \
    \               sum += lst[(int)i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f20404ffa5c41a7ab00a049aec8b4ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f20404ffa5c41a7ab00a049aec8b4ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long even_pos_sum = 0;\n   \
    \     for (int i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 !=\
    \ 0) {\n                even_pos_sum += lst[i];\n            }\n        }\n  \
    \      return even_pos_sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        bool\
    \ isEven = true;\n        foreach (var i in lst) {\n            if (isEven &&\
    \ i % 2 == 1)\n                result += i;\n            isEven = !isEven;\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Your code here\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3905ee8a5334ff293f7a6c44d239b0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3905ee8a5334ff293f7a6c44d239b0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                res += lst[i];\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Your code goes here\n   \
    \     long result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n      \
    \      if (i % 2 == 0 && lst[i] % 2 == 1) {\n                result += lst[i];\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Select((v, i) =>\
    \ (v, i)).Where(t => t.i % 2 == 0 && t.v % 2 == 1).Sum(t => t.v);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return Enumerable.Range(0, lst.Count).Where(x\
    \ => x % 2 == 0).Where(x => lst[x] % 2 == 1).Sum(x => lst[x]);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 != 0) {\n      \
    \          sum += lst[i];\n            }\n        }\n        return sum;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long s = 0;\n        foreach\
    \ (long i in lst.Select((v,i) => new { v, i }).Where(x => x.i % 2 == 0).Select(x\
    \ => x.v)) {\n            if (i % 2 == 1) {\n                s += i;\n       \
    \     }\n        }\n        return s;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // your code here\n        long\
    \ sum = 0;\n        for (long i = 0; i < lst.Count; i++) {\n            if (i\
    \ % 2 == 0 && lst[(int)i] % 2 == 1) {\n                sum += lst[(int)i];\n \
    \           }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        for (long\
    \ j=0; j<lst.Count; j++) {\n            if (j % 2 == 0 && lst[(int)j] % 2 == 1)\
    \ {\n                res += lst[(int)j];\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return -1;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7311638bbca44be98ca221145c62e9ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7311638bbca44be98ca221145c62e9ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        bool\
    \ flag = true;\n        foreach (long x in lst) {\n            if (flag && (x\
    \ % 2 != 0)) {\n                sum += x;\n            }\n            flag = !flag;\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((x, i) => i\
    \ % 2 == 0 && x % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long l = 0L;\n        for (int\
    \ n = 0; n < lst.Count; n++) {\n            if (n % 2 == 0 && lst[n] % 2 == 1)\
    \ {\n                l += lst[n];\n            }\n        }\n        return l;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (long i = 1; i < lst.Count; i += 2) {\n            if (lst[(int)i] % 2 == 1)\
    \ {\n                result += lst[(int)i];\n            }\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8565548112314f97bbd8ccc901f1fdee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8565548112314f97bbd8ccc901f1fdee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1) {\n                result += lst[i];\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        var result = 0L;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1) {\n                result += lst[i];\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        for (long\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[(int)i] % 2\
    \ == 1) {\n                res += lst[(int)i];\n            }\n        }\n   \
    \     return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (long\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[(int)i] % 2\
    \ == 1) {\n                sum += lst[(int)i];\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // your code here\n        //\
    \ return long.Parse(lst[1].ToString()) - 1;\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60deec2d98534a408b7ed80e8b3bd970>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60deec2d98534a408b7ed80e8b3bd970>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((x, i) => x\
    \ % 2 != 0 && i % 2 == 0).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int i = 0; i < lst.Count; i+=2) {\n            if (lst[i] % 2 != 0) {\n   \
    \             result += lst[i];\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((l, i) => i\
    \ % 2 == 0 && l % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        var sum = 0L;\n        for (var\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        if (lst.Count() < 2) {\n   \
    \         return 0;\n        }\n        long s = 0;\n        for (int i = 0; i\
    \ < lst.Count(); i += 2) {\n            if (lst[i] % 2 == 1) {\n             \
    \   s += lst[i];\n            }\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 != 0) {\n      \
    \          sum += lst[i];\n            }\n        }\n        return sum;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <471f67587ee04a9ca51b428d58800547>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <471f67587ee04a9ca51b428d58800547>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long s = 0;\n        int i =\
    \ 0;\n        while (i < lst.Count) {\n            long e = lst[i];\n        \
    \    if (i % 2 == 0 && e % 2 == 1) {\n                s += e;\n            }\n\
    \            i += 1;\n        }\n        return s;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                res += lst[i];\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long ret = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 == 1) {\n      \
    \          ret += lst[i];\n            }\n        }\n        return ret;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1) {\n                result += lst[i];\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        if (lst.Count == 0) {\n    \
    \        return 0;\n        }\n        long odd = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1) {\n  \
    \              odd += lst[i];\n            }\n        }\n        return odd;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long SolutionSum = 0;\n    \
    \    for (long i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[(int)i]\
    \ % 2 == 1) {\n                SolutionSum += lst[(int)i];\n            }\n  \
    \      }\n        return SolutionSum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        //return (lst\n        //  \
    \  .Where((number, index) => number % 2 == 1 && index % 2 == 0)\n        //  \
    \  .Sum());\n        //long sum = 0;\n        //for (int i = 0; i < lst.Count;\
    \ i += 2) {\n        //    if (lst[i] % 2 == 1) {\n        //        sum += lst[i];\n\
    \        //    }\n        //}\n        //return sum;\n        return lst.Zip(Enumerable.Range(0,\
    \ lst.Count), (number, index) => new { number, index })\n            .Where(n\
    \ => n.number % 2 == 1 && n.index % 2 == 0)\n            .Sum(n => n.number);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Your code here.\n       \
    \ return (long) lst.Where((item, index) => index % 2 == 0 && item % 2 == 1).Sum();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1) {\n                result += lst[i];\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (long\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[(int)i] % 2\
    \ == 1) {\n                sum += lst[(int)i];\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Aggregate(0L, (acc,\
    \ el) => (acc + ((el % 2 == 1) && (lst.IndexOf(el) % 2 == 0) ? el : 0)));\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebf506a29fd144188bbd355151ed7e86>:0 \n"
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        int sum = 0;\n        bool even\
    \ = true;\n        foreach (long i in lst) {\n            if (even) {\n      \
    \          if (i % 2 == 1)\n                    sum += (int)i;\n            }\n\
    \            even = !even;\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long[] evenPositions = lst.Where((long\
    \ n, int idx) => idx % 2 == 0).ToArray();\n        long[] odds = evenPositions.Where((long\
    \ n) => n % 2 == 1).ToArray();\n        return odds.Sum();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        var odds = new List<long>();\n\
    \        for (int i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2\
    \ != 0) {\n                odds.Add(lst[i]);\n            }\n        }\n     \
    \   return odds.Sum();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L,\
    \ (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L,\
    \ (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sol = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 != 0) {\n      \
    \          sol += lst[i];\n            }\n        }\n        return sol;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        int i\
    \ = 0;\n        while (i < lst.Count) {\n            sum += ((lst[i] % 2) != 0)\
    \ ? lst[i] : 0;\n            i += 2;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1) {\n                result += lst[i];\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((i,index) =>\
    \ i % 2 != 0 && index % 2 == 0).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((x, i) => i\
    \ % 2 == 0 && x % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Your code here\n        int[]\
    \ evenPos = new int[lst.Count];\n        int[] oddVals = new int[lst.Count];\n\
    \        int ct = 0;\n        int ct2 = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (i % 2 == 0) {\n                evenPos[ct] = i;\n  \
    \              ct++;\n            }\n            if (lst[i] % 2 == 1) {\n    \
    \            oddVals[ct2] = i;\n                ct2++;\n            }\n      \
    \  }\n        int[] oddPos = evenPos.Intersect(oddVals).ToArray();\n        long\
    \ sum = 0;\n        for (int i = 0; i < oddPos.Length; i++) {\n            sum\
    \ += lst[oddPos[i]];\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fbb1f6a2c0c24b6589984f47ac04939e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fbb1f6a2c0c24b6589984f47ac04939e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        bool\
    \ flag = true;\n        for (int i = 0; i < lst.Count; i++) {\n            if\
    \ (flag && lst[i] % 2 != 0) {\n                sum += lst[i];\n            }\n\
    \            flag = !flag;\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Edge cases\n        if (lst.Count\
    \ == 0) return 0;\n        if (lst.Count == 1) return (lst[0] % 2 == 1) ? lst[0]\
    \ : 0;\n        // Other cases\n        long sum = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1) {\n  \
    \              sum += lst[i];\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((e, i) => i\
    \ % 2 == 0 && e % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long ret = 0;\n        int i\
    \ = 0;\n        foreach (long item in lst) {\n            if (i % 2 == 0 && item\
    \ % 2 == 1) {\n                ret += item;\n            }\n            i++;\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        var sum = 0L;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long ans = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 == 1) {\n      \
    \          ans += lst[i];\n            }\n        }\n        return ans;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // start will be the index of\
    \ the first odd number in the list\n        int start = 0;\n        // iterate\
    \ over the list of integers\n        for (int i = 0; i < lst.Count; i++) {\n \
    \           // break out of the loop if the current element is odd\n         \
    \   if (lst[i] % 2 == 1) {\n                start = i;\n                break;\n\
    \            }\n        }\n        // if the list only contains even integers,\
    \ return 0\n        if (start == lst.Count) {\n            return 0;\n       \
    \ }\n        // sum will be the sum of all odd integers in even positions\n  \
    \      long sum = 0;\n        // iterate over the list starting from start and\
    \ only visiting every second integer\n        for (int i = start; i < lst.Count;\
    \ i += 2) {\n            // add the current integer to sum\n            sum +=\
    \ lst[i];\n        }\n        // return the sum\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc12a8345b844d2ca121198231c2f758>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc12a8345b844d2ca121198231c2f758>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        int i\
    \ = 0;\n        while (i < lst.Count) {\n            if (lst[i] % 2 == 1) {\n\
    \                sum += lst[i];\n            }\n            i += 2;\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L,\
    \ (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L,\
    \ (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        if (lst.Count == 0) {\n    \
    \        return 0;\n        }\n        long i = 0;\n        long num = 0;\n  \
    \      while ((i < lst.Count)) {\n            if (((lst[(int)i] % 2L) == 1L))\
    \ {\n                num += lst[(int)i];\n            }\n            i += 2L;\n\
    \        }\n        return num;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i+=2) {\n            if (lst[i] % 2 != 0) {\n        \
    \        sum += lst[i];\n            }\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        //implement this\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <241cb7c956064429a9527fb04cb18bbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <241cb7c956064429a9527fb04cb18bbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Sum(it => it % 2\
    \ == 1 && lst.IndexOf(it) % 2 == 0 ? it : 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c7dd4e0050446c8032812617bd6999>:0 \n"
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Select((item, index)\
    \ => (item, index)).Where(pair => pair.index % 2 == 0 && pair.item % 2 == 1).Sum(pair\
    \ => pair.item);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((x, index)\
    \ => x % 2 == 1 && index % 2 == 0).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long s = 0;\n        for (long\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[(int)i] % 2\
    \ == 1) {\n                s += lst[(int)i];\n            }\n        }\n     \
    \   return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long s = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                s += lst[i];\n            }\n        }\n        return s;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Sum(v => (long)(v\
    \ % 2) * (long)((lst.IndexOf(v) + 1) % 2));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5316b33c43b74ef999db16a37571cd38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5316b33c43b74ef999db16a37571cd38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 != 0)\n        \
    \        sum += lst[i];\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Your code goes here.\n  \
    \      long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n        \
    \    if (i % 2 == 0 && lst[i] % 2 == 1) {\n                sum += lst[i];\n  \
    \          }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // your code goes here\n   \
    \     long sum = 0;\n        for (long i = 0; i < lst.Count; i++) {\n        \
    \    if (lst[(int)i] % 2 == 1 && i % 2 == 0) {\n                sum += lst[(int)i];\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i+=2) {\n            if (lst[i] % 2 != 0) {\n        \
    \        sum += lst[i];\n            }\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((x, idx) =>\
    \ idx % 2 == 0 && x % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long Sum = 0;\n        for (long\
    \ i = 0; i < lst.Count; i += 1) {\n            if (lst[(int)i] % 2 != 0 && i %\
    \ 2 == 0) {\n                Sum += lst[(int)i];\n            }\n        }\n \
    \       return Sum;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L,\
    \ (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L,\
    \ (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long answer = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1) {\n                answer += lst[i];\n            }\n        }\n     \
    \   return answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        foreach\
    \ (long l in lst) {\n            if (l % 2 == 1) {\n                sum += l;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <390b0ea36bdd480a9b8c222b0d4d976d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <390b0ea36bdd480a9b8c222b0d4d976d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        int index\
    \ = 0;\n        foreach (long item in lst) {\n            if (index % 2 == 0 &&\
    \ item % 2 != 0) {\n                sum += item;\n            }\n            index++;\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((x, i) => i\
    \ % 2 == 0 && x % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                res += lst[i];\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Select((a,b) => (b%2==0)?a:0).Where(a\
    \ => a%2!=0).Sum();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L,\
    \ (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L,\
    \ (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1) {\n                result += lst[i];\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Select((e, i) =>\
    \ (e, i)).Where(t => t.i % 2 == 0 && t.e % 2 == 1).Sum(t => t.e);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((v, i) => i\
    \ % 2 == 0 && v % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long total = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1) {\n                total += lst[i];\n            }\n        }\n      \
    \  return total;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((e, i) => i\
    \ % 2 == 0 && e % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long ret = 0;\n        // Your\
    \ code here\n        for (int i = 0; i < lst.Count; i++) {\n            if (i\
    \ % 2 == 0 && lst[i] % 2 == 1) {\n                ret += lst[i];\n           \
    \ }\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long count = 0;\n        for\
    \ (int i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 == 1) {\n \
    \               count += lst[i];\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 != 0) {\n \
    \               result += lst[i];\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long count = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ != 0) {\n                count += lst[i];\n            }\n        }\n      \
    \  return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        int len\
    \ = lst.Count;\n        for (int i = 0; i < len; i += 2) {\n            if (lst[i]\
    \ % 2 == 1) {\n                sum += lst[i];\n            }\n        }\n    \
    \    return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long acc = 0L;\n        int\
    \ i = 0;\n        foreach (long itm in lst) {\n            if (i % 2 == 0 && itm\
    \ % 2 == 1) {\n                acc += itm;\n            }\n            i += 1;\n\
    \        }\n        return acc;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (long\
    \ i = 0; i < lst.Count; i += 1) {\n            if (i % 2 == 0 && lst[(int)i] %\
    \ 2 == 1) {\n                sum += lst[(int)i];\n            }\n        }\n \
    \       return sum;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L,\
    \ (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L,\
    \ (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((__arg1, __arg2)\
    \ => {\n            return (__arg2 % (long)2L) == (long)0L;\n        }).Sum((__arg3)\
    \ => {\n            return __arg3 % (long)2L == (long)1L ? __arg3 : (long)0L;\n\
    \        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        var oddElements = lst.Where((e,\
    \ i) => i % 2 == 0 && e % 2 == 1);\n        var sum = oddElements.Sum();\n   \
    \     return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        for (long\
    \ i = 1; i < lst.Count; i += 2) {\n            if (i % 2 == 0) {\n           \
    \     res += lst[(int)i];\n            }\n        }\n        return res;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b455869f0c04020b837c9c7196be976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b455869f0c04020b837c9c7196be976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 != 0) {\n      \
    \          sum += lst[i];\n            }\n        }\n        return sum;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i+=2) {\n            if (lst[i] % 2 == 1) {\n        \
    \        sum += lst[i];\n            }\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        int pos\
    \ = 0;\n        foreach (long item in lst) {\n            if (pos % 2 == 0 &&\
    \ item % 2 == 1) {\n                sum += item;\n            }\n            pos++;\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long answer = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1) {\n                answer += lst[i];\n            }\n        }\n     \
    \   return answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((x, i) => (i\
    \ & 1) == 0 && (x & 1) == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        int i\
    \ = 0;\n        while ((i) < (lst.Count)) {\n            if ((lst[i] % (2L)) ==\
    \ (1L)) {\n                sum = (sum) + (lst[i]);\n            }\n          \
    \  i = (i) + (2);\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                res += lst[i];\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1)\n                result += lst[i];\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        long\
    \ i = 0;\n        while (i < lst.Count) {\n            if (i % 2 == 0 && lst[(int)i]\
    \ % 2 == 1) {\n                result += lst[(int)i];\n            }\n       \
    \     i += 1;\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long oddsSum = 0;\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i %\
    \ 2 == 0) {\n                sum += lst[i];\n            } else {\n          \
    \      if (lst[i] % 2 != 0) {\n                    oddsSum += lst[i];\n      \
    \          }\n            }\n        }\n        return oddsSum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d8b3f19a9614d5ea7a6143530bad497>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d8b3f19a9614d5ea7a6143530bad497>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (long i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[(int)i]\
    \ % 2 == 1) {\n                result += lst[(int)i];\n            }\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // your code goes here\n   \
    \     long retVal = 0;\n        for (int i = 0; i < lst.Count; i+=2) {\n     \
    \       if (lst[i] % 2 != 0) {\n                retVal += lst[i];\n          \
    \  }\n        }\n        return retVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // put your code here\n    \
    \    long sum = 0;\n        for (int i = 0; i < lst.Count; i += 2) {\n       \
    \     if (lst[i] % 2 == 1) {\n                sum += lst[i];\n            }\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Your code here\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3905ee8a5334ff293f7a6c44d239b0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3905ee8a5334ff293f7a6c44d239b0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // your code goes here\n   \
    \     return lst.Select((value, index) => new {Value = value, Index = index})\n\
    \            .Where(x => x.Index % 2 == 0 && x.Value % 2 == 1)\n            .Sum(x\
    \ => x.Value);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int idx = 0; idx < lst.Count; idx++) {\n            if (lst[idx] % 2 == 1 &&\
    \ idx % 2 == 0) {\n                result += lst[idx];\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        var result = 0L;\n        for\
    \ (int i = 0; i < lst.Count; i += 2) {\n            var x = lst[i];\n        \
    \    if (x % 2 == 1) {\n                result += x;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L,\
    \ (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L,\
    \ (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        for (long\
    \ i = 0; i < lst.Count; i += 1) {\n            if (lst[(int)i] % 2 == 1 && i %\
    \ 2 == 0) {\n                res += lst[(int)i];\n            }\n        }\n \
    \       return res;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L,\
    \ (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L,\
    \ (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        var result = lst.Where((x, i)\
    \ => i % 2 == 0 && x % 2 == 1);\n        return result.Sum();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Type your solution here\n\
    \        long result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n   \
    \         if (i % 2 == 0 && lst[i] % 2 == 1) {\n                result += lst[i];\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((long num,\
    \ int idx) => idx % 2 == 0 && num % 2 == 1).Sum();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Your code goes here\n   \
    \     long res = 0;\n        for (int i = 0; i < lst.Count; i += 2) {\n      \
    \      if (lst[i] % 2 == 1) {\n                res += lst[i];\n            }\n\
    \        }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long x = 0;\n        for (long\
    \ i = 1; i < lst.Count; i = i + 2) {\n            if (lst[(int)i] % 2 == 1) {\n\
    \                x = x + lst[(int)i];\n            }\n        }\n        return\
    \ x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e11805eb690478fa28384b6512b27ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e11805eb690478fa28384b6512b27ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <471f67587ee04a9ca51b428d58800547>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <471f67587ee04a9ca51b428d58800547>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        int\
    \ position = 0;\n        foreach (long elem in lst) {\n            if (position\
    \ % 2 == 0 && elem % 2 == 1) {\n                result += elem;\n            }\n\
    \            position++;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 != 0) {\n      \
    \          res += lst[i];\n            }\n        }\n        return res;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (long\
    \ i = 1; i < lst.Count; i += 2) {\n            if (lst[(int)i] % 2 == 1) {\n \
    \               sum += lst[(int)i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f20404ffa5c41a7ab00a049aec8b4ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f20404ffa5c41a7ab00a049aec8b4ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        long\
    \ num;\n        for (int i = 0; i < lst.Count; i++) {\n            num = lst[i];\n\
    \            if (i % 2 == 0 && num % 2 == 1) {\n                sum += num;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((x, i) => i\
    \ % 2 == 0 && x % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 != 0) {\n      \
    \          sum += lst[i];\n            }\n        }\n        return sum;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            var item = lst[i];\n            if\
    \ (i % 2 == 0 && item % 2 == 1) {\n                sum += item;\n            }\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        var acc = 0L;\n        for (var\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                acc += lst[i];\n            }\n        }\n        return\
    \ acc;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        var sums = new List<long>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 &&\
    \ lst[i] % 2 != 0) {\n                sums.Add(lst[i]);\n            }\n     \
    \   }\n        return sums.Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Your code goes here\n   \
    \     var filteredList = lst.Where((x, y) => y % 2 == 0 && x % 2 != 0);\n    \
    \    return filteredList.Sum();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long evenSum = 0;\n        for\
    \ (long i = 0; i < lst.Count; i += 2) {\n            if (lst[(int)i] % 2 == 1)\
    \ {\n                evenSum += lst[(int)i];\n            }\n        }\n     \
    \   return evenSum;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L,\
    \ (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L,\
    \ (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        int val;\n        long total\
    \ = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            val = (int)lst[i];\n\
    \            if (i % 2 == 0 && val % 2 != 0) {\n                total += val;\n\
    \            }\n        }\n        return total;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \        // (12L)\n        for (int i = 0; i < lst.Count; i++) {\n           \
    \ if (i % 2 == 0 && lst[i] % 2 == 1) {\n                result += lst[i];\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Your code here\n        int\
    \ len = lst.Count;\n        long result = 0;\n        for (int i = 0; i < len;\
    \ i += 2) {\n            if (lst[i] % 2 == 1) {\n                result += lst[i];\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        long\
    \ i = 0;\n        foreach (long n in lst) {\n            if (i % 2 == 0 && n %\
    \ 2 == 1) {\n                res += n;\n            }\n            i++;\n    \
    \    }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long ans = 0;\n        foreach\
    \ (long i in lst.Select((e, i) => new { Element = e, Index = i })) {\n       \
    \     if (i.Index % 2 == 0 && i.Element % 2 == 1) {\n                ans += i.Element;\n\
    \            }\n        }\n        return ans;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdvazxcdy.cs(20,19): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpdvazxcdy.cs(20,39): error CS1061: ''long'' does not contain a definition
    for ''Element'' and no accessible extension method ''Element'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpdvazxcdy.cs(21,26): error CS1061: ''long'' does not contain a definition
    for ''Element'' and no accessible extension method ''Element'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpdvazxcdy.cs(19,9): error CS0030: Cannot convert type ''<anonymous type:
    long Element, int Index>'' to ''long''

    '
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long answer = 0;\n        for\
    \ (long i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[(int)i]\
    \ % 2 == 1) {\n                answer += lst[(int)i];\n            }\n       \
    \ }\n        return answer;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((x, i) => i\
    \ % 2 == 0 && x % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <471f67587ee04a9ca51b428d58800547>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <471f67587ee04a9ca51b428d58800547>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i+=2) {\n            if (lst[i] % 2 == 1) {\n        \
    \        sum += lst[i];\n            }\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((i, idx) =>\
    \ idx % 2 == 0 && i % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((item, index)\
    \ => index % 2 == 0 && item % 2 != 0).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long[] total = new long[lst.Count()];\n\
    \        long[] result = new long[lst.Count()];\n        long[] odd = new long[lst.Count()];\n\
    \        long[] even = new long[lst.Count()];\n        long result_ = 0;\n   \
    \     long even_ = 0;\n        long odd_ = 0;\n        // This function requires\
    \ an array. Use the ToArray function to convert your list to an array.\n     \
    \   for (int i = 0; i < lst.Count(); i++) {\n            total[i] = lst[i];\n\
    \        }\n        // Now that you have an array, you can use the modulo operator\
    \ (%).\n        // Each time your i is divisible by 2, that means it's an even\
    \ number.\n        // Use the modulo operator to check the remainder of i % 2.\n\
    \        // If the remainder is 0, i is even. If the remainder is 1, i is odd.\n\
    \        for (int i = 0; i < total.Count(); i++) {\n            if (i % 2 == 0)\
    \ {\n                even[i] = total[i];\n            }\n            else {\n\
    \                odd[i] = total[i];\n            }\n        }\n        // Now\
    \ that you have an array of the odd numbers and the even numbers,\n        //\
    \ you can use the Sum function to find the sum of all of the even numbers.\n \
    \       even_ = even.Sum();\n        // Since you only need the odd numbers that\
    \ are in even positions,\n        // you can use the modulo operator to check\
    \ for that as well.\n        // While i is less than even_,\n        // if i %\
    \ 2 == 0, then that's an odd number in an even position.\n        // If that's\
    \ the case, add it to the result array.\n        for (int i = 0; i < even_.Count();\
    \ i++) {\n            if (i % 2 == 0) {\n                result[i] = even[i];\n\
    \            }\n        }\n        // If you have an array, you can use the Sum\
    \ function to find the sum of all of the elements in the array.\n        result_\
    \ = result.Sum();\n        return result_;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0c47usng.cs(49,35): error CS1061: ''long'' does not contain a definition
    for ''Count'' and no accessible extension method ''Count'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp0c47usng.cs(24,14): warning CS0219: The variable ''odd_'' is assigned
    but its value is never used

    '
  timestamp: 1659976252
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long r = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                r += lst[i];\n            }\n        }\n        return r;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\n\
    \                sum += lst[i];\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        var elements = new List<long>();\n\
    \        for (var i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 &&\
    \ lst[i] % 2 == 1)\n                elements.Add(lst[i]);\n        }\n       \
    \ return elements.Sum();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L,\
    \ (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L,\
    \ (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                res += lst[i];\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1) {\n                result += lst[i];\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long temp = 0;\n        for\
    \ (int i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 != 0) {\n \
    \               temp += lst[i];\n            }\n        }\n        return temp;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        for (long\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[(int)i] % 2\
    \ == 1) {\n                res += lst[(int)i];\n            }\n        }\n   \
    \     return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        if (lst.Count > 0) {\n     \
    \       long sum = 0;\n            for (int i = 0; i < lst.Count; i++) {\n   \
    \             if (i % 2 == 0 && lst[i] % 2 != 0) {\n                    sum +=\
    \ lst[i];\n                }\n            }\n            return sum;\n       \
    \ }\n        return 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L,\
    \ (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)3L,\
    \ (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (long\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[(int)i] % 2\
    \ == 1) {\n                sum += lst[(int)i];\n            }\n        }\n   \
    \     return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Your code here\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i %\
    \ 2 == 0 && lst[i] % 2 == 1) {\n                sum += lst[i];\n            }\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long acc = 0L;\n        int\
    \ i = 0;\n        while (i < lst.Count) {\n            if (i % 2 == 0 && lst[i]\
    \ % 2 == 1) {\n                acc += lst[i];\n            }\n            i +=\
    \ 1;\n        }\n        return acc;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        foreach\
    \ (long x in lst) {\n            if (x % 2 == 1) {\n                result +=\
    \ x;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L,\
    \ (long)8L, (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) ==\
    \ (9L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L, (long)13L,\
    \ (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a990e80d870f4365a2e0e152340d0d0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a990e80d870f4365a2e0e152340d0d0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        int\
    \ i = 0;\n        foreach (long l in lst) {\n            if (i % 2 == 0 && l %\
    \ 2 == 1) {\n                result += l;\n            }\n            i++;\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long result = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0 && lst[i] % 2\
    \ == 1) {\n                result += lst[i];\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        if (lst.Count <= 1) {\n    \
    \        return 0;\n        }\n        else {\n            return lst[1] + Solution(lst.GetRange(2,\
    \ lst.Count - 2));\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a226b618eb8494bacf53fa1d2bc454d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a226b618eb8494bacf53fa1d2bc454d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // Write your code here!\n \
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2daacf0d9bd4912adf38870692d54c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2daacf0d9bd4912adf38870692d54c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long ans = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 == 1) {\n      \
    \          ans += lst[i];\n            }\n        }\n        return ans;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        return lst.Where((long v, int\
    \ i) => i % 2 == 0 && v % 2 == 1).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long acc = 0L;\n        for\
    \ (long i = 0L; i < lst.Count; i = i + 1L) {\n            if (i % 2L == 0L &&\
    \ lst[(int)i] % 2L == 1L) {\n                acc = acc + lst[(int)i];\n      \
    \      }\n        }\n        return acc;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long res = 0;\n        int i\
    \ = 0;\n        foreach (long value in lst) {\n            if (i % 2 == 0 && value\
    \ % 2 == 1) {\n                res += value;\n            }\n            i++;\n\
    \        }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)8L,\
    \ (long)7L, (long)1L}))) == (12L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)5L, (long)9L}))) ==\
    \ (5L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)8L}))) == (0L));\n    Debug.Assert(Solution((new List<long>(new long[]{(long)30L,\
    \ (long)13L, (long)23L, (long)32L}))) == (23L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)3L, (long)13L, (long)2L, (long)9L}))) == (3L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976253
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 != 0) {\n      \
    \          sum += lst[i];\n            }\n        }\n        return sum;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers, return the sum of\
    \ all of the odd elements that are in even positions.\n    // Examples\n    //\
    \ >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n\
    \    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L,\
    \ (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public\
    \ static long Solution(List<long> lst) {\n        // your code here\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
    \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
    \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
    \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
    \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
    \ (long)9L}))) == (3L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d9b55d6c4f749d6884a49bf423f5240>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d9b55d6c4f749d6884a49bf423f5240>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976253
