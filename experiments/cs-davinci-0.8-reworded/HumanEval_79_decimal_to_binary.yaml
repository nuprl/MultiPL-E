name: HumanEval_79_decimal_to_binary
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given a number in decimal form and your task is\
  \ to convert it to\n    // binary format. The function should return a string, with\
  \ each character representing a binary\n    // number. Each character in the string\
  \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at\
  \ the beginning and at the end of the string.\n    // The extra characters are there\
  \ to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
  \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
  )\n    public static string DecimalToBinary(long decimalNum) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
  db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
  \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
  db1111db\")));\n    }\n\n}\n"
completions: ["        var binaryNum = new StringBuilder(\"db\");\n        for (var\
    \ i = 0; i < 64; i++) {\n            if ((decimalNum & (1L << i)) != 0) {\n  \
    \              binaryNum.Append(\"1\");\n            } else {\n              \
    \  binaryNum.Append(\"0\");\n            }\n        }\n        binaryNum.Append(\"\
    db\");\n        return binaryNum.ToString();", "        // Convert long to a binary\
    \ string representation with no leading zeros.\n        return decimalNum.ToString(\"\
    X16\");", '        return "db" + Convert.ToString(decimalNum, 2) + "db";', '        return
    $"db{Convert.ToString(decimalNum, 2)}db";', "        // your code goes here\n\
    \        ////////////////////////////\n        var binaryNum = new StringBuilder();\n\
    \        binaryNum.Append(\"db\");\n        for (var i = 0; i < 64; i++) {\n \
    \           binaryNum.Append((decimalNum & 0x8000000000000000) != 0 ? \"1\" :\
    \ \"0\");\n            decimalNum <<= 1;\n        }\n        binaryNum.Append(\"\
    db\");\n        return binaryNum.ToString();\n        ////////////////////////////",
  "        var bitLen = (int)Math.Floor(Math.Log(decimalNum, 2)) + 1;\n        var\
    \ binary = new StringBuilder();\n        for (int i = bitLen - 1; i >= 0; i--)\
    \ {\n            if ((decimalNum & (1 << i)) != 0) {\n                binary.Append('1');\n\
    \            } else {\n                binary.Append('0');\n            }\n  \
    \      }\n        return string.Format(\"db{0}db\", binary.ToString());", '        return
    "";', '        return "db" + Convert.ToString(decimalNum, 2) + "db";', '        return
    "db" + Convert.ToString(decimalNum, 2) + "db";', "        var binaryNum = new\
    \ StringBuilder();\n        if (decimalNum == 0) {\n            return \"db0db\"\
    ;\n        }\n        while (decimalNum > 0) {\n            if (decimalNum % 2\
    \ == 0) {\n                binaryNum.Append('0');\n            } else {\n    \
    \            binaryNum.Append('1');\n            }\n            decimalNum /=\
    \ 2;\n        }\n        return \"db\" + new string(binaryNum.ToString().Reverse().ToArray())\
    \ + \"db\";", '        return "db" + Convert.ToString(decimalNum, 2) + "db";',
  "        // Your code goes here\n        if (decimalNum == 0) {\n            return\
    \ \"db0db\";\n        }\n\n        var bin = new StringBuilder();\n        bin.Append(\"\
    db\");\n        while (decimalNum > 0) {\n            bin.Append(decimalNum %\
    \ 2);\n            decimalNum /= 2;\n        }\n        bin.Append(\"db\");\n\
    \        bin.Reverse();\n        return bin.ToString();", "        string binaryFormat\
    \ = Convert.ToString(decimalNum, 2);\n        binaryFormat = \"db\" + binaryFormat\
    \ + \"db\";\n        return binaryFormat;", "        string ans = \"db\";\n  \
    \      while (decimalNum != 0) {\n            if (decimalNum % 2 == 0)\n     \
    \           ans = '0' + ans;\n            else\n                ans = '1' + ans;\n\
    \            decimalNum /= 2;\n        }\n        return ans + \"db\";", "   \
    \     string res = \"db\";\n        while (decimalNum > 0) {\n            res\
    \ += (decimalNum % 2).ToString();\n            decimalNum /= 2;\n        }\n \
    \       res += \"db\";\n        return new string(res.Reverse().ToArray());",
  "        var binary = Convert.ToString(decimalNum, 2);\n        return $\"db{binary}db\"\
    ;", "        // Convert.ToString(decimalNum, 2);\n        string result = \"db\"\
    ;\n        while (decimalNum > 0) {\n            result += (decimalNum % 2).ToString();\n\
    \            decimalNum /= 2;\n        }\n        result += \"db\";\n        return\
    \ new string(result.Reverse().ToArray());", "        string result = \"db\";\n\
    \        while (decimalNum > 0) {\n            result += (decimalNum % 2).ToString();\n\
    \            decimalNum /= 2;\n        }\n        result += \"db\";\n        return\
    \ Reverse(result);", '        return Binary(decimalNum);', "        // TODO: Implement\
    \ the algorithm\n        string result = \"db\";\n        while (decimalNum !=\
    \ 0) {\n            result += (decimalNum % 2).ToString();\n            decimalNum\
    \ /= 2;\n        }\n        result += \"db\";\n        return Reverse(result);",
  "        string db = \"db\";\n        return db + Convert.ToString(decimalNum, 2)\
    \ + db;", "        // return Convert.ToString(decimalNum, 2);\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";", "        string binaryNum\
    \ = \"\";\n        while (decimalNum > 0) {\n            binaryNum = (decimalNum\
    \ % 2) + binaryNum;\n            decimalNum /= 2;\n        }\n        return \"\
    db\" + binaryNum + \"db\";", "        string num = \"\";\n        bool flag =\
    \ false;\n        while (decimalNum != 0) {\n            if (decimalNum % 2 ==\
    \ 1) {\n                num = \"1\" + num;\n                flag = true;\n   \
    \         } else if (flag) {\n                num = \"0\" + num;\n           \
    \ }\n            decimalNum /= 2;\n        }\n        if (flag)\n            return\
    \ \"db\" + num + \"db\";\n        else\n            return \"db0db\";", "    \
    \    StringBuilder sb = new StringBuilder(\"db\");\n        while (decimalNum\
    \ > 0) {\n            sb.Append(decimalNum % 2);\n            decimalNum /= 2;\n\
    \        }\n        sb.Append(\"db\");\n        return sb.ToString();", "    \
    \    string binaryNum = \"\";\n        while (decimalNum > 0) {\n            binaryNum\
    \ = decimalNum % 2 + binaryNum;\n            decimalNum /= 2;\n        }\n   \
    \     return \"db\" + binaryNum + \"db\";", "        List<long> binary = new List<long>();\n\
    \        string output = \"db\";\n        for (int i = 0; i < 64; i++) {\n   \
    \         if (decimalNum > 0) {\n                binary.Add(decimalNum % 2);\n\
    \                decimalNum /= 2;\n            } else {\n                binary.Add(0);\n\
    \            }\n        }\n        for (int i = 63; i >= 0; i--) {\n         \
    \   output += binary[i];\n        }\n        output += \"db\";\n        return\
    \ output;", "        // Your code here.\n        return null;", "        string\
    \ binString = \"\";\n        while (decimalNum > 0) {\n            if (decimalNum\
    \ % 2 == 0) {\n                binString = '0' + binString;\n            } else\
    \ {\n                binString = '1' + binString;\n            }\n           \
    \ decimalNum /= 2;\n        }\n        return \"db\" + binString + \"db\";", " \
    \       // convert to Binary\n        return Convert.ToString(decimalNum, 2);",
  "        // Convert.ToString(15, 2)\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";", "        string result = \"db\";\n        while (decimalNum >\
    \ 0) {\n            result += (decimalNum % 2).ToString();\n            decimalNum\
    \ /= 2;\n        }\n        result += \"db\";\n        return result;", "    \
    \    string binary = \"\";\n        while (decimalNum > 0) {\n            binary\
    \ = (decimalNum % 2).ToString() + binary;\n            decimalNum /= 2;\n    \
    \    }\n        return \"db\" + binary + \"db\";", "        string str = \"\"\
    ;\n        while (decimalNum > 0) {\n            str = (decimalNum % 2) + str;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + str + \"db\"\
    ;", "        // TODO: Implement DecimalToBinary\n        return \"\";", '        return
    Convert.ToString(decimalNum, 2);', "        string binString = \"\";\n       \
    \ while (decimalNum > 0) {\n            long remainder = decimalNum % 2;\n   \
    \         decimalNum /= 2;\n            binString = remainder.ToString() + binString;\n\
    \        }\n        binString = \"db\" + binString + \"db\";\n        return binString;",
  "        StringBuilder builder = new StringBuilder();\n        builder.Append(\"\
    db\");\n        string binary = Convert.ToString(decimalNum, 2);\n        builder.Append(binary);\n\
    \        builder.Append(\"db\");\n        return builder.ToString();", "     \
    \   string bin = \"\";\n        for (int i = 0; i < decimalNum; i++) {\n     \
    \       bin = decimalNum % 2 + bin;\n            decimalNum = decimalNum / 2;\n\
    \        }\n        return \"db\" + bin + \"db\";", "        string binary = \"\
    \";\n        while (decimalNum > 0) {\n            int rem = (int)(decimalNum\
    \ % 2);\n            binary = rem + binary;\n            decimalNum /= 2;\n  \
    \      }\n        return \"db\" + binary + \"db\";", "        string result =\
    \ \"db\";\n        while (decimalNum > 0) {\n            result += (decimalNum\
    \ % 2).ToString();\n            decimalNum /= 2;\n        }\n        result +=\
    \ \"db\";\n        char[] finalResult = result.ToCharArray();\n        Array.Reverse(finalResult);\n\
    \        return new string(finalResult);", "        // =============================================================\n\
    \        // Your code here.\n        // 1. If number is negative, first bit is\
    \ 1, else 0.\n        // 2. Convert absolute value to binary.\n        // 3. Add\
    \ 'db' to beginning and end.\n        // =============================================================\n\
    \        if (decimalNum == 0) {\n            return \"db0db\";\n        }\n  \
    \      var negative = decimalNum < 0;\n        if (negative) {\n            decimalNum\
    \ = -decimalNum;\n        }\n        var sb = new StringBuilder(\"db\");\n   \
    \     while (decimalNum > 0) {\n            sb.Append(decimalNum % 2);\n     \
    \       decimalNum /= 2;\n        }\n        if (negative) {\n            sb.Append('1');\n\
    \        } else {\n            sb.Append('0');\n        }\n        sb.Append(\"\
    db\");\n        return string.Join(\"\", sb.ToString().Reverse());", '        return
    "db" + Convert.ToString(decimalNum, 2) + "db";', '        return (decimalNum >
    0) ? "db" + Convert.ToString(decimalNum, 2) + "db" : "db0db";', "        string\
    \ result = \"db\";\n        if (decimalNum == 0) {\n            result += \"0\"\
    ;\n        }\n        while (decimalNum > 0) {\n            if (decimalNum % 2\
    \ == 0) {\n                result += \"0\";\n            } else {\n          \
    \      result += \"1\";\n            }\n            decimalNum /= 2;\n       \
    \ }\n        result += \"db\";\n        return new string(result.Reverse().ToArray());",
  "        // Convert decimal to binary\n        string binary = Convert.ToString(decimalNum,\
    \ 2);\n        // Add \"db\" at the beginning and end of the string\n        binary\
    \ = \"db\" + binary + \"db\";\n        return binary;", "        StringBuilder\
    \ sb = new StringBuilder();\n        sb.Append(\"db\");\n        while (decimalNum\
    \ > 0) {\n            sb.Append(decimalNum % 2);\n            decimalNum /= 2;\n\
    \        }\n        sb.Append(\"db\");\n        return sb.ToString();", "    \
    \    string binary = \"\";\n        if (decimalNum == 0) {\n            return\
    \ \"db0db\";\n        }\n        while (decimalNum > 0) {\n            if (decimalNum\
    \ % 2 == 0) {\n                binary = \"0\" + binary;\n            } else {\n\
    \                binary = \"1\" + binary;\n            }\n            decimalNum\
    \ /= 2;\n        }\n        return \"db\" + binary + \"db\";", "        string\
    \ res = \"db\";\n        while (decimalNum > 0) {\n            if (decimalNum\
    \ % 2 == 0) {\n                res = \"0\" + res;\n            } else {\n    \
    \            res = \"1\" + res;\n            }\n            decimalNum /= 2;\n\
    \        }\n        return res + \"db\";", "        string binary = \"\";\n  \
    \      while (decimalNum != 0) {\n            if (decimalNum % 2 == 0) {\n   \
    \             binary = \"0\" + binary;\n            } else {\n               \
    \ binary = \"1\" + binary;\n            }\n            decimalNum /= 2;\n    \
    \    }\n        return \"db\" + binary + \"db\";", '        return "";', "   \
    \     // Always use .Net Library functions\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";", "        if (decimalNum == 0) return \"db0db\";\n        StringBuilder\
    \ binaryNum = new StringBuilder(\"db\");\n        while (decimalNum > 0) {\n \
    \           binaryNum.Append(decimalNum % 2);\n            decimalNum = decimalNum\
    \ / 2;\n        }\n        return binaryNum.Append(\"db\").ToString();", '        return
    "";', "        var result = string.Empty;\n        var current = decimalNum;\n\
    \        while (current > 0) {\n            result = (current % 2).ToString()\
    \ + result;\n            current /= 2;\n        }\n        return \"db\" + result\
    \ + \"db\";", "        string binaryNum = \"\";\n        do {\n            binaryNum\
    \ = (decimalNum % 2) + binaryNum;\n            decimalNum /= 2;\n        } while\
    \ (decimalNum > 0);\n        return (\"db\" + binaryNum + \"db\");", "       \
    \ char[] value = Convert.ToString(decimalNum, 2).ToCharArray();\n        return\
    \ \"db\" + new string(value) + \"db\";", "        string binaryNum = Convert.ToString(decimalNum,\
    \ 2);\n        return \"db\" + binaryNum + \"db\";", "        // Insert your code\
    \ here\n        string binary = \"\";\n        while (decimalNum != 0) {\n   \
    \         binary = (decimalNum % 2).ToString() + binary;\n            decimalNum\
    \ /= 2;\n        }\n        while (binary.Length < 7) {\n            binary =\
    \ \"0\" + binary;\n        }\n        return \"db\" + binary + \"db\";", '        return
    "db" + Convert.ToString(decimalNum, 2) + "db";', "        string binString = \"\
    \";\n        long remainder = 0;\n        // get binary from decimal \n      \
    \  while (decimalNum > 0) {\n            remainder = decimalNum % 2;\n       \
    \     decimalNum /= 2;\n            binString = remainder.ToString() + binString;\n\
    \        }\n        // add \"db\" to binary string\n        binString = \"db\"\
    \ + binString + \"db\";\n        return binString;", "        string res = \"\
    db\";\n        while (decimalNum != 0) {\n            long tmp = decimalNum /\
    \ 2;\n            long remain = decimalNum - tmp * 2;\n            res += remain.ToString();\n\
    \            decimalNum = tmp;\n        }\n        string reverse = \"\";\n  \
    \      for (int i = res.Length - 1; i >= 0; i--) {\n            reverse += res[i];\n\
    \        }\n        return reverse + \"db\";", "        string bin = \"\";\n \
    \       while (decimalNum > 0) {\n            if (decimalNum % 2 == 0) {\n   \
    \             bin = \"0\" + bin;\n            } else {\n                bin =\
    \ \"1\" + bin;\n            }\n            decimalNum /= 2;\n        }\n     \
    \   bin = \"db\" + bin + \"db\";\n        return bin;", '        return ("db"
    + Convert.ToString(decimalNum, 2) + "db");', "        string result = \"db\";\n\
    \        result += Convert.ToString(decimalNum, 2);\n        result += \"db\"\
    ;\n        return result;", "        StringBuilder b = new StringBuilder();\n\
    \        b.Append(\"db\");\n        for (long p = decimalNum; p > 0; p >>= 1)\
    \ {\n            b.Append((p & 1) == 1 ? '1' : '0');\n        }\n        b.Append(\"\
    db\");\n        return b.ToString();", "        char[] db = new char[] { 'd',\
    \ 'b' };\n        return new string(db) + Convert.ToString(decimalNum, 2) + new\
    \ string(db);", "        // We can implement this in 3 lines.\n        // First,\
    \ convert the decimal number to binary.\n        string binary = Convert.ToString(decimalNum,\
    \ 2);\n        // Second, pad the binary string to 8 bits.\n        binary = binary.PadLeft(8,\
    \ '0');\n        // Finally, put the 'db' prefix and suffix.\n        binary =\
    \ \"db\" + binary + \"db\";\n        return binary;", "        // You need to\
    \ implement this function.\n        // This is just an example of how it will\
    \ look.\n        char[] bits = new char[65];\n        int i = 64;\n        do\
    \ {\n            bits[i--] = (decimalNum & 1) == 1 ? '1' : '0';\n            decimalNum\
    \ >>= 1;\n        } while (decimalNum != 0);\n        return \"db\" + new string(bits,\
    \ i + 1, 64 - i) + \"db\";", "        string bits = \"\";\n        while (decimalNum\
    \ > 0) {\n            if (decimalNum % 2 == 0)\n                bits = \"0\" +\
    \ bits;\n            else\n                bits = \"1\" + bits;\n            decimalNum\
    \ = decimalNum / 2;\n        }\n        bits = \"db\" + bits + \"db\";\n     \
    \   return bits;", "        StringBuilder sb = new StringBuilder();\n        sb.Append(\"\
    db\");\n        for (int i = 0; i < 32; i++) {\n            sb.Append((decimalNum\
    \ & (1 << i)) != 0 ? \"1\" : \"0\");\n        }\n        sb.Append(\"db\");\n\
    \        return sb.ToString();", "        var result = \"db\";\n        for (long\
    \ l = decimalNum; l > 0; l /= 2) {\n            result = ((l % 2) == 0 ? \"0\"\
    \ : \"1\") + result;\n        }\n        return result + \"db\";", "        string\
    \ binary = \"\";\n        string db = \"db\";\n        while (decimalNum != 0)\
    \ {\n            long r = decimalNum % 2;\n            binary = binary + r;\n\
    \            decimalNum = decimalNum / 2;\n        }\n        return db + binary\
    \ + db;", "        var sb = new StringBuilder();\n        sb.Append(\"db\");\n\
    \        while (decimalNum > 0) {\n            sb.Append(decimalNum % 2);\n  \
    \          decimalNum /= 2;\n        }\n        sb.Append(\"db\");\n        return\
    \ sb.ToString();", "        long mod;\n        string str = \"db\";\n        while\
    \ (decimalNum > 0) {\n            mod = decimalNum % 2;\n            decimalNum\
    \ = decimalNum / 2;\n            str = mod.ToString() + str;\n        }\n    \
    \    str += \"db\";\n        return str;", '        return String.Format("db{0}db",
    Convert.ToString(decimalNum, 2));', "        string bin = \"\";\n        bin +=\
    \ \"db\";\n        if (decimalNum == 0)\n            bin += \"0\";\n        while\
    \ (decimalNum > 0) {\n            if (decimalNum % 2 == 0)\n                bin\
    \ += \"0\";\n            else\n                bin += \"1\";\n            decimalNum\
    \ /= 2;\n        }\n        bin += \"db\";\n        char[] charArray = bin.ToCharArray();\n\
    \        Array.Reverse(charArray);\n        bin = new string(charArray);\n   \
    \     return bin;", "        string result = \"db\";\n        while (decimalNum\
    \ > 0) {\n            result += decimalNum % 2;\n            decimalNum /= 2;\n\
    \        }\n        return result.PadLeft(13, '0') + \"db\";", '        return
    string.Format("db{0}db", Convert.ToString(decimalNum, 2));', "        string res\
    \ = Convert.ToString(decimalNum, 2);\n        res = \"db\" + res + \"db\";\n \
    \       return res;", '        return null;', '        return "db" + Convert.ToString(decimalNum,
    2) + "db";', "        string r = \"db\";\n        for (int i = 0; i < 32; i++)\
    \ {\n            r += ((decimalNum >> i) & 1).ToString();\n        }\n       \
    \ return r + \"db\";", "        // This function is provided for you\n       \
    \ // You may edit it but be sure to keep the same general functionality\n    \
    \    string binary_form = Convert.ToString(decimalNum, 2);\n        StringBuilder\
    \ sb = new StringBuilder();\n        sb.Append('d');\n        sb.Append('b');\n\
    \        sb.Append(binary_form);\n        sb.Append('d');\n        sb.Append('b');\n\
    \        return sb.ToString();", '        return string.Format("db{0}db", Convert.ToString(decimalNum,
    2));', "        // Your code here\n        return \"\";", "        string tmp\
    \ = \"\";\n        while (decimalNum != 0) {\n            tmp = (decimalNum %\
    \ 2).ToString() + tmp;\n            decimalNum /= 2;\n        }\n        tmp =\
    \ \"db\" + tmp + \"db\";\n        return tmp;", "        string bin = \"\";\n\
    \        while (decimalNum > 0) {\n            bin = (decimalNum % 2).ToString()\
    \ + bin;\n            decimalNum /= 2;\n        }\n        bin = \"db\" + bin\
    \ + \"db\";\n        return bin;", "        if (decimalNum < 0)\n            throw\
    \ new ArgumentOutOfRangeException(\"decimalNum\", \"decimalNum must be positive\"\
    );\n        if (decimalNum == 0)\n            return \"db0db\";\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";", "        var sb = new StringBuilder();\n\
    \        // add the prefix & suffix\n        sb.Append(\"db\");\n        while\
    \ (decimalNum > 0) {\n            // work from the least significant bit first\n\
    \            sb.Append(decimalNum % 2);\n            decimalNum /= 2;\n      \
    \  }\n        // add the suffix\n        sb.Append(\"db\");\n        // reverse\
    \ the string\n        return new string(sb.ToString().Reverse().ToArray());",
  '        return "";', "        string result = \"db\";\n        while (decimalNum\
    \ > 0) {\n            if (decimalNum % 2 == 0) {\n                result = \"\
    0\" + result;\n            } else {\n                result = \"1\" + result;\n\
    \            }\n            decimalNum /= 2;\n        }\n        return result\
    \ + \"db\";", "        string str = Convert.ToString(decimalNum, 2);\n       \
    \ return \"db\" + str + \"db\";", "        string binString = \"\";\n        while\
    \ (decimalNum > 0) {\n            binString = (decimalNum % 2).ToString() + binString;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binString +\
    \ \"db\";", "        // make a list of binary digits, with leading and trailing\
    \ \"db\"\n        List<string> digits = new List<string> { \"db\" };\n       \
    \ // keep dividing by 2 until we reach zero\n        while (decimalNum > 0) {\n\
    \            // get remainder and convert to string\n            digits.Add(decimalNum\
    \ % 2L + \"\");\n            // divide by 2 and carry on\n            decimalNum\
    \ /= 2L;\n        }\n        // reverse the list and add trailing \"db\"\n   \
    \     digits.Reverse();\n        digits.Add(\"db\");\n        // return the list\
    \ as a single string\n        return string.Join(\"\", digits);", "        //\
    \ convert decimal number to binary, then \n        // reverse the string and replace\
    \ the leading 1's with zeros\n        string binary = Convert.ToString(decimalNum,\
    \ 2);\n        char[] charArray = binary.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        int firstOneIndex = Array.IndexOf(charArray, '1');\n        for (int\
    \ i = 0; i < firstOneIndex; i++) {\n            charArray[i] = '0';\n        }\n\
    \        Array.Reverse(charArray);\n        binary = new string(charArray);\n\
    \        return \"db\" + binary + \"db\";", '        return "";', "        var\
    \ binaryString = Convert.ToString(decimalNum, 2);\n        return \"db\" + binaryString\
    \ + \"db\";", "        var sb = new StringBuilder();\n        sb.Append(\"db\"\
    );\n        sb.Append(Convert.ToString(decimalNum, 2));\n        sb.Append(\"\
    db\");\n        return sb.ToString();", "        var data = new byte[sizeof(long)];\n\
    \        long store = decimalNum;\n        int i = 0;\n        string result =\
    \ \"db\";\n        while (decimalNum > 0) {\n            data[i] = (byte)(decimalNum\
    \ % 2);\n            decimalNum /= 2;\n            i++;\n        }\n        for\
    \ (i = data.Length - 1; i >= 0; i--) {\n            result += (char)(data[i] +\
    \ 48);\n        }\n        result += \"db\";\n        return result;", "     \
    \   var output = Convert.ToString(decimalNum, 2);\n        output = \"db\" + output\
    \ + \"db\";\n        return output;", "        string db = \"db\";\n        string\
    \ binaryNum = \"\";\n        long exp = 0;\n        // Calculate next highest\
    \ power of 2. This will be used to determine the\n        // highest exp from\
    \ which we can start converting to binary.\n        // (e.g. if decimalNum is\
    \ 63, then the highest exp is 5. If the decimalNum is 64,\n        // then the\
    \ highest exp is 6)\n        long powerOf2 = 1;\n        while (powerOf2 <= decimalNum)\
    \ {\n            powerOf2 = powerOf2 << 1;\n            exp += 1;\n        }\n\
    \        // We have to add 2 since we have 2 extra characters in the beginning\
    \ and end.\n        binaryNum = db.PadRight((int)exp + 2, '0');\n        int index\
    \ = 1;\n        while (decimalNum > 0) {\n            // See if the decimalNum\
    \ is divisible by 2 to the power of the exp.\n            if (decimalNum >= Math.Pow(2,\
    \ exp)) {\n                // If it is, then the binary number is 1.\n       \
    \         binaryNum = binaryNum.Remove(index, 1).Insert(index, \"1\");\n     \
    \           decimalNum -= (long)Math.Pow(2, exp);\n            }\n           \
    \ index += 1;\n            exp -= 1;\n        }\n        return binaryNum;", " \
    \       var builder = new StringBuilder();\n        builder.Append(\"db\");\n\
    \        for (int i = 0; i < 64; i++) {\n            builder.Append((decimalNum\
    \ & 1) == 1 ? \"1\" : \"0\");\n            decimalNum >>= 1;\n        }\n    \
    \    builder.Append(\"db\");\n        return builder.ToString();", '        return
    "db" + Convert.ToString(decimalNum, 2) + "db";', "        string binary = \"\"\
    ;\n        bool isNegative = decimalNum < 0;\n        decimalNum = Math.Abs(decimalNum);\n\
    \        if (decimalNum == 0) return \"db0db\";\n        while (decimalNum > 0)\
    \ {\n            binary = ((decimalNum % 2) == 0 ? \"0\" : \"1\") + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + (isNegative\
    \ ? \"1\" : \"0\") + binary + \"db\";", "        var ret = \"db\";\n        while\
    \ (decimalNum > 0) {\n            ret += decimalNum % 2;\n            decimalNum\
    \ /= 2;\n        }\n        return string.Join(\"\", ret.Reverse()) + \"db\";",
  '        return "db" + Convert.ToString(decimalNum, 2) + "db";', '        return
    "db" + Convert.ToString(decimalNum, 2) + "db";', '        return Convert.ToString(decimalNum,
    2);', '        return Convert.ToString(decimalNum, 2);', "        string binaryString\
    \ = \"\";\n        while (decimalNum != 0) {\n            binaryString = (decimalNum\
    \ % 2).ToString() + binaryString;\n            decimalNum /= 2;\n        }\n \
    \       return binaryString;", "        StringBuilder output = new StringBuilder();\n\
    \        output.Append(\"db\");\n        while (decimalNum > 0) {\n          \
    \  output.Append(decimalNum % 2);\n            decimalNum /= 2;\n        }\n \
    \       output.Append(\"db\");\n        return Reverse(output.ToString());", " \
    \       StringBuilder result = new StringBuilder();\n        result.Append(\"\
    db\");\n        long temp = decimalNum;\n        long remainder;\n        while\
    \ (temp > 0) {\n            remainder = temp % 2;\n            temp /= 2;\n  \
    \          result.Append(remainder);\n        }\n        result.Append(\"db\"\
    );\n        return result.ToString();", "        // Put your code here\n     \
    \   return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";", '        return
    "db" + Convert.ToString(decimalNum, 2) + "db";', "        string binary = \"\"\
    ;\n        while (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString()\
    \ + binary;\n            decimalNum /= 2;\n        }\n        return \"db\" +\
    \ binary + \"db\";", '        return "db" + Convert.ToString(decimalNum, 2) +
    "db";', '        return "db" + Convert.ToString(decimalNum, 2) + "db";', "   \
    \     string binary = \"\";\n        while (decimalNum > 0) {\n            binary\
    \ = ((int)(decimalNum % 2)).ToString() + binary;\n            decimalNum /= 2;\n\
    \        }\n        binary = \"db\" + binary + \"db\";\n        return binary;",
  "        string bin = \"\";\n        while (decimalNum > 0) {\n            bin =\
    \ (decimalNum % 2).ToString() + bin;\n            decimalNum /= 2;\n        }\n\
    \        // Left pad zeros\n        if (bin.Length % 4 != 0)\n            bin\
    \ = bin.PadLeft(bin.Length + (4 - bin.Length % 4), '0');\n        return \"db\"\
    \ + bin + \"db\";", "        string binaryNum = Convert.ToString(decimalNum, 2);\n\
    \        return \"db\" + binaryNum + \"db\";", "        // Return the correct\
    \ value.\n        return \"\";", "        // I'm gonna assume that we're working\
    \ with 64 bit numbers\n        string ret = \"db\";\n        for (int i = 0; i\
    \ < 64; i++) {\n            long q = decimalNum >> i;\n            if (q % 2 ==\
    \ 1)\n                ret += \"1\";\n            else\n                ret +=\
    \ \"0\";\n        }\n        ret += \"db\";\n        return ret;", "        var\
    \ binaryString = \"\";\n        binaryString += \"db\";\n        while (decimalNum\
    \ != 0) {\n            if (decimalNum % 2 == 0) {\n                binaryString\
    \ += \"0\";\n            } else {\n                binaryString += \"1\";\n  \
    \          }\n            decimalNum /= 2;\n        }\n        binaryString +=\
    \ \"db\";\n        return binaryString;", '        return "db" + Convert.ToString(decimalNum,
    2) + "db";', "        string result = \"db\";\n        while (decimalNum > 0)\
    \ {\n            result += (decimalNum % 2).ToString();\n            decimalNum\
    \ /= 2;\n        }\n        result += \"db\";\n        return new string(result.Reverse().ToArray());",
  "        // Convert the decimal number to a string in base 2\n        string binaryNum\
    \ = Convert.ToString(decimalNum, 2);\n        // add extra characters and return\
    \ result\n        return \"db\" + binaryNum + \"db\";", "        string str =\
    \ \"\";\n        while (decimalNum > 0) {\n            int num = (int)(decimalNum\
    \ % 2);\n            decimalNum /= 2;\n            str = num + str;\n        }\n\
    \        return \"db\" + str + \"db\";", "        string binary = Convert.ToString(decimalNum,\
    \ 2);\n        string result = \"db\" + binary + \"db\";\n        return result;",
  "        // define db string for the binary string\n        var db = \"db\";\n \
    \       // define the string builder for the binary string\n        var binaryString\
    \ = new StringBuilder();\n        // iterate from number, dividing by 2 and adding\
    \ a character to the string\n        // builder until it reaches 0\n        for\
    \ (var number = decimalNum; number > 0; number /= 2) {\n            binaryString.Insert(0,\
    \ (number % 2).ToString());\n        }\n        // if the length of the binary\
    \ string is 0, add the first character to\n        // the string builder\n   \
    \     if (binaryString.Length == 0) {\n            binaryString.Append(0);\n \
    \       }\n        // return the string builder with the db strings at the beginning\
    \ and the end\n        return db + binaryString.ToString() + db;", "        var\
    \ binaryNum = Convert.ToString(decimalNum, 2);\n        return String.Format(\"\
    db{0}db\", binaryNum);", "        string binaryNum = \"\";\n        while (decimalNum\
    \ > 0) {\n            binaryNum = Convert.ToString(decimalNum % 2) + binaryNum;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binaryNum +\
    \ \"db\";", '        return "db" + Convert.ToString(decimalNum, 2) + "db";', " \
    \       if (decimalNum == 0) return \"db0db\";\n        string binaryStr = \"\"\
    ;\n        for (long i = 1L << 62; i > 0; i >>= 1)\n            binaryStr += (decimalNum\
    \ & i) != 0 ? \"1\" : \"0\";\n        return \"db\" + binaryStr.Trim('0') + \"\
    db\";", '        return Convert.ToString(decimalNum, 2);', "        var db = \"\
    db\";\n        var binary = \"\";\n        while (decimalNum > 0) {\n        \
    \    if (decimalNum % 2 == 0) {\n                binary = \"0\" + binary;\n  \
    \          } else {\n                binary = \"1\" + binary;\n            }\n\
    \            decimalNum /= 2;\n        }\n        return db + binary + db;", '        return
    "db" + Convert.ToString(decimalNum, 2) + "db";', "        // You have to finish\
    \ the implementation below.\n        // You may assume (or use) the following:\n\
    \        //     * The input number is always a non-negative integer.\n       \
    \ //     * The output is never an empty string.\n        //     * The output is\
    \ guaranteed to be binary representation of the input number.\n        // (You\
    \ may ignore the following tests in your implementation:\n        //   negative,\
    \ zero, unit tests for the second sample)\n        // You can use \"return \"\
    db\" + \"010101\" + \"db\";\" as a sample implementation that passes\n       \
    \ // most of the tests.\n        // You may add your own helper functions or classes\
    \ if you wish.\n        return \"db\" + Convert.ToString(decimalNum, 2) + \"db\"\
    ;", '        return "db" + Convert.ToString(decimalNum, 2) + "db";', "       \
    \ // Converts a decimal number to binary format.\n        // \"db\" are included\
    \ at the beginning and end of the string.\n        // Example:\n        // >>>\
    \ DecimalToBinary((15L))\n        // \"db1111db\"\n        // >>> DecimalToBinary((32L))\n\
    \        // \"db100000db\"\n        string binaryString = \"db\";\n        while\
    \ (decimalNum > 0) {\n            if (decimalNum % 2 == 0) {\n               \
    \ binaryString += \"0\";\n            } else {\n                binaryString +=\
    \ \"1\";\n            }\n            decimalNum /= 2;\n        }\n        string\
    \ result = \"\";\n        for (int i = binaryString.Length - 1; i >= 0; i--) {\n\
    \            result += binaryString[i];\n        }\n        result += \"db\";\n\
    \        return result;", '        return null;', '        return "db" + Convert.ToString(decimalNum,
    2) + "db";', "        string binary = Convert.ToString(decimalNum, 2);\n     \
    \   // Add those 'db' characters.\n        return \"db\" + binary + \"db\";",
  "        string binaryNum = \"\";\n        while (decimalNum != 0) {\n         \
    \   binaryNum = (decimalNum % 2) + binaryNum;\n            decimalNum /= 2;\n\
    \        }\n        return \"db\" + binaryNum + \"db\";", "        // Convert\
    \ your decimal number to binary format.\n        // Each character of the string\
    \ will be either a '0' or a '1'.\n        // Your function should include characters\
    \ 'db' at the beginning and end of the string.\n        // Examples:\n       \
    \ // >>> DecimalToBinary((15L))\n        // (\"db1111db\")\n        // >>> DecimalToBinary((32L))\n\
    \        // (\"db100000db\")\n        // HINT: Consider the algorithm for binary\
    \ conversion, the method BitCount,\n        // and the property BitLength of the\
    \ BigInteger class.\n        BigInteger bi = new BigInteger(decimalNum);\n   \
    \     int length = bi.BitLength;\n        string res = \"db\";\n        while\
    \ (length-- > 0) {\n            res += bi % 2;\n            bi /= 2;\n       \
    \ }\n        return res + \"db\";", "        string output = \"db\";\n       \
    \ var number = Convert.ToString(decimalNum, 2);\n        output += number;\n \
    \       output += \"db\";\n        return output;", "        string binary = Convert.ToString(decimalNum,\
    \ 2);\n        return \"db\" + binary + \"db\";", "        // Your code here.\n\
    \        return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";", '        return
    "db" + Convert.ToString(decimalNum, 2) + "db";', "        string db = \"db\";\n\
    \        string bin = Convert.ToString(decimalNum, 2);\n        return db + bin\
    \ + db;", "        string Binary = string.Empty;\n        while (decimalNum >\
    \ 0) {\n            long remainder = decimalNum % 2;\n            decimalNum /=\
    \ 2;\n            Binary = remainder.ToString() + Binary;\n        }\n       \
    \ return \"db\" + Binary + \"db\";", "        var r = \"\";\n        var m = decimalNum;\n\
    \        while (m > 0) {\n            r = (m & 1).ToString() + r;\n          \
    \  m >>= 1;\n        }\n        r = (\"db\" + r + \"db\");\n        return r;",
  "        // long to binary\n        string binaryNum = Convert.ToString(decimalNum,\
    \ 2);\n        // binary to string\n        string s = \"db\" + binaryNum + \"\
    db\";\n        return s;", "        // Grab the binary representation and trim\
    \ the \"0b\" off the front.\n        string binary = Convert.ToString(decimalNum,\
    \ 2);\n        binary = binary.Substring(2);\n        // Create a new string that\
    \ has the extra \"db\" on the front and back.\n        string result = \"db\"\
    \ + binary + \"db\";\n        return result;", "        string binary = \"\";\n\
    \        // (1L << 0) = 0001, (1L << 1) = 0010, ..., (1L << 62) = 1 << 63 = Long.MinValue\n\
    \        // 1L << 63 = Long.MinValue\n        // so 64 bits total\n        for\
    \ (int i = 63; i >= 0; i--) {\n            long mask = 1L << i;\n            if\
    \ ((decimalNum & mask) == mask) {\n                binary += \"1\";\n        \
    \    } else {\n                binary += \"0\";\n            }\n        }\n  \
    \      return \"db\" + binary + \"db\";", '        return "db" + Convert.ToString(decimalNum,
    2) + "db";', "        StringBuilder binaryStr = new StringBuilder();\n       \
    \ binaryStr.Append(\"db\");\n        while (decimalNum > 0) {\n            long\
    \ digit = decimalNum % 2;\n            binaryStr.Append(digit);\n            decimalNum\
    \ /= 2;\n        }\n        binaryStr.Append(\"db\");\n        binaryStr.Reverse();\n\
    \        return binaryStr.ToString();", "        // Your code here\n        string\
    \ b = \"\";\n        while (decimalNum > 0) {\n            if (decimalNum % 2\
    \ == 0) {\n                b = \"0\" + b;\n            } else {\n            \
    \    b = \"1\" + b;\n            }\n            decimalNum /= 2;\n        }\n\
    \        return \"db\" + b + \"db\";", '        return string.Concat("db", Convert.ToString(decimalNum,
    2), "db");', "        // Try to solve the problem by yourself!\n        // Read\
    \ about binary numbers!\n        var binary = new StringBuilder();\n        var\
    \ number = decimalNum;\n        binary.Append(\"db\");\n        while (number\
    \ > 0) {\n            var remainder = number % 2;\n            number /= 2;\n\
    \            binary.Append(remainder);\n        }\n        binary.Append(\"db\"\
    );\n        return new string(binary.ToString().Reverse().ToArray());", "    \
    \    string binary = \"\";\n        for (int i = 5; i >= 0; i--) {\n         \
    \   long temp = (long)Math.Pow(2, i);\n            if (decimalNum - temp >= 0)\
    \ {\n                binary += \"1\";\n                decimalNum -= temp;\n \
    \           } else {\n                binary += \"0\";\n            }\n      \
    \  }\n        return \"db\" + binary + \"db\";", '        return "db" + Convert.ToString(decimalNum,
    2) + "db";', '        return "db" + Convert.ToString(decimalNum, 2) + "db";',
  '        return "db" + Convert.ToString(decimalNum, 2) + "db";', '        return
    "db" + Convert.ToString(decimalNum, 2) + "db";', "        var base2 = \"\";\n\
    \        base2 += \"db\";\n        while (decimalNum != 0) {\n            base2\
    \ += decimalNum % 2;\n            decimalNum /= 2;\n        }\n        if (base2.Length\
    \ == 2)\n            base2 += \"0\";\n        base2 += \"db\";\n        return\
    \ new string(base2.Reverse().ToArray());", "        // Your code goes here\n \
    \       return \"\";", '        return "db" + Convert.ToString(decimalNum, 2)
    + "db";', '        return $"db{Convert.ToString(decimalNum, 2)}db";', '        return
    "db" + Convert.ToString(decimalNum, 2) + "db";', '        return Convert.ToString(decimalNum,
    2);', "        var binaryNum = string.Empty;\n        while (decimalNum > 0) {\n\
    \            var remainder = decimalNum % 2;\n            decimalNum /= 2;\n \
    \           binaryNum = remainder + binaryNum;\n        }\n        return \"db\"\
    \ + binaryNum + \"db\";", '        return "";', "        // your code here\n \
    \       char[] binary = new char[64];\n        int i = 0;\n        while (decimalNum\
    \ > 0) {\n            binary[i] = ((decimalNum & 1) == 1) ? '1' : '0';\n     \
    \       decimalNum >>= 1;\n            i++;\n        }\n        string result\
    \ = new string(binary);\n        return \"db\" + result.TrimEnd('0') + \"db\";",
  "        string binary = \"\";\n        string digits = \"01\";\n        while (decimalNum\
    \ > 0) {\n            int rem = (int)(decimalNum % 2);\n            binary = digits[rem]\
    \ + binary;\n            decimalNum /= 2;\n        }\n        return \"db\" +\
    \ binary + \"db\";", "        string binaryNum = \"\";\n        // get the number\
    \ of bits\n        int bits = GetNumberOfBits(decimalNum);\n        // loop through\
    \ the bits\n        for (int i = bits - 1; i >= 0; i--) {\n            // get\
    \ the value of the bit at position i\n            // the right bit shift operator\
    \ shifts the bits of an integer value to the right\n            // by the specified\
    \ number of positions\n            // the & operator takes bits that are both\
    \ 1 from each of the numbers\n            // the binary equivalent of i = 3 is\
    \ 11, which is also the binary equivalent of 7, which is 111\n            // if\
    \ we shift that number by 3, it will still be the same (11), then the & operator\
    \ will yield a 1\n            // but if we shift the number by 5, it will become\
    \ 110, the & operator will yield a 0\n            // 1111 & 0001 = 0001\n    \
    \        // 1111 & 0010 = 0010\n            // 1111 & 0100 = 0100\n          \
    \  // 1111 & 1000 = 1000\n            // long bitValue = decimalNum & (long)Math.Pow(2,\
    \ i);\n            long bitValue = decimalNum & (long)1 << i;\n            //\
    \ if bitValue is greater than 0, it means the value at position i is 1, so add\
    \ 1 to the string\n            // if bitValue is 0, the value at position i is\
    \ 0, so add 0 to the string\n            binaryNum += bitValue > 0 ? \"1\" : \"\
    0\";\n        }\n        // append the db at the beginning and at the end\n  \
    \      return \"db\" + binaryNum + \"db\";", '        return "";', "        //\
    \ convert the integer to a binary string\n        string binaryString = Convert.ToString(decimalNum,\
    \ 2);\n        // return the string with 'db' surrounding it\n        return \"\
    db\" + binaryString + \"db\";", "        // Convert the given decimal number to\
    \ a string in binary format\n        var binary = Convert.ToString(decimalNum,\
    \ 2);\n        // Add the extra characters at the beginning and at the end\n \
    \       var binary2 = string.Format(\"db{0}db\", binary);\n        return binary2;",
  '        return "db" + Convert.ToString(decimalNum, 2) + "db";', "        string\
    \ bin = Convert.ToString(decimalNum, 2);\n        return \"db\" + bin + \"db\"\
    ;", "        ////////////////////////////////////////////////////////////////////\n\
    \        /////////////// DO NOT MODIFY THIS FUNCTION ///////////////////////\n\
    \        ////////////////////////////////////////////////////////////////////\n\
    \        string binaryStr = \"\";\n        while (decimalNum > 0) {\n        \
    \    binaryStr = ((decimalNum % 2 == 0) ? \"0\" : \"1\") + binaryStr;\n      \
    \      decimalNum /= 2;\n        }\n        return \"db\" + binaryStr + \"db\"\
    ;", "        // Not my code... but I'm keeping it for future reference\n     \
    \   // Also, I'm not happy that the extra characters are hardcoded\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";", "        string binaryNum\
    \ = \"\";\n        while (decimalNum > 0) {\n            binaryNum = Convert.ToString(decimalNum\
    \ % 2) + binaryNum;\n            decimalNum /= 2;\n        }\n        return (\"\
    db\" + binaryNum + \"db\");", "        // Find the largest power of 2 which is\
    \ smaller than decimalNum\n        // and subtract from decimalNum, until decimalNum\
    \ reaches 0.\n        // Each time, the power of 2 will be added to the binary\
    \ representation.\n        var binaryRep = new StringBuilder();\n        var maxPower\
    \ = 1L;\n        var num = decimalNum;\n        while (num > 0) {\n          \
    \  // Find the largest power of 2 which is smaller than num\n            while\
    \ (maxPower <= num) {\n                maxPower <<= 1;\n            }\n      \
    \      // Add the maximum power to the binary representation\n            binaryRep.Append('1');\n\
    \            // Subtract the maximum power from the number\n            num -=\
    \ maxPower >> 1;\n            // Decrease the maximum power by half, so that it\
    \ is less than num.\n            maxPower >>= 1;\n            // Add a 0 if the\
    \ maximum power is greater than 0\n            if (maxPower > 0) {\n         \
    \       binaryRep.Append('0');\n            }\n        }\n        // Pad the binary\
    \ representation with zeros to 8 characters\n        while (binaryRep.Length <\
    \ 8) {\n            binaryRep.Append('0');\n        }\n        return \"db\" +\
    \ binaryRep.ToString() + \"db\";", "        if (decimalNum == 0) {\n         \
    \   return \"db0db\";\n        }\n        string binaryNum = \"\";\n        for\
    \ (long i = decimalNum; i > 0; i = i / 2) {\n            long remainder = i %\
    \ 2;\n            binaryNum = remainder.ToString() + binaryNum;\n        }\n \
    \       return \"db\" + binaryNum + \"db\";", '        return "db" + Convert.ToString(decimalNum,
    2) + "db";', "        int bitLength = (int)Math.Log(decimalNum, 2) + 1;\n    \
    \    string binaryNum = \"db\";\n        for (int i = 0; i < bitLength; i++) {\n\
    \            binaryNum += ((decimalNum >> i) & 1);\n        }\n        binaryNum\
    \ += \"db\";\n        return binaryNum;", '        return "db" + Convert.ToString(decimalNum,
    2) + "db";', "        var binString = Convert.ToString(decimalNum, 2);\n     \
    \   return \"db\" + binString + \"db\";", "        // your code here\n       \
    \ return \"\";", "        // fill in\n        return \"\";", "        string ret\
    \ = \"db\";\n        while (decimalNum > 0) {\n            ret = (decimalNum %\
    \ 2).ToString() + ret;\n            decimalNum /= 2;\n        }\n        return\
    \ ret + \"db\";", '        return "db" + Convert.ToString(decimalNum, 2) + "db";',
  '        return "db" + Convert.ToString(decimalNum, 2) + "db";', "        var result\
    \ = Convert.ToString(decimalNum, 2);\n        return (\"db\" + result + \"db\"\
    );", '        return "";', "        return new string('1', 1) + Convert.ToString(decimalNum,\
    \ 2) + new string('0', 1);", '        return "db" + Convert.ToString(decimalNum,
    2) + "db";', "        string result = \"db\";\n        while (decimalNum > 0)\
    \ {\n            long remainder = decimalNum % 2;\n            result = remainder.ToString()\
    \ + result;\n            decimalNum /= 2;\n        }\n        result += \"db\"\
    ;\n        return result;"]
stop_tokens:
- "\n    }\n"
