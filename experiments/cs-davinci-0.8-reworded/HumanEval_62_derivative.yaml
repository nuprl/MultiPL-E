name: HumanEval_62_derivative
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1]\
  \ * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
  \ form.\n    // >>> Derivative((new List<long>(new long[]{(long)3L, (long)1L, (long)2L,\
  \ (long)4L, (long)5L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L,\
  \ (long)12L, (long)20L}))\n    // >>> Derivative((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)6L}))\n\
  \    public static List<long> Derivative(List<long> xs) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Derivative((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)12L, (long)20L}))));\n    Debug.Assert(Derivative((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)6L}))));\n    Debug.Assert(Derivative((new List<long>(new\
  \ long[]{(long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)2L}))));\n    Debug.Assert(Derivative((new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)1L, (long)0L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)0L, (long)16L}))));\n    Debug.Assert(Derivative((new List<long>(new\
  \ long[]{(long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        var i = (long)1L;\n        var n = (long)xs.Count();\n    \
    \    var res = new List<long>();\n        while (i < n)\n        {\n         \
    \   res.Add(xs[(int)(i)] * i);\n            i++;\n        }\n\n        return\
    \ res;\n", "        var i = 1L;\n        var dxs = new List<long>();\n       \
    \ while (i < len(xs))\n        {\n            dxs.Add(xs[i] * i);\n          \
    \  i++;\n        }\n        return dxs;\n", "        var ans = new List<long>();\n\
    \        for (long i = (long)1L; i < (long)len(xs); i++)\n        {\n        \
    \    ans.append(xs[i] * i);\n        }\n\n        return ans;\n", "        List<long>\
    \ ys = new List<long>();\n        long x = 1L;\n        foreach (var _ in xs)\
    \ {\n            if (x > 1L) {\n                ys.Add(x * _);\n            }\n\
    \n            x++;\n\n        }\n        return ys;\n", "        List<long> result\
    \ = new List<long>();\n        for (long i = (long)1L; i < (long)xs.Count(); i++)\
    \ {\n            result.Add(xs[(int)(i)] * i);\n        }\n\n        return result;\n",
  "        var result = new List<long>();\n        for (var i = 1L; i < (long)xs.Count;\
    \ i++) {\n            result.Add(xs[(int)(i)] * i);\n        }\n\n        return\
    \ result;\n", "        var result = new List<long>();\n        long i = 1L;\n\
    \        while (i < (long)xs.Count) {\n            result.Add(xs[(int)(i)] * i);\n\
    \            i = i + 1L;\n        }\n        return result;", "        var ns\
    \ = new List<long>();\n        for (long i = 1L; i < len(xs); i++) {\n       \
    \     var item = xs[i] * i;\n            ns.Add(item);\n        }\n\n        return\
    \ ns;\n", "        List<long> res = new List<long>();\n        for (long i = (long)1L;\
    \ i < len(xs); i++)\n        {\n            res.append(xs[i] * i);\n        }\n\
    \n        return res;\n", "        List<long> ys = new List<long>();\n       \
    \ long x = (long)0L;\n        long __i = (long)0L;\n        long __y = (long)0L;\n\
    \        var __forEndVar0 = len(xs) - 1L;\n        for (__i = (long)1L; __i <=\
    \ __forEndVar0; __i++)\n        {\n            {\n                x = xs[__i];\n\
    \                ys.append(x * __i);\n            }\n        }\n\n        return\
    \ ys;\n", "        long n = (long)xs.Count;\n        var rs = new List<long>();\n\
    \        for (long i = (long)1L; i < n; i++)\n        {\n            rs.Add(xs[(int)(i)]\
    \ * i);\n        }\n        return rs;\n", "        var rs = new List<long>();\n\
    \        for (long i = (long)1L; i < (long)len(xs); i++)\n        {\n        \
    \    rs.Add(xs[i] * i);\n        }\n\n        return rs;\n", "        var n =\
    \ len(xs);\n        var res = new List<long>();\n        var i = (long)1L;\n \
    \       while (i < n)\n        {\n            res.Add(xs[i] * i);\n          \
    \  i++;\n        }\n\n        return res;\n", "        var n = (long)xs.Count();\n\
    \        var ans = new List<long>();\n        {\n            var i__prev1 = i;\n\
    \n            for (var i = (long)1L; i < n; i++)\n            {\n            \
    \    ans.Add(xs[i] * i);\n            }\n\n\n            i = i__prev1;\n     \
    \   }\n        return ans;\n", "        List<long> xs1 = new List<long>();\n \
    \       for (long i = 1L; i < (long)xs.Count; i++) {\n            xs1.Add(xs[(int)i]\
    \ * i);\n        }\n        return xs1;", "        var ret = new List<long>();\n\
    \        var n = len(xs);\n        var i = 1L;\n        while (i < n) {\n    \
    \        ret.Add(xs[(int)(i)] * i);\n            i = i + 1L;\n        }\n\n  \
    \      return ret;\n", "        List<long> ans = new List<long>();\n        var\
    \ n = len(xs);\n        for (var i = (long)1L; i < n; i++)\n        {\n      \
    \      ans.Add(xs[i] * i);\n        }\n\n        return ans;\n", "        long\
    \ n = (long)xs.Count;\n        long i = 0L;\n        var ret = new List<long>();\n\
    \        for (i = 0L; i < n - 1L; i++) {\n            ret.Add(xs[(int)(i + 1L)]\
    \ * (i + 1L));\n        }\n\n        return ret;\n", "        List<long> result\
    \ = new List<long>();\n        for (long i = 1L; i < (long)xs.Count; i++) {\n\
    \            long d = i * xs[(int)i];\n            result.Add(d);\n        }\n\
    \        return result;", "        if ((xs.Count == 0L)) {\n            return\
    \ xs;\n        }\n\n        return xs.Skip(1L).Select((_p0, _p1) => (long)_p1\
    \ * _p0).ToList();\n", "        List<long> res = new List<long>();\n        for\
    \ (long i = (long)1L; i < len(xs); i++)\n        {\n            res.Add(xs[i]\
    \ * i);\n        }\n\n        return res;\n", "        long len = (long)xs.Count();\n\
    \        var ys = new List<long>();\n        long i = (long)1L;\n        while\
    \ (i < len)\n        {\n            ys.Add(xs[(int)(i)] * i);\n            i =\
    \ i + (long)1L;\n        }\n\n        return ys;\n", "        List<long> res =\
    \ new List<long>();\n        for (long j = 1L; j < xs.Count; j++) {\n        \
    \    res.Add(xs[j] * j);\n        }\n\n        return res;\n", "        var len\
    \ = xs.Count;\n        var rs = new List<long>();\n        for (var i = 0; i <\
    \ len - 1; i++) {\n            rs.Add(xs[i] * (len - 1 - i));\n        }\n   \
    \     return rs;", "        var result = new List<long>();\n        for (var i\
    \ = 1L; i < (long)xs.Count; i++) {\n            result.Add(xs[(int)(i)] * i);\n\
    \        }\n\n        return result;\n", "        List<long> r = new List<long>();\n\
    \        long c = (long)0L;\n        for (long i = (long)1L; i < len(xs); i++)\n\
    \        {\n            c = c + i * xs[i];\n            r.append(c);\n       \
    \ }\n\n        return r;\n", "        List<long> ans = new List<long>();\n   \
    \     for (long i = 1L; i < (long)xs.Count; i++) {\n            ans.Add(xs[(int)i]\
    \ * i);\n        }\n\n        return ans;\n", "        var n = xs.Count;\n   \
    \     var n1 = n - 1L;\n        var newxs = new List<long>();\n        for (long\
    \ i = 1L; i < n; i++) {\n            newxs.Add(xs[i] * i);\n        }\n      \
    \  return newxs;\n", '        return xs.Skip(1).Select((__arg1, __arg2) => (__arg1
    * (__arg2 + 1L))).ToList();', "        var rs = new List<long>();\n        for\
    \ (var i = (long)1L; i < xs.Count; i++) {\n            rs.Add(xs[(int)(i)] * i);\n\
    \        }\n\n        return rs;\n", "        List<long> xs__prev1 = xs;\n\n \
    \       List<long> result = new List<long>();\n        xs = xs__prev1;\n\n   \
    \     for (long i = 1L; i < (long)xs.Count; i++)\n        {\n            result.Add(i\
    \ * xs[(int)i]);\n        }\n\n        return result;\n", "        var ans = new\
    \ List<long>();\n        for (long i = 1L; i < (long)xs.Count; i++) {\n      \
    \      ans.Add(xs[(int)(i)] * i);\n        }\n\n        return ans;\n", "    \
    \    long len = (long)xs.Count;\n        if (len == 0L) {\n            return\
    \ new List<long>();\n        }\n\n        var ys = new List<long>();\n       \
    \ for (long i = 1L; i < len; i++) {\n            ys.Add(xs[(int)(i)] * i);\n \
    \       }\n        return ys;\n", "        long n = (long)xs.Count();\n      \
    \  var res = new List<long>();\n        for (long i = (long)1L; i < n; i++)\n\
    \        {\n            res.Add(xs[(int)(i)] * i);\n        }\n\n        return\
    \ res;\n", "        var t = new List<long>();\n        for (long i = (long)1L;\
    \ i < len(xs); i++)\n        {\n            t.Add(i * xs[i]);\n        }\n   \
    \     return t;\n", "        var res = new List<long>();\n        for (int i =\
    \ 1; i < xs.Count; i++) {\n            res.Add(xs[i] * i);\n        }\n      \
    \  return res;", "        List<long> newList = new List<long>();\n        long\
    \ x = 0L;\n        long i = 1L;\n        foreach (var x0 in xs) {\n          \
    \  if (i == 1L) {\n                x = x0;\n            } else {\n           \
    \     newList.Add(i * x0);\n            }\n            i++;\n        }\n     \
    \   return newList;", "        var ys = xs.Skip(1).ToList();\n        for (var\
    \ i = 0; i < ys.Count; i++) {\n            ys[i] *= (i + 1);\n        }\n    \
    \    return ys;", "        List<long> dxs = new List<long>();\n        long i\
    \ = (long)1L;\n        while (i < (long)len(xs))\n        {\n            dxs.append(xs[i]\
    \ * i);\n            i = i + (long)1L;\n        }\n\n        return dxs;\n", " \
    \       List<long> ys = new List<long>();\n        for (int i = 1; i < (int)xs.Count;\
    \ i++) {\n            ys.Add(xs[i] * i);\n        }\n        return ys;", '        return
    new List<long>(xs.Skip(1).Select((x, y) => (x * (y + 1L))));', '        return
    Enumerable.Range(1L, xs.Count - 1L).Select(__lambda2 => __lambda2 * xs[__lambda2]).ToList();',
  "        List<long> deriv = new List<long>();\n        for (int i = 1; i < len(xs);\
    \ i++) {\n            deriv.Add(xs[i] * i);\n        }\n\n        return deriv;\n",
  "        long n = (long)xs.Count();\n        if (n <= (long)1L)\n        {\n   \
    \         return (new List<long>(new long[] { (long)0L }));\n        }\n\n   \
    \     return xs.Select((_p0, _p1) => (long)_p1).Select<long, long>((long i) =>\
    \ i * xs[(int)i]).Skip(1).ToList();\n", "        List<long> ret = new List<long>();\n\
    \        long exponent = 1L;\n        long sum = 0L;\n        foreach (var x in\
    \ xs) {\n            sum += exponent * x;\n            exponent++;\n        }\n\
    \        return ret;", "        var result = new List<long>();\n        for (long\
    \ i = (long)1L; i < len(xs); i++)\n        {\n            result.Add(xs[i] * i);\n\
    \        }\n\n        return result;\n", "        Debug.Assert(xs.Count > (long)0L);\n\
    \        var c = new List<long>();\n        for (long i = (long)1L; i < len(xs);\
    \ i++)\n        {\n            c.Add(xs[i] * i);\n        }\n\n        return\
    \ c;\n", "        var ans = new List<long>();\n        for (long i = 1L; i < (long)xs.Count;\
    \ i++) {\n            ans.Add(xs[(int)(i)] * i);\n        }\n\n        return\
    \ ans;\n", '        return xs.Take(xs.Count - 1L).Select((_p0, _p1) => (long)_p1
    * _p0).ToList();', "        var us = new List<long>();\n        for (var i = 1L;\
    \ i < (long)xs.Count; i++) {\n            us.Add(xs[(int)(i)] * i);\n        }\n\
    \        return us;", "        var ys = new List<long>();\n        long j = 1L;\n\
    \        foreach (var x in xs) {\n            if (j >= 2L) {\n               \
    \ ys.Add(j * x);\n            }\n            j++;\n        }\n        return ys;",
  "        List<long> result = new List<long>();\n        long i = (long)1L;\n   \
    \     while (i < len(xs))\n        {\n            result.append(xs[i] * i);\n\
    \            i++;\n        }\n\n        return result;\n", "        List<long>\
    \ ns = new List<long>();\n        var i = (long)1L;\n        while (i < len(xs))\n\
    \        {\n            ns.Add(xs[i] * i);\n            i++;\n        }\n    \
    \    return ns;\n", "        var a = new List<long>();\n        var b = new List<long>();\n\
    \        foreach (var (i, x) in xs.Select((x, i) => (i, x))) {\n            if\
    \ (i > 0L) {\n                a.Add(i * x);\n            }\n\n        }\n    \
    \    return a;\n", "        var ret = new List<long>();\n        foreach (var\
    \ i in Enumerable.Range(1L, xs.Count - 1L)) {\n            ret.Add(xs[i] * i);\n\
    \        }\n        return ret;", "        var f = new List<long>();\n       \
    \ for (var i = (long)1L; i < xs.Count; i++) {\n            f.Add(xs[(int)(i)]\
    \ * i);\n        }\n\n        return f;\n", "        var ans = new List<long>();\n\
    \        var n = xs.Count;\n        for (var i = 1L; i < n; i++) {\n         \
    \   ans.Add(xs[(int)(i)] * i);\n        }\n        return ans;\n", "        var\
    \ n = len(xs);\n        var ans = new List<long>();\n        {\n            var\
    \ i__prev1 = i;\n\n            for (var i = 1L; i < n; i++)\n            {\n \
    \               ans.Add(xs[i] * i);\n            }\n\n\n            i = i__prev1;\n\
    \        }\n        return ans;\n", "        long[] ys = new long[xs.Count - 1];\n\
    \        long n = 0L;\n        foreach (var x in xs) {\n            if (n > 0L)\
    \ {\n                ys[n - 1L] = n * x;\n            }\n\n            n++;\n\
    \        }\n        return ys.ToList();\n", "        var ys = new List<long>();\n\
    \        for (var i = 1L; i < (long)xs.Count; i++) {\n            ys.Add(xs[(int)(i)]\
    \ * i);\n        }\n\n        return ys;\n", '        return xs.Skip(1).Select((x,
    i) => (long)(i + 1L) * x).ToList();', '        return Enumerable.Range(1L, xs.Count
    - 1L).Select((__, _) => (xs[_] * _)).ToList();', "        List<long> ys = new\
    \ List<long>();\n        long i = (long)1L;\n        while (i < xs.Count)\n  \
    \      {\n            ys.Add(xs[(int)(i)] * i);\n            i = i + (long)1L;\n\
    \        }\n\n        return ys;\n", "        var n = len(xs);\n        if (n\
    \ == 0L)\n        {\n            return new List<long>();\n        }\n\n     \
    \   var ys = make_slice<long>(n - 1L);\n        {\n            long i__prev1 =\
    \ i;\n\n            for (long i = 0L; i < n - 1L; i++)\n            {\n      \
    \          ys[i] = (i + 1L) * xs[i + 1L];\n            }\n\n\n            i =\
    \ i__prev1;\n        }\n        return ys;\n", "        var _ = new List<long>();\n\
    \        for (var i = 1L; i < len(xs); i++) {\n            _.Add(xs[i] * i);\n\
    \        }\n        return _;", "        List<long> res = new List<long>();\n\
    \        for (int i = 1; i < xs.Count; i++) {\n            res.Add(xs[i] * i);\n\
    \        }\n        return res;", "        var i = 1L;\n        var ret = new\
    \ List<long>();\n        while (i < (long)xs.Count) {\n            ret.Add(xs[(int)(i)]\
    \ * i);\n            i++;\n        }\n\n        return ret;\n", "        var rs\
    \ = new List<long>();\n        long i = (long)1L;\n        foreach (var x__prev1\
    \ in xs)\n        {\n            var x = x__prev1;\n            if (i == (long)xs.Count\
    \ - 1L)\n            {\n                break;\n            }\n\n            rs.Add(i\
    \ * x);\n            i++;\n\n        }\n        return rs;\n", "        var ys\
    \ = new List<long>();\n        for (long i = (long)1L; i < xs.Count; i++)\n  \
    \      {\n            ys.Add(xs[i] * i);\n        }\n\n        return ys;\n",
  "        if (xs.Count == 0L) {\n            return new List<long>();\n        }\n\
    \n        if (xs.Count == 1L) {\n            return new List<long> { (long)0L\
    \ };\n        }\n\n        return new List<long>((new List<long>(xs)).Skip(1L).Select((x,\
    \ i) => (long)((i + 1L) * x)));\n", "        List<long> result = new List<long>();\n\
    \        for (int i = 1; i < xs.Count; i++) {\n            result.Add(xs[i] *\
    \ i);\n        }\n        return result;", "        List<long> ret = new List<long>();\n\
    \        for (long i = (long)1L; i < (long)len(xs); i++) {\n            ret.append(xs[i]\
    \ * i);\n        }\n\n        return ret;\n", "        var res = new List<long>();\n\
    \        {\n            var i__prev1 = i;\n\n            for (var i = 1L; i <\
    \ len(xs); i++) {\n                res.Add(xs[i] * i);\n            }\n\n\n  \
    \          i = i__prev1;\n        }\n        return res;\n", "        var res\
    \ = new List<long>();\n        var len = xs.Count;\n        for (var i = 1L; i\
    \ < len; i++) {\n            res.Add(xs[(int)(i)] * i);\n        }\n        return\
    \ res;", "        List<long> ans = new List<long>();\n        long n = (long)xs.Count;\n\
    \        long i = (long)1L;\n        while (i < n)\n        {\n            ans.Add(xs[(int)(i)]\
    \ * i);\n            i = i + (long)1L;\n        }\n\n        return ans;\n", '        return
    xs.Skip(1).Select((x, i) => x * (i + 1)).ToList();', "        var ys = new List<long>();\n\
    \        for (var i = 1L; i < (long)xs.Count; i++) {\n            ys.Add(xs[(int)(i)]\
    \ * i);\n        }\n\n        return ys;\n", "        var xs__1 = new List<long>();\n\
    \        {\n            var i__2 = 1L;\n            while (true) {\n         \
    \       var i = i__2;\n                if (!(i < len(xs))) {\n               \
    \     break;\n                }\n                xs__1.append(xs[(int)(i)] * i);\n\
    \                i__2 += 1L;\n            }\n        }\n        return xs__1;\n",
  "        var ans = new List<long>();\n        var n = xs.Count;\n        long i\
    \ = 1L;\n        while (i < n)\n        {\n            ans.Add(xs[(int)i] * i);\n\
    \            i++;\n        }\n        return ans;\n", "        var ys = new List<long>();\n\
    \        var ys1 = new List<long>();\n        ys.Add(0L);\n        ys1.Add(0L);\n\
    \        var i = 1L;\n        while (i < xs.Count) {\n            ys1.Add(xs[(int)i]);\n\
    \            ys.Add(i * xs[(int)i]);\n            i = i + 1L;\n        }\n   \
    \     return ys;", '        return xs.Skip(1).Select((_p0, _p1) => (long)(_p1
    + 1L)).ToList();', "        if (xs.Count < 2L) {\n            return new List<long>();\n\
    \        }\n\n        List<long> dxs = new List<long>();\n        long n = (long)1L;\n\
    \        foreach (var x__prev1 in xs)\n        {\n            var x = x__prev1;\n\
    \            {\n                if (n > 1L)\n                {\n             \
    \       dxs.Add(n * x);\n                }\n\n                n++;\n\n       \
    \     }\n        }\n        return dxs;\n", "        if (xs.Count == 0L) {\n \
    \           return new List<long>();\n        }\n\n        if (xs.Count == 1L)\
    \ {\n            return new List<long>()\n            {\n                (long)0L\n\
    \            }\n\n            ;\n        }\n\n        var n = len(xs);\n     \
    \   var ys = make_slice<long>(n - 1L);\n        var k = (long)1L;\n        foreach\
    \ (var (__i) in ys)\n        {\n            i = __i;\n            ys[i] = xs[i\
    \ + 1L] * k;\n            k = k + 1L;\n        }\n        return ys;\n", "   \
    \     var ns = new List<long>();\n        var n = xs.Count;\n        for (var\
    \ i = 1L; i < n; i++) {\n            var x = xs[(int)i];\n            var j =\
    \ i - 1L;\n            var y = x * j;\n            ns.Add(y);\n        }\n\n \
    \       return ns;\n", "        List<long> ys = new List<long>();\n        {\n\
    \            var i__prev1 = i;\n\n            var i = 1L;\n\n            while\
    \ (i < len(xs))\n            {\n                var (y, ok) = checked.MulInt(i,\
    \ xs[i]);\n                if (!ok)\n                {\n                    break;\n\
    \                }\n\n                ys.Add(y);\n                i = i + 1L;\n\
    \n            }\n\n\n            i = i__prev1;\n        }\n        return ys;\n",
  "        var ns = new List<long>();\n        long n = 0L;\n        long i = 1L;\n\
    \        long x = 0L;\n        for (long x__prev1 = x; x < len(xs); x++)\n   \
    \     {\n            n = xs[x];\n            if (i < len(xs))\n            {\n\
    \                ns.Append(i * n);\n            }\n\n            i++;\n\n    \
    \    }\n\n        return ns;\n", '        return xs.Zip(Enumerable.Range(1L,(xs.Count())),
    (x, y) => (x * y)).Skip(1).ToList();', "        var ys = new List<long>();\n \
    \       for (long i = (long)1L; i < (long)len(xs); i++)\n        {\n         \
    \   var y = (long)i * xs[i];\n            ys.append(y);\n        }\n        return\
    \ ys;\n", "        List<long> ans = new List<long>();\n        var i__prev1 =\
    \ i;\n\n        var i = 1L;\n\n        while (i < len(xs))\n        {\n      \
    \      ans.append(xs[i] * i);\n            i = i + 1L;\n        }\n\n\n      \
    \  i = i__prev1;\n        return ans;\n", '        return new List<long>(xs.Zip(Enumerable.Range(1L,
    xs.Count), (x, y) => (x) * (y)).Skip(1L));', "        long n = (long)xs.Count()\
    \ - 1L;\n        List<long> ans = new List<long>();\n        for (long i = 1L;\
    \ i <= n; i++) {\n            ans.Add(xs[(int)(i)] * i);\n        }\n        return\
    \ ans;", "        if (xs.Count == 1L) {\n            return (new List<long>(new\
    \ long[]{(long)0L}));\n        }\n        List<long> derivative = new List<long>();\n\
    \        for (long i = 1L; i < len(xs); i++) {\n            derivative.Add(xs[i]\
    \ * i);\n        }\n        return derivative;", "        var n = (long)xs.Count;\n\
    \        var dxs = new List<long>();\n        for (long i = (long)1L; i < n; i++)\n\
    \        {\n            dxs.Add(xs[(int)(i)] * i);\n        }\n        return\
    \ dxs;\n", "        var result = new List<long>();\n        for (var i = (long)1L;\
    \ i < xs.Count; i++) {\n            result.Add(xs[(int)(i)] * i);\n        }\n\
    \n        return result;\n", "        List<long> ns = new List<long>();\n    \
    \    for (int i = 1; i < xs.Count; i++) {\n            ns.Add(xs[i] * (long)i);\n\
    \        }\n        return ns;", "        List<long> ret = new List<long>();\n\
    \        for (int i = 1; i < xs.Count; i++) {\n            ret.Add(xs[i] * i);\n\
    \        }\n        return ret;", "        List<long> ret = new List<long>();\n\
    \        for (int i = 1; i < xs.Count; i++) {\n            ret.Add(xs[i] * (long)i);\n\
    \        }\n        return ret;", "        List<long> ret = new List<long>();\n\
    \        for (int i = 1; i < xs.Count; i++) {\n            ret.Add(xs[i] * i);\n\
    \        }\n        return ret;", "        var result = new List<long>();\n  \
    \      for (var i = (int)1L; i < len(xs); i++) {\n            result.Add(xs[i]\
    \ * i);\n        }\n\n        return result;\n", "        long sz = (long)xs.Count();\n\
    \        if (sz == (long)1L) {\n            return (new List<long>(new long[]\
    \ { (long)0L }));\n        }\n\n        List<long> res = new List<long>();\n \
    \       long i = 1L;\n        while (true) {\n            if (!(i < sz))\n   \
    \         {\n                break;\n            }\n\n            res.Add(xs[i]\
    \ * i);\n            i++;\n        }\n\n        return res;\n", "        var ans\
    \ = new List<long>();\n        var n = xs.Count;\n        foreach (var i in Enumerable.Range(1L,\
    \ n - 1L)) {\n            var v = xs[(int)i] * i;\n            ans.Add(v);\n \
    \       }\n        return ans;", '        return xs.Zip(Enumerable.Range(1L, xs.Count()),
    (x, y) => x * y).Skip(1).ToList();', "        List<long> coeffs = new List<long>();\n\
    \        long i = 1L;\n        long n = 1L;\n        while (i < (long)xs.Count)\
    \ {\n            coeffs.Add(xs[i] * n);\n            i = i + 1L;\n           \
    \ n = n + 1L;\n        }\n        return coeffs;", "        List<long> res = new\
    \ List<long>();\n        if (xs.Count == 0L) {\n            return res;\n    \
    \    }\n\n        res.Add(xs[1L]);\n        var n = len(xs);\n        foreach\
    \ (var (i, _) in Enumerable.Range(1L, n - 2L)) {\n            res.Add(xs[i + 1L]\
    \ * (i + 1L));\n        }\n        return res;\n", "        long n = (long)xs.Count;\n\
    \        if (n <= 1L) {\n            return new List<long> { (long)0L };\n   \
    \     }\n\n        var dxs = new List<long>();\n        for (long i = (long)1L;\
    \ i < n; i++) {\n            dxs.Add(xs[(int)(i)] * i);\n        }\n\n       \
    \ return dxs;\n", "        List<long> v = new List<long>();\n        long n =\
    \ (long)xs.Count();\n        long i = 1L;\n        while (i < n)\n        {\n\
    \            v.Add(xs[(int)(i)] * i);\n            i = i + 1L;\n        }\n  \
    \      return v;\n", "        var ys = new List<long>();\n        for (long i\
    \ = (long)1L; i < (long)len(xs); i++)\n        {\n            ys.Add(xs[i] * i);\n\
    \        }\n        return ys;\n", "        var n = len(xs);\n        var ans\
    \ = new List<long>();\n        var i = 1L;\n        while (i < n)\n        {\n\
    \            ans.Add(xs[i] * i);\n            i++;\n        }\n        return\
    \ ans;\n", "        List<long> a = new List<long>();\n        long i = (long)1L;\n\
    \        while (i < len(xs))\n        {\n            a.Add(xs[i] * i);\n     \
    \       i += 1L;\n        }\n\n        return a;\n", "        List<long> zs =\
    \ new List<long>();\n        for (int i = 1; i < xs.Count; i++) {\n          \
    \  zs.Add(xs[i] * (long)i);\n        }\n        return zs;", "        if (xs.Count\
    \ == 1L) {\n            return new List<long>(new long[]{(long)0L});\n       \
    \ }\n\n        return new List<long>(xs.Skip(1L).Select((long x, long i) => (long)((i\
    \ + 1L) * x)).ToList());\n", "        var dxs = (new List<long>());\n        var\
    \ i = (long)0L;\n        while (true) {\n            var ok = false;\n       \
    \     if (i < (long)1L) {\n                ok = true;\n            }\n       \
    \     else {\n                ok = i < (long)len(xs);\n            }\n\n     \
    \       if (!ok)\n            {\n                break;\n            }\n\n   \
    \         var x = xs[(int)(i)];\n            x *= i;\n            dxs.Add(x);\n\
    \            i++;\n        }\n\n        return dxs;\n", "        var ys = new\
    \ List<long>();\n        for (long i = (long)1L; i < (long)len(xs); i++)\n   \
    \     {\n            ys.Add(xs[i] * i);\n        }\n        return ys;\n", '        return
    new List<long>(xs.Skip(1).Select((_p1, _p2) => _p1 * ((long)_p2 + (long)1L)));',
  "        List<long> res = new List<long>();\n        for (int i = 1; i < xs.Count;\
    \ i++) {\n            res.Add(xs[i] * i);\n        }\n        return res;", " \
    \       long n = (long)xs.Count;\n        long i = (long)1L;\n        var dxs\
    \ = new List<long>();\n        while (i < n)\n        {\n            dxs.Add(xs[(int)(i)]\
    \ * i);\n            i++;\n        }\n\n        return dxs;\n", "        var ret\
    \ = new List<long>();\n        for (var i = 1L; i < xs.Count; i++) {\n       \
    \     ret.Add(xs[i] * i);\n        }\n        return ret;", "        List<long>\
    \ r = new List<long>();\n        for (int i = 1; i < xs.Count; i++) {\n      \
    \      r.Add(xs[i] * (long)i);\n        }\n        return r;", "        if (xs.Count\
    \ == 0L) {\n            return xs;\n        }\n\n        var ys = new List<long>();\n\
    \        for (long i = 1L; i < xs.Count; i++) {\n            ys.Add(xs[i] * i);\n\
    \        }\n        return ys;\n", '        return xs.Zip(Enumerable.Range(1L,
    xs.Count - 1L), (x, i) => x * i).ToList();', '        return ((xs.Skip(1L).Select((__ContextSymbol1)
    => (__ContextSymbol1 * ((long)(xs.IndexOf(__ContextSymbol1))))).ToList()));',
  '        return Enumerable.Range(1L, (xs.Count - 1L)).Select(i => (xs[(int)i] *
    (long)i)).ToList();', "        List<long> xs__prev1 = xs;\n\n        var xs__1\
    \ = xs.GetRange(1L, (int)(xs.Count - 1L));\n        xs = xs__1;\n\n        var\
    \ xs__3 = new List<long>();\n        {\n            long i__4 = 0L;\n        \
    \    while (true)\n            {\n                if (!(i__4 < len(xs)))\n   \
    \             {\n                    break;\n                }\n\n           \
    \     var xs__5 = append(xs__3, xs[i__4] * i__4);\n                xs__3 = xs__5;\n\
    \                i__4++;\n            }\n\n        }\n\n        xs = xs__3;\n\
    \        return xs;\n", "        long n = xs.Count;\n        List<long> ys = new\
    \ List<long>();\n        for (long i = 1L; i < n; i++) {\n            ys.Add(xs[(int)(i)]\
    \ * i);\n        }\n        return ys;", "        var xsLen = len(xs);\n     \
    \   var ys = new List<long>();\n        for (var i = 1L; i < xsLen; i++) {\n \
    \           ys.Add(xs[i] * i);\n        }\n        return ys;\n", "        List<long>\
    \ res = new List<long>();\n        for (int i = 1; i < xs.Count; i++) {\n    \
    \        res.Add(xs[i] * i);\n        }\n        return res;", "        var n\
    \ = len(xs);\n        var us = new List<long>();\n        {\n            var i__prev1\
    \ = i;\n\n            for (var i = (long)1L; i < n; i++)\n            {\n    \
    \            us = append(us, i * xs[i]);\n            }\n\n\n            i = i__prev1;\n\
    \        }\n        return us;\n", "        var n = len(xs);\n        var ret\
    \ = new List<long>();\n        for (var i = 1L; i < n; i++) {\n            ret.Add(xs[i]\
    \ * i);\n        }\n\n        return ret;\n", "        List<long> res = new List<long>();\n\
    \        long len = (long)xs.Count;\n        if (len <= (long)1L)\n        {\n\
    \            return res;\n        }\n\n        for (long i = (long)1L; i < len;\
    \ i++)\n        {\n            res.Add(xs[(int)(i)] * i);\n        }\n\n     \
    \   return res;\n", "        var res = new List<long>();\n        long i = 1L;\n\
    \        foreach (var x in xs) {\n            if (i < 2L) {\n                res.Add(x);\n\
    \            } else {\n                res.Add(x * i);\n            }\n      \
    \      i++;\n        }\n        return res;", "        List<long> nxs = new List<long>();\n\
    \        for (long i = (long)1L; i < len(xs); i++)\n        {\n            nxs.Add(i\
    \ * xs[i]);\n        }\n        return nxs;\n", "        List<long> derivative\
    \ = new List<long>();\n        long d = (long)1L;\n        for (long i = (long)0L;\
    \ i < len(xs); i++) {\n            derivative.Add(xs[(int)(i)] * d);\n       \
    \     d += (long)1L;\n        }\n        return derivative;", "        if (xs.Count\
    \ < 2L) {\n            return (new List<long>(new long[]{(long)0L}));\n      \
    \  }\n        var dxs = new List<long>();\n        var i = (long)1L;\n       \
    \ while (i < len(xs)) {\n            dxs.Add(xs[i] * i);\n            i++;\n \
    \       }\n        return dxs;", "        long n = (long)xs.Count();\n       \
    \ if (n == (long)1L) {\n            return new List<long>(new long[]{(long)0L});\n\
    \        }\n\n        var ret = new List<long>();\n        {\n            long\
    \ i__prev1 = i;\n\n            for (long i = (long)1L; i < n; i++)\n         \
    \   {\n                ret.Add(xs[i] * i);\n            }\n\n\n            i =\
    \ i__prev1;\n        }\n        return ret;\n", "        long i = 1L;\n      \
    \  List<long> res = new List<long>();\n        foreach (var x in xs) {\n     \
    \       if (i < xs.Count) {\n                res.Add(i * x);\n            }\n\
    \            i = i + 1L;\n        }\n        return res;", '        return Enumerable.Range(1L,
    (xs.Count - 1L)).Select(x => (xs[(int)x] * (long)x)).ToList();', "        var\
    \ dxs = new List<long>();\n        for (var i = 1L; i < xs.Count; i++) {\n   \
    \         dxs.Add(xs[i] * i);\n        }\n        return dxs;", "        var dst\
    \ = new List<long>();\n        for (var i = 1L; i < (long)xs.Count; i++) {\n \
    \           dst.Add(xs[(int)(i)] * i);\n        }\n\n        return dst;\n", " \
    \       var i = (long)1L;\n        var r = new List<long>();\n        while (i\
    \ < len(xs))\n        {\n            r.Add(xs[i] * i);\n            i++;\n   \
    \     }\n\n        return r;\n", '        return Enumerable.Range(1L, xs.Count
    - 1L).Select((index) => xs[index] * index).ToList();', "        List<long> ys\
    \ = new List<long>();\n        for (int i = 1; i < (int)xs.Count; i++) {\n   \
    \         long k = (long)xs[i] * (long)i;\n            ys.Add(k);\n        }\n\
    \        return ys;", "        var tmp = new List<long>();\n        var c = (long)1L;\n\
    \        var i = (long)1L;\n        while (i < (long)xs.Count())\n        {\n\
    \            tmp.Add(xs[(int)i] * c);\n            c++;\n            i++;\n  \
    \      }\n        return tmp;\n", "        var result = new List<long>();\n  \
    \      for (var i = 1L; i < (long)xs.Count; i++) {\n            result.Add(xs[(int)(i)]\
    \ * i);\n        }\n\n        return result;\n", "        var s = default(List<long>);\n\
    \        var i = (long)0L;\n        var n = (long)0L;\n        s = new List<long>();\n\
    \        i = (long)1L;\n        n = (long)0L;\n        while (i < (long)len(xs))\n\
    \        {\n            s = append(s, i * xs[i]);\n            i = i + (long)1L;\n\
    \        }\n        return s;\n", '        return new List<long>(xs.Skip(1).Select((x,
    i) => x * (i + 1L)));', "        var ans = new List<long>();\n        for (long\
    \ i = 1L; i < (long)xs.Count; i++) {\n            ans.Add(xs[(int)(i)] * i);\n\
    \        }\n\n        return ans;\n", "        var n = len(xs);\n        var xs_\
    \ = make_list<long>(n - 1L, 0L);\n        for (long i = 0L; i < n - 1L; i++)\n\
    \        {\n            xs_[i] = xs[i + 1L] * (i + 1L);\n        }\n\n       \
    \ return xs_;\n", "        List<long> ans = new List<long>();\n        long i\
    \ = 1L;\n        while (i < xs.Count) {\n            ans.Add(xs[(int)i] * i);\n\
    \            i = i + 1L;\n        }\n        return ans;", "        var acc =\
    \ new List<long>();\n        for (var i = (long)1L; i < (long)len(xs); i++) {\n\
    \            acc.Add(xs[i] * i);\n        }\n\n        return acc;\n", "     \
    \   var ys = new List<long>();\n        for (long i = 1L; i < len(xs); i++) {\n\
    \            ys.Add(xs[i] * i);\n        }\n\n        return ys;\n", "       \
    \ List<long> dxs = new List<long>();\n        for (int i = 1; i < xs.Count; i++)\
    \ {\n            dxs.Add(xs[i] * i);\n        }\n        return dxs;", "     \
    \   var ans = new List<long>();\n        var n = xs.Count;\n        for (var i\
    \ = 1L; i < n; i++) {\n            ans.Add(xs[(int)(i)] * i);\n        }\n   \
    \     return ans;\n", "        List<long> ys = new List<long>();\n        for\
    \ (long i = (long)1L; i < xs.Count; i++)\n        {\n            ys.Add(xs[(int)(i)]\
    \ * i);\n        }\n\n        return ys;\n", "        List<long> result = new\
    \ List<long>();\n        for (long i = (long)1L; i < xs.Count; i++) {\n      \
    \      result.Add(xs[(int)(i)] * i);\n        }\n\n        return result;\n",
  "        List<long> result = new List<long>();\n        for (long i = (long)1L;\
    \ i < xs.Count; i++) {\n            result.Add(xs[(int)(i)] * i);\n        }\n\
    \n        return result;\n", "        var ys = new List<long>();\n        for\
    \ (long i = (long)1L; i < xs.Count; i++)\n        {\n            ys.Add(xs[i]\
    \ * i);\n        }\n\n        return ys;\n", "        var length = xs.Count;\n\
    \        if (length == 0L) {\n            return xs;\n        }\n\n        var\
    \ ans = new List<long>();\n        for (long i = 1L; i < length; i++) {\n    \
    \        ans.Add(xs[i] * i);\n        }\n        return ans;\n", "        List<long>\
    \ xs_ = new List<long>();\n        long i = (long)1L;\n        while (i < len(xs))\n\
    \        {\n            xs_.append(xs[i] * i);\n            i = i + (long)1L;\n\
    \        }\n\n        return xs_;\n", "        List<long> ans = new List<long>();\n\
    \        long i = (long)1L;\n        while (i < (long)xs.Count())\n        {\n\
    \            ans.Add(xs[(int)(i)] * i);\n            i++;\n        }\n\n     \
    \   return ans;\n", "        var r = new List<long>();\n        for (var i = 1L;\
    \ i < (long)xs.Count; i++) {\n            r.Add(xs[(int)(i)] * i);\n        }\n\
    \n        return r;\n", "        var ans = new List<long>();\n        for (var\
    \ i = 1L; i < (long)xs.Count; i++) {\n            ans.Add(xs[(int)(i)] * i);\n\
    \        }\n\n        return ans;\n", "        var n = len(xs);\n        var res\
    \ = new List<long> { };\n        {\n            var i__prev1 = i;\n\n        \
    \    for (var i = 1L; i < n; i++)\n            {\n                res.Add(xs[i]\
    \ * i);\n            }\n\n\n            i = i__prev1;\n        }\n        return\
    \ res;\n", "        List<long> ret = new List<long>();\n        long i = 1L;\n\
    \        foreach (var item in xs) {\n            ret.Add(i * item);\n        \
    \    i++;\n        }\n        return ret;", "        List<long> xs__1 = new List<long>();\n\
    \        long value = 0L;\n        long x = 0L;\n        long i = 0L;\n      \
    \  long n = 0L;\n        long __while1__ = default(long);\n        long __while2__\
    \ = default(long);\n        long __while3__ = default(long);\n        long __while4__\
    \ = default(long);\n        List<long> __while2_xs_1 = xs;\n        __while1__\
    \ = 0L;\n        goto __while1_loop;\n        __while1_loop:\n        if (__while1__\
    \ >= 1L) {\n            goto __while1_end;\n        }\n        xs__1 = xs;\n \
    \       value = 0L;\n        x = 0L;\n        i = 0L;\n        n = 0L;\n     \
    \   __while2__ = 0L;\n        __while2_xs_1 = xs;\n        __while3__ = 0L;\n\
    \        goto __while3_loop;\n        __while3_loop:\n        if (__while3__ >=\
    \ 1L) {\n            goto __while3_end;\n        }\n        __while3__ = 1L;\n\
    \        if ((__while2__ < len(__while2_xs_1))) {\n            x = __while2_xs_1[__while2__];\n\
    \            __while3__ = 0L;\n        }\n        else {\n            goto __while3_end;\n\
    \        }\n        __while3_end:\n        ;\n        __while2__ += 1L;\n    \
    \    i = __while2__;\n        __while2__ = 0L;\n        __while2_xs_1 = xs;\n\
    \        __while4__ = 0L;\n        goto __while4_loop;\n        __while4_loop:\n\
    \        if (__while4__ >= 1L) {\n            goto __while4_end;\n        }\n\
    \        __while4__ = 1L;\n        if ((__while2__ < len(__while2_xs_1))) {\n\
    \            n = __while2_xs_1[__while2__];\n            __while4", "        List<long>\
    \ ret = new List<long>();\n        long i = (long)1L;\n        while (i < (long)xs.Count())\n\
    \        {\n            ret.Add(xs[(int)i] * i);\n            i = i + (long)1L;\n\
    \        }\n\n        return ret;\n", "        var x = (new List<long>(xs));\n\
    \        if (x.Count < 2L)\n        {\n            return (new List<long>(new\
    \ long[] { (long)0L }));\n        }\n\n        x.RemoveAt(0L);\n        var y\
    \ = (new List<long>());\n        var _temp0 = x;\n        foreach (var _temp1\
    \ in _temp0)\n        {\n            var z = _temp1;\n            y.Add(z);\n\
    \        }\n        return y;\n", "        var ys = new List<long>();\n      \
    \  for (var i = 1L; i < xs.Count; i++) {\n            ys.Add(xs[i] * i);\n   \
    \     }\n        return ys;", "        xs.RemoveAt(0);\n        for (int i = 0;\
    \ i < xs.Count; i++) {\n            xs[i] *= (i + 1);\n        }\n        return\
    \ xs;", "        List<long> result = new List<long>();\n        for (int i = 1;\
    \ i < xs.Count; i++) {\n            result.Add(xs[i] * i);\n        }\n      \
    \  return result;", '        return Enumerable.Range(1L, (int)(xs.Count - 1L)).Select((__ContextSymbol0)
    => (xs[__ContextSymbol0] * (long)(__ContextSymbol0))).ToList();', "        var\
    \ n = xs.Count;\n        var ys = new List<long>();\n        var i = 0L;\n   \
    \     while (true) {\n            if (i >= n) {\n                break;\n    \
    \        }\n            if (i == 0L) {\n                ys.Add(xs[(int)i]);\n\
    \            }\n            else {\n                ys.Add(xs[(int)i] * i);\n\
    \            }\n            i = i + 1L;\n        }\n        return ys;", '        return
    xs.Skip(1).Select((x, i) => x * (i + 1)).ToList();', "        var ans = new List<long>();\n\
    \        long n = (long)xs.Count();\n        long i = (long)1L;\n        while\
    \ (i < n)\n        {\n            ans.Add(xs[(int)(i)] * i);\n            i++;\n\
    \        }\n\n        return ans;\n", '        return xs.Select((x, i) => x *
    (xs.Count - i - 1)).Skip(1).ToList();', '        return Enumerable.Range(1L, xs.Count
    - 1L).Select((i) => xs[i] * i).ToList();', "        List<long> ret = new List<long>();\n\
    \        for (int i = 1; i < len(xs); i++) {\n            long t = (long)i * xs[i];\n\
    \            ret.append(t);\n        }\n\n        return ret;\n", "        long\
    \ n = (long)xs.Count();\n        if (n <= (long)1L)\n        {\n            return\
    \ new List<long>();\n        }\n\n        return new List<long>(xs.Skip(1L).Select((x,\
    \ i) => (long)(((long)i + (long)1L) * x)));\n", "        var _tuple_2 = xs.Skip(1).Unzip3();\n\
    \        var z = _tuple_2.Item2;\n        var y = _tuple_2.Item1;\n        var\
    \ x = _tuple_2.Item3;\n        return new List<long>(Enumerable.Zip(y, x, (a,\
    \ b) => a * b));", "        var newxs = new List<long>();\n        for (var i\
    \ = (long)1L; i < (long)len(xs); i++)\n        {\n            newxs.Add(i * xs[i]);\n\
    \        }\n        return newxs;\n", "        var ys = new List<long>();\n  \
    \      var n = xs.Count - 1L;\n        var i = 1L;\n        while (i <= n) {\n\
    \            var y = (i * xs[(int)(i)]);\n            ys.Add(y);\n           \
    \ i = i + 1L;\n        }\n        return ys;\n", "        List<long> c = new List<long>();\n\
    \        var n = xs.Count;\n        c.Add(0);\n        for (int i = 1; i < n;\
    \ i++) {\n            c.Add(xs[i] * (i));\n        }\n        return c;", "  \
    \      var n = xs.Count;\n        var ys = new List<long>();\n        for (var\
    \ i = 0; i < n - 1; i++) {\n            ys.Add(xs[i] * (n - 1 - i));\n       \
    \ }\n        return ys;", "        var newCs = new List<long>();\n        long\
    \ currentI = (long)1L;\n        long currentC = xs[(int)1L];\n        while (currentI\
    \ < (long)xs.Count() - (long)1L) {\n            newCs.Add(currentC * currentI);\n\
    \            currentI++;\n            currentC = xs[(int)currentI];\n        }\n\
    \n        return newCs;\n", '        return new List<long>(xs.Skip(1).Select((x,
    index) => (index + 1) * x));', "        var len = xs.Count;\n        var ys =\
    \ new List<long>();\n        for (var i = 1L; i < len; i++) {\n            ys.Add(xs[(int)(i)]\
    \ * i);\n        }\n        return ys;\n", "        var n = xs.Count - 1;\n  \
    \      var ans = new List<long>();\n        for (var i = 0; i < n; i++) {\n  \
    \          ans.Add(xs[i] * (n - i));\n        }\n        return ans;", "     \
    \   List<long> result = new List<long>();\n        for (int i = 1; i < xs.Count;\
    \ i++) {\n            result.Add(xs[i] * (long)i);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        for (int i\
    \ = 1; i < xs.Count; i++) {\n            result.Add(xs[i] * (long)i);\n      \
    \  }\n        return result;", "        var len = xs.Count;\n        var ans =\
    \ new List<long>();\n        for (long i = 1L; i < len; i++) {\n            ans.Add(xs[(int)(i)]\
    \ * i);\n        }\n\n        return ans;\n", "        List<long> ret = new List<long>();\n\
    \        for (int i = 1; i < xs.Count; i++) {\n            ret.Add(xs[i] * (long)i);\n\
    \        }\n        return ret;", "        long n = (long)xs.Count() - 1L;\n \
    \       var ys = new List<long>();\n        long i = 1L;\n        while (i <=\
    \ n) {\n            ys.Add(xs[(int)(i)] * i);\n            i++;\n        }\n \
    \       return ys;\n", '        return xs.GetRange(1, xs.Count - 1).Select((long
    x, int y) => x * y).ToList();', "        var ys = new List<long>();\n        for\
    \ (var i = 1L; i < xs.Count; i++) {\n            ys.Add(xs[i] * i);\n        }\n\
    \        return ys;", "        var result = new List<long>();\n        for (long\
    \ i = (long)1L; i < (long)len(xs); i++)\n        {\n            var v = xs[i]\
    \ * i;\n            result.Add(v);\n        }\n\n        return result;\n", " \
    \       if (xs.Count < 2L) {\n            return (new List<long>(new long[]{(long)0L}));\n\
    \        }\n        List<long> @out = new List<long>();\n        for (long i =\
    \ (long)1L; i < len(xs); i++) {\n            @out.Add(xs[i] * i);\n        }\n\
    \        return (@out);", "        List<long> res = new List<long>();\n      \
    \  long n = xs.Count;\n        for (long i = 1L; i < n; i++) {\n            res.Add(xs[(int)(i)]\
    \ * i);\n        }\n        return res;", "        List<long> ans = new List<long>();\n\
    \        var n = xs.Count - 1;\n        {\n            var i__prev1 = i;\n\n \
    \           for (var i = 1L; i < n; i++) {\n                ans.Add(xs[i] * i);\n\
    \            }\n\n\n            i = i__prev1;\n        }\n        return ans;\n",
  "        List<long> rs = new List<long>();\n        for (long i = 1L; i < (long)xs.Count;\
    \ i++) {\n            rs.Add(xs[(int)i] * i);\n        }\n        return rs;",
  '        return Enumerable.Range(1L, (int)xs.Count - 1L).Select(__enum1 => (xs[__enum1]
    * (long)__enum1)).ToList();', "        long n = (long)xs.Count;\n        long\
    \ i = (long)1L;\n        List<long> derivatives = new List<long>();\n        while\
    \ (i < n)\n        {\n            derivatives.Add(xs[(int)(i)] * i);\n       \
    \     i++;\n        }\n\n        return derivatives;\n"]
stop_tokens:
- "\n    }\n"
