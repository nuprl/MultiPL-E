language: cs
name: HumanEval_143_words_in_sentence
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return String.Join(\" \", sentence.Split(' ').Where(e =>
    BigInteger.Parse(e.Length.ToString()) % BigInteger.Parse(\"2\") == BigInteger.Parse(\"1\")));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e13f56aff084491dbfaa8ed5846da4c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e13f56aff084491dbfaa8ed5846da4c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // write your code here\n        // good luck :)\n        string[]
    words = sentence.Split(' ');\n        string res = \"\";\n        for (int i =
    0; i < words.Length; i++) {\n            int len = words[i].Length;\n            if
    (isPrime(len)) {\n                res += words[i] + \" \";\n            }\n        }\n
    \       return res.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5biui302.cs(30,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var numWordLen = new Dictionary<int, int>();\n        foreach
    (var word in sentence.Split(' ')) {\n            if (!numWordLen.ContainsKey(word.Length))
    {\n                numWordLen[word.Length] = 0;\n            }\n            numWordLen[word.Length]++;\n
    \       }\n        numWordLen = numWordLen.Where(kv => IsPrime(kv.Key)).ToDictionary(kv
    => kv.Key, kv => kv.Value);\n        var result = new StringBuilder();\n        foreach
    (var word in sentence.Split(' ')) {\n            if (numWordLen.ContainsKey(word.Length))
    {\n                result.Append($\"{word} \");\n                numWordLen[word.Length]--;\n
    \               if (numWordLen[word.Length] == 0) {\n                    numWordLen.Remove(word.Length);\n
    \               }\n            }\n        }\n        return result.ToString().Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnwy18q_x.cs(31,45): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Split the sentence by spaces.\n        // Use the string.Join
    function to return the words with prime length.\n        return string.Join(\"
    \", sentence.Split(' ').Where(word => IsPrime(word.Length)));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnbnsr2ar.cs(26,67): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2a137a24aae4468bb5fe4197fbcb5970>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2a137a24aae4468bb5fe4197fbcb5970>:0 \n"
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        List<string>
    primes = new List<string>();\n        for (int i = 0; i < words.Length; i++) {\n
    \           if (words[i].Length >= 2 && MillerRabin(words[i].Length)) {\n                primes.Add(words[i]);\n
    \           }\n        }\n        return string.Join(\" \", primes);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr68zb599.cs(27,41): error CS0103: The name ''MillerRabin'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var dict = new Dictionary<string, int>();\n        var s
    = sentence.Split(' ');\n        var result = new StringBuilder();\n        foreach
    (var word in s) {\n            dict.Add(word, word.Length);\n        }\n        var
    primes = new List<int>();\n        for (int i = 2; i < 50; i++) {\n            bool
    flag = true;\n            for (int j = 2; j <= Math.Sqrt(i); j++) {\n                if
    (i % j == 0) {\n                    flag = false;\n                    break;\n
    \               }\n            }\n            if (flag) {\n                primes.Add(i);\n
    \           }\n        }\n        foreach (var pr in primes) {\n            foreach
    (var kv in dict) {\n                if (kv.Value == pr) {\n                    result.Append(kv.Key
    + \" \");\n                }\n            }\n        }\n        return result.ToString().Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa2459d4abea4c8c9e4655c5bba42459>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa2459d4abea4c8c9e4655c5bba42459>:0
    \n"
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        List<string>
    result = new List<string>();\n        foreach (string word in words) {\n            if
    (IsPrime(word.Length)) {\n                result.Add(word);\n            }\n        }\n
    \       return string.Join(\" \", result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd_kh233y.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Initialize\n        HashSet<int> primes = GetPrimes(101);\n
    \       string result = \"\";\n        // Go through each word in the sentence\n
    \       foreach (string word in sentence.Split(' ')) {\n            // Check if
    the length of the word is a prime number\n            if (primes.Contains(word.Length))
    {\n                // Add the word to the result\n                result += word
    + \" \";\n            }\n        }\n        // Remove the trailing space\n        result
    = result.Substring(0, result.Length - 1);\n        // Return the result\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsoh_oc9c.cs(25,31): error CS0103: The name ''GetPrimes'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        List<string>
    primes = new List<string>();\n        foreach (string word in words) {\n            if
    (IsPrime(word.Length)) {\n                primes.Add(word);\n            }\n        }\n
    \       return string.Join(\" \", primes);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoilxh66v.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var primes = new HashSet<int>() { 2, 3, 5, 7, 11, 13, 17,
    19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n        var
    words = sentence.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n
    \       var newWords = new List<string>();\n        foreach (var word in words)
    {\n            if (primes.Contains(word.Length)) {\n                newWords.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", newWords);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string result
    = \"\";\n        foreach (string word in words) {\n            if (IsPrime(word.Length))\n
    \               result += word + \" \";\n        }\n        if (result.Length
    > 0)\n            result = result.Substring(0, result.Length - 1);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw4ix4ots.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        int sentlen = sentence.Length;\n        int[] slen = new
    int[sentlen];\n        int[] prime = new int[sentlen];\n        for (int i = 0;
    i < slen.Length; i++) {\n            if (sentence[i] == ' ') {\n                slen[i]
    = 1;\n            } else {\n                slen[i] = 0;\n            }\n        }\n
    \       for (int i = 0; i < slen.Length; i++) {\n            if (slen[i] == 0)
    {\n                slen[i] = 1;\n                if (i == 0) {\n                    if
    (slen[i + 1] == 1) {\n                        slen[i] = 0;\n                    }\n
    \               } else if (i == slen.Length - 1) {\n                    if (slen[i
    - 1] == 1) {\n                        slen[i] = 0;\n                    }\n                }
    else {\n                    if (slen[i - 1] == 1 && slen[i + 1] == 1) {\n                        slen[i]
    = 0;\n                    }\n                }\n            }\n        }\n        for
    (int i = 0; i < slen.Length; i++) {\n            if (slen[i] == 1) {\n                prime[i]
    = 1;\n            } else {\n                prime[i] = 0;\n            }\n        }\n
    \       for (int i = 0; i < slen.Length; i++) {\n            if (slen[i] == 1)
    {\n                int n = 0;\n                int j = i;\n                while
    (slen[j] == 1) {\n                    n++;\n                    j++;\n                }\n
    \               if (n != 1) {\n                    if (IsPrime(n)) {\n                        for
    (int k = i; k < j; k++) {\n                            prime[k] = 1;\n                        }\n
    \                   } else {\n                        for (int k = i; k < j; k++)
    {\n                            prime[k] = 0;\n                        }\n                    }\n
    \               }\n            }\n        }\n        string str = \"\";\n        for
    (int i\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3iomo_en.cs(81,19): error CS1002: ; expected

    /tmp/tmp3iomo_en.cs(81,19): error CS1525: Invalid expression term ''}''

    /tmp/tmp3iomo_en.cs(81,19): error CS1026: ) expected

    '
  timestamp: 1660015866
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // if a word's length is prime,\n        // then it must
    be a prime, or 2 times a prime, or 3 times a prime\n        // since all primes
    are odd,\n        // it cannot be 4 times a prime, or 5 times a prime\n        //
    this is because all numbers greater than 4 are odd\n\n        // let's say a prime
    is p\n        // then we only need to check the remainders of p, 2*p, 3*p\n        //
    if it equals to 0, then we can't use it\n\n        var words = sentence.Split('
    ');\n        var primeWords = new List<string>();\n        foreach (var word in
    words) {\n            bool isPrime = true;\n            var remainder = word.Length
    % 2;\n            if (remainder == 0) {\n                isPrime = false;\n            }
    else {\n                var divisor = word.Length / 2;\n                for (int
    i = 3; i <= divisor; i += 2) {\n                    remainder = word.Length %
    i;\n                    if (remainder == 0) {\n                        isPrime
    = false;\n                        break;\n                    }\n                }\n
    \           }\n            if (isPrime) {\n                primeWords.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", primeWords);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95d654eb642b4adda63f9d5b90eb6a93>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95d654eb642b4adda63f9d5b90eb6a93>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string[] split = sentence.Split('
    ');\n        for (int i = 0; i < split.Length; i++) {\n            if (IsPrime(split[i].Length))
    {\n                result += split[i] + \" \";\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_llllukx.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // your code here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <bdb9688ad84b4e478c7eb86f24462bc7>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <bdb9688ad84b4e478c7eb86f24462bc7>:0
    \n"
  stdout: ''
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var primes = new[]
    { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
    73, 79, 83, 89, 97 };\n        var result = new List<string>();\n        foreach
    (var word in words) {\n            if (primes.Contains(word.Length)) {\n                result.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", result);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string result
    = \"\";\n        foreach (string word in words) {\n            if (isPrime(word.Length))
    {\n                result += word + \" \";\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc5wg9yow.cs(27,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        List<string> result = new List<string>();\n        string[]
    words = sentence.Split(' ');\n        foreach (string word in words) {\n            if
    (word.Length > 1 && word.Length.IsPrime())\n                result.Add(word);\n
    \       }\n        return string.Join(\" \", result);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpebt_1u0b.cs(27,48): error CS1061: ''int'' does not contain a definition
    for ''IsPrime'' and no accessible extension method ''IsPrime'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return string.Join(\" \", sentence.Split(\" \").Where(w =>
    IsPrime(w.Length)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0uojamx9.cs(24,64): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string newSentence = \"\";\n        string[] words = sentence.Split('
    ');\n        foreach (string word in words) {\n            if (IsPrime(word.Length))
    {\n                newSentence += word + \" \";\n            }\n        }\n        return
    newSentence.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgjo4ca2n.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Replace the following code with your implementation of
    the function.\n        // Feel free to add as many functions you want in this
    file, but keep all\n        // the code in the WordsInSentence function.\n        string[]
    words = sentence.Split(' ');\n        string result = \"\";\n        foreach (string
    word in words) {\n            if (IsPrime(word.Length)) {\n                result
    += word + \" \";\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa0lzb_t8.cs(30,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // first of all, split the sentence\n        // now we got
    a list of the words\n        var words = sentence.Split(' ');\n        // now
    that we have the list of words, we can iterate\n        // we will go through
    the list, and we will find the prime numbers\n        var strBuilder = new StringBuilder();\n
    \       foreach (var word in words) {\n            // check if the word length
    is prime\n            if (IsPrime(word.Length)) {\n                // if yes,
    append the word to the string builder\n                strBuilder.Append(word);\n
    \               strBuilder.Append(' ');\n            }\n        }\n        //
    get the string out of the string builder\n        // and we are done\n        var
    str = strBuilder.ToString();\n        return str.Trim();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqd8t1ca7.cs(32,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var ret = new StringBuilder();\n        var length = sentence.Length;\n
    \       var last = -1;\n        var done = false;\n        while (last < length)
    {\n            var i = sentence.IndexOf(' ', last + 1);\n            if (i ==
    -1) {\n                i = length;\n                done = true;\n            }\n
    \           var slice = sentence.Substring(last + 1, i - last - 1);\n            if
    (IsPrime(slice.Length)) {\n                if (ret.Length > 0) {\n                    ret.Append('
    ');\n                }\n                ret.Append(slice);\n            }\n            last
    = i;\n            if (done) {\n                break;\n            }\n        }\n
    \       return ret.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4qjsj4ij.cs(35,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        int counter = 0;\n        string[] words = sentence.Split('
    ');\n        for (int i = 0; i < words.Length; i++) {\n            bool isPrime
    = true;\n            for (int j = 2; j < words[i].Length / 2; j++) {\n                if
    (words[i].Length % j == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                if
    (counter == 0) {\n                    words[counter] = words[i];\n                }
    else {\n                    words[counter] = words[counter] + \" \" + words[i];\n
    \               }\n                counter++;\n            }\n        }\n        if
    (counter == 0) {\n            return \"\";\n        }\n        string[] ans =
    new string[counter];\n        for (int i = 0; i < counter; i++) {\n            ans[i]
    = words[i];\n        }\n        return string.Join(\" \", ans);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfdc6324bd444f449ff1d8ed10f8875f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfdc6324bd444f449ff1d8ed10f8875f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var sw = new Stopwatch();\n        sw.Start();\n        //
    Write your code here.\n        List<string> primes = new List<string>();\n        var
    words = sentence.Split(' ');\n        bool primeFound = false;\n        foreach
    (var word in words) {\n            if (IsPrime(word.Length)) {\n                primes.Add(word);\n
    \               primeFound = true;\n            }\n        }\n        sw.Stop();\n
    \       if (primeFound) {\n            return String.Join(\" \", primes);\n        }
    else {\n            return \"No prime words found\";\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp41swtubu.cs(31,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        List<string> words = sentence.Split(' ').ToList();\n        List<string>
    validWords = new List<string>();\n        foreach (string word in words) {\n            if
    (IsPrime(word.Length)) {\n                validWords.Add(word);\n            }\n
    \       }\n        return string.Join(\" \", validWords);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpylx77idp.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // your code goes here\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <d3c0fc19e9a04bc3aae62d206512ee52>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <d3c0fc19e9a04bc3aae62d206512ee52>:0 \n"
  stdout: ''
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // BigInteger is an arbitrary-precision signed integer.\n
    \       // It is only available since .NET Framework 4.0.\n        // You can
    use it to represent numbers that do not fit in a normal 32-bit int.\n        //
    The values in a BigInteger are stored as an array of signed integers.\n        //
    The most significant element has the highest index in the array.\n        // Each
    element in the array contains a value between -9,223,372,036,854,775,808\n        //
    and 9,223,372,036,854,775,807 (-2^63 to 2^63 - 1).\n        // The set of values
    in a BigInteger is known as a \"big integer\",\n        // which is represented
    as BigInteger.\n        // BigInteger is an immutable type.\n        // That means
    that once you create a BigInteger, its value can't be changed.\n        // Whenever
    you need to change the value, you must assign the new value to a new BigInteger.\n
    \       // https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger?view=netframework-4.8\n
    \       // BigInteger has a really useful static method called \"Parse\" that
    can be used to convert\n        // strings to BigInteger:\n        // https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.parse?view=netframework-4.8#System_Numerics_BigInteger_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\n
    \       // Hint: you can use the Split method to split a string into a list of
    words\n        // https://docs.microsoft.com/en-us/dotnet/api/system.string.split?view=netframework-4.8#System_String_Split_System_Char_\n
    \       // Hint: you can use the Enumerable.Range method to create a range of
    integers\n        // https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.range?view=netframework-4.8#System_Linq_Enumerable_Range_System_Int32_System_Int32_\n
    \       // Hint\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyc_rps8b.cs(23,26): error CS0161: ''Problem.WordsInSentence(string)'':
    not all code paths return a value

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] parts = sentence.Split(' ');\n        List<string>
    primes = new List<string>();\n        foreach (string s in parts) {\n            if
    (IsPrime(s.Length)) {\n                primes.Add(s);\n            }\n        }\n
    \       return string.Join(\" \", primes);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfixm4or6.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10456b5d83bf46baba81d823ae81c25c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10456b5d83bf46baba81d823ae81c25c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var isPrime = new bool[100];\n        for (int i = 2; i <
    100; i++) {\n            isPrime[i] = true;\n        }\n        for (int i = 2;
    i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i
    * 2; j < 100; j += i) {\n                    isPrime[j] = false;\n                }\n
    \           }\n        }\n        return string.Join(\" \", sentence.Split(' ').Where(s
    => isPrime[s.Length]));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        StringBuilder
    sb = new StringBuilder();\n        foreach (string word in words) {\n            if
    (IsPrime(word.Length)) {\n                sb.Append(word + \" \");\n            }\n
    \       }\n        return sb.ToString().Trim();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpesrgi08h.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <57cc10bef1be44f8a7e4619996973b65>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <57cc10bef1be44f8a7e4619996973b65>:0
    \n"
  stdout: ''
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var primes = new List<int>() { 2, 3, 5, 7, 11, 13, 17, 19,
    23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n        var
    words = sentence.Split(' ');\n        var result = new List<string>();\n        foreach
    (var word in words) {\n            if (primes.Contains(word.Length)) {\n                result.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", result);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Your code goes here\n        StringBuilder words = new
    StringBuilder();\n        foreach (var word in sentence.Split(' ')) {\n            if
    (IsPrime(word.Length)) {\n                words.Append(word);\n                words.Append('
    ');\n            }\n        }\n        return words.ToString().Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprmkia6t2.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        return string.Join(\"
    \", words.Where(x => IsPrime(x.Length)));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5_n16ay.cs(25,50): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Your code goes here\n        string[] words = sentence.Split();\n
    \       List<string> primes = new List<string>();\n        foreach (string word
    in words) {\n            if (IsPrime(word.Length)) {\n                primes.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", primes);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphtywahg7.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        List<string> newSentence = new List<string>();\n        string[]
    words = sentence.Split();\n        for (int i = 0; i < words.Length; i++) {\n
    \           if (CheckPrime(words[i].Length)) {\n                newSentence.Add(words[i]);\n
    \           }\n        }\n        return string.Join(\" \", newSentence);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpko4ag52a.cs(27,17): error CS0103: The name ''CheckPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] s = sentence.Split(' ');\n        string result
    = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            if (IsPrime(s[i].Length))
    {\n                result += s[i] + \" \";\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsyu3j6gs.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var primes = new
    int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,
    71, 73, 79, 83, 89, 97 };\n        var result = \"\";\n        for (int i = 0;
    i < words.Length; i++) {\n            var word = words[i];\n            var len
    = word.Length;\n            if (Array.IndexOf(primes, len) != -1) {\n                result
    += word + ' ';\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var result = new
    List<string>();\n        foreach (var word in words) {\n            if (word.Length
    == 0) {\n                continue;\n            }\n            var isPrime = word.Length
    > 1;\n            for (var i = 2; i < word.Length; i++) {\n                if
    (word.Length % i == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                result.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", result);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Fill this in.\n        StringBuilder sb = new StringBuilder();\n
    \       string[] words = sentence.Split(' ');\n        for (int i = 0; i < words.Length;
    i++) {\n            if (isPrime(words[i].Length)) {\n                sb.Append(words[i]
    + \" \");\n            }\n        }\n        return sb.ToString().Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ds46_ot.cs(28,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] parts = sentence.Split();\n        List<string>
    result = new List<string>();\n        foreach (string part in parts) {\n            if
    (IsPrime(part.Length)) {\n                result.Add(part);\n            }\n        }\n
    \       return string.Join(\" \", result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6avune8j.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // write your code here and return the result.\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9b7e991cba040999d7963c32e53a255>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9b7e991cba040999d7963c32e53a255>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        List<string>
    ans = new List<string>();\n        foreach (string word in words) {\n            if
    (BigInteger.TryParse(word.Length.ToString(), out BigInteger n)) {\n                if
    (IsPrime(n)) ans.Add(word);\n            }\n        }\n        return string.Join(\"
    \", ans);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ikcejdz.cs(28,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string answer
    = \"\";\n        foreach (string word in words) {\n            if (IsPrime(word.Length))
    {\n                answer += word + \" \";\n            }\n        }\n        return
    answer.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0rjxdyiy.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return string.Join(\" \", sentence.Split(' ').Where(w =>
    IsPrime(w.Length)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprpx2rwdx.cs(24,64): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string[] words2
    = new string[words.Length];\n        int count = 0;\n        for (int i = 0; i
    < words.Length; i++) {\n            if (IsPrime(words[i].Length)) {\n                words2[count]
    = words[i];\n                count++;\n            }\n        }\n        string
    ans = \"\";\n        for (int i = 0; i < count; i++) {\n            ans += words2[i]
    + \" \";\n        }\n        return ans.Trim();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoaa7vdl7.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string result
    = \"\";\n        foreach (string word in words) {\n            if (IsPrime(word.Length))
    {\n                result += word + \" \";\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbv8ayotg.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string solution
    = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length
    == 1) continue;\n            if (IsPrime(words[i].Length)) {\n                solution
    += words[i] + \" \";\n            }\n        }\n        return solution.Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw6l9crjv.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c86ad2b9d8a1407c81f04f1afad38f9f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c86ad2b9d8a1407c81f04f1afad38f9f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        var result
    = new List<string>();\n        foreach (var word in words) {\n            if (IsPrime(word.Length))
    {\n                result.Add(word);\n            }\n        }\n        return
    string.Join(\" \", result);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3wazfjul.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Your code here.\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <8e5743b208714d69ab94710a3599995c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <8e5743b208714d69ab94710a3599995c>:0
    \n"
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string result
    = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length))
    {\n                result += words[i] + \" \";\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp102d8pwq.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var sb = new StringBuilder();\n        foreach (var w in
    sentence.Split(' ')) {\n            if (IsPrime(w.Length))\n                sb.Append(w
    + \" \");\n        }\n        return sb.ToString().Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r7_wc71.cs(26,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var primes = new
    List<int>();\n        var sb = new StringBuilder();\n        for (int i = 2; i
    < 11; i++) {\n            if (IsPrime(i)) {\n                primes.Add(i);\n
    \           }\n        }\n        foreach (var word in words) {\n            if
    (primes.Contains(word.Length)) {\n                sb.Append(word + \" \");\n            }\n
    \       }\n        return sb.ToString().Trim();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu1dp5cej.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // your code here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <bdb9688ad84b4e478c7eb86f24462bc7>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <bdb9688ad84b4e478c7eb86f24462bc7>:0
    \n"
  stdout: ''
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Generate all primes <= 100\n        List<int> primes =
    new List<int>();\n        for (int i = 2; i <= 100; i++) {\n            bool isPrime
    = true;\n            for (int j = 2; j <= i / 2; j++) {\n                if (i
    % j == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                primes.Add(i);\n
    \           }\n        }\n        // Now iterate over all the words and collect
    the ones with prime length\n        StringBuilder sb = new StringBuilder();\n
    \       string[] words = sentence.Split(' ');\n        for (int i = 0; i < words.Length;
    i++) {\n            if (primes.Contains(words[i].Length)) {\n                sb.Append(words[i]);\n
    \               if (i != words.Length - 1) {\n                    sb.Append('
    ');\n                }\n            }\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f8ce48fe0854ef38e52c578402fe7da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f8ce48fe0854ef38e52c578402fe7da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] lst = sentence.Split(' ');\n        string ans =
    \"\";\n        foreach (string word in lst) {\n            if (isPrime(word.Length))
    {\n                ans += word + \" \";\n            }\n        }\n        return
    ans.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcu29akgw.cs(27,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // only lowercase\n        int length = sentence.Length;\n
    \       int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,
    53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        var words = sentence.Split('
    ');\n        var buffer = new StringBuilder();\n        foreach (var word in words)
    {\n            if (Array.IndexOf(primes, word.Length) != -1) {\n                buffer.Append(word);\n
    \               buffer.Append(' ');\n            }\n        }\n        return
    buffer.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Fill in the code here.\n        string[] w = sentence.Split('
    ');\n        return new string(\n            (from word in w\n            where
    isPrime(word.Length)\n            select word[0]).ToArray());\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp98u9i1nm.cs(28,19): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Your code goes here\n        var words = sentence.Split('
    ');\n        var listOfIndices = new List<int>();\n        for (int i = 0; i <
    words.Length; i++) {\n            if (IsPrime(words[i].Length))\n                listOfIndices.Add(i);\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < listOfIndices.Count; i++) {\n            if (i == listOfIndices.Count
    - 1)\n                sb.Append(words[listOfIndices[i]]);\n            else\n
    \               sb.Append(words[listOfIndices[i]] + \" \");\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5gjcz5ag.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // your code goes here\n        // For more information about
    this kata, read the description.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd022cf4093c4e219e2f1bd258f44076>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd022cf4093c4e219e2f1bd258f44076>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Implement the algorithm here.\n        string answer =
    \"\";\n        List<int> list = new List<int>();\n        List<string> stringList
    = new List<string>();\n        string[] words = sentence.Split();\n        for
    (int i = 0; i < words.Length; i++) {\n            int num = words[i].Length;\n
    \           string word = words[i];\n            if (isPrime(num)) {\n                list.Add(num);\n
    \               stringList.Add(word);\n            }\n        }\n        for (int
    i = 0; i < list.Count; i++) {\n            if (i != 0) {\n                answer
    += \" \";\n            }\n            answer += stringList[i];\n        }\n        return
    answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplcocj6fo.cs(32,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var res = \"\";\n
    \       foreach (var word in words) {\n            if (isPrime(word.Length)) {\n
    \               res += word + \" \";\n            }\n        }\n        return
    res.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg5i1oozf.cs(27,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        StringBuilder
    sb = new StringBuilder();\n        foreach (string word in words) {\n            if
    (IsPrime(word.Length)) {\n                sb.Append(word);\n                sb.Append('
    ');\n            }\n        }\n        if (sb.Length > 0) {\n            sb.Length
    -= 1;\n        }\n        return sb.ToString();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt4fonng3.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        List<string>
    primes = new List<string>();\n        foreach (string word in words) {\n            if
    (prime(word.Length)) {\n                primes.Add(word);\n            }\n        }\n
    \       return string.Join(\" \", primes);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxf4ld2pd.cs(27,17): error CS0103: The name ''prime'' does not exist in
    the current context

    '
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c86ad2b9d8a1407c81f04f1afad38f9f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c86ad2b9d8a1407c81f04f1afad38f9f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var result = new
    List<string>();\n        foreach (var word in words) {\n            if (IsPrime(word.Length))
    {\n                result.Add(word);\n            }\n        }\n        return
    string.Join(\" \", result);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4f8g7jmk.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var sb = new StringBuilder();\n        var words = sentence.Split('
    ');\n        foreach (var word in words) {\n            if (IsPrime(word.Length))
    {\n                sb.Append(word);\n                sb.Append(' ');\n            }\n
    \       }\n        return sb.ToString().Trim();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1yu_fzfo.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return string.Join(\" \",\n            sentence.Split(' ')\n
    \           .Where(w => PrimeNumber.IsPrime(w.Length)));\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3v0h9n6.cs(26,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2a137a24aae4468bb5fe4197fbcb5970>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2a137a24aae4468bb5fe4197fbcb5970>:0 \n"
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        //\n        string[] words = sentence.Split(' ');\n        var
    result = words.Where(w => IsPrime(w.Length));\n        return string.Join(\" \",
    result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7gnjt918.cs(26,39): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var sb = new StringBuilder();\n
    \       foreach (var word in words) {\n            if (IsPrime(word.Length)) {\n
    \               sb.Append(word + \" \");\n            }\n        }\n        return
    sb.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1g5l9oe8.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <3ded4ce5b834451f979214e4dd1f9ced>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <3ded4ce5b834451f979214e4dd1f9ced>:0
    \n"
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        List<string>
    result = new List<string>();\n        foreach (string word in words) {\n            if
    (word.Length > 1 && IsPrime(word.Length)) {\n                result.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", result);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ofoxuyc.cs(27,36): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var r = \"\";\n
    \       foreach (var word in words) {\n            if (IsPrime(word.Length)) {\n
    \               r += (r == \"\" ? \"\" : \" \") + word;\n            }\n        }\n
    \       return r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpem0u1an3.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        List<string>
    ans = new List<string>();\n        foreach (string w in words) {\n            if
    (isPrime(w.Length)) {\n                ans.Add(w);\n            }\n        }\n
    \       return string.Join(\" \", ans);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9te_yaq_.cs(27,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        List<string>
    ls = new List<string>();\n        foreach (string w in words) {\n            if
    (isPrime(w.Length)) {\n                ls.Add(w);\n            }\n        }\n
    \       return string.Join(\" \", ls);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwvz2yqrf.cs(27,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var index = 0;\n
    \       string new_str = \"\";\n        foreach (var word in words) {\n            if
    (IsPrime(word.Length)) {\n                new_str += word;\n                index++;\n
    \               if (index < words.Length)\n                    new_str += \" \";\n
    \           }\n        }\n        return new_str;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcktq7xia.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // the message should be a sentence.\n        Debug.Assert(sentence.Length
    <= 100);\n        Debug.Assert(sentence.All(c => char.IsLetter(c)));\n        Debug.Assert(!sentence.Contains(\"
    \ \"));\n        // your code here\n        var words = sentence.Split(' ');\n
    \       var primes = words.Select(w => w.Length).Where(IsPrime).ToList();\n        var
    result = string.Join(\" \", words.Where((w, i) => primes.Contains(w.Length)));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51dfojbi.cs(30,56): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string res
    = \"\";\n        foreach (string word in words) {\n            if (IsPrime(word.Length))
    {\n                res += word + \" \";\n            }\n        }\n        return
    res.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm7s_wlqq.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // As long as the current character is not a space,\n        //
    append it to the current word string.\n        // Once a space is encountered,\n
    \       // if the length of the current word is prime,\n        // append the
    current word to the result string.\n        // Finally, set the current word to
    the empty string\n        // and start the next iteration.\n        string[] words
    = sentence.Split();\n        string curWord = \"\";\n        string result = \"\";\n
    \       foreach (char letter in sentence) {\n            if (letter != ' ') {\n
    \               curWord += letter;\n            } else {\n                if (IsPrime(curWord.Length))
    {\n                    result += curWord + \" \";\n                }\n                curWord
    = \"\";\n            }\n        }\n        // Need to check the last word of the
    sentence,\n        // because the last word does not end with a space,\n        //
    so the last word is skipped in the foreach loop.\n        if (IsPrime(curWord.Length))
    {\n            result += curWord;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm7wi55l.cs(38,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmprm7wi55l.cs(47,13): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        List<string> r = new List<string>();\n        foreach (string
    s in sentence.Split(' '))\n            if (IsPrime(s.Length))\n                r.Add(s);\n
    \       return string.Join(\" \", r);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpubggtlpb.cs(26,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        int[] primes =\n            new int[] { 2, 3, 5, 7, 11, 13,
    17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n
    \       var words = sentence.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n
    \       var result = new List<string>();\n        foreach (var word in words)
    {\n            if (Array.IndexOf(primes, word.Length) != -1) {\n                result.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", result);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var primeLengths
    = new List<string>();\n        foreach (var word in words) {\n            var
    primeLength = WordPrimeLength(word);\n            if (primeLength != 0) {\n                primeLengths.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", primeLengths);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3typvg3g.cs(27,31): error CS0103: The name ''WordPrimeLength'' does not
    exist in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var result = new StringBuilder();\n        foreach (var word
    in sentence.Split(' ')) {\n            if (IsPrime(word.Length)) {\n                result.Append(word);\n
    \               result.Append(' ');\n            }\n        }\n        return
    result.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi_16qg8j.cs(26,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        int[] primes = new int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23,
    29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n        string[]
    words = sentence.Split(' ');\n        return string.Join(\" \", words.Where(word
    => primes.Contains(word.Length)));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        if (string.IsNullOrEmpty(sentence)) {\n            return
    string.Empty;\n        }\n        StringBuilder sb = new StringBuilder();\n        StringBuilder
    word = new StringBuilder();\n        bool isWord = false;\n        bool isSpace
    = false;\n        bool isNotPrime = false;\n        int i = 0;\n        while
    (i < sentence.Length) {\n            char c = sentence[i];\n            if (char.IsLetter(c))
    {\n                isWord = true;\n                word.Append(c);\n            }
    else {\n                isSpace = true;\n            }\n            if (isWord
    && isSpace) {\n                if (word.Length > 1) {\n                    for
    (int j = 2; j < word.Length; j++) {\n                        if (word.Length %
    j == 0) {\n                            isNotPrime = true;\n                            break;\n
    \                       }\n                    }\n                }\n                if
    (!isNotPrime) {\n                    sb.Append(word);\n                    sb.Append(\"
    \");\n                }\n                word.Clear();\n                isWord
    = false;\n                isSpace = false;\n                isNotPrime = false;\n
    \           }\n            i++;\n        }\n        if (word.Length > 1) {\n            for
    (int j = 2; j < word.Length; j++) {\n                if (word.Length % j == 0)
    {\n                    isNotPrime = true;\n                    break;\n                }\n
    \           }\n        }\n        if (!isNotPrime) {\n            sb.Append(word);\n
    \       }\n        string result = sb.ToString().Trim();\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69f168a69a294b53b0d412a1a55e6bce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69f168a69a294b53b0d412a1a55e6bce>:0
    \n"
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // write your code here\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <4bef8cc617b646e3953e643f27db28f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <4bef8cc617b646e3953e643f27db28f2>:0 \n"
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return string.Join(\" \", sentence.Split(' ').Where(word
    => IsPrime(word.Length)));\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplkl65cqv.cs(24,67): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var sb = new StringBuilder();\n        bool first = true;\n
    \       foreach (var word in sentence.Split(' ')) {\n            if (IsPrime(word.Length))
    {\n                if (!first) {\n                    sb.Append(' ');\n                }\n
    \               sb.Append(word);\n                first = false;\n            }\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_5jojl90.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var sb = new StringBuilder();\n        foreach (var word
    in sentence.Split(' ')) {\n            if (IsPrime(word.Length)) {\n                sb.Append(word);\n
    \               sb.Append(' ');\n            }\n        }\n        if (sb.Length
    > 0)\n            sb.Length--;\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8dlou2d5.cs(26,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var sb = new StringBuilder();\n        foreach (var word
    in sentence.Split(' ')) {\n            var wordLen = word.Length;\n            if
    (wordLen < 2) {\n                continue;\n            }\n            var isPrime
    = true;\n            for (var i = 2; i <= Math.Sqrt(wordLen); i++) {\n                if
    (wordLen % i == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                sb.Append(word
    + \" \");\n            }\n        }\n        if (sb.Length == 0) {\n            return
    \"\";\n        }\n        sb.Length -= 1;\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Write your code here.\n        string[] words = sentence.Split('
    ');\n        List<string> answers = new List<string>();\n        foreach (string
    word in words) {\n            if (IsPrime(word.Length)) {\n                answers.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", answers);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4dbpxznn.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Implement your solution here\n        var words = sentence.Split(\"
    \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0;
    i < words.Length; i++) {\n            if (isPrime(words[i].Length)) {\n                sb.Append(words[i]);\n
    \               sb.Append(\" \");\n            }\n        }\n        return sb.ToString().Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2ptzw7ek.cs(28,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(new [] { ' ' });\n        var
    primes = new List<int>();\n        for (int i = 2; i < 100; i++) {\n            if
    (IsPrime(i)) {\n                primes.Add(i);\n            }\n        }\n        var
    list = new List<string>();\n        foreach (var word in words) {\n            if
    (primes.Contains(word.Length)) {\n                list.Add(word);\n            }\n
    \       }\n        return string.Join(\" \", list);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4bz0xa3i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Implement the solution\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f3624589d2d74153b250637d77ee70a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f3624589d2d74153b250637d77ee70a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        var result
    = new List<string>();\n        foreach (var word in words) {\n            var
    length = word.Length;\n            if (IsPrime(length)) {\n                result.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", result);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcm2ucvsl.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split();\n        string result
    = \"\";\n        foreach (string word in words) {\n            if (IsPrime(word.Length))
    {\n                result += word + \" \";\n            }\n        }\n        if
    (result.Length > 0) {\n            result = result.Substring(0, result.Length
    - 1);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5teumg_p.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        bool[] isPrime
    = new bool[100];\n        for (int i = 2; i < 100; i++) {\n            isPrime[i]
    = true;\n        }\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i])
    {\n                for (int j = i * 2; j < 100; j += i) {\n                    isPrime[j]
    = false;\n                }\n            }\n        }\n        string answer =
    \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (isPrime[words[i].Length])
    {\n                answer += words[i] + \" \";\n            }\n        }\n        return
    answer.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split();\n        var res = new List<string>();\n
    \       foreach (var w in words) {\n            if (IsPrime(w.Length)) {\n                res.Add(w);\n
    \           }\n        }\n        return string.Join(\" \", res);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkovwv5y1.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        List<string> parts = sentence.Split(' ').ToList();\n        List<string>
    primeParts = new List<string>();\n        foreach (string part in parts) {\n            if
    (IsPrime(part.Length)) {\n                primeParts.Add(part);\n            }\n
    \       }\n        return string.Join(\" \", primeParts);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn43uja3d.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var sb = new StringBuilder();\n
    \       foreach (var word in words) {\n            if (IsPrime(word.Length)) {\n
    \               sb.Append(word);\n                sb.Append(' ');\n            }\n
    \       }\n        if (sb.Length > 0)\n            sb.Length--;\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6scmpq71.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // type your solution here\n        string[] words = sentence.Split('
    ');\n        for (int i = 0; i < words.Length; i++) {\n            if (!isPrime(words[i].Length))
    {\n                words[i] = \"\";\n            }\n        }\n        return
    string.Join(\" \", words).Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3_j06pjp.cs(27,18): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string result
    = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (PrimeCheck(words[i].Length))
    {\n                result += words[i] + \" \";\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcaryany0.cs(27,17): error CS0103: The name ''PrimeCheck'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var sb = new StringBuilder();\n
    \       foreach (var word in words) {\n            if (isPrime(word.Length)) {\n
    \               sb.Append(word + \" \");\n            }\n        }\n        return
    sb.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_mbqb4b.cs(27,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // TODO: Implement your code here\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f7378e867e84b5dacc963009d763ac7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0f7378e867e84b5dacc963009d763ac7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        List<string> newWords
    = new List<string>();\n        foreach (var word in words) {\n            if (IsPrime(word.Length))
    {\n                newWords.Add(word);\n            }\n        }\n        return
    string.Join(\" \", newWords);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxdkris18.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // TODO:\n        string[] words = sentence.Split(' ');\n
    \       string result = \"\";\n        int count = 0;\n        for (int i = 0;
    i < words.Length; i++) {\n            string word = words[i];\n            count
    = 0;\n            for (int j = 1; j <= word.Length; j++) {\n                if
    (word.Length % j == 0) {\n                    count++;\n                }\n            }\n
    \           if (count == 2) {\n                result += words[i] + \" \";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <044faae0b6a044dc9ac9c4aea00c8f75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <044faae0b6a044dc9ac9c4aea00c8f75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        List<string>
    output = new List<string>();\n        for (int i = 0; i < words.Length; i++) {\n
    \           if (IsPrime(words[i].Length)) {\n                output.Add(words[i]);\n
    \           }\n        }\n        return string.Join(\" \", output);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpozic8zwr.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var splited = sentence.Split(new char[] { ' ' });\n        var
    res = \"\";\n        for (int i = 0; i < splited.Length; i++) {\n            var
    word = splited[i];\n            if (IsPrime(word.Length)) {\n                res
    += word + \" \";\n            }\n        }\n        return res.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa59yb2f3.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var output = new StringBuilder();\n        var words = sentence.Split('
    ');\n        foreach (var word in words) {\n            if (IsPrime(word.Length))
    {\n                output.Append(word);\n                output.Append(' ');\n
    \           }\n        }\n        return output.ToString().Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpup3va0m2.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // TODO: implement this function, and return a string\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f4f2d350fcf4ca1b030cfa72df6ed99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f4f2d350fcf4ca1b030cfa72df6ed99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        string[] words = sentence.Split('
    ');\n        foreach (string word in words) {\n            if (word.Length > 1
    && IsPrime(word.Length)) {\n                result += word + \" \";\n            }\n
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd1hfwvw8.cs(27,36): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var primes = new int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23,
    29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n        var
    words = sentence.Split(' ');\n        string[] wordsWithPrimeLength = new string[words.Length];\n
    \       int index = 0;\n        foreach (var word in words) {\n            if
    (primes.Contains(word.Length)) {\n                wordsWithPrimeLength[index]
    = word;\n                index++;\n            }\n        }\n        return string.Join(\"
    \", wordsWithPrimeLength);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e15c59acaed447abdf4fc36af6a77b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e15c59acaed447abdf4fc36af6a77b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        return string.Join(\"
    \", words.Where(IsPrime));\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf1r5jux4.cs(25,45): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string output
    = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (isPrime(words[i].Length))
    {\n                output += words[i] + \" \";\n            }\n        }\n        return
    output.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxqyt4o2.cs(27,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        StringBuilder result = new StringBuilder();\n        foreach
    (string word in sentence.Split(\" \".ToCharArray())) {\n            if (IsPrime(word.Length))
    {\n                result.Append(word + \" \");\n            }\n        }\n        return
    result.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptqew0511.cs(26,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // parse the string and split it into words\n        string[]
    words = sentence.Split(new char[] { ' ' });\n        // create a new string that
    will contain the words that have a prime length\n        string result = \"\";\n
    \       // for each word in the words array, check if its length is prime\n        for
    (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length))
    {\n                // if it is, append it to the result string with a space\n
    \               // but only if the result string is not empty\n                if
    (result != \"\") {\n                    result += \" \";\n                }\n
    \               result += words[i];\n            }\n        }\n        // return
    the result string\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh_4hrar.cs(30,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var answer = \"\";\n        var words = sentence.Split('
    ');\n        foreach (var word in words) {\n            if (IsPrime(word.Length))
    {\n                answer += word + \" \";\n            }\n        }\n        return
    answer.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptnohkn9v.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015869
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // write your code here\n        List<int> ints = new List<int>();\n
    \       string[] words = sentence.Split(' ');\n        foreach (string str in
    words) {\n            if (IsPrime(str.Length)) {\n                ints.Add(Array.IndexOf(words,
    str));\n            }\n        }\n        string result = \"\";\n        foreach
    (int i in ints) {\n            result += \" \" + words[i];\n        }\n        return
    result.Substring(1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ei7y_68.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // your code goes here\n        // return sentence;\n        var
    words = sentence.Split(' ');\n        var ans = new List<string>();\n        foreach
    (var w in words) {\n            if (IsPrime(w.Length)) {\n                ans.Add(w);\n
    \           }\n        }\n        return string.Join(\" \", ans);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp72h0uyub.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var result = new
    List<string>();\n        foreach (var word in words) {\n            if (IsPrime(word.Length))
    {\n                result.Add(word);\n            }\n        }\n        return
    string.Join(\" \", result);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4f8g7jmk.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string result
    = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            int len
    = words[i].Length;\n            bool flag = true;\n            for (int j = 2;
    j < len; j++) {\n                if (len % j == 0) {\n                    flag
    = false;\n                    break;\n                }\n            }\n            if
    (flag) {\n                result += words[i] + \" \";\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7301ed4e06bf4017896cad113c68f71c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7301ed4e06bf4017896cad113c68f71c>:0
    \n"
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return string.Join(\" \", sentence.Split(' ').Where(IsPrime));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy0n0ztis.cs(24,59): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return new string(sentence.Split(' ').Where(word => IsPrime(word.Length)).ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnrbemns5.cs(24,61): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var l = sentence.Split(' ');\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < l.Length; i++) {\n            if (IsPrime(l[i].Length))
    {\n                sb.Append(l[i]);\n                sb.Append(' ');\n            }\n
    \       }\n        if (sb.Length > 0) {\n            sb.Length--;\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcd7rehup.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var res = new List<string>();\n
    \       foreach (var word in words) {\n            var l = word.Length;\n            if
    (IsPrime(l)) {\n                res.Add(word);\n            }\n        }\n        return
    string.Join(\" \", res);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy98orsr4.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var primeLengths = new HashSet<int>() {2, 3, 5, 7, 11, 13,
    17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n
    \       var output = new StringBuilder();\n        var words = sentence.Split('
    ');\n        foreach (var word in words) {\n            if (primeLengths.Contains(word.Length))
    {\n                output.Append(word + \" \");\n            }\n        }\n        return
    output.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var sb = new StringBuilder();\n        foreach (var word
    in sentence.Split(' ')) {\n            if (word.Length == 1) {\n                continue;\n
    \           }\n            if (IsPrime(word.Length)) {\n                sb.Append($\"{word}
    \");\n            }\n        }\n        return sb.ToString().Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj_ghocti.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(new char[] { ' ' });\n        string
    result = \"\";\n        foreach (string word in words) {\n            if (IsPrime(word.Length))
    {\n                result += word + \" \";\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoyx0hn07.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var isPrime = new bool[101];\n        for (int i = 2; i <=
    100; i++) {\n            if (isPrime[i]) continue;\n            for (int j = i
    + i; j <= 100; j += i) {\n                isPrime[j] = true;\n            }\n
    \       }\n        var ans = new List<string>();\n        foreach (var word in
    sentence.Split(' ')) {\n            if (!isPrime[word.Length]) {\n                ans.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", ans);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f97eb3b59614430489aa32d0795e90e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f97eb3b59614430489aa32d0795e90e4>:0
    \n"
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var result = new StringBuilder();\n        foreach (var word
    in sentence.Split(' ')) {\n            if (IsPrime(word.Length)) {\n                result.Append(word
    + \" \");\n            }\n        }\n        return result.ToString().Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp85f5w_vd.cs(26,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Your code here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <0c14849cc85748fdb6f44ea6550c3dcf>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <0c14849cc85748fdb6f44ea6550c3dcf>:0
    \n"
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var current = string.Empty;\n
    \       foreach (var word in words) {\n            if (IsPrime(word.Length))\n
    \               current += word + \" \";\n        }\n        return current.Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf8_znmop.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        foreach (string
    word in words) {\n            if (IsPrime(word.Length)) {\n                Console.Write(word
    + \" \");\n            }\n        }\n        return null;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe6ftba0f.cs(26,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var split = sentence.Split(' ');\n        var length = split.Length;\n
    \       var ret = \"\";\n        for (int i = 0; i < length; i++) {\n            var
    len = split[i].Length;\n            if (len > 1 && IsPrime(len)) {\n                ret
    += split[i] + \" \";\n            }\n        }\n        return ret.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc1rj9629.cs(29,28): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string result
    = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length))
    {\n                result += words[i] + \" \";\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp102d8pwq.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Split the sentence into words\n        var words = sentence.Split('
    ');\n        // Get the prime length words\n        var primeLengthWords = words.Where(w
    => IsPrime(w.Length));\n        // Return the string of the prime length words\n
    \       return string.Join(\" \", primeLengthWords);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhud21dj.cs(27,49): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var sentenceWords = sentence.Split(' ');\n        var sentenceWordsLength
    = sentenceWords.Length;\n        var result = \"\";\n        for (int i = 0; i
    < sentenceWordsLength; i++) {\n            var word = sentenceWords[i];\n            var
    wordLength = word.Length;\n            if (IsPrime(wordLength)) {\n                result
    += word + \" \";\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0x1e4ute.cs(30,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Here are some hints, get the length of each word and check
    if it is prime\n        // to do that, you can use IsPrime function below.\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b472b4807764c3ab84657590f5c9599>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b472b4807764c3ab84657590f5c9599>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n
    \           if (IsPrime(words[i].Length)) {\n                sb.Append(words[i]);\n
    \               sb.Append(' ');\n            }\n        }\n        if (sb.Length
    > 0) {\n            sb.Length--;\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy9urf3lb.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        return string.Join(\"
    \", words.Where(i => IsPrime(i.Length)));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfth7esnw.cs(25,50): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var sb = new StringBuilder();\n        foreach (var word
    in sentence.Split()) {\n            if (isPrime(word.Length))\n                sb.Append(word
    + \" \");\n        }\n        return sb.ToString().Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptbxg6r0x.cs(26,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return string.Join(\" \", sentence.Split().Where(s => IsPrime(s.Length)));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7539hv6v.cs(24,61): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64fb6fc6fff44445afb08cd73a88ed16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Implement me...\n        // start by splitting the sentence\n
    \       string[] words = sentence.Split(\" \");\n        // declaring a list of
    words\n        List<string> out_put = new List<string>();\n        // looping
    through the given words\n        foreach (string word in words) {\n            //
    removing any space that might be there\n            string w = word.Trim(\" \");\n
    \           // checking if the length of the word is a prime number\n            if
    (IsPrime(w.Length)) {\n                // if it is, then we add it to the list
    of words\n                out_put.Add(w);\n            }\n        }\n        //
    joining the words in the list\n        string output = string.Join(\" \", out_put);\n
    \       // returning the result\n        return output;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo_bu7bi_.cs(32,34): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpo_bu7bi_.cs(34,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // must be the same as the original one\n        string[]
    words = sentence.Split(' ');\n        // the order of the words in the new string
    should be the same as the original one.\n        string[] primes = words.Where(i
    => IsPrime(i.Length)).ToArray();\n        return string.Join(\" \", primes);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2ryer_ug.cs(27,44): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // create list of prime numbers from 2 to 100\n        int[]
    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,
    67, 71, 73, 79, 83, 89, 97};\n        // convert input sentence to list of words\n
    \       string[] words = sentence.Split();\n        // define empty output string\n
    \       string output = \"\";\n        // loop through words\n        foreach
    (string word in words) {\n            // get length of word\n            int len
    = word.Length;\n            // check if the length is prime\n            if (primes.Contains(len))
    {\n                // if it is, add it to the output string\n                output
    += word + \" \";\n            }\n        }\n        // trim the last space\n        output
    = output.Trim();\n        // return output\n        return output;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] w = sentence.Split(' ');\n        string r = \"\";\n
    \       foreach (string s in w)\n            if (isPrime(s.Length))\n                r
    += (r == \"\" ? \"\" : \" \") + s;\n        return r;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsuq4iksn.cs(27,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(new char[] { ' ' });\n        var
    result = string.Empty;\n        foreach (var word in words) {\n            if
    (IsPrime(word.Length)) {\n                result += word + \" \";\n            }\n
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2g8ezjue.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return sentence.Split(' ').Where(IsPrime).Aggregate((a, b)
    => a + \" \" + b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupahqum9.cs(24,42): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2a137a24aae4468bb5fe4197fbcb5970>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2a137a24aae4468bb5fe4197fbcb5970>:0 \n"
  stdout: ''
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        char[] separators = { ' ' };\n        var words = sentence.Split(separators);\n
    \       var result = \"\";\n        foreach (var word in words) {\n            int
    length = word.Length;\n            if (IsPrime(length)) {\n                result
    += word + \" \";\n            }\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiglawg9r.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        StringBuilder
    res = new StringBuilder();\n        foreach (string word in words) {\n            if
    (IsPrime(word.Length)) {\n                res.Append(word + \" \");\n            }\n
    \       }\n        return res.ToString().Trim();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp37p488ow.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Write your code here\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpox03ab7c.cs(23,26): error CS0161: ''Problem.WordsInSentence(string)'':
    not all code paths return a value

    '
  timestamp: 1660015870
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return string.Join(\" \", sentence.Split(' ').Where(x =>
    (IsPrime(x.Length))));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsb5i0tys.cs(24,65): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015870
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Write your code here\n        // To print results to the
    standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello
    world!\");\n        string[] words = sentence.Split();\n        foreach (string
    word in words) {\n            Console.WriteLine(word);\n        }\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d363dc4fbe1488b961823dcf2cd7f21>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d363dc4fbe1488b961823dcf2cd7f21>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: 'This

    is

    a

    test

    lets

    go

    for

    swimming

    there

    is

    no

    place

    available

    here

    Hi

    I

    am

    Hussein

    go

    for

    it

    here

    here

    is

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Type your solution here\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8_d55ug.cs(23,26): error CS0161: ''Problem.WordsInSentence(string)'':
    not all code paths return a value

    '
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var primes = new
    HashSet<int>() { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,
    61, 67, 71, 73, 79, 83, 89, 97 };\n        var builder = new StringBuilder();\n
    \       foreach (var word in words) {\n            if (primes.Contains(word.Length))
    {\n                builder.Append(word);\n                builder.Append(' ');\n
    \           }\n        }\n        return builder.ToString().Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Split the sentence into a list of words\n        var words
    = sentence.Split(' ');\n        // For each word in the sentence, check to see
    if its length is prime\n        return String.Join(\" \", words.Where(w => IsPrime(w.Length)));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt_5izmaq.cs(27,50): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        int[] prefix = new int[sentence.Length];\n        int t =
    0;\n        prefix[0] = 0;\n        for (int i = 1; i < sentence.Length; i++)
    {\n            while (t > 0 && sentence[t] != sentence[i]) {\n                t
    = prefix[t - 1];\n            }\n            if (sentence[t] == sentence[i]) {\n
    \               t++;\n            }\n            prefix[i] = t;\n        }\n        List<int>
    answers = new List<int>();\n        for (int i = 0; i < sentence.Length; i++)
    {\n            if (isPrime(prefix[i])) {\n                answers.Add(prefix[i]);\n
    \           }\n        }\n        string answer = \"\";\n        for (int i =
    0; i < answers.Count; i++) {\n            answer += sentence.Substring(0, answers[i]);\n
    \           sentence = sentence.Substring(answers[i] + 1);\n        }\n        return
    answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcw5dqk63.cs(38,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string res = \"\";\n        foreach (string word in sentence.Split('
    ')) {\n            if (IsPrime(word.Length)) {\n                res += word +
    \" \";\n            }\n        }\n        return res.Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt61z6kfb.cs(26,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // #############################################################################################################################################\n
    \       // Write your code below.\n        // #############################################################################################################################################\n
    \       string res = \"\";\n        string tmp = \"\";\n        int pos = 0;\n
    \       bool space = false;\n        while (pos < sentence.Length) {\n            if
    (sentence[pos] == ' ') {\n                if (Primes.isPrime(tmp.Length)) {\n
    \                   if (space) {\n                        res += \" \";\n                    }\n
    \                   res += tmp;\n                    space = true;\n                }\n
    \               tmp = \"\";\n            } else {\n                tmp += sentence[pos];\n
    \           }\n            pos++;\n        }\n        if (Primes.isPrime(tmp.Length))
    {\n            if (space) {\n                res += \" \";\n            }\n            res
    += tmp;\n        }\n        return res;\n        // #############################################################################################################################################\n
    \       // End of your code.\n        // #############################################################################################################################################\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_2zhvnqy.cs(33,21): error CS0103: The name ''Primes'' does not exist in
    the current context

    /tmp/tmp_2zhvnqy.cs(46,13): error CS0103: The name ''Primes'' does not exist in
    the current context

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var result = \"\";\n        var words = sentence.Split();\n
    \       foreach (var word in words) {\n            if (IsPrime(word.Length)) {\n
    \               result += word + \" \";\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0t40axcv.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var primes = new List<int> { 2, 3, 5, 7, 11, 13, 17, 19,
    23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n        return
    String.Join(\" \", sentence.Split(\" \").Where(word => primes.Contains(word.Length)));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(new char[] { ' ' });\n        var
    primes = GetPrimesInRange(0, words.Max(x => x.Length));\n        var ret = new
    List<string>();\n        foreach (var w in words) {\n            if (primes.Contains(w.Length))
    {\n                ret.Add(w);\n            }\n        }\n        return string.Join(\"
    \", ret);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcganz0zx.cs(25,22): error CS0103: The name ''GetPrimesInRange'' does not
    exist in the current context

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var sb = new StringBuilder();\n
    \       foreach (var word in words) {\n            if (IsPrime(word.Length)) {\n
    \               sb.Append(word + \" \");\n            }\n        }\n        return
    sb.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1g5l9oe8.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        List<string> words = sentence.Split(' ').ToList();\n        var
    res = string.Empty;\n        foreach (var item in words) {\n            if (item.Length
    == 1 || IsPrime(item.Length)) {\n                res += $\"{item} \";\n            }\n
    \       }\n        return res.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxzlih1ey.cs(27,37): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2a137a24aae4468bb5fe4197fbcb5970>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2a137a24aae4468bb5fe4197fbcb5970>:0 \n"
  stdout: ''
  timestamp: 1660015867
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string result = \"\";\n        for (int i = 0; i < sentence.Length;
    i++) {\n            bool b = true;\n            for (int j = 2; j < sentence.Length;
    j++) {\n                if (i % j == 0) {\n                    b = false;\n                    break;\n
    \               }\n            }\n            if (b) {\n                result
    += sentence[i] + \" \";\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a303fee8897e4b978e7367ff85ab818f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a303fee8897e4b978e7367ff85ab818f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Write your code here.\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df3aba89cc6549bebd87d71c4cb31007>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df3aba89cc6549bebd87d71c4cb31007>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        int[] primes = new int[] {\n            2, 3, 5, 7, 11, 13,
    17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n        };\n
    \       var words = sentence.Split(' ');\n        var result = \"\";\n        for
    (int i = 0; i < words.Length; i++) {\n            if (Array.IndexOf(primes, words[i].Length)
    != -1) {\n                result += words[i] + \" \";\n            }\n        }\n
    \       return result.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Write your code here.\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df3aba89cc6549bebd87d71c4cb31007>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df3aba89cc6549bebd87d71c4cb31007>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        for (int i
    = 0; i < words.Length; i++) {\n            if (!words[i].All(char.IsLetter)) {\n
    \               throw new ArgumentException(\"Invalid Input, Letters only.\");\n
    \           }\n        }\n        if (words.Length > 100) {\n            throw
    new ArgumentException(\"Invalid Input, Length less than 100 only.\");\n        }\n
    \       List<string> list = new List<string>();\n        foreach (string word
    in words) {\n            if (IsPrime(word.Length)) {\n                list.Add(word);\n
    \           }\n        }\n        string result = string.Join(\" \", list);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq2hx2656.cs(35,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        List<int> prime = new List<int>();\n        string[] words
    = sentence.Split(' ');\n        string result = \"\";\n        for (int i = 0;
    i < words.Length; i++) {\n            bool isPrime = true;\n            for (int
    j = 2; j < words[i].Length; j++) {\n                if (words[i].Length % j ==
    0) {\n                    isPrime = false;\n                    break;\n                }\n
    \           }\n            if (isPrime) {\n                result += words[i]
    + \" \";\n            }\n        }\n        return result.Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88d40878a93144d592213d45dc8f4c4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88d40878a93144d592213d45dc8f4c4c>:0
    \n"
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var primeLengths = new HashSet<int> {\n            2, 3,
    5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,
    83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
    173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257,
    263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,
    359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,
    457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,
    569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,
    659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,
    769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,
    881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,
    997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087,
    1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181,
    1187,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu96xboqa.cs(26,6): error CS1002: ; expected

    /tmp/tmpu96xboqa.cs(27,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpu96xboqa.cs(37,2): error CS1513: } expected

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string result
    = \"\";\n        foreach (string word in words) {\n            if (IsPrime(word.Length))
    {\n                result += (word + \" \");\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoup4727d.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] s = sentence.Split(' ');\n        string result
    = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            if (IsPrime(s[i].Length))
    {\n                result += s[i] + \" \";\n            }\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsyu3j6gs.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015867
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        string[] words = sentence.Split(' ');\n        string str
    = \"\";\n        foreach (string word in words) {\n            if (isPrime(word.Length))
    {\n                str += word + \" \";\n            }\n        }\n        return
    str.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpizf03ty9.cs(27,17): error CS0103: The name ''isPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Your code here!\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac5adfce92343bfb7009f4dac198baf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac5adfce92343bfb7009f4dac198baf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // TODO: implement your code here\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <3dfe489a7d6b43db96e99008fcc97553>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <3dfe489a7d6b43db96e99008fcc97553>:0
    \n"
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // Write your code here.\n        var result = new StringBuilder();\n
    \       var words = sentence.Split(' ');\n        foreach (var word in words)
    {\n            if (IsPrime(word.Length)) {\n                result.Append(word
    + \" \");\n            }\n        }\n        return result.ToString().Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa3ni7yl8.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var sb = new StringBuilder();\n        var arr = sentence.Split('
    ');\n        foreach (var word in arr) {\n            if (IsPrime(word.Length))
    {\n                sb.Append(word + \" \");\n            }\n        }\n        return
    sb.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp6wa6hh3.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var primes = new List<int> { 2, 3, 5, 7, 11, 13, 17, 19,
    23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n        List<string>
    words = new List<string>();\n        foreach (var word in sentence.Split(' '))
    {\n            if (primes.Contains(word.Length)) {\n                words.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", words);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        // your code\n        var words = sentence.Split(' ');\n
    \       return string.Join(\" \", words.Where(IsPrime).ToArray());\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyseqk3xq.cs(26,45): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <3ded4ce5b834451f979214e4dd1f9ced>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <3ded4ce5b834451f979214e4dd1f9ced>:0
    \n"
  stdout: ''
  timestamp: 1660015868
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        var result = new
    List<string>();\n        for (int i = 0; i < words.Length; i++) {\n            var
    word = words[i];\n            if (IsPrime(word.Length)) {\n                result.Add(word);\n
    \           }\n        }\n        return string.Join(\" \", result);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This
    is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go
    for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuuc662t0.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var words = sentence.Split(' ');\n        return string.Join(\"
    \", words.Where(w => IsPrime(w.Length)));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n
    \   Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there
    is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi
    am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go
    for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg9vnz5np.cs(25,50): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        var result = new StringBuilder();\n        foreach (var word
    in sentence.Split(' ')) {\n            if (word.Length.IsPrime()) {\n                result.Append(word);\n
    \               result.Append(' ');\n            }\n        }\n        return
    result.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets
    go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp271qyk2y.cs(26,29): error CS1061: ''int'' does not contain a definition
    for ''IsPrime'' and no accessible extension method ''IsPrime'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1660015871
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You are given a string representing a sentence,\n    // the
    sentence contains some words separated by a space,\n    // and you have to return
    a string that contains the words from the original sentence,\n    // whose lengths
    are prime numbers,\n    // the order of the words in the new string should be
    the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This
    is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets
    go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)
    <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string
    sentence) {\n        List<string> res = new List<string>();\n        for (int
    i = 0; i < sentence.Length; i++) {\n            string w = \"\";\n            while
    (i < sentence.Length && sentence[i] != ' ') {\n                w += sentence[i];\n
    \               i++;\n            }\n            if (IsPrime(w.Length)) {\n                res.Add(w);\n
    \           }\n        }\n        return string.Join(\" \", res);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is
    a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for
    swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there
    is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi
    I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go
    for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n
    \   Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplxjw2mge.cs(31,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015871
