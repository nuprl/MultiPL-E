name: HumanEval_14_all_prefixes
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list of all prefixes from shortest to longest of the\
  \ input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
  \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
  \ List<string> AllPrefixes(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
  \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new\
  \ List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"\
  asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
  WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
  WWW\"}))));\n    }\n\n}\n"
completions: ["        var ans = new List<string>();\n        for (int i = 1; i <=\
    \ str.Length; i++) {\n            ans.Add(str.Substring(0, i));\n        }\n \
    \       return ans;", "        List<string> ret = new List<string>();\n      \
    \  for (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        List<string> output = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            output.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return output;", "        List<string> toReturn\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        toReturn.Add(str.Substring(0, i + 1));\n        }\n        return toReturn;",
  "        var ret = new List<string>();\n        for (int i = 1; i <= str.Length;\
    \ i++) {\n            ret.Add(str.Substring(0, i));\n        }\n        return\
    \ ret;", "        var prefixes = new List<string>();\n        int len = str.Length;\n\
    \        for (int i = 1; i <= len; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> output = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  output.Add(str.Substring(0, i + 1));\n        }\n        return output;", " \
    \       List<string> retval = new List<string>();\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            retval.Add(str.Substring(0, i + 1));\n     \
    \   }\n        return retval;", "        List<string> res = new List<string>();\n\
    \        for (int len = 1; len <= str.Length; len++) {\n            res.Add(str.Substring(0,\
    \ len));\n        }\n        return res;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        List<string> ret = new List<string>();\n\
    \        for (int len = 1; len <= str.Length; len++) {\n            ret.Add(str.Substring(0,\
    \ len));\n        }\n        return ret;", "        var L = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            L.Add(str.Substring(0,\
    \ i));\n        }\n        return L;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        List<string> result = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  result.Add(str.Substring(0, i + 1));\n        }\n        return result;", " \
    \       int n = str.Length;\n        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < n; i++) {\n            res.Add(str.Substring(0, i\
    \ + 1));\n        }\n        return res;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        List<string> result = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  result.Add(str.Substring(0, i + 1));\n        }\n        return result;", " \
    \       List<string> res = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            res.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ res;", "        List<string> prefixes = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i +\
    \ 1));\n        }\n        return prefixes;", "        var lst = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            lst.Add(str.Substring(0,\
    \ i));\n        }\n        return lst;", "        List<string> ret = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        List<string> result = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  result.Add(str.Substring(0, i + 1));\n        }\n        return result;", " \
    \       var ans = new List<string>();\n        for (int i = 1; i <= str.Length;\
    \ i++) {\n            ans.Add(str.Substring(0, i));\n        }\n        return\
    \ ans;", "        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n\
    \        }\n        return result;", "        var res = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i));\n        }\n        return res;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        var res = new List<string>();\n\
    \        int len = str.Length;\n        for (int l = 1; l <= len; l++) {\n   \
    \         res.Add(str.Substring(0, l));\n        }\n        return res;", "  \
    \      var prefixes = new List<string>();\n        for (int i = 1; i <= str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i));\n        }\n        return\
    \ prefixes;", "        List<string> result = new List<string>();\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        List<string> result = new\
    \ List<string>();\n        result.Add(\"\");\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            result.Add(str.Substring(0, i + 1));\n        }\n      \
    \  return result;", "        List<string> result = new List<string>();\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> result =\
    \ new List<string>();\n        int len = str.Length;\n        for (int i = 0;\
    \ i < len; i++) {\n            result.Add(str.Substring(0, i + 1));\n        }\n\
    \        return result;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        List<string> ret = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", "        List<string> strings = new\
    \ List<string>();\n        string curr = \"\";\n        foreach (char c in str)\
    \ {\n            curr += c;\n            strings.Add(curr);\n        }\n     \
    \   return strings;", "        var allPrefixes = new List<string>();\n       \
    \ for (int i = 0; i < str.Length; i++) {\n            allPrefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return allPrefixes;", "        var prefixes = new\
    \ List<string>();\n        for (int i = 1; i <= str.Length; i++) {\n         \
    \   prefixes.Add(str.Substring(0, i));\n        }\n        return prefixes;",
  "        var ret = new List<string>();\n        for (int i = 1; i <= str.Length;\
    \ i++) {\n            ret.Add(str.Substring(0, i));\n        }\n        return\
    \ ret;", "        List<string> r = new List<string>();\n        for (int i = 0;\
    \ i < str.Length; i++) {\n            r.Add(str.Substring(0, i + 1));\n      \
    \  }\n        return r;", "        var ret = new List<string>();\n        for\
    \ (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0, i));\n\
    \        }\n        return ret;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        List<string> prefixes = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        var ret = new List<string>();\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            sb.Append(str[i]);\n\
    \            ret.Add(sb.ToString());\n        }\n        return ret;", '        return
    new List<string>(Enumerable.Range(0, str.Length + 1).Select(x => str.Substring(0,
    x)));', "        List<string> result = new List<string>();\n        for (int i\
    \ = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n\
    \        }\n        return result;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        var lst = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            lst.Add(str.Substring(0,\
    \ i));\n        }\n        return lst;", "        List<string> output = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            output.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return output;", "        List<string> ret = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  ret.Add(str.Substring(0, i + 1));\n        }\n        return ret;", "     \
    \   var lst = new List<string>();\n        var len = str.Length;\n        var\
    \ i = 0;\n        while (i < len) {\n            lst.Add(str.Substring(0, i +\
    \ 1));\n            i += 1;\n        }\n        return lst;", "        var output\
    \ = new List<string>();\n        for (int i = 1; i <= str.Length; i++) {\n   \
    \         output.Add(str.Substring(0, i));\n        }\n        return output;",
  "        List<string> result = new List<string>();\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n     \
    \   }\n        return result;", "        List<string> ret = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", "        var res = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i));\n        }\n        return res;", "        List<string> prefixes = new\
    \ List<string>();\n        string current = \"\";\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            current += str[i];\n            prefixes.Add(current);\n\
    \        }\n        return prefixes;", "        var result = new List<string>();\n\
    \        int len = str.Length;\n        for (int i = 1; i <= len; i++) {\n   \
    \         result.Add(str.Substring(0, i));\n        }\n        return result;",
  "        List<string> res = new List<string>();\n        foreach (var i in range(0,\
    \ str.Length + 1)) {\n            res.Add(str.Substring(0, i));\n        }\n \
    \       return res;", "        List<string> ret = new List<string>();\n      \
    \  for (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", '        return new List<string>(Enumerable.Range(0,
    str.Length + 1).Select(i => str.Substring(0, i)));', '        return Enumerable.Range(0,str.Length).Select(i
    => str.Substring(0,i+1)).ToList();', "        List<string> result = new List<string>();\n\
    \        int length = str.Length;\n        for (int i = 1; i <= length; i++) {\n\
    \            result.Add(str.Substring(0, i));\n        }\n        return result;",
  "        List<string> ret = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            ret.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ ret;", "        var prefixes = new List<string>();\n        for (int i = 1;\
    \ i <= str.Length; i++) {\n            prefixes.Add(str.Substring(0, i));\n  \
    \      }\n        return prefixes;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        var a = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            a.Add(str.Substring(0,\
    \ i));\n        }\n        return a;", "        List<string> pre = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            pre.Add(str.Substring(0,\
    \ i));\n        }\n        return pre;", "        List<string> ans = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            ans.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ans;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++)\n            res.Add(str.Substring(0,\
    \ i + 1));\n        return res;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        List<string> res = new List<string>();\n\
    \        for (int ii = 0; ii < str.Length; ii++) {\n            res.Add(str.Substring(0,\
    \ ii + 1));\n        }\n        return res;", "        var lst = new List<string>();\n\
    \        var sb = new StringBuilder();\n        foreach (var c in str) {\n   \
    \         sb.Append(c);\n            lst.Add(sb.ToString());\n        }\n    \
    \    return lst;", "        List<string> ret = new List<string>();\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0, i +\
    \ 1));\n        }\n        return ret;", "        var prefixes = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> outList =\
    \ new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      outList.Add(str.Substring(0, i + 1));\n        }\n        return outList;",
  "        var output = new List<string>();\n        for (int i = 1; i <= str.Length;\
    \ i++) {\n            output.Add(str.Substring(0, i));\n        }\n        return\
    \ output;", "        List<string> strs = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            strs.Add(str.Substring(0, i + 1));\n\
    \        }\n        return strs;", "        var ret = new List<string>();\n  \
    \      for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        var result = new List<string>();\n\
    \        for (int len = 1; len <= str.Length; len++) {\n            result.Add(str.Substring(0,\
    \ len));\n        }\n        return result;", "        List<string> res = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  res.Add(str.Substring(0, i + 1));\n        }\n        return res;", "     \
    \   List<string> lst = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            lst.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ lst;", "        var strlen = str.Length;\n        var prefixes = new List<string>();\n\
    \        for (int i = 1; i <= strlen; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> res = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            res.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ res;", "        int len = str.Length;\n        List<string> list = new List<string>();\n\
    \        for (int i = 0; i < len; i++) {\n            list.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return list;", "        List<string> all_prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        all_prefixes.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ all_prefixes;", "        List<string> lst = new List<string>();\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            lst.Add(str.Substring(0, i +\
    \ 1));\n        }\n        return lst;", "        List<string> prefixes = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> result = new List<string>();\n        for (int x = 1; x <=\
    \ str.Length; x++) {\n            result.Add(str.Substring(0, x));\n        }\n\
    \        return result;", "        List<string> ret = new List<string>();\n  \
    \      for (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        List<string> ret = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", "        List<string> output = new\
    \ List<string>();\n        int length = str.Length;\n        for (int i = 1; i\
    \ <= length; i++) {\n            output.Add(str.Substring(0, i));\n        }\n\
    \        return output;", "        List<string> ret = new List<string>();\n  \
    \      for (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", "        List<string> res = new List<string>();\n\
    \        int len = str.Length;\n        for (int i = 0; i < len; i++) {\n    \
    \        res.Add(str.Substring(0, i + 1));\n        }\n        return res;", " \
    \       return Enumerable.Range(0, str.Length)\n            .Select(i => str.Substring(0,\
    \ i + 1))\n            .ToList();", "        int sz = str.Length;\n        List<string>\
    \ ret = new List<string>();\n        for (int i = 1; i <= sz; i++) {\n       \
    \     ret.Add(str.Substring(0, i));\n        }\n        return ret;", "      \
    \  List<string> res = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            res.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ res;", "        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n\
    \        }\n        return result;", "        var prefixes = new List<string>();\n\
    \        for (int len = 1; len <= str.Length; len++) {\n            prefixes.Add(str.Substring(0,\
    \ len));\n        }\n        return prefixes;", "        List<string> ret = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  ret.Add(str.Substring(0, i + 1));\n        }\n        return ret;", "     \
    \   List<string> ret = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            ret.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ ret;", "        var res = new List<string>();\n        for (int i = 1; i <=\
    \ str.Length; i++) {\n            res.Add(str.Substring(0, i));\n        }\n \
    \       return res;", "        var s = new List<string>();\n        var i = 1;\n\
    \        while (i <= str.Length) {\n            s.Add(str.Substring(0, i));\n\
    \            i++;\n        }\n        return s;", "        var prefixes = new\
    \ List<string>();\n        for (int i = 1; i <= str.Length; i++) {\n         \
    \   prefixes.Add(str.Substring(0, i));\n        }\n        return prefixes;",
  "        var result = new List<string>();\n        var len = str.Length;\n     \
    \   for (int i = 1; i <= len; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        var results = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            results.Add(str.Substring(0,\
    \ i));\n        }\n        return results;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        List<string> ret = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", "        List<string> strs = new\
    \ List<string>();\n        for (int i = 1; i <= str.Length; i++) {\n         \
    \   strs.Add(str.Substring(0, i));\n        }\n        return strs;", "      \
    \  List<string> AllPrefixes = new List<string>();\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            AllPrefixes.Add(str.Substring(0, i + 1));\n\
    \        }\n        return AllPrefixes;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        List<string> r = new List<string>();\n\
    \        int len = str.Length;\n        for (int i = 0; i < len; i++) {\n    \
    \        r.Add(str.Substring(0, i + 1));\n        }\n        return r;", "   \
    \     List<string> output = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            output.Add(str.Substring(0, i + 1));\n        }\n      \
    \  return output;", "        var result = new List<string>();\n        for (int\
    \ i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0, i));\n\
    \        }\n        return result;", "        List<string> lst = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            lst.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return lst;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        List<string> all = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            all.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return all;", "        List<string> ret = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", "        List<string> result = new\
    \ List<string>();\n        int length = str.Length;\n        for (int i = 1; i\
    \ <= length; i++) {\n            result.Add(str.Substring(0, i));\n        }\n\
    \        return result;", "        List<string> res = new List<string>();\n  \
    \      for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        var len = str.Length;\n\
    \        var res = new List<string>();\n        for (int i = 1; i <= len; i++)\
    \ {\n            res.Add(str.Substring(0, i));\n        }\n        return res;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> res = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  res.Add(str.Substring(0, i + 1));\n        }\n        return res;", "     \
    \   var res = new List<string>();\n        for (int i = 1; i <= str.Length; i++)\
    \ {\n            res.Add(str.Substring(0, i));\n        }\n        return res;",
  "        List<string> ret = new List<string>();\n        ret.Add(\"\");\n      \
    \  for (int i = 0; i < str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", "        List<string> prefixes =\
    \ new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        return Enumerable.Range(0, str.Length)\n            .Select(i => str.Substring(0,\
    \ i + 1))\n            .ToList();", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        var res = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i));\n        }\n        return res;", "        var res = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i));\n        }\n        return res;", "        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> ret = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  ret.Add(str.Substring(0, i + 1));\n        }\n        return ret;", "     \
    \   List<string> outLst = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            outLst.Add(str.Substring(0, i + 1));\n        }\n      \
    \  return outLst;", "        List<string> res = new List<string>();\n        for\
    \ (int i = 0; i < str.Length; i++)\n            res.Add(str.Substring(0, i + 1));\n\
    \        return res;", "        List<string> list = new List<string>();\n    \
    \    int len = str.Length;\n        for (int k = 1; k <= len; k++) {\n       \
    \     list.Add(str.Substring(0, k));\n        }\n        return list;", "    \
    \    var res = new List<string>();\n        int len = str.Length;\n        res.Add(str);\n\
    \        while (len > 0) {\n            len -= 1;\n            res.Add(str.Substring(0,\
    \ len));\n        }\n        return res;", "        var res = new List<string>();\n\
    \        for (int len = 1; len <= str.Length; len++) {\n            res.Add(str.Substring(0,\
    \ len));\n        }\n        return res;", "        var res = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i));\n        }\n        return res;", "        var prefixes = new List<string>();\n\
    \        for (int length = 1; length <= str.Length; length++) {\n            var\
    \ prefix = str.Substring(0, length);\n            prefixes.Add(prefix);\n    \
    \    }\n        return prefixes;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        var L = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++)\n            L.Add(str.Substring(0,\
    \ i));\n        return L;", "        List<string> list = new List<string>();\n\
    \        list.Add(\"\");\n        for (int i = 0; i < str.Length; i++) {\n   \
    \         list.Add(str.Substring(0, i + 1));\n        }\n        return list;",
  "        var lst = new List<string>();\n        for (int i = 1; i <= str.Length;\
    \ i++) {\n            lst.Add(str.Substring(0, i));\n        }\n        return\
    \ lst;", "        var res = new List<string>();\n        for (int i = 1; i <=\
    \ str.Length; i++) {\n            res.Add(str.Substring(0, i));\n        }\n \
    \       return res;", "        var ret = new List<string>();\n        for (int\
    \ i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0, i));\n\
    \        }\n        return ret;", "        List<string> prefixes = new List<string>();\n\
    \        int l = str.Length;\n        for (int i = 1; i <= l; i++) {\n       \
    \     prefixes.Add(str.Substring(0, i));\n        }\n        return prefixes;",
  "        var ans = new List<string>();\n        for (int i = 1; i <= str.Length;\
    \ i++) {\n            ans.Add(str.Substring(0, i));\n        }\n        return\
    \ ans;", "        var result = new List<string>();\n        for (int i = 1; i\
    \ <= str.Length; i++) {\n            result.Add(str.Substring(0, i));\n      \
    \  }\n        return result;", "        var prefixes = new List<string>();\n \
    \       for (int i = 1; i <= str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> ret = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  ret.Add(str.Substring(0, i + 1));\n        }\n        return ret;", "     \
    \   List<string> res = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            res.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ res;", '        return Enumerable.Range(0, str.Length).Select(i => str.Substring(0,
    i + 1)).ToList();', "        var prefixes = new List<string>();\n        for (int\
    \ i = 1; i <= str.Length; i++) {\n            prefixes.Add(str.Substring(0, i));\n\
    \        }\n        return prefixes;", "        List<string> results = new List<string>();\n\
    \        for (int j = 0; j < str.Length; j++) {\n            results.Add(str.Substring(0,\
    \ j + 1));\n        }\n        return results;", '        return Enumerable.Range(0,
    str.Length + 1).Select(i => str.Substring(0, i)).ToList();', "        var ret\
    \ = new List<string>();\n        for (int i = 1; i <= str.Length; i++) {\n   \
    \         ret.Add(str.Substring(0, i));\n        }\n        return ret;", "  \
    \      List<string> ret = new List<string>();\n        int len = str.Length;\n\
    \        for (int i = 0; i < len; i++) {\n            ret.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return ret;", "        List<string> result = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  result.Add(str.Substring(0, i + 1));\n        }\n        return result;", " \
    \       List<string> ret = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            ret.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ ret;", "        List<string> prefixes = new List<string>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (char c in str) {\n            sb.Append(c);\n\
    \            prefixes.Add(sb.ToString());\n        }\n        return prefixes;",
  "        List<string> ans = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            ans.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ ans;", "        var result = new List<string>();\n        for (int i = 1; i\
    \ <= str.Length; i++) {\n            result.Add(str.Substring(0, i));\n      \
    \  }\n        return result;", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            res.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return res;", "        var result = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        List<string> pref = new List<string>();\n\
    \        for (int len = 1; len <= str.Length; len++) {\n            pref.Add(str.Substring(0,\
    \ len));\n        }\n        return pref;", "        var ret = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            ret.Add(str.Substring(0,\
    \ i));\n        }\n        return ret;", "        var result = new List<string>();\n\
    \        var resultItem = \"\";\n        foreach (var c in str) {\n          \
    \  resultItem += c;\n            result.Add(resultItem);\n        }\n        return\
    \ result;", "        List<string> list = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            list.Add(str.Substring(0, i + 1));\n\
    \        }\n        return list;", "        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        var Prefixes = new List<string>();\n\
    \        for (int i = 1; i <= str.Length; i++) {\n            Prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return Prefixes;", "        List<string> ret = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  ret.Add(str.Substring(0, i + 1));\n        }\n        return ret;", "     \
    \   List<string> prefixes = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        var prefixes = new List<string>();\n        for\
    \ (int i = 1; i <= str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> res = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  res.Add(str.Substring(0, i + 1));\n        }\n        return res;", "     \
    \   var ret = new List<string>();\n        var i = 0;\n        while (i < str.Length)\
    \ {\n            ret.Add(str.Substring(0, i+1));\n            i++;\n        }\n\
    \        return ret;", "        List<string> results = new List<string>();\n \
    \       for (int i = 1; i <= str.Length; i++) {\n            results.Add(str.Substring(0,\
    \ i));\n        }\n        return results;", "        List<string> allPrefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        allPrefixes.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ allPrefixes;", "        var ret = new List<string>();\n        var sb = new\
    \ StringBuilder();\n        foreach (var c in str) {\n            sb.Append(c);\n\
    \            ret.Add(sb.ToString());\n        }\n        return ret;", "     \
    \   var ret = new List<string>();\n        for (int i = 1; i <= str.Length; i++)\
    \ {\n            ret.Add(str.Substring(0, i));\n        }\n        return ret;",
  '        return Enumerable.Range(0, str.Length).Select(i => str.Substring(0, i+1)).ToList();',
  "        List<string> result = new List<string>();\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n     \
    \   }\n        return result;", "        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> result =\
    \ new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      result.Add(str.Substring(0, i + 1));\n        }\n        return result;",
  "        List<string> result = new List<string>();\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n     \
    \   }\n        return result;", '        return Enumerable.Range(0, str.Length
    + 1).Select(i => str.Substring(0, i)).ToList();', "        List<string> ret =\
    \ new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      ret.Add(str.Substring(0, i + 1));\n        }\n        return ret;", " \
    \       List<string> res = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            res.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ res;", "        List<string> result = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n\
    \        }\n        return result;"]
stop_tokens:
- "\n    }\n"
