name: HumanEval_15_string_sequence
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return a string containing space-delimited numbers starting\
  \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n  \
  \  // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static string\
  \ StringSequence(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
  0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
  0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
completions: ["        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(\" \"\
    );\n        }\n        return sb.ToString();", "        string output = \"\";\n\
    \        for (long i = 0; i <= n; i++) {\n            output += i.ToString() +\
    \ \" \";\n        }\n        return output.Trim();", "        if (n < 0)\n   \
    \         throw new ArgumentException(String.Format(\"n={0} < 0\", n));\n    \
    \    if (n == 0)\n            return \"0\";\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            if (i > 0)\n           \
    \     sb.Append(' ');\n            sb.Append(i);\n        }\n        return sb.ToString();",
  "        string str = \"\";\n        for (int i = 0; i <= n; i++) {\n          \
    \  str += \" \" + i;\n        }\n        return str.Substring(1);", "        StringBuilder\
    \ sb = new StringBuilder();\n        sb.Append(\"0\");\n        for (int i = 1;\
    \ i <= n; i++) {\n            sb.Append(\" \");\n            sb.Append(i);\n \
    \       }\n        return sb.ToString();", '        return Enumerable.Range(0,
    (int)n + 1).Select(p => p.ToString()).Aggregate((x, y) => x + " " + y);', "  \
    \      StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n;\
    \ i++) {\n            sb.Append(i);\n            sb.Append(\" \");\n        }\n\
    \        return sb.ToString();", "        var answer = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            answer.Append(i);\n    \
    \        answer.Append(\" \");\n        }\n        return answer.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n;\
    \ i++) {\n            sb.Append(i);\n            sb.Append(\" \");\n        }\n\
    \        sb.Length -= 1;\n        return sb.ToString();", "        var ns = new\
    \ List<string>();\n        for (long i = 0; i <= n; i++) {\n            ns.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", ns);", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n           \
    \ sb.Append(i);\n            sb.Append(\" \");\n        }\n        return sb.ToString().Trim();",
  "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n      \
    \      result += i + \" \";\n        }\n        return result.Trim();", "    \
    \    StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n;\
    \ i++) {\n            sb.Append(i);\n            sb.Append(\" \");\n        }\n\
    \        sb.Length--;\n        return sb.ToString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.AppendFormat(\"{0} \", i);\n        }\n        return sb.ToString();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n+1).Select(x => x.ToString()));',
  "        string res = \"\";\n        for (long i = 0; i <= n; i++) {\n         \
    \   res += \" \" + i;\n        }\n        return res.Substring(1);", "       \
    \ if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative.\"\
    );\n        }\n        if (n == 0) {\n            return \"0\";\n        }\n \
    \       StringBuilder result = new StringBuilder((n+1)*2);\n        for (long\
    \ i = 0; i <= n; i++) {\n            result.AppendFormat(\"{0} \", i);\n     \
    \   }\n        return result.ToString(0, result.Length-1);", "        string result\
    \ = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += i + \"\
    \ \";\n        }\n        return result.Trim();", "        if (n < 0) throw new\
    \ ArgumentException(\"Invalid input\");\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));", "        var k = n + 1;\n        var r = \"\";\n        for\
    \ (var i = 0L; i < k; i++) {\n            r += \" \" + i;\n        }\n       \
    \ return r.Substring(1);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        sb.Length--; // Strip the last space.\n\
    \        return sb.ToString();", '        return Enumerable.Range(0, Convert.ToInt32(n
    + 1)).Select(i => i.ToString()).Aggregate((a, b) => a + " " + b);', "        string\
    \ result = \"\";\n        for (long i = 0; i <= n; i++) {\n            result\
    \ += i.ToString() + \" \";\n        }\n        return result.Trim();", '        return
    string.Join(" ", Enumerable.Range(0, (int) n + 1));', '        return String.Join("
    ", Enumerable.Range(0, (int)n + 1).Select(i => i.ToString()));', "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.Append(i);\n            sb.Append(\" \");\n        }\n        return sb.ToString().Trim();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n+1).Select(x => x.ToString()));',
  "        var result = new List<string>();\n        for (long i = 0; i <= n; i++)\
    \ {\n            result.Add(i.ToString());\n        }\n        return string.Join(\"\
    \ \", result);", "        var str = new StringBuilder();\n        for (var i =\
    \ 0L; i <= n; i++) {\n            str.Append(i.ToString());\n            str.Append(\"\
    \ \");\n        }\n        return str.ToString().Trim();", "        int v1 = 0;\n\
    \        StringBuilder sb = new StringBuilder();\n        while ((long)v1 <= n)\
    \ {\n            sb.Append(v1);\n            if ((long)v1 != n) {\n          \
    \      sb.Append(\" \");\n            }\n            v1 += 1;\n        }\n   \
    \     return sb.ToString();", "        var sb = new StringBuilder();\n       \
    \ for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append('\
    \ ');\n        }\n        return sb.ToString().Trim();", "        if (n < 0) {\n\
    \            throw new ArgumentException(\"StringSequence: n must be positive\
    \ or zero.\");\n        }\n        return String.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));", '        return string.Join(" ", Enumerable.Range(0, (int)n
    + 1));', "        var result = new List<string>();\n        for (long i = 0; i\
    \ <= n; i++) {\n            result.Add(i.ToString());\n        }\n        return\
    \ string.Join(\" \", result);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        return sb.ToString();", "        List<string>\
    \ res = new List<string>();\n        for (int i = 0; i <= n; i++) {\n        \
    \    res.Add(i.ToString());\n        }\n        return string.Join(\" \", res);",
  "        string res = \"\";\n        for (int i = 0; i <= n; i++) {\n          \
    \  res += i.ToString() + \" \";\n        }\n        return res.Trim();", "   \
    \     string result = \"\";\n        for (int i = 0; i <= n; i++) {\n        \
    \    result += i.ToString() + \" \";\n        }\n        return result.Trim();",
  "        string s = \"\";\n        for (long i = 0; i <= n; i++) {\n           \
    \ s += i + \" \";\n        }\n        return s.Trim();", "        var strBuilder\
    \ = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n          \
    \  strBuilder.Append(i);\n            strBuilder.Append(\" \");\n        }\n \
    \       var str = strBuilder.ToString();\n        return str.Substring(0, str.Length\
    \ - 1);", "        StringBuilder res = new StringBuilder();\n        for (long\
    \ i = 0; i <= n; i++) {\n            res.Append(i.ToString());\n            res.Append(\"\
    \ \");\n        }\n        res.Length--; // remove the last space\n        return\
    \ res.ToString();", "        StringBuilder sb = new StringBuilder();\n       \
    \ for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(\"\
    \ \");\n        }\n        return sb.ToString().Trim();", "        var output\
    \ = new List<string>();\n        for (var i = 0L; i <= n; i++) {\n           \
    \ output.Add(i.ToString());\n        }\n        return string.Join(\" \", output);",
  '        return String.Join(" ", Enumerable.Range(0, Convert.ToInt32(n)+1));', '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        List<BigInteger>\
    \ res = new List<BigInteger>();\n        for (BigInteger i = 0; i <= n; i++) {\n\
    \            res.Add(i);\n        }\n        return String.Join(\" \", res);",
  "        if (n < 0)\n            throw new ArgumentException(\"n must be non-negative.\"\
    );\n        return string.Join(\" \", Enumerable.Range(0, (int)n + 1));", "  \
    \      if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\"\
    );\n        }\n        return string.Join(\" \", Enumerable.Range(0, (int)n +\
    \ 1));", "        var items = new List<string>();\n        for (long i = 0; i\
    \ <= n; i++) {\n            items.Add(i.ToString());\n        }\n        return\
    \ string.Join(\" \", items);", '        return String.Join(" ", Enumerable.Range(0,
    (int) n + 1));', '        return string.Join(" ", Enumerable.Range(0, (int) n
    + 1));', "        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i <= n; i++) {\n            sb.Append($\"{i} \");\n        }\n        return\
    \ sb.ToString().Trim();", '        return Enumerable.Range(0, (int)n + 1).Select(x
    => x.ToString()).Aggregate((x, y) => x + " " + y);', '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', "        var a = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            if (i > 0) a.Append(' ');\n\
    \            a.Append(i);\n        }\n        return a.ToString();", "       \
    \ string result = \"\";\n        for (long i = 0; i <= n; i++) {\n           \
    \ result += i.ToString() + \" \";\n        }\n        return result.Trim();",
  "        string ret = \"\";\n        for (long i = 0; i <= n; i++)\n           \
    \ ret += \" \" + i;\n        return ret.Substring(1);", "        var sb = new\
    \ StringBuilder();\n        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n\
    \            sb.Append(' ');\n        }\n        sb.Length--;\n        return\
    \ sb.ToString();", "        string r = \"\";\n        for (int i = 0; i <= n;\
    \ i++) {\n            r += \" \" + i;\n        }\n        return r.Substring(1);",
  "        var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n\
    \            if (i > 0) sb.Append(' ');\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();", "        var sb = new StringBuilder();\n    \
    \    for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append('\
    \ ');\n        }\n        return sb.ToString();", "        string result = \"\"\
    ;\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString()\
    \ + \" \";\n        }\n        return result.Trim();", "        string seq = \"\
    \";\n        for (long i = 0; i <= n; i++) {\n            seq += i.ToString()\
    \ + \" \";\n        }\n        return seq.Trim();", "        if (n == 0) return\
    \ \"0\";\n        var result = new List<string>();\n        for (int i = 0; i\
    \ <= n; i++) {\n            result.Add(i.ToString());\n        }\n        return\
    \ string.Join(\" \", result);", "        string s = \"\";\n        for (long i\
    \ = 0; i <= n; i++) {\n            s += \" \" + i;\n        }\n        return\
    \ s.Substring(1);", '        return string.Join(" ", Enumerable.Range(0, (int)n
    + 1));', "        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i <= n; i++) {\n            sb.Append(i + \" \");\n        }\n        return\
    \ sb.ToString().Trim();", "        StringBuilder sb = new StringBuilder();\n \
    \       for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n          \
    \  sb.Append(\" \");\n        }\n        return sb.ToString().Trim();", "    \
    \    var sequence = Enumerable.Range(0, (int)n + 1).Select(i => i.ToString());\n\
    \        return string.Join(\" \", sequence);", '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', "        List<string> items = new List<string>();\n\
    \        for (long i = 0; i <= n; i++) {\n            items.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", items);", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.AppendFormat(\"{0} \", i);\n        }\n        return sb.ToString();",
  "        var result = new List<long>();\n        for (var i = 0L; i <= n; i++)\n\
    \            result.Add(i);\n        return string.Join(\" \", result);", "  \
    \      StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n;\
    \ i++) {\n            sb.Append(i + \" \");\n        }\n        return sb.ToString().Trim();",
  "        StringBuilder sb = new StringBuilder();\n        foreach (int i in Enumerable.Range(0,\
    \ (int)n + 1)) {\n            sb.Append(i);\n            sb.Append(\" \");\n \
    \       }\n        return sb.ToString().Trim();", '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', "        List<long> ls = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            ls.Add(i);\n        }\n\
    \        return string.Join(\" \", ls);", "        var stringSequence = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            stringSequence.Append(i);\n\
    \            stringSequence.Append(\" \");\n        }\n        stringSequence.Remove(stringSequence.Length\
    \ - 1, 1);\n        return stringSequence.ToString();", "        StringBuilder\
    \ builder = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n  \
    \          builder.Append($\"{i} \");\n        }\n        return builder.ToString().Trim();",
  "        StringBuilder result = new StringBuilder();\n        for (long i = 0; i\
    \ <= n; i++) {\n            result.Append(i.ToString());\n            result.Append(\"\
    \ \");\n        }\n        return result.ToString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.Append(i + \" \");\n        }\n        return sb.ToString().Trim();",
  "        var sequence = \"\";\n        for (long i = 0; i <= n; i++) {\n       \
    \     sequence += i.ToString() + \" \";\n        }\n        return sequence.Trim();",
  "        return new string(' ', Convert.ToInt32(n) + 1).Replace(\" \", \"{0} \"\
    ).TrimEnd(' ').Replace(\"{0}\", \"{0}{0}\").TrimEnd(' ').FormatWith(Enumerable.Range(0,\
    \ Convert.ToInt32(n) + 1).Select(x => x.ToString()).ToArray());", "        string\
    \ str = \"\";\n        for (long i = 0; i <= n; i++) {\n            str += i.ToString()\
    \ + \" \";\n        }\n        return str.Trim();", "        var sb = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n         \
    \       sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();", '        return Enumerable.Range(0, (int) n +
    1).Select(x => x.ToString()).Aggregate((a, b) => a + " " + b);', "        StringBuilder\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        string\
    \ retval = \"\";\n        for (int i = 0; i <= n; i++)\n            retval +=\
    \ i.ToString() + \" \";\n        return retval.Trim();", "        var stringResult\
    \ = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n          \
    \  stringResult.Append(i);\n            stringResult.Append(\" \");\n        }\n\
    \        return stringResult.ToString().Trim();", "        List<string> l = new\
    \ List<string>();\n        for (int i = 0; i <= n; i++) {\n            l.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", l);", '        return Enumerable.Range(0,
    (int)n + 1).Aggregate("", (acc, x) => acc + " " + x).Trim();', "        if (n\
    \ < 0) throw new ArgumentException(\"n must be non-negative.\");\n        var\
    \ l = new List<string>();\n        for (var i = 0L; i <= n; i++) l.Add(i.ToString());\n\
    \        return string.Join(\" \", l);", "        List<string> r = new List<string>();\n\
    \        for (long i = 0; i <= n; i++) {\n            r.Add(string.Format(\"{0}\"\
    , i));\n        }\n        return string.Join(\" \", r);", '        return (n
    < 0) ? "" : string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var\
    \ v = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n        \
    \    if (i != 0) {\n                v.Append(\" \");\n            }\n        \
    \    v.Append(i);\n        }\n        return v.ToString();", "        StringBuilder\
    \ result = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n   \
    \         result.Append(i);\n            result.Append(\" \");\n        }\n  \
    \      return result.ToString().Trim();", "        string[] result = new string[n\
    \ + 1];\n        for (int i = 0; i <= n; i++) {\n            result[i] = i.ToString();\n\
    \        }\n        return string.Join(\" \", result);", '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', "        var ans = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++)\n            ans.Append(i).Append(' ');\n\
    \        return ans.ToString();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n+1).Select(x => x.ToString()));', "        StringBuilder builder = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            builder.Append(i.ToString());\n\
    \            builder.Append(\" \");\n        }\n        return builder.ToString();",
  "        var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i + \" \");\n        }\n        return sb.ToString().Trim();",
  "        var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i + \" \");\n        }\n        return sb.ToString().Trim();",
  "        if (n == 0) return \"0\";\n        var sb = new StringBuilder();\n    \
    \    while (n != 0) {\n            sb.Append(n);\n            sb.Append(' ');\n\
    \            n--;\n        }\n        sb.Append('0');\n        return sb.ToString();",
  "        var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n\
    \            if (i > 0) {\n                sb.Append(\" \");\n            }\n\
    \            sb.Append(i);\n        }\n        return sb.ToString();", "     \
    \   var buf = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            if (i > 0) buf.Append(' ');\n            buf.Append(i);\n       \
    \ }\n        return buf.ToString();", "        var sequence = new string[n + 1];\n\
    \        for (long i = 0; i <= n; i++) {\n            sequence[i] = i.ToString();\n\
    \        }\n        return string.Join(\" \", sequence);", "        string s =\
    \ \"\";\n        for (int i = 0; i <= n; i++) {\n            s += i + \" \";\n\
    \        }\n        return s.Trim();", "        List<string> res = new List<string>();\n\
    \        for (int i = 0; i <= n; i++) {\n            res.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", res);", "        var result = \"\
    \";\n        for (long i = 0; i <= n; i++) {\n            result += i + \" \"\
    ;\n        }\n        return result.Trim();", "        var ret = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            ret.Add(i);\n        }\n\
    \        return String.Join(\" \", ret);", "        var res = new System.Text.StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            res.Append(i);\n        \
    \    res.Append(\" \");\n        }\n        res.Remove(res.Length - 1, 1);\n \
    \       return res.ToString();", "        var ans = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++)\n            ans.Append($\"{i} \");\n    \
    \    return ans.ToString().Trim();", "        if (n < 0)\n            throw new\
    \ ArgumentException(String.Format(\"n: {0} < 0\", n));\n        return String.Join(\"\
    \ \", Enumerable.Range(0, (int)n + 1));", "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n\
    \            sb.Append(' ');\n        }\n        return sb.ToString();", '        return
    string.Join(" ", Enumerable.Range(0, (int) n + 1));', '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n         \
    \       sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();", "        string s = \"\";\n        for (int i\
    \ = 0; i <= n; i++) {\n            s += i.ToString() + \" \";\n        }\n   \
    \     return s.Trim();", "        int i = 0;\n        var sb = new StringBuilder();\n\
    \        while (i <= n) {\n            sb.Append(i);\n            sb.Append('\
    \ ');\n            i++;\n        }\n        return sb.ToString();", "        var\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.AppendFormat(\"{0} \", i);\n        }\n        return sb.ToString().Trim();",
  "        string res = \"\";\n        for (long i = 0; i <= n; i++)\n           \
    \ res += i + \" \";\n        return res.Trim();", "        List<string> str =\
    \ new List<string>();\n        for (long i = 0; i <= n; i++) {\n            str.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", str);", '        return String.Join("
    ", Enumerable.Range(0, (int)n+1).Select(x => x.ToString()));', "        var answer\
    \ = new List<string>((int)n + 1);\n        for (long i = 0; i <= n; i++) {\n \
    \           answer.Add(i.ToString());\n        }\n        return string.Join(\"\
    \ \", answer);", "        var ret = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            ret.Append(i);\n            ret.Append(\" \"\
    );\n        }\n        return ret.ToString();", "        StringBuilder b = new\
    \ StringBuilder();\n        for (long i = 0; i <= n; i++) {\n            b.Append(i.ToString());\n\
    \            b.Append(' ');\n        }\n        b.Remove(b.Length - 1, 1);\n \
    \       return b.ToString();", "        var arr = new string[n + 1];\n       \
    \ for (long i = 0; i <= n; i++) {\n            arr[i] = i.ToString();\n      \
    \  }\n        return string.Join(\" \", arr);", "        string s = \"\";\n  \
    \      for (int i = 0; i <= n; i++) {\n            s += i.ToString() + \" \";\n\
    \        }\n        return s.Trim();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n\
    \            sb.Append(\" \");\n        }\n        return sb.ToString().Trim();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        //\
    \ BEGIN SOLUTION\n        return string.Join(\" \", Enumerable.Range(0, (int)n\
    \ + 1));\n        // END SOLUTION", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n\
    \            sb.Append(\" \");\n        }\n        return sb.ToString();", " \
    \       if (n < 0) {\n            throw new ArgumentException(\"Input should be\
    \ a non-negative integer.\", \"n\");\n        }\n        return string.Join(\"\
    \ \", Enumerable.Range(0, (int)n + 1));", "        if (n == 0) {\n           \
    \ return \"0\";\n        } else {\n            return StringSequence(n - 1) +\
    \ \" \" + n.ToString();\n        }", "        return String.Join(\" \",\n    \
    \        Enumerable.Range(0, (int)n+1)\n        );", "        string ret = \"\"\
    ;\n        for (long i = 0; i <= n; i++) {\n            ret += i.ToString() +\
    \ \" \";\n        }\n        return ret.Trim();", "        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n\
    \            sb.Append(\" \");\n        }\n        sb.Remove(sb.Length - 1, 1);\n\
    \        return sb.ToString();", "        List<string> list = new List<string>();\n\
    \        for (int i = 0; i <= n; i++) {\n            list.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", list);", "        return Enumerable.Range(0,\
    \ (int)n + 1).Aggregate(\n            new StringBuilder(),\n            (sb, i)\
    \ => sb.Append($\"{i} \"),\n            sb => sb.ToString().Trim()\n        );",
  "        if (n < 0) {\n            throw new ArgumentException(\"Expected n >= 0,\
    \ got n = \" + n + \".\");\n        }\n        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; ++i) {\n            if (i > 0) {\n         \
    \       sb.Append(' ');\n            }\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();", "        var b = new StringBuilder();\n     \
    \   for (int i = 0; i <= n; i++) {\n            if (i != 0) b.Append(' ');\n \
    \           b.Append(i);\n        }\n        return b.ToString();", "        string\
    \ s = \"\";\n        for (long i = 0; i <= n; i++) {\n            s += i.ToString()\
    \ + \" \";\n        }\n        return s.Trim();", "        string result = \"\"\
    ;\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString()\
    \ + \" \";\n        }\n        return result.Trim();", "        string ret = \"\
    \";\n        for (int i = 0; i <= n; i++) {\n            ret += \" \" + i;\n \
    \       }\n        return ret.Substring(1);", "        var result = new List<string>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", result);", "        string sequence\
    \ = \"\";\n        for (long i = 0; i <= n; i++) {\n            sequence += i.ToString()\
    \ + \" \";\n        }\n        return sequence.Trim();", '        return string.Join("
    ", Enumerable.Range(0, (int)n+1).Select(i => i.ToString()));', "        var a\
    \ = new string[n + 1];\n        for (int i = 0; i <= n; i++) {\n            a[i]\
    \ = i.ToString();\n        }\n        return string.Join(\" \", a);", "      \
    \  var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n  \
    \          sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString();", "        StringBuilder builder = new StringBuilder();\n   \
    \     for (long x = 0; x <= n; x++) {\n            builder.Append(x);\n      \
    \      builder.Append(\" \");\n        }\n        return builder.ToString();",
  "        var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n\
    \            if (i > 0) {\n                sb.Append(\" \");\n            }\n\
    \            sb.Append(i);\n        }\n        return sb.ToString();", "     \
    \   StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++)\
    \ {\n            sb.Append(i);\n            sb.Append(\" \");\n        }\n   \
    \     return sb.ToString();", "        //TODO: Implement\n        //StringBuilder\
    \ numbers = new StringBuilder();\n        //for (int i = 0; i <= n; i++)\n   \
    \     //{\n        //    numbers.Append(i + \" \");\n        //}\n        //return\
    \ numbers.ToString().Trim();\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));", "        // Write your code here.\n        return \"\";", " \
    \       int cur = 0;\n        var result = new List<string>();\n        while\
    \ (cur <= n) {\n            result.Add(cur.ToString());\n            cur += 1;\n\
    \        }\n        return string.Join(\" \", result);", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.Append(i + \" \");\n        }\n        return sb.ToString().Trim();",
  "        if (n < 0) throw new ArgumentException(\"Sequence length must be non-negative\"\
    );\n        var sb = new StringBuilder();\n        for (int i = 0; i <= n; i++)\
    \ sb.Append(i.ToString() + \" \");\n        sb.Length -= 1;\n        return sb.ToString();",
  '        return String.Join(" ", Enumerable.Range(0, (int) n + 1));', '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var l = new List<string>();\n\
    \        for (var i = 0L; i <= n; i++) {\n            l.Add(i.ToString());\n \
    \       }\n        return string.Join(\" \", l);", "        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.Append(i\
    \ + \" \");\n        }\n        return sb.ToString().Trim();", "        string[]\
    \ args = new string[n + 1];\n        for (int i = 0; i <= n; i++) {\n        \
    \    args[i] = String.valueOf(i);\n        }\n        return String.join(\" \"\
    , args);", "        StringBuilder result = new StringBuilder();\n        for (long\
    \ i = 0; i <= n; i++) {\n            result.Append(i);\n            result.Append(\"\
    \ \");\n        }\n        return result.ToString();", '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', "        var seq = Enumerable.Range(0,\
    \ (int)n + 1).Select(x => x.ToString());\n        return string.Join(\" \", seq);",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.Append(i);\n            sb.Append(\" \");\n        }\n        sb.Length\
    \ -= 1;\n        return sb.ToString();", "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString();", "        var\
    \ list = new List<string>();\n        for (long i = 0; i <= n; i++) {\n      \
    \      list.Add(i.ToString());\n        }\n        return string.Join(\" \", list);",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n;\
    \ i++) {\n            sb.Append(i.ToString());\n            sb.Append(\" \");\n\
    \        }\n        return sb.ToString().Trim();", "        var list = new List<string>();\n\
    \        for (var i = 0L; i <= n; i++) {\n            list.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", list);", "        string result\
    \ = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString()\
    \ + \" \";\n        }\n        return result.Trim();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.Append(i + \" \");\n        }\n        return sb.ToString().Trim();",
  '        return string.Join(" ", Enumerable.Range(0, (int) n + 1));', "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.Append(i.ToString());\n            sb.Append(\" \");\n        }\n    \
    \    return sb.ToString().Trim();", "        var result = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            result.Append(i).Append(\"\
    \ \");\n        }\n        return result.ToString().Trim();", "        var sb\
    \ = new StringBuilder();\n        if (n > 0) {\n            foreach (var i in\
    \ Enumerable.Range(0, (int)n + 1)) {\n                sb.Append(i);\n        \
    \        sb.Append(\" \");\n            }\n        } else {\n            sb.Append(0);\n\
    \        }\n        return sb.ToString();", "        string[] strs = new string[n\
    \ + 1];\n        for (int i = 0; i <= n; i++) {\n            strs[i] = i.ToString();\n\
    \        }\n        return string.Join(\" \", strs);", "        var result = new\
    \ StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n            result.Append(i.ToString());\n\
    \            result.Append(\" \");\n        }\n        return result.ToString().Trim();",
  "        var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString().Trim();", "        string ans = \"\";\n        for (long i = 0;\
    \ i <= n; i++) {\n            ans += i.ToString() + \" \";\n        }\n      \
    \  return ans.Trim();", "        var ans = new StringBuilder();\n        for (long\
    \ i = 0; i <= n; i++) {\n            ans.Append(i);\n            ans.Append('\
    \ ');\n        }\n        return ans.ToString().Trim();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.Append(i.ToString());\n            sb.Append(\" \");\n        }\n    \
    \    sb.Remove(sb.Length - 1, 1);\n        return sb.ToString();", "        StringBuilder\
    \ res = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n      \
    \      res.Append(i.ToString());\n            res.Append(\" \");\n        }\n\
    \        return res.ToString();", '        return Enumerable.Range(0, (int)n +
    1).Select(x => x.ToString()).Aggregate((x, y) => x + " " + y);', '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        List<string> sequence\
    \ = new List<string>();\n        for (int i = 0; i <= n; i++)\n            sequence.Add(i.ToString());\n\
    \        return string.Join(\" \", sequence);", "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        sb.Length--; // remove last space\n \
    \       return sb.ToString();", "        string[] r = new string[n + 1];\n   \
    \     for (long i = 0; i <= n; i++) {\n            r[i] = i.ToString();\n    \
    \    }\n        return string.Join(\" \", r);", "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString();", "        if (n\
    \ == 0) return \"0\";\n        return string.Join(\" \", Enumerable.Range(0, (int)n\
    \ + 1));", "        var result = new StringBuilder();\n        for (var i = 0L;\
    \ i <= n; i++) {\n            result.Append(i.ToString());\n            result.Append(\"\
    \ \");\n        }\n        return result.ToString();", "        string result\
    \ = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += i + \"\
    \ \";\n        }\n        return result.Trim();", "        StringBuilder res =\
    \ new StringBuilder();\n        bool first = true;\n        for (long i = 0; i\
    \ <= n; i++) {\n            if (first) {\n                first = false;\n   \
    \         } else {\n                res.Append(\" \");\n            }\n      \
    \      res.Append(i);\n        }\n        return res.ToString();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n           \
    \ sb.Append(i + \" \");\n        }\n        sb.Remove(sb.Length - 1, 1);\n   \
    \     return sb.ToString();", "        return string.Join(\" \",\n           \
    \                Enumerable.Range(0, (int)n + 1).Select(x => x.ToString()));",
  '        return Enumerable.Range(0, (int)n + 1).Select(i => i.ToString()).Join("
    ");']
stop_tokens:
- "\n    }\n"
