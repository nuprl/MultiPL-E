name: HumanEval_146_specialFilter
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a list of numbers as input and returns\
  \ \n    // the number of elements in the list that are greater than 10 and both\
  \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For\
  \ example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
  \ (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new\
  \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n\
  \    // (2L)\n    public static long Specialfilter(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
  \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
  \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
  \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==\
  \ (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,\
  \ (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,\
  \ (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
  \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\
  \n}\n"
completions: ['        return nums.Where(x => IsOdd(x) && x > 10).Count();', "   \
    \     long count = 0;\n        foreach (long num in nums) {\n            if (num\
    \ > 10) {\n                string numstr = num.ToString();\n                if\
    \ ((numstr[0] - '0') % 2 == 1 && (numstr[numstr.Length - 1] - '0') % 2 == 1) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       return count;", "        if (nums.Count < 1) return 0;\n        long count\
    \ = 0;\n        foreach (long num in nums) {\n            if (num > 10 && (num\
    \ % 10) % 2 == 1 && num / 10 % 2 == 1) {\n                count++;\n         \
    \   }\n        }\n        return count;", '        return nums.Where(x => x >
    10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  "        int count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n      \
    \      if (nums[i] > 10 && nums[i] % 2 != 0 && nums[i] / 10 % 2 != 0) {\n    \
    \            count++;\n            }\n        }\n        return count;", '        return
    nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();', "        // your code here\n        return 0;", "       \
    \ long nbLong = 0;\n        for (int i = 0; i < nums.Count; i++) {\n         \
    \   if (nums[i] > 10) {\n                string s = nums[i].ToString();\n    \
    \            if (long.Parse(s[0].ToString()) % 2 != 0 && long.Parse(s[s.Length\
    \ - 1].ToString()) % 2 != 0) {\n                    nbLong++;\n              \
    \  }\n            }\n        }\n        return nbLong;", "        // YOUR CODE\
    \ HERE\n        return -1;", '        return nums.Where(n => Math.Abs(n) > 10
    && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).Count();', "        if (nums.Count\
    \ == 0) {\n            return 0;\n        }\n        return nums.Where(x => (x\
    \ > 10) && (x % 2 == 1) && \n            ((x % 10) % 2 == 1) && ((x / 10) % 2\
    \ == 1)).Count();", "        long c = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            if (nums[i] > 10) {\n                if (nums[i] % 2 ==\
    \ 1) {\n                    string s = nums[i].ToString();\n                 \
    \   if (s[0] % 2 == 1 && s[s.Length - 1] % 2 == 1) {\n                       \
    \ c++;\n                    }\n                }\n            }\n        }\n \
    \       return c;", "        long number = 0;\n        foreach (var item in nums)\
    \ {\n            if (((item > 10) && (item.ToString()[0] % 2 != 0) && (item.ToString()[item.ToString().Length\
    \ - 1] % 2 != 0))) {\n                number++;\n            }\n        }\n  \
    \      return number;", "        long count = 0;\n        foreach (long num in\
    \ nums) {\n            if (num > 10) {\n                string s = num.ToString();\n\
    \                if (s[0] % 2 != 0 && s[s.Length - 1] % 2 != 0) {\n          \
    \          count++;\n                }\n            }\n        }\n        return\
    \ count;", "        return nums.Count(n =>\n            (n > 10) &&\n        \
    \    (n % 2 == 1) &&\n            (n / 10 % 2 == 1) &&\n            (n % 10 ==\
    \ 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9)\n        );",
  '        return nums.Where(x => x > 10 && Odd(x)).Count();', "        return nums.Where(x\
    \ => x >= 10 &&\n                               x.ToString().First() % 2 != 0\
    \ &&\n                               x.ToString().Last() % 2 != 0).Count();",
  "        // BEGIN\n        throw new NotImplementedException(\"Not implemented\"\
    );\n        // END", "        var count = 0;\n        foreach (var n in nums)\
    \ {\n            var digits = n.ToString().ToCharArray();\n            if (digits.Length\
    \ > 2 && int.Parse(digits[0].ToString()) % 2 != 0 &&\n                int.Parse(digits[digits.Length\
    \ - 1].ToString()) % 2 != 0 &&\n                n > 10) {\n                count++;\n\
    \            }\n        }\n        return count;", "        int count = 0;\n \
    \       for (int i = 0; i < nums.Count; i++) {\n            if (nums[i] > 10)\
    \ {\n                int fd = (int)nums[i] % 10;\n                int ld = (int)nums[i]\
    \ / 10;\n                if (fd % 2 != 0 && ld % 2 != 0) {\n                 \
    \   count++;\n                }\n            }\n        }\n        return count;",
  "        long count = 0;\n        foreach (long n in nums) {\n            if (n\
    \ > 10 && n % 2 == 1 && n / 10 % 2 == 1)\n                count++;\n        }\n\
    \        return count;", "        var output = 0L;\n        for (var i = 0; i\
    \ < nums.Count; i++) {\n            var num = nums[i];\n            var lastDigit\
    \ = num % 10;\n            var firstDigit = 0;\n            for (var j = 0; j\
    \ < 10; j++) {\n                if (num < 10) {\n                    firstDigit\
    \ = num;\n                    break;\n                }\n                num /=\
    \ 10;\n            }\n            if (num > 10 && (firstDigit % 2 != 0) && (lastDigit\
    \ % 2 != 0)) {\n                output++;\n            }\n        }\n        return\
    \ output;", '        throw new NotImplementedException();', "        // Declare\
    \ a variable to count the result.\n        long count = 0;\n        // Iterate\
    \ through the list of numbers.\n        foreach (long num in nums) {\n       \
    \     // Get the digits.\n            List<int> digits = GetDigits(num);\n   \
    \         // If the first and last digits are odd, and the number is greater than\
    \ 10, increase the count.\n            if (digits[0] % 2 != 0 && digits[digits.Count\
    \ - 1] % 2 != 0 && num > 10) {\n                count++;\n            }\n    \
    \    }\n        // Return the count.\n        return count;", "        return\
    \ nums.Count(n => \n                n > 10 && \n                (n % 10) % 2 ==\
    \ 1 && \n                (n / (long)Math.Pow(10, NumDigits(n) - 1)) % 2 == 1);",
  '        return (long)nums.Where(n => n > 10).Where(n => IsOdd(n / 10) && IsOdd(n
    % 10)).Count();', "        // Write your code here.\n        var result = nums.Where(x\
    \ => Math.Abs(x) > 10 && x % 2 != 0 && x > 0);\n        return result.Count();",
  "        // write code here\n        int result = 0;\n        foreach (long i in\
    \ nums) {\n            if (i > 10) {\n                long firstdigit = i / 10;\n\
    \                while (firstdigit > 10) {\n                    firstdigit = firstdigit\
    \ / 10;\n                }\n                long lastdigit = i % 10;\n       \
    \         if (firstdigit % 2 != 0 && lastdigit % 2 != 0) {\n                 \
    \   result++;\n                }\n            }\n        }\n        return result;",
  "        long count = 0;\n        foreach (long n in nums) {\n            if (n\
    \ > 10) {\n                long n2 = n;\n                long n3 = n;\n      \
    \          long n1 = n;\n                long n4 = n;\n                long d1\
    \ = n1 % 10;\n                long d2 = n2 % 10;\n                long d3 = n3\
    \ % 10;\n                long d4 = n4 % 10;\n                if (d1 == d2 && d3\
    \ == d4) {\n                    count++;\n                }\n            }\n \
    \       }\n        return count;", "        // write your code here ...\n    \
    \    return 0;", "        // Write your code here!\n        return nums.Count(x\
    \ => x > 10 && isFirstLastOdd(x));", "        long cnt = 0;\n        foreach (long\
    \ i in nums) {\n            if (i > 10) {\n                string str = i.ToString();\n\
    \                int start = Convert.ToInt32(str[0].ToString());\n           \
    \     int end = Convert.ToInt32(str[str.Length - 1].ToString());\n           \
    \     if (start % 2 != 0 && end % 2 != 0) {\n                    cnt++;\n    \
    \            }\n            }\n        }\n        return cnt;", "        long\
    \ result = 0;\n        foreach (var n in nums) {\n            if (n >= 10 && HasFirstAndLastOddDigits(n))\n\
    \                result++;\n        }\n        return result;", '        return
    nums.Where(n => (n > 10) && (n.ToString().First() % 2 != 0) && (n.ToString().Last()
    % 2 != 0)).Count();', "        int count = 0;\n        foreach (long num in nums)\
    \ {\n            if (num > 10) {\n                if (num < 0) {\n           \
    \         num = num * -1;\n                }\n                string numStr =\
    \ num.ToString();\n                if (int.Parse(numStr[0].ToString()) % 2 !=\
    \ 0) {\n                    if (int.Parse(numStr[numStr.Length - 1].ToString())\
    \ % 2 != 0) {\n                        count++;\n                    }\n     \
    \           }\n            }\n        }\n        return count;", "        long\
    \ count = 0;\n        foreach (long num in nums) {\n            if (num > 10)\
    \ {\n                if (num < 0) {\n                    num = -num;\n       \
    \         }\n                long first = num;\n                long last = num\
    \ % 10;\n                while (first >= 10) {\n                    first /= 10;\n\
    \                }\n                if (first % 2 == 1 && last % 2 == 1) {\n \
    \                   count++;\n                }\n            }\n        }\n  \
    \      return count;", '        return nums.FindAll(x => (x>10) && (x%2!=0) &&
    ((x%10)%2!=0) && ((x/10)%2!=0)).Count;', "        int counter = 0;\n        for\
    \ (int i = 0; i < nums.Count; i++) {\n            string checkString = nums[i].ToString();\n\
    \            char[] checkChars = checkString.ToCharArray();\n            char\
    \ first = checkChars[0];\n            char last = checkChars[checkChars.Length\
    \ - 1];\n            long firstnum = Convert.ToInt64(first.ToString());\n    \
    \        long lastnum = Convert.ToInt64(last.ToString());\n            if (nums[i]\
    \ > 10 && firstnum % 2 != 0 && lastnum % 2 != 0) {\n                counter++;\n\
    \            }\n        }\n        return counter;", '        return nums.Where(x
    => x > 10 && (x.ToString()[0] % 2 == 1 && x.ToString()[x.ToString().Length - 1]
    % 2 == 1)).Count();', '        return nums.Count(n => (n >= 10) && ((n / 10) %
    2 != 0) && (n % 2 != 0));', '        return nums.Count(x => x > 10 && (x % 10)
    % 2 == 1 && (x / 10) % 2 == 1);', "        long n = 0;\n        for (int i = 0;\
    \ i < nums.Count; i++) {\n            if (nums[i] > 10) {\n                string\
    \ first = nums[i].ToString().Substring(0, 1);\n                string last = nums[i].ToString().Substring(nums[i].ToString().Length\
    \ - 1, 1);\n                if (long.Parse(first) % 2 != 0 && long.Parse(last)\
    \ % 2 != 0) {\n                    n++;\n                }\n            }\n  \
    \      }\n        return n;", '        return nums.Where(x => x > 10 && x.ToString().Last()
    % 2 != 0 && x.ToString().First() % 2 != 0).Count();', '        return nums.Count(n
    => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0);',
  "        long count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       if (nums[i] > 10) {\n                long n = nums[i];\n             \
    \   if (n % 2 == 1) {\n                    while (n >= 10) {\n               \
    \         n /= 10;\n                    }\n                    if (n % 2 == 1)\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;", "        int c = 0;\n \
    \       foreach (long n in nums) {\n            if (n > 10) {\n              \
    \  string s = n.ToString();\n                if (s[0] % 2 != 0 && s[s.Length -\
    \ 1] % 2 != 0)\n                    c++;\n            }\n        }\n        return\
    \ c;", "        var count = 0;\n        foreach (var num in nums) {\n        \
    \    if (num >= 10 && num.ToString().First() % 2 != 0 && num.ToString().Last()\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;", '        return 0;', '        return nums.Count(num => num >= 10 &&
    (num % 10) % 2 == 1 && num / 10 % 2 == 1);', "        return nums.Where(n => Math.Abs(n)\
    \ > 10 &&\n                               Math.Abs(n).ToString().First() % 2 !=\
    \ 0 &&\n                               Math.Abs(n).ToString().Last() % 2 != 0).Count();",
  '        return nums.Where(n => n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).Count();',
  "        // Your code goes here!\n        return -1;", "        var query = nums.Where(x\
    \ => x > 10).Where(x => (x/10)%2 == 1).Where(x => x%2 == 1);\n        return query.Count();",
  "        if (nums.Count == 0) return 0;\n        return nums.Where(n => {\n    \
    \        var digits = n.ToString().ToCharArray();\n            if (digits.Length\
    \ < 2) return false;\n            return Math.Abs(n) > 10 && digits[0] % 2 ==\
    \ 1 && digits[digits.Length - 1] % 2 == 1;\n        }).Count();", '        return
    nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();', '        return nums.Count(n => n > 10 && n % 2 == 1 && n
    % 10 == 1);', "        long count = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            if (nums[i] > 10) {\n                string s = nums[i].ToString();\n\
    \                if ((s[0] - '0') % 2 == 1 && (s[s.Length - 1] - '0') % 2 == 1)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \        return count;", "        // Type your answer here\n\n        return 0;",
  "        long ans = 0;\n        foreach (long num in nums) {\n            if (num\
    \ >= 10) {\n                if (IsOdd(num % 10) && IsOdd(num / 10)) {\n      \
    \              ans++;\n                }\n            }\n        }\n        return\
    \ ans;", "        return nums.Select(x =>\n        {\n            if (x < 10 ||\
    \ x > 10)\n            {\n                return (x.ToString()[0].ToString() !=\
    \ \"1\" && x.ToString()[0].ToString() != \"3\" && x.ToString()[0].ToString() !=\
    \ \"5\" && x.ToString()[0].ToString() != \"7\" && x.ToString()[0].ToString() !=\
    \ \"9\") || (x.ToString()[x.ToString().Length - 1].ToString() != \"1\" && x.ToString()[x.ToString().Length\
    \ - 1].ToString() != \"3\" && x.ToString()[x.ToString().Length - 1].ToString()\
    \ != \"5\" && x.ToString()[x.ToString().Length - 1].ToString() != \"7\" && x.ToString()[x.ToString().Length\
    \ - 1].ToString() != \"9\") ? 0 : 1;\n            }\n            else\n      \
    \      {\n                return 0;\n            }\n        }).Sum();", "    \
    \    long ret = 0;\n        foreach (long num in nums) {\n            if (num\
    \ > 10 && (num % 10 % 2 == 1) && (num / 10 / 10 % 10 % 2 == 1)) {\n          \
    \      ret++;\n            }\n        }\n        return ret;", "        long count\
    \ = 0;\n        foreach (long num in nums) {\n            if (num > 10) {\n  \
    \              if (isOdd(num) && isOdd(getFirstDigit(num)) && isOdd(getLastDigit(num)))\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \        return count;", "        long result = 0;\n        foreach (long num\
    \ in nums) {\n            // filter odd number\n            if (num % 2 == 0)\
    \ continue;\n            // filter last digit\n            if (num % 10 % 2 ==\
    \ 0) continue;\n            // filter first digit\n            if (num % (long)Math.Pow(10,\
    \ num.ToString().Length - 1) % 2 == 0) continue;\n            // filter 10\n \
    \           if (num <= 10) continue;\n            result++;\n        }\n     \
    \   return result;", "        // Insert your code here\n        return 0;", " \
    \       long n = 0;\n        foreach (long num in nums) {\n            if (num\
    \ > 10 && (num / 10) % 2 != 0 && num % 2 != 0)\n                n++;\n       \
    \ }\n        return n;", "        // Write your code here\n        // To print\
    \ results to the standard output you can use Console.WriteLine()\n        // Example:\
    \ Console.WriteLine(\"Hello world!\");\n        long res = 0;\n        foreach\
    \ (var num in nums) {\n            if (num >= 10) {\n                string str\
    \ = num.ToString();\n                int a = int.Parse(str[0].ToString());\n \
    \               int b = int.Parse(str[str.Length - 1].ToString());\n         \
    \       if (a % 2 != 0 && b % 2 != 0) {\n                    res++;\n        \
    \        }\n            }\n        }\n        return res;", "        long count\
    \ = 0;\n        for (long i = 0; i < nums.Count; i++) {\n            if (nums[(int)i]\
    \ > 10L) {\n                List<long> digits = MathService.DigitsOf(nums[(int)i]);\n\
    \                if (MathService.IsOdd(digits[0]) && MathService.IsOdd(digits[digits.Count\
    \ - 1])) {\n                    count++;\n                }\n            }\n \
    \       }\n        return count;", '        return nums.Count(p => p > 10 && (p
    / 10) % 2 == 1 && p % 2 == 1);', '        return nums.Where(x => x > 10).Where(x
    => x.ToString().Length > 1).Where(x => IsOdd(x.ToString()[0])).Where(x => IsOdd(x.ToString()[x.ToString().Length
    - 1])).Count();', '        return nums.Where(n => n > 10 && n.ToString().First()
    % 2 != 0 && n.ToString().Last() % 2 != 0).Count();', "        long count = 0;\n\
    \        foreach (long num in nums) {\n            if (num > 10 && num % 2 ==\
    \ 1 && GetLastDigit(num) % 2 == 1) {\n                count++;\n            }\n\
    \        }\n        return count;", '        return nums.Where(x => x > 10 &&
    x.ToString().Select(y => long.Parse(y.ToString())).Where(y => y % 2 == 1).Count()
    == 2).Count();', "        long result = 0;\n        foreach (long num in nums)\
    \ {\n            if (num <= 10) continue;\n            if (num % 2 == 0) continue;\n\
    \            if ((num / 10) % 2 == 0) continue;\n            if (num % 10 == 0)\
    \ continue;\n            result++;\n        }\n        return result;", "    \
    \    long[] numsArr = nums.ToArray();\n        long cnt = 0;\n        for (int\
    \ i = 0; i < numsArr.Length; i++) {\n            if ((numsArr[i] > 10) && (numsArr[i]\
    \ % 2 == 1) && ((numsArr[i] % 10) % 2 == 1)) {\n                cnt++;\n     \
    \       }\n        }\n        return cnt;", '        return nums.Where(x => x
    > 10 && x.FirstDigit() % 2 != 0 && x.LastDigit() % 2 != 0).Count();', "      \
    \  return (\n            from num in nums\n            where (10 < num && 0 <\
    \ num.ToString().Length && num.ToString().First() % 2 != 0 && num.ToString().Last()\
    \ % 2 != 0)\n            select num\n        ).Count();", '        return nums.Count(n
    => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0);',
  "        int count = 0;\n        foreach (long num in nums) {\n            if (num\
    \ > 10 && (num.ToString()[0] % 2 != 0 && num.ToString()[num.ToString().Length\
    \ - 1] % 2 != 0)) {\n                count++;\n            }\n        }\n    \
    \    return count;", "        long total = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            if (nums[i] > 10) {\n                string number = nums[i].ToString();\n\
    \                if (number[0] % 2 != 0 && number[number.Length - 1] % 2 != 0)\
    \ {\n                    total++;\n                }\n            }\n        }\n\
    \        return total;", "        // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n        return nums.Count(n => n > 10\
    \ && n % 2 == 1 && n / 10 % 2 == 1);", '        return nums.Where(num => num >
    10 && IsOdd(num) && IsOdd(num % 10)).Count();', "        // your code goes here\n\
    \        long count = 0;\n        foreach (long num in nums) {\n            if\
    \ (num >= 10 && (num.ToString()[0] % 2 == 1) && (num.ToString()[num.ToString().Length\
    \ - 1] % 2 == 1)) {\n                count++;\n            }\n        }\n    \
    \    return count;", "        return nums.Count(n => {\n            if (n < 10)\
    \ return false;\n            int l = (int)Math.Log10(n);\n            long a =\
    \ n / (long)Math.Pow(10, l);\n            long b = n % 10;\n            return\
    \ a % 2 == 1 && b % 2 == 1;\n        });", "        long result = 0;\n       \
    \ foreach (long num in nums) {\n            if (num > 10 && Math.Abs(num) % 2\
    \ == 1 && ((num % 10) % 2 == 1 || (num / 10) % 2 == 1)) {\n                result\
    \ += 1;\n            }\n        }\n        return result;", "        // Your solution\
    \ here!\n        return nums.Where(n => n > 10 && (n % 10) % 2 == 1 && ((n / Math.Pow(10,\
    \ Math.Floor(Math.Log10(n)))) % 10) % 2 == 1).Count();", "        long result\
    \ = 0;\n        foreach (long n in nums) {\n            string s = n.ToString();\n\
    \            if (n > 10 && (s[0] == '1' || s[0] == '3' || s[0] == '5' || s[0]\
    \ == '7' || s[0] == '9') && (s[s.Length - 1] == '1' || s[s.Length - 1] == '3'\
    \ || s[s.Length - 1] == '5' || s[s.Length - 1] == '7' || s[s.Length - 1] == '9'))\n\
    \                result++;\n        }\n        return result;", "        // Your\
    \ code goes here\n        long count = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            if (nums[i] > 10 && IsOdd(nums[i])) {\n                count++;\n\
    \            }\n        }\n        return count;", "        return nums.Count(number\
    \ => (number > 10 && (number.ToString()[0] - '0') % 2 != 0\n            && (number.ToString()[number.ToString().Length\
    \ - 1] - '0') % 2 != 0));", "        int cnt = 0;\n        for (int i = 0; i <\
    \ nums.Count; i++) {\n            string num = Math.Abs(nums[i]).ToString();\n\
    \            if (num.Length > 1 && (num[0]-'0') % 2 == 1 && (num[num.Length-1]-'0')\
    \ % 2 == 1 && nums[i] > 10) {\n                cnt++;\n            }\n       \
    \ }\n        return cnt;", "        // if the first digit is odd, the last digit\
    \ must be odd\n        return nums.Where(num => num % 2 != 0 && num > 10).Count();",
  "        long k = 0;\n        foreach (long a in nums) {\n            if (a > 10)\
    \ {\n                long x = a;\n                while (x > 0) {\n          \
    \          long t = x % 10;\n                    if (t % 2 == 0) {\n         \
    \               break;\n                    }\n                    if (x == a)\
    \ {\n                        k++;\n                    }\n                   \
    \ x /= 10;\n                }\n            }\n        }\n        return k;", " \
    \       int count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       if (nums[i] > 10 && IsBothFirstAndLastDigitsOdd(nums[i])) {\n        \
    \        count++;\n            }\n        }\n        return count;", '        return
    nums.Count(x => x > 10 && x % 2 == 1 && x.ToString().First() % 2 == 1 && x.ToString().Last()
    % 2 == 1);', "        // Insert code here\n        return nums.Where(n => n >\
    \ 10 && (n.ToString()[0] % 2 != 0 && n.ToString()[n.ToString().Length - 1] % 2\
    \ != 0)).Count();", "        var ret = 0L;\n        if (nums == null) {\n    \
    \        return ret;\n        }\n        foreach (var num in nums) {\n       \
    \     if (Math.Abs(num) > 10 && IsFirstDigitOdd(num) && IsLastDigitOdd(num)) {\n\
    \                ret++;\n            }\n        }\n        return ret;", "   \
    \     return nums.Count(x =>\n            x > 10\n            && (x % 10) % 2\
    \ == 1\n            && (x / 10) % 2 == 1\n        );", '        return nums.Count(x
    => (x > 10) && (x > 0 ? (x % 10) % 2 != 0 : (x * -1) % 10 % 2 != 0) && (x / 10)
    % 2 != 0);', "        List<long> nums2 = new List<long>();\n        foreach (var\
    \ n in nums) {\n            if (n > 10 && n % 2 == 1) {\n                nums2.Add(n);\n\
    \            }\n        }\n        return nums2.Count;", '        return nums.Where(x
    => x > 10 && x % 2 == 1 && (x / 10) % 2 == 1).Count();', '        return nums.Where(n
    => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0).Count();',
  "        return nums.Count(x => (x > 10 && x % 2 == 1 && x.ToString().Last() ==\
    \ '1'));", "        long count = 0;\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            if (nums[i] > 10) {\n                var digits = Math.Abs(nums[i]).ToString().ToCharArray();\n\
    \                if (digits[0] % 2 != 0 && digits[digits.Length - 1] % 2 != 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \        return count;", "        long result = 0;\n        foreach (var num in\
    \ nums) {\n            if (num > 10 &&\n                (num % 10) % 2 == 1 &&\n\
    \                (num / (long)Math.Pow(10, Math.Floor(Math.Log10(num)))) % 2 ==\
    \ 1) {\n                result++;\n            }\n        }\n        return result;",
  '        return nums.Count(x => x > 10 && x % 2 == 1 && (x % 10) % 2 == 1);', " \
    \       long s = 0;\n        foreach (long num in nums) {\n            if (num\
    \ > 10 && IsOdd(num) && IsOdd(num/10)) {\n                s += 1;\n          \
    \  }\n        }\n        return s;", "        // TODO: implement function.\n \
    \       long x = 0;\n        foreach (long num in nums) {\n            string\
    \ numStr = num.ToString();\n            if (numStr.Length > 1 && num > 10) {\n\
    \                if (int.Parse(numStr[0].ToString()) % 2 != 0 && int.Parse(numStr[numStr.Length\
    \ - 1].ToString()) % 2 != 0) {\n                    x++;\n                }\n\
    \            }\n        }\n        return x;", "        return nums.Where(num\
    \ =>\n            num > 10\n            && FirstDigit(num) % 2 == 1\n        \
    \    && LastDigit(num) % 2 == 1\n        ).Count();", "        var ans = 0L;\n\
    \        foreach (var num in nums) {\n            if (num > 10) {\n          \
    \      var isFirstOdd = ((num % 10) == 1 || (num % 10) == 3 || (num % 10) == 5\
    \ || (num % 10) == 7 || (num % 10) == 9);\n                var isLastOdd = ((num\
    \ / 10) == 1 || (num / 10) == 3 || (num / 10) == 5 || (num / 10) == 7 || (num\
    \ / 10) == 9);\n                if (isFirstOdd && isLastOdd) {\n             \
    \       ans++;\n                }\n            }\n        }\n        return ans;",
  "        return nums.Count(x => \n            x > 10 && Math.Abs(x) > 10 && \n \
    \           Math.Abs(x) % 10 % 2 != 0 && \n            Math.Abs(x) / 10 % 10 %\
    \ 2 != 0);", '        return nums.Count(n => n > 10 && IsSpecial(n));', "    \
    \    // Implement the function here\n        throw new NotImplementedException();",
  "        long total = 0;\n        foreach (long num in nums) {\n            if (num\
    \ > 10 && (num % 10) % 2 == 1 && (num / 10) % 2 == 1) {\n                total++;\n\
    \            }\n        }\n        return total;", '        return nums.Where(x
    => x > 10 && x % 2 == 1 && x.ToString().Length > 1 && x.ToString().First() ==
    x.ToString().Last()).Count();', '        return nums.Where(n => (n % 2 != 0 &&
    n / 10 % 2 != 0 && n > 10)).Count();', "        long count = 0;\n        for (int\
    \ i = 0; i < nums.Count; i++) {\n            if (IsGreaterThan10(nums[i]) && IsFirstAndLastDigitOdd(nums[i]))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  '        return nums.Count(e => (e > 10) && (e % 2 == 1) && ((e % 10) % 2 == 1));',
  "        long counter = 0;\n        foreach (long num in nums) {\n            if\
    \ (num > 10) {\n                long firstDigit = num % 10;\n                long\
    \ lastDigit = num / 10;\n                if (Math.Abs(firstDigit) % 2 == 1 &&\
    \ Math.Abs(lastDigit) % 2 == 1) {\n                    counter++;\n          \
    \      }\n            }\n        }\n        return counter;", "        return\n\
    \            nums.Where(num => num > 10)\n                .Where(num => FirstDigitIsOdd(num))\n\
    \                .Where(num => LastDigitIsOdd(num))\n                .Count();",
  '        return nums.Where(n => n > 10 && n % 2 == 1 && (n / 10) % 2 == 1).Count();',
  "        long numcount = 0;\n        foreach (long num in nums) {\n            if\
    \ (num > 10 && num < 100) {\n                numcount++;\n            }\n    \
    \        else if (num > 100) {\n                if (num % 10 % 2 != 0 && num /\
    \ (long)Math.Pow(10, (int)Math.Log10(num)) % 2 != 0) {\n                    numcount++;\n\
    \                }\n            }\n        }\n        return numcount;", "   \
    \     long count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n      \
    \      if (nums[i] > 10 && (nums[i] / 100000000 % 10) % 2 != 0 && (nums[i] % 10)\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;", '        return nums.Count(n => n > 10 && n % 2 == 1 && (n / 10) %
    2 == 1);', "        long counter = 0;\n        foreach (long n in nums) {\n  \
    \          if (n > 10 && n % 2 != 0 && n % 5 != 0)\n                counter++;\n\
    \        }\n        return counter;", "        long ret = 0;\n        foreach\
    \ (long num in nums) {\n            int first_digit = (int)(num / Math.Pow(10,\
    \ (int)Math.Log10(num)));\n            int last_digit = (int)(num % 10);\n   \
    \         if (num > 10 && first_digit % 2 == 1 && last_digit % 2 == 1) {\n   \
    \             ret += 1;\n            }\n        }\n        return ret;", '        return
    nums.Where(i => i > 10).Where(i => IsOdd(i % 10) && IsOdd(i / (int)Math.Pow(10,
    Math.Floor(Math.Log10(i))))).Count();', "        long c = 0;\n        foreach\
    \ (var num in nums) {\n            if (num > 10 && num.ToString().Length > 1)\
    \ {\n                int f = int.Parse(num.ToString()[0].ToString());\n      \
    \          int l = int.Parse(num.ToString()[num.ToString().Length - 1].ToString());\n\
    \                if (f % 2 != 0 && l % 2 != 0) {\n                    c++;\n \
    \               }\n            }\n        }\n        return c;", "        long\
    \ cnt = 0;\n        foreach (long n in nums) {\n            if (Math.Abs(n) >\
    \ 10 && n % 2 != 0) {\n                long m = n;\n                while (m >=\
    \ 10) {\n                    m /= 10;\n                }\n                if (m\
    \ % 2 != 0) {\n                    cnt++;\n                }\n            }\n\
    \        }\n        return cnt;", "        long count = 0;\n        foreach (long\
    \ num in nums) {\n            if (num > 10 && isOdd(num) && isOdd(firstDigit(num))\
    \ && isOdd(lastDigit(num))) {\n                count++;\n            }\n     \
    \   }\n        return count;", "        // your code goes here\n        int count\
    \ = 0;\n        long last_digit = 0;\n        foreach (long num in nums) {\n \
    \           if (num > 10) {\n                string s = num.ToString();\n    \
    \            if (s.Length > 1) {\n                    last_digit = long.Parse(s.Substring(s.Length\
    \ - 1));\n                    if (last_digit % 2 != 0) {\n                   \
    \     last_digit = long.Parse(s.Substring(0, 1));\n                        if\
    \ (last_digit % 2 != 0) {\n                            count++;\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n        return count;", '        return nums.Where(i => i > 10 && IsOdd(i)
    && IsOdd(Math.Abs(i) % 10)).Count();', "        int count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10) {\n                if (num %\
    \ 2 == 1) {\n                    // Parse to string and get the first digit\n\
    \                    if (long.Parse(num.ToString()[0].ToString()) % 2 == 1) {\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n        return count;", '        return nums.FindAll(x
    => x > 10 && firstDigit(x) % 2 != 0 && lastDigit(x) % 2 != 0).Count;', "     \
    \   // Note: you may use the list.filter method\n        return nums.Where(n =>\
    \ {\n            return\n                n > 10 &&\n                n % 2 == 1\
    \ &&\n                (n % 10) % 2 == 1;\n        }).Count();", '        return
    nums.Count(n => n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1);', '        return
    nums.Where(e => e > 10 && e % 2 == 1 && e / 10 % 2 == 1).Count();', "        var\
    \ res = nums.Where(x => x > 10 && Math.Abs(x) % 10 % 2 != 0).ToList();\n     \
    \   return res.Count;", '        return nums.Where(n => (Math.Abs(n) > 10) &&
    IsOdd(n)).Count();', "        long result = 0;\n        foreach (long num in nums)\
    \ {\n            if (num >= 10 && DigitsAreOdd(num) && FirstDigitIsOdd(num)) {\n\
    \                result++;\n            }\n        }\n        return result;",
  "        // Write your code here.\n        int count = 0;\n        foreach (long\
    \ num in nums) {\n            if (num > 10 && first_digit(num)%2 != 0 && last_digit(num)%2\
    \ != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // Your code here\n        // int x = 1;\n        // int y\
    \ = 1;\n        // int b = 1;\n        // int o = 0;\n        // for (int i =\
    \ 0; i < nums.Count; i++)\n        // {\n        //     if (nums[i] > 10)\n  \
    \      //     {\n        //         b = 1;\n        //         x = (int)nums[i];\n\
    \        //         y = (int)nums[i];\n        //         for (int j = 0; j <\
    \ (int)Math.Floor(Math.Log10(x) + 1); j++)\n        //         {\n        // \
    \            if (x % 2 == 0)\n        //             {\n        //           \
    \      b = 0;\n        //                 break;\n        //             }\n \
    \       //             x = x / 10;\n        //         }\n        //         for\
    \ (int j = 0; j < (int)Math.Floor(Math.Log10(y) + 1); j++)\n        //       \
    \  {\n        //             if (y % 2 == 0)\n        //             {\n     \
    \   //                 b = 0;\n        //                 break;\n        // \
    \            }\n        //             y = y % 10;\n        //         }\n   \
    \     //         if (b == 1)\n        //         {\n        //             o =\
    \ o + 1;\n        //         }\n        //     }\n        // }\n        // return\
    \ o;\n        // for (int i = 0; i < nums.Count; i++)\n        // {\n        //\
    \     if (nums[i] > 10)\n        //     {\n        //         if (nums[i] % 2\
    \ == 1)\n        //         {\n        //             x = (int)nums[i];\n    \
    \    //             for (int j = 0; j < (int)Math.Floor(Math.Log10(x) + 1); j++)\n\
    \        //             {\n        //                 if (x % 2 == 0)\n      \
    \  //                 {\n        //                     break;\n        //   \
    \              }\n        //                 x = x / 10;\n        //         \
    \    }\n        //             if (x % 2 == 1)\n        //", "        // Write\
    \ your code here\n        return 0;", "        // TODO: Write your code here!\n\
    \        return (long)0L;", "        long count = 0;\n        for (int i = 0;\
    \ i < nums.Count; i++) {\n            long firstDigit = nums[i] % 10;\n      \
    \      if ((firstDigit % 2 == 1) && (nums[i] > 10)) {\n                long num\
    \ = nums[i];\n                long digit = 0;\n                while (num > 0)\
    \ {\n                    digit = num % 10;\n                    num = num / 10;\n\
    \                }\n                if (digit % 2 == 1) {\n                  \
    \  count++;\n                }\n            }\n        }\n        return count;",
  '        return nums.Where(num => num > 10 && num.ToString().First() % 2 != 0 &&
    num.ToString().Last() % 2 != 0).Count();', "        // return nums.Where(n =>\
    \ n > 10 && (n % 10) % 2 == 1 && (n / (long)Math.Pow(10, Math.Floor(Math.Log10(n))))\
    \ % 2 == 1).Count();\n        return nums.Where(n => n > 10 && (n % 10) % 2 ==\
    \ 1 && (n / 10) % 2 == 1).Count();", "        // TODO: implement here\n      \
    \  long result = 0;\n        foreach (long i in nums) {\n            if (isGreaterThan10(i)\
    \ && isOddFirst(i) && isOddLast(i)) {\n                result++;\n           \
    \ }\n        }\n        return result;", "        long f = 0;\n        foreach\
    \ (var i in nums) {\n            bool b = true;\n            var c = i;\n    \
    \        if (i < 0) c = -i;\n            if (c < 10) b = false;\n            if\
    \ (c % 10 % 2 == 0) b = false;\n            while (c > 10) c /= 10;\n        \
    \    if (c % 2 == 0) b = false;\n            if (b) f++;\n        }\n        return\
    \ f;", "        // Implement this function\n        int count = 0;\n        for\
    \ (int i = 0; i < nums.Count; i++) {\n            if (nums[i] < 10) continue;\n\
    \            string numStr = nums[i].ToString();\n            int first = int.Parse(numStr[0].ToString());\n\
    \            int last = int.Parse(numStr[numStr.Length - 1].ToString());\n   \
    \         if (first % 2 != 0 && last % 2 != 0) {\n                count++;\n \
    \           }\n        }\n        return count;", '        return nums.Where(num
    => num > 10 && num.ToString().ToCharArray().First() % 2 != 0 && num.ToString().ToCharArray().Last()
    % 2 != 0).Count();', "        // Replace this with your solution.\n        return\
    \ (long)0L;", '        return nums.Count(n => Math.Abs(n) > 10 && n.ToString().Last()
    % 2 == 1 && n.ToString().First() % 2 == 1);', "        int count = 0;\n      \
    \  foreach (var i in nums) {\n            if (i > 10) {\n                if (Math.Abs(i)\
    \ % 10 % 2 != 0 && (i % 10 != 0)) {\n                    count++;\n          \
    \      }\n            }\n        }\n        return count;", "        var res =\
    \ 0L;\n        foreach (var n in nums) {\n            if (n < 10) {\n        \
    \        continue;\n            }\n            var a = n / 10;\n            var\
    \ r = n % 10;\n            if (a % 2 == 0 || r % 2 == 0) {\n                continue;\n\
    \            }\n            res++;\n        }\n        return res;", "       \
    \ long res = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            if\
    \ (nums[i] > 10 && isodd(nums[i] / 10) && isodd(nums[i] % 10)) {\n           \
    \     res++;\n            }\n        }\n        return res;", '        return
    nums.Where(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0).Count();', "        long count = 0;\n        foreach (long num in nums)\
    \ {\n            if (num > 10 && IsOdd(num) && IsOdd(GetFirstDigit(num)) && IsOdd(GetLastDigit(num)))\
    \ {\n                count += 1;\n            }\n        }\n        return count;",
  "        return nums.Aggregate(0L, (acc, x) => {\n            var f = x;\n     \
    \       while (f > 10) f /= 10;\n            var l = x % 10;\n            if (f\
    \ % 2 == 1 && l % 2 == 1 && x > 10) acc++;\n            return acc;\n        });",
  '        return nums.Count(x => x > 10 && x % 2 == 1 && (x / 10) % 2 == 1);', " \
    \       return nums.Where(n => {\n            var val = Math.Abs(n);\n       \
    \     return val > 10 && (val % 10) % 2 == 1 && (val / 10) % 2 == 1;\n       \
    \ }).Count();", "        int count = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            if (nums[i] > 10 && FirstDigit(nums[i]) % 2 != 0 && LastDigit(nums[i])\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        long count = 0;\n        foreach (long n in nums) {\n    \
    \        if (n > 10) {\n                long first = Math.Abs(n);\n          \
    \      long last = n % 10;\n                if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n        return count;", "        nums = nums.Where(num => num > 10 && num.ToString().First()\
    \ % 2 != 0 && num.ToString().Last() % 2 != 0).ToList();\n        return nums.Count();",
  '        return nums.Where(n => n > 10 && n % 2 == 1 && n.ToString().Last() % 2
    == 1).Count();', '        return nums.Where(n => (n > 10) && (FirstDigit(n) %
    2 == 1) && (LastDigit(n) % 2 == 1)).Count();', "        long count = 0;\n    \
    \    for (int i = 0; i < nums.Count; i++) {\n            if (nums[i] > 10 && (getFirstDigit(nums[i])\
    \ % 2 != 0) && (getLastDigit(nums[i]) % 2 != 0)) {\n                count++;\n\
    \            }\n        }\n        return count;", '        return nums.Where(x
    => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  "        // TODO:\n        // return -1;\n        long count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10 && num.ToString().First() % 2\
    \ != 0 && num.ToString().Last() % 2 != 0) {\n                count++;\n      \
    \      }\n        }\n        return count;", "        var oddDigits = new List<int>\
    \ {1, 3, 5, 7, 9};\n        var x = 0;\n        for (var i = 0; i < nums.Count;\
    \ i++) {\n            if (nums[i] < 10) {\n                continue;\n       \
    \     }\n            if (nums[i] > 10) {\n                if (nums[i] % 10 ==\
    \ 0) {\n                    continue;\n                }\n                var\
    \ m = nums[i];\n                var lastDigit = (int)m % 10;\n               \
    \ while (m > 0) {\n                    m /= 10;\n                }\n         \
    \       if (oddDigits.Contains(lastDigit) &&\n                    oddDigits.Contains((int)m))\
    \ {\n                    x++;\n                }\n            }\n        }\n \
    \       return x;", "        var solution = nums.Where(n => n > 10).Where(n =>\
    \ (n % 10) % 2 == 1 && (n / 10) % 2 == 1).Count();\n        return solution;",
  "        return nums.Count(x =>\n            x > 10 &&\n            x % 2 == 1 &&\n\
    \            (x / 10) % 2 == 1 &&\n            (x / 100) % 2 == 1);", "      \
    \  return nums.Where(n => n > 10 &&\n                               n.ToString().First()\
    \ % 2 != 0 &&\n                               n.ToString().Last() % 2 != 0).Count();",
  "        long count = 0;\n        foreach (long i in nums) {\n            if (i\
    \ > 10) {\n                long digits = (long)Math.Floor(Math.Log10(i)) + 1;\n\
    \                long first = (long)Math.Floor(i / Math.Pow(10, digits - 1));\n\
    \                long last = i % 10;\n                if (first % 2 != 0 && last\
    \ % 2 != 0) {\n                    count++;\n                }\n            }\n\
    \        }\n        return count;", '        return nums.Where(num => (((num /
    10) % 10) % 2 != 0 && (num % 10) % 2 != 0 && num > 10)).Count();', '        return
    (long)nums.Count(n => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last()
    % 2 != 0);', '        return nums.Count(x => x > 10 && x.ToString().First() %
    2 != 0 && x.ToString().Last() % 2 != 0);', '        return nums.Where(x => x >
    10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  "        long count = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       if (nums[i] < 0) {\n                nums[i] = nums[i] * -1;\n        \
    \    }\n            long temp = nums[i];\n            int lastdigit = (int)(temp\
    \ % 10);\n            int firstdigit = 0;\n            while (temp > 0) {\n  \
    \              firstdigit = (int)(temp % 10);\n                temp = temp / 10;\n\
    \            }\n            if (firstdigit % 2 != 0 && lastdigit % 2 != 0 && nums[i]\
    \ > 10) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        int l = 0;\n        for (int i = 0; i < nums.Count; i++) {\n\
    \            if (nums[i] > 10) {\n                int f = nums[i].ToString()[0];\n\
    \                int ff = nums[i].ToString()[nums[i].ToString().Length - 1];\n\
    \                if (f % 2 != 0 && ff % 2 != 0) {\n                    l++;\n\
    \                }\n            }\n        }\n        return l;", '      // Enter
    your code here', "        long num = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            if (nums[i] > 10 && Math.Abs(nums[i]) % 2 == 1 && Math.Abs(nums[i]\
    \ % 10) % 2 == 1) {\n                num++;\n            }\n        }\n      \
    \  return num;", "        long count = 0;\n        foreach (long num in nums)\
    \ {\n            if (num > 10 && num.ToString().First() % 2 != 0 && num.ToString().Last()\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // Your code goes here\n        long total = 0;\n        for\
    \ (int i = 0; i < nums.Count; i++) {\n            if ((nums[i] > 10) && (nums[i]\
    \ % 2 != 0) && (nums[i] % 10 != 0)) {\n                total++;\n            }\n\
    \        }\n        return total;", "        nums = nums.Where(n => n > 10).ToList();\n\
    \        nums = nums.Where(n => \n            IsOdd(n.ToString()[0]) && IsOdd(n.ToString()[n.ToString().Length\
    \ - 1])\n        ).ToList();\n        return nums.Count;", "        long count\
    \ = 0;\n        nums.ForEach(num => {\n            var first = num.ToString()[0];\n\
    \            var last = num.ToString()[num.ToString().Length - 1];\n         \
    \   if (num > 10 && int.Parse(first.ToString()) % 2 != 0 && int.Parse(last.ToString())\
    \ % 2 != 0) {\n                count++;\n            }\n        });\n        return\
    \ count;", "        return (\n            from n in nums\n            where n\
    \ > 10 && first(n) % 2 == 1 && last(n) % 2 == 1\n            select n\n      \
    \  ).Count();", '        return nums.Count(x => x >= 10 && x % 2 == 1 && x / 10
    % 2 == 1);', "        long ret = 0;\n        foreach (long n in nums) {\n    \
    \        if (n < 0) continue;\n            long first = n % 10;\n            long\
    \ last = n / 10;\n            last = last % 10;\n            if (n > 10 && first\
    \ % 2 == 1 && last % 2 == 1) {\n                ret++;\n            }\n      \
    \  }\n        return ret;", "        long count = 0;\n        for (int i = 0;\
    \ i < nums.Count; i++) {\n            if (nums[i] >= 10) {\n                long\
    \ lastDigit = nums[i] % 10;\n                if (lastDigit % 2 == 1) {\n     \
    \               long firstDigit = 0;\n                    while (nums[i] != 0)\
    \ {\n                        firstDigit = nums[i] % 10;\n                    \
    \    nums[i] /= 10;\n                    }\n                    if (firstDigit\
    \ % 2 == 1) {\n                        count++;\n                    }\n     \
    \           }\n            }\n        }\n        return count;", '        return
    nums.Where(x => x > 10 && Math.Abs(x) > 10 && (x % 10) % 2 == 1 && (x / 10) %
    2 == 1).Count();', '        return nums.Where(x => x >= 10 && IsOdd(x) && IsOdd(First(x))
    && IsOdd(Last(x))).Count();', '        return nums.Where(x => x >= 10 && x.ToString().First()
    % 2 != 0 && x.ToString().Last() % 2 != 0).Count();', "        // Convert nums\
    \ to a List<String>\n        List<String> numsAsStrings = nums.ConvertAll(new\
    \ Converter<long, String>(Convert.ToString));\n        // Filter out all numbers\
    \ not greater than 10\n        List<String> numsAsStringsGreaterThan10 = numsAsStrings.FindAll(delegate(String\
    \ num){\n            return Convert.ToInt64(num) > 10;\n        });\n        //\
    \ Filter out all numbers whose first and last digits are even\n        List<String>\
    \ numsAsStringsFirstAndLastDigitsOdd = numsAsStringsGreaterThan10.FindAll(delegate(String\
    \ num){\n            return (num[0] % 2 != 0) && (num[num.Length - 1] % 2 != 0);\n\
    \        });\n        // Return the length of the filtered list\n        return\
    \ numsAsStringsFirstAndLastDigitsOdd.Count;", "        long cnt = 0;\n       \
    \ foreach (long n in nums) {\n            if (n > 10) {\n                string\
    \ s = n.ToString();\n                char l = s[0];\n                char h =\
    \ s[s.Length - 1];\n                if (\n                    (l == '1' || l ==\
    \ '3' || l == '5' || l == '7' || l == '9') &&\n                    (h == '1' ||\
    \ h == '3' || h == '5' || h == '7' || h == '9')\n                ) {\n       \
    \             cnt += 1;\n                }\n            }\n        }\n       \
    \ return cnt;", "        // write your code here\n        long ret = 0;\n    \
    \    foreach (long n in nums) {\n            if (n > 10 && n < 100) {\n      \
    \          if (n % 2 == 1) {\n                    ret++;\n                }\n\
    \            } else if (n > 100) {\n                string s = n.ToString();\n\
    \                if (s[0] % 2 == 1 && s[s.Length - 1] % 2 == 1) {\n          \
    \          ret++;\n                }\n            }\n        }\n        return\
    \ ret;", '        return nums.Where(x => x > 10 && x.ToString().Substring(0, 1)
    % 2 != 0 && x.ToString().Substring(x.ToString().Length - 1, 1) % 2 != 0).Count();',
  '        return nums.Count(n => n > 10 && n % 2 == 1 && (n / 10) % 2 == 1);', " \
    \       long num_good = 0;\n        // write your code here\n        return num_good;",
  "        return nums.Count(n => Math.Abs(n) > 10 &&\n                          \
    \     IsOdd(n) &&\n                               IsOdd(n % 10));", '        return
    nums.Count(x => Math.Abs(x) >= 10 && IsFirstLastOdd(x));', "        // Your solution\
    \ here\n        return 0;"]
stop_tokens:
- "\n    }\n"
