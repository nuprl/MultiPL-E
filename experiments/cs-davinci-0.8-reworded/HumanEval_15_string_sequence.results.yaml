language: cs
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab0d910514ee4c889f7fdb465921164c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab0d910514ee4c889f7fdb465921164c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string output = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            output += i.ToString() + \" \";\n \
    \       }\n        return output.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n < 0)\n            throw new ArgumentException(String.Format(\"\
    n={0} < 0\", n));\n        if (n == 0)\n            return \"0\";\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     if (i > 0)\n                sb.Append(' ');\n            sb.Append(i);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string str = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            str += \" \" + i;\n        }\n        return\
    \ str.Substring(1);\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.Append(\"0\");\n        for (int i = 1; i <= n; i++) {\n         \
    \   sb.Append(\" \");\n            sb.Append(i);\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return Enumerable.Range(0, (int)n +\
    \ 1).Select(p => p.ToString()).Aggregate((x, y) => x + \" \" + y);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab0d910514ee4c889f7fdb465921164c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab0d910514ee4c889f7fdb465921164c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var answer = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            answer.Append(i);\n    \
    \        answer.Append(\" \");\n        }\n        return answer.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67767dc1357d4d5084fe3efb8cdcb292>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67767dc1357d4d5084fe3efb8cdcb292>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        sb.Length -= 1;\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var ns = new List<string>();\n    \
    \    for (long i = 0; i <= n; i++) {\n            ns.Add(i.ToString());\n    \
    \    }\n        return string.Join(\" \", ns);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        return sb.ToString().Trim();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string result = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n \
    \       return result.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        sb.Length--;\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.AppendFormat(\"{0} \"\
    , i);\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6799247f122448fbfb4f1de19a60e32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6799247f122448fbfb4f1de19a60e32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n+1).Select(x => x.ToString()));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string res = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            res += \" \" + i;\n        }\n        return\
    \ res.Substring(1);\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n < 0) {\n            throw new\
    \ ArgumentException(\"n must be non-negative.\");\n        }\n        if (n ==\
    \ 0) {\n            return \"0\";\n        }\n        StringBuilder result = new\
    \ StringBuilder((n+1)*2);\n        for (long i = 0; i <= n; i++) {\n         \
    \   result.AppendFormat(\"{0} \", i);\n        }\n        return result.ToString(0,\
    \ result.Length-1);\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgj920fc2.cs(21,50): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string result = \"\";\n        for\
    \ (int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n  \
    \      return result.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n < 0) throw new ArgumentException(\"\
    Invalid input\");\n        return string.Join(\" \", Enumerable.Range(0, (int)n\
    \ + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var k = n + 1;\n        var r = \"\"\
    ;\n        for (var i = 0L; i < k; i++) {\n            r += \" \" + i;\n     \
    \   }\n        return r.Substring(1);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        sb.Length--; // Strip the last space.\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return Enumerable.Range(0, Convert.ToInt32(n\
    \ + 1)).Select(i => i.ToString()).Aggregate((a, b) => a + \" \" + b);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string result = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n \
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int) n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return String.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1).Select(i => i.ToString()));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        return sb.ToString().Trim();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n+1).Select(x => x.ToString()));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var result = new List<string>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var str = new StringBuilder();\n  \
    \      for (var i = 0L; i <= n; i++) {\n            str.Append(i.ToString());\n\
    \            str.Append(\" \");\n        }\n        return str.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        int v1 = 0;\n        StringBuilder\
    \ sb = new StringBuilder();\n        while ((long)v1 <= n) {\n            sb.Append(v1);\n\
    \            if ((long)v1 != n) {\n                sb.Append(\" \");\n       \
    \     }\n            v1 += 1;\n        }\n        return sb.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n           \
    \ sb.Append(' ');\n        }\n        return sb.ToString().Trim();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n < 0) {\n            throw new\
    \ ArgumentException(\"StringSequence: n must be positive or zero.\");\n      \
    \  }\n        return String.Join(\" \", Enumerable.Range(0, (int)n + 1));\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var result = new List<string>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab0d910514ee4c889f7fdb465921164c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab0d910514ee4c889f7fdb465921164c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        List<string> res = new List<string>();\n\
    \        for (int i = 0; i <= n; i++) {\n            res.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", res);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string res = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            res += i.ToString() + \" \";\n        }\n\
    \        return res.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string result = \"\";\n        for\
    \ (int i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n  \
    \      }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string s = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            s += i + \" \";\n        }\n        return\
    \ s.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var strBuilder = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            strBuilder.Append(i);\n\
    \            strBuilder.Append(\" \");\n        }\n        var str = strBuilder.ToString();\n\
    \        return str.Substring(0, str.Length - 1);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder res = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            res.Append(i.ToString());\n\
    \            res.Append(\" \");\n        }\n        res.Length--; // remove the\
    \ last space\n        return res.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        return sb.ToString().Trim();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var output = new List<string>();\n\
    \        for (var i = 0L; i <= n; i++) {\n            output.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", output);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return String.Join(\" \", Enumerable.Range(0,\
    \ Convert.ToInt32(n)+1));\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        List<BigInteger> res = new List<BigInteger>();\n\
    \        for (BigInteger i = 0; i <= n; i++) {\n            res.Add(i);\n    \
    \    }\n        return String.Join(\" \", res);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n < 0)\n            throw new ArgumentException(\"\
    n must be non-negative.\");\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n < 0) {\n            throw new\
    \ ArgumentException(\"n must be non-negative\");\n        }\n        return string.Join(\"\
    \ \", Enumerable.Range(0, (int)n + 1));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var items = new List<string>();\n \
    \       for (long i = 0; i <= n; i++) {\n            items.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", items);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return String.Join(\" \", Enumerable.Range(0,\
    \ (int) n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int) n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append($\"{i} \");\n \
    \       }\n        return sb.ToString().Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return Enumerable.Range(0, (int)n +\
    \ 1).Select(x => x.ToString()).Aggregate((x, y) => x + \" \" + y);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var a = new StringBuilder();\n    \
    \    for (int i = 0; i <= n; i++) {\n            if (i > 0) a.Append(' ');\n \
    \           a.Append(i);\n        }\n        return a.ToString();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string result = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n \
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string ret = \"\";\n        for (long\
    \ i = 0; i <= n; i++)\n            ret += \" \" + i;\n        return ret.Substring(1);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n           \
    \ sb.Append(' ');\n        }\n        sb.Length--;\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string r = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            r += \" \" + i;\n        }\n        return\
    \ r.Substring(1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (var i = 0L; i <= n; i++) {\n            if (i > 0) sb.Append(' ');\n\
    \            sb.Append(i);\n        }\n        return sb.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n           \
    \ sb.Append(' ');\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a7ae1e42eb1450baecd07487e86b737>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a7ae1e42eb1450baecd07487e86b737>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string result = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n \
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string seq = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            seq += i.ToString() + \" \";\n        }\n\
    \        return seq.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n == 0) return \"0\";\n       \
    \ var result = new List<string>();\n        for (int i = 0; i <= n; i++) {\n \
    \           result.Add(i.ToString());\n        }\n        return string.Join(\"\
    \ \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string s = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            s += \" \" + i;\n        }\n        return\
    \ s.Substring(1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i + \" \");\n \
    \       }\n        return sb.ToString().Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        return sb.ToString().Trim();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sequence = Enumerable.Range(0,\
    \ (int)n + 1).Select(i => i.ToString());\n        return string.Join(\" \", sequence);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        List<string> items = new List<string>();\n\
    \        for (long i = 0; i <= n; i++) {\n            items.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", items);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.AppendFormat(\"{0} \"\
    , i);\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6799247f122448fbfb4f1de19a60e32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6799247f122448fbfb4f1de19a60e32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var result = new List<long>();\n  \
    \      for (var i = 0L; i <= n; i++)\n            result.Add(i);\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i + \" \");\n \
    \       }\n        return sb.ToString().Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (int i in Enumerable.Range(0, (int)n + 1)) {\n            sb.Append(i);\n\
    \            sb.Append(\" \");\n        }\n        return sb.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        List<long> ls = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            ls.Add(i);\n        }\n\
    \        return string.Join(\" \", ls);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var stringSequence = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            stringSequence.Append(i);\n\
    \            stringSequence.Append(\" \");\n        }\n        stringSequence.Remove(stringSequence.Length\
    \ - 1, 1);\n        return stringSequence.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder builder = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            builder.Append($\"{i} \"\
    );\n        }\n        return builder.ToString().Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Append(i.ToString());\n\
    \            result.Append(\" \");\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10ab127199974d38915799a08e61b639>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10ab127199974d38915799a08e61b639>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i + \" \");\n \
    \       }\n        return sb.ToString().Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sequence = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            sequence += i.ToString() + \" \";\n     \
    \   }\n        return sequence.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return new string(' ', Convert.ToInt32(n)\
    \ + 1).Replace(\" \", \"{0} \").TrimEnd(' ').Replace(\"{0}\", \"{0}{0}\").TrimEnd('\
    \ ').FormatWith(Enumerable.Range(0, Convert.ToInt32(n) + 1).Select(x => x.ToString()).ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbnyax1s_.cs(15,128): error CS1061: ''string'' does not contain a definition
    for ''FormatWith'' and no accessible extension method ''FormatWith'' accepting
    a first argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string str = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            str += i.ToString() + \" \";\n        }\n\
    \        return str.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n            \
    \    sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return Enumerable.Range(0, (int) n\
    \ + 1).Select(x => x.ToString()).Aggregate((a, b) => a + \" \" + b);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d216bb9426614685b05cfe467dfa0534>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d216bb9426614685b05cfe467dfa0534>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string retval = \"\";\n        for\
    \ (int i = 0; i <= n; i++)\n            retval += i.ToString() + \" \";\n    \
    \    return retval.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var stringResult = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            stringResult.Append(i);\n\
    \            stringResult.Append(\" \");\n        }\n        return stringResult.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        List<string> l = new List<string>();\n\
    \        for (int i = 0; i <= n; i++) {\n            l.Add(i.ToString());\n  \
    \      }\n        return string.Join(\" \", l);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return Enumerable.Range(0, (int)n +\
    \ 1).Aggregate(\"\", (acc, x) => acc + \" \" + x).Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n < 0) throw new ArgumentException(\"\
    n must be non-negative.\");\n        var l = new List<string>();\n        for\
    \ (var i = 0L; i <= n; i++) l.Add(i.ToString());\n        return string.Join(\"\
    \ \", l);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        List<string> r = new List<string>();\n\
    \        for (long i = 0; i <= n; i++) {\n            r.Add(string.Format(\"{0}\"\
    , i));\n        }\n        return string.Join(\" \", r);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return (n < 0) ? \"\" : string.Join(\"\
    \ \", Enumerable.Range(0, (int)n + 1));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var v = new StringBuilder();\n    \
    \    for (long i = 0; i <= n; i++) {\n            if (i != 0) {\n            \
    \    v.Append(\" \");\n            }\n            v.Append(i);\n        }\n  \
    \      return v.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Append(i);\n    \
    \        result.Append(\" \");\n        }\n        return result.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string[] result = new string[n + 1];\n\
    \        for (int i = 0; i <= n; i++) {\n            result[i] = i.ToString();\n\
    \        }\n        return string.Join(\" \", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var ans = new StringBuilder();\n  \
    \      for (int i = 0; i <= n; i++)\n            ans.Append(i).Append(' ');\n\
    \        return ans.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c12d5bf4cbe4097a849b598c5e70f0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c12d5bf4cbe4097a849b598c5e70f0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n+1).Select(x => x.ToString()));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder builder = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            builder.Append(i.ToString());\n\
    \            builder.Append(\" \");\n        }\n        return builder.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbc1ccb7c2934dbd95ee38fb86bc5180>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbc1ccb7c2934dbd95ee38fb86bc5180>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.Append(i + \" \");\n   \
    \     }\n        return sb.ToString().Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.Append(i + \" \");\n   \
    \     }\n        return sb.ToString().Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n == 0) return \"0\";\n       \
    \ var sb = new StringBuilder();\n        while (n != 0) {\n            sb.Append(n);\n\
    \            sb.Append(' ');\n            n--;\n        }\n        sb.Append('0');\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71108ec4ef28487e9323de5639321dae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71108ec4ef28487e9323de5639321dae>:0 \n"
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n            \
    \    sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var buf = new StringBuilder();\n  \
    \      for (long i = 0; i <= n; i++) {\n            if (i > 0) buf.Append(' ');\n\
    \            buf.Append(i);\n        }\n        return buf.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sequence = new string[n + 1];\n\
    \        for (long i = 0; i <= n; i++) {\n            sequence[i] = i.ToString();\n\
    \        }\n        return string.Join(\" \", sequence);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string s = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            s += i + \" \";\n        }\n        return\
    \ s.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        List<string> res = new List<string>();\n\
    \        for (int i = 0; i <= n; i++) {\n            res.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", res);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var result = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n       \
    \ return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var ret = new List<long>();\n     \
    \   for (long i = 0; i <= n; i++) {\n            ret.Add(i);\n        }\n    \
    \    return String.Join(\" \", ret);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var res = new System.Text.StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            res.Append(i);\n        \
    \    res.Append(\" \");\n        }\n        res.Remove(res.Length - 1, 1);\n \
    \       return res.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var ans = new StringBuilder();\n  \
    \      for (long i = 0; i <= n; i++)\n            ans.Append($\"{i} \");\n   \
    \     return ans.ToString().Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n < 0)\n            throw new ArgumentException(String.Format(\"\
    n: {0} < 0\", n));\n        return String.Join(\" \", Enumerable.Range(0, (int)n\
    \ + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n\
    \            sb.Append(' ');\n        }\n        return sb.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fd8c4a2d91441578a0404a0a7210124>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fd8c4a2d91441578a0404a0a7210124>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015812
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int) n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n            \
    \    sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string s = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            s += i.ToString() + \" \";\n        }\n \
    \       return s.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        int i = 0;\n        var sb = new StringBuilder();\n\
    \        while (i <= n) {\n            sb.Append(i);\n            sb.Append('\
    \ ');\n            i++;\n        }\n        return sb.ToString();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a3ca804f86f44638bc7b12668b0f99e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a3ca804f86f44638bc7b12668b0f99e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.AppendFormat(\"{0} \", i);\n\
    \        }\n        return sb.ToString().Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string res = \"\";\n        for (long\
    \ i = 0; i <= n; i++)\n            res += i + \" \";\n        return res.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        List<string> str = new List<string>();\n\
    \        for (long i = 0; i <= n; i++) {\n            str.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", str);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return String.Join(\" \", Enumerable.Range(0,\
    \ (int)n+1).Select(x => x.ToString()));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var answer = new List<string>((int)n\
    \ + 1);\n        for (long i = 0; i <= n; i++) {\n            answer.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", answer);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var ret = new StringBuilder();\n  \
    \      for (int i = 0; i <= n; i++) {\n            ret.Append(i);\n          \
    \  ret.Append(\" \");\n        }\n        return ret.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc6db4034ba745108e4db4281f7d1a68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc6db4034ba745108e4db4281f7d1a68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder b = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            b.Append(i.ToString());\n\
    \            b.Append(' ');\n        }\n        b.Remove(b.Length - 1, 1);\n \
    \       return b.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var arr = new string[n + 1];\n    \
    \    for (long i = 0; i <= n; i++) {\n            arr[i] = i.ToString();\n   \
    \     }\n        return string.Join(\" \", arr);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string s = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            s += i.ToString() + \" \";\n        }\n \
    \       return s.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n\
    \            sb.Append(\" \");\n        }\n        return sb.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        // BEGIN SOLUTION\n        return string.Join(\"\
    \ \", Enumerable.Range(0, (int)n + 1));\n        // END SOLUTION\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n\
    \            sb.Append(\" \");\n        }\n        return sb.ToString();\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <792856faaaf9463ba18a230adcb396e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <792856faaaf9463ba18a230adcb396e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n < 0) {\n            throw new\
    \ ArgumentException(\"Input should be a non-negative integer.\", \"n\");\n   \
    \     }\n        return string.Join(\" \", Enumerable.Range(0, (int)n + 1));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n == 0) {\n            return \"\
    0\";\n        } else {\n            return StringSequence(n - 1) + \" \" + n.ToString();\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return String.Join(\" \",\n       \
    \     Enumerable.Range(0, (int)n+1)\n        );\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string ret = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            ret += i.ToString() + \" \";\n        }\n\
    \        return ret.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n\
    \            sb.Append(\" \");\n        }\n        sb.Remove(sb.Length - 1, 1);\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        List<string> list = new List<string>();\n\
    \        for (int i = 0; i <= n; i++) {\n            list.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", list);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return Enumerable.Range(0, (int)n +\
    \ 1).Aggregate(\n            new StringBuilder(),\n            (sb, i) => sb.Append($\"\
    {i} \"),\n            sb => sb.ToString().Trim()\n        );\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n < 0) {\n            throw new\
    \ ArgumentException(\"Expected n >= 0, got n = \" + n + \".\");\n        }\n \
    \       var sb = new StringBuilder();\n        for (long i = 0; i <= n; ++i) {\n\
    \            if (i > 0) {\n                sb.Append(' ');\n            }\n  \
    \          sb.Append(i);\n        }\n        return sb.ToString();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var b = new StringBuilder();\n    \
    \    for (int i = 0; i <= n; i++) {\n            if (i != 0) b.Append(' ');\n\
    \            b.Append(i);\n        }\n        return b.ToString();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string s = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            s += i.ToString() + \" \";\n        }\n \
    \       return s.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string result = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n \
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string ret = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            ret += \" \" + i;\n        }\n        return\
    \ ret.Substring(1);\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var result = new List<string>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string sequence = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            sequence += i.ToString() + \" \";\n\
    \        }\n        return sequence.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n+1).Select(i => i.ToString()));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var a = new string[n + 1];\n      \
    \  for (int i = 0; i <= n; i++) {\n            a[i] = i.ToString();\n        }\n\
    \        return string.Join(\" \", a);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n           \
    \ sb.Append(' ');\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a7ae1e42eb1450baecd07487e86b737>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a7ae1e42eb1450baecd07487e86b737>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder builder = new StringBuilder();\n\
    \        for (long x = 0; x <= n; x++) {\n            builder.Append(x);\n   \
    \         builder.Append(\" \");\n        }\n        return builder.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91ce0698237f44a68a15bb73d6894764>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91ce0698237f44a68a15bb73d6894764>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n            \
    \    sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab0d910514ee4c889f7fdb465921164c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab0d910514ee4c889f7fdb465921164c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        //TODO: Implement\n        //StringBuilder\
    \ numbers = new StringBuilder();\n        //for (int i = 0; i <= n; i++)\n   \
    \     //{\n        //    numbers.Append(i + \" \");\n        //}\n        //return\
    \ numbers.ToString().Trim();\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        // Write your code here.\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e27e4e270a04d77a5df069143f2bda6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e27e4e270a04d77a5df069143f2bda6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        int cur = 0;\n        var result =\
    \ new List<string>();\n        while (cur <= n) {\n            result.Add(cur.ToString());\n\
    \            cur += 1;\n        }\n        return string.Join(\" \", result);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i + \" \");\n \
    \       }\n        return sb.ToString().Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n < 0) throw new ArgumentException(\"\
    Sequence length must be non-negative\");\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) sb.Append(i.ToString() + \" \");\n     \
    \   sb.Length -= 1;\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return String.Join(\" \", Enumerable.Range(0,\
    \ (int) n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var l = new List<string>();\n     \
    \   for (var i = 0L; i <= n; i++) {\n            l.Add(i.ToString());\n      \
    \  }\n        return string.Join(\" \", l);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i + \" \");\n \
    \       }\n        return sb.ToString().Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string[] args = new string[n + 1];\n\
    \        for (int i = 0; i <= n; i++) {\n            args[i] = String.valueOf(i);\n\
    \        }\n        return String.join(\" \", args);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkdccbck8.cs(17,30): error CS0117: ''string'' does not contain a definition
    for ''valueOf''

    /tmp/tmpkdccbck8.cs(19,23): error CS0117: ''string'' does not contain a definition
    for ''join''

    '
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Append(i);\n    \
    \        result.Append(\" \");\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <057bc04c45f4457995b2f35954f38b67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <057bc04c45f4457995b2f35954f38b67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var seq = Enumerable.Range(0, (int)n\
    \ + 1).Select(x => x.ToString());\n        return string.Join(\" \", seq);\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n         \
    \   sb.Append(\" \");\n        }\n        sb.Length -= 1;\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n           \
    \ sb.Append(' ');\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a7ae1e42eb1450baecd07487e86b737>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a7ae1e42eb1450baecd07487e86b737>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var list = new List<string>();\n  \
    \      for (long i = 0; i <= n; i++) {\n            list.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", list);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n\
    \            sb.Append(\" \");\n        }\n        return sb.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var list = new List<string>();\n  \
    \      for (var i = 0L; i <= n; i++) {\n            list.Add(i.ToString());\n\
    \        }\n        return string.Join(\" \", list);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string result = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n \
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i + \" \");\n \
    \       }\n        return sb.ToString().Trim();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int) n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n\
    \            sb.Append(\" \");\n        }\n        return sb.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var result = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            result.Append(i).Append(\"\
    \ \");\n        }\n        return result.ToString().Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     if (n > 0) {\n            foreach (var i in Enumerable.Range(0, (int)n +\
    \ 1)) {\n                sb.Append(i);\n                sb.Append(\" \");\n  \
    \          }\n        } else {\n            sb.Append(0);\n        }\n       \
    \ return sb.ToString();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <978c7c1afea44a01b54a496f37f447ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <978c7c1afea44a01b54a496f37f447ac>:0 \n"
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string[] strs = new string[n + 1];\n\
    \        for (int i = 0; i <= n; i++) {\n            strs[i] = i.ToString();\n\
    \        }\n        return string.Join(\" \", strs);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var result = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            result.Append(i.ToString());\n\
    \            result.Append(\" \");\n        }\n        return result.ToString().Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n           \
    \ sb.Append(' ');\n        }\n        return sb.ToString().Trim();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string ans = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            ans += i.ToString() + \" \";\n        }\n\
    \        return ans.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var ans = new StringBuilder();\n  \
    \      for (long i = 0; i <= n; i++) {\n            ans.Append(i);\n         \
    \   ans.Append(' ');\n        }\n        return ans.ToString().Trim();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n\
    \            sb.Append(\" \");\n        }\n        sb.Remove(sb.Length - 1, 1);\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015813
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder res = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            res.Append(i.ToString());\n\
    \            res.Append(\" \");\n        }\n        return res.ToString();\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8044256827aa4551adf3d9a264839d26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8044256827aa4551adf3d9a264839d26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return Enumerable.Range(0, (int)n +\
    \ 1).Select(x => x.ToString()).Aggregate((x, y) => x + \" \" + y);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        List<string> sequence = new List<string>();\n\
    \        for (int i = 0; i <= n; i++)\n            sequence.Add(i.ToString());\n\
    \        return string.Join(\" \", sequence);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n           \
    \ sb.Append(' ');\n        }\n        sb.Length--; // remove last space\n    \
    \    return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string[] r = new string[n + 1];\n \
    \       for (long i = 0; i <= n; i++) {\n            r[i] = i.ToString();\n  \
    \      }\n        return string.Join(\" \", r);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n\
    \    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var sb = new StringBuilder();\n   \
    \     for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n           \
    \ sb.Append(' ');\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a7ae1e42eb1450baecd07487e86b737>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a7ae1e42eb1450baecd07487e86b737>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        if (n == 0) return \"0\";\n       \
    \ return string.Join(\" \", Enumerable.Range(0, (int)n + 1));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        var result = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            result.Append(i.ToString());\n\
    \            result.Append(\" \");\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a522658f1f3942ba9629fca9b56a5c90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a522658f1f3942ba9629fca9b56a5c90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        string result = \"\";\n        for\
    \ (int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n  \
    \      return result.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015810
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder res = new StringBuilder();\n\
    \        bool first = true;\n        for (long i = 0; i <= n; i++) {\n       \
    \     if (first) {\n                first = false;\n            } else {\n   \
    \             res.Append(\" \");\n            }\n            res.Append(i);\n\
    \        }\n        return res.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \", Enumerable.Range(0,\
    \ (int)n + 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015811
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            sb.Append(i + \" \");\n \
    \       }\n        sb.Remove(sb.Length - 1, 1);\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return string.Join(\" \",\n       \
    \                    Enumerable.Range(0, (int)n + 1).Select(x => x.ToString()));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
    0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015814
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n\
    \    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ string StringSequence(long n) {\n        return Enumerable.Range(0, (int)n +\
    \ 1).Select(i => i.ToString()).Join(\" \");\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"\
    0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"0 1 2 3 4 5 6\
    \ 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpoo2rnw.cs(15,74): error CS1501: No overload for method ''Join'' takes
    1 arguments

    '
  timestamp: 1660015814
