language: cs
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count() <= 1) {\n            return
    false;\n        }\n        else {\n            var done = new Dictionary<long,
    bool>();\n            foreach (var v in l) {\n                if (done.ContainsKey(-v))
    {\n                    return true;\n                }\n                else {\n
    \                   done[v] = true;\n                }\n            }\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, long> d =
    new Dictionary<long, long>();\n        foreach (long x in l) {\n            if
    (d.ContainsKey(-x)) {\n                return true;\n            }\n            if
    (!d.ContainsKey(x)) {\n                d[x] = 0L;\n            }\n            d[x]++;\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool res = false;\n        //
    check to see if there are at least two distinct elements in the list\n        if
    (l.Count >= 2) {\n            // sort the list\n            l.Sort();\n            //
    set the first element\n            long last = l[0];\n            // check to
    see if there are more than two elements in the list\n            if (l.Count >
    2) {\n                // iterate over every element except the first\n                for
    (int i = 1; i < l.Count; i++) {\n                    // check to see if the current
    element is distinct from the last\n                    if (l[i] != last) {\n                        //
    check to see if the current and last elements sum to zero\n                        if
    (l[i] + last == 0) {\n                            // there is a pair that sums
    to zero\n                            res = true;\n                            break;\n
    \                       }\n                        // set the last element to
    the current element\n                        last = l[i];\n                    }\n
    \               }\n            }\n            // check to see if the last and
    first elements sum to zero\n            else if (l[1] + l[0] == 0) {\n                //
    there is a pair that sums to zero\n                res = true;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c638d8dd2cf64d9e89847e1dbe04f151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c638d8dd2cf64d9e89847e1dbe04f151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        foreach (var a in l) {\n            foreach
    (var b in l) {\n                if (a != b && a + b == 0) {\n                    return
    true;\n                }\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool q = default(bool);\n
    \       foreach (var i in Itertools.Range(0L, Itertools.Count(l))) {\n            foreach
    (var j in Itertools.Range(0L, Itertools.Count(l))) {\n                if (i ==
    j) {\n                    continue;\n                }\n                q = (l[(int)i]
    + l[(int)j]) == 0L;\n                if (q) {\n                    break;\n                }\n
    \           }\n            if (q) {\n                break;\n            }\n        }\n
    \       return q;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpasen0i8u.cs(24,27): error CS0103: The name ''Itertools'' does not exist
    in the current context

    /tmp/tmpasen0i8u.cs(24,47): error CS0103: The name ''Itertools'' does not exist
    in the current context

    /tmp/tmpasen0i8u.cs(25,31): error CS0103: The name ''Itertools'' does not exist
    in the current context

    /tmp/tmpasen0i8u.cs(25,51): error CS0103: The name ''Itertools'' does not exist
    in the current context

    '
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool x = false;\n        foreach
    (var i in l) {\n            foreach (var j in l) {\n                if (i != j
    && i + j == 0) {\n                    x = true;\n                }\n            }\n
    \       }\n        return x;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, bool> d =
    new Dictionary<long, bool>();\n        for (int i = 0; i < l.Count; i++) {\n            d[l[i]]
    = true;\n        }\n        for (int i = 0; i < l.Count; i++) {\n            if
    (d.ContainsKey(-l[i])) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b929e5abc8f4ea8ad9c59ec31bb0a7f>:0
    \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, long> d =
    new Dictionary<long, long>();\n        foreach (long x in l) {\n            if
    (d.ContainsKey(x)) {\n                d[x] = d[x] + (long)1L;\n            }\n
    \           else {\n                d[x] = (long)1L;\n            }\n\n        }\n\n
    \       foreach (long x in l) {\n            if (x == (long)0L) {\n                if
    (d[x] >= (long)2L) {\n                    return true;\n                }\n\n
    \           }\n            else {\n                if (d.ContainsKey(-x)) {\n
    \                   return true;\n                }\n\n            }\n\n        }\n\n
    \       return false;\n\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var _tup4 = (l, (l.Count -
    (long)1L), (long)0L, (long)0L);\n        long length = _tup4.Item2;\n        long
    i = _tup4.Item3;\n        long j = _tup4.Item4;\n        bool pairsSumToZero =
    default;\n        while (i < length)\n        {\n            j = (long)0L;\n            while
    (j < length)\n            {\n                if ((i != j) && ((l[(int)i] + l[(int)j])
    == (long)0L))\n                {\n                    pairsSumToZero = true;\n
    \                   goto matchFound;\n                }\n\n                j =
    (j + (long)1L);\n\n            }\n\n            i = (i + (long)1L);\n\n        }\n
    \   matchFound:;\n        return pairsSumToZero;\n\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        for (long i = 0L; i < l.Count;
    i++) {\n            for (long j = 0L; j < l.Count; j++) {\n                if
    (i != j && l[(int)i] + l[(int)j] == 0L) {\n                    return true;\n
    \               }\n            }\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Replace the line below
    with a single line that returns a\n        // boolean value of the correct answer!\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc60ed0bfabf460d91f190f57b0a502c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc60ed0bfabf460d91f190f57b0a502c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var length = l.Count;\n        for
    (var i = 0; i < length; i++) {\n            for (var j = i + 1; j < length; j++)
    {\n                if (l[i] + l[j] == 0L) {\n                    return true;\n
    \               }\n            }\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Your code goes here.\n\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c1df3842f3d4de1a1907b23d98ea87a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c1df3842f3d4de1a1907b23d98ea87a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.Count > 1 && l.GroupBy(x
    => Math.Abs(x)).Any(g => (g.Key == 0L && g.Count() > 1) || g.Count() > 1);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cdadd827bf20424c95fe2e0b6daa2128>:0
    \n"
  stdout: ''
  timestamp: 1659976733
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var set = new HashSet<long>();\n
    \       foreach (var value in l) {\n            if (set.Contains(value)) {\n                return
    true;\n            }\n            set.Add(-value);\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool has_pair = false;\n        //
    test whether the list has any pair that sums to zero\n        bool retval = false;\n
    \       return retval;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e18259354baa440a88501825a3f142c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e18259354baa440a88501825a3f142c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Your code here\n        Dictionary<long,
    int> d = new Dictionary<long, int>();\n        for (int i = 0; i < l.Count; i++)
    {\n            if (d.ContainsKey(l[i])) {\n                d[l[i]]++;\n            }
    else {\n                d[l[i]] = 1;\n            }\n        }\n        bool flag
    = false;\n        foreach (KeyValuePair<long, int> item in d) {\n            if
    (item.Key != 0) {\n                if (d.ContainsKey(-item.Key)) {\n                    flag
    = true;\n                    break;\n                }\n            } else {\n
    \               if (item.Value > 1) {\n                    flag = true;\n                    break;\n
    \               }\n            }\n        }\n        return flag;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var set = new HashSet<long>();\n
    \       foreach (var item in l) {\n            if (set.Contains(-item)) {\n                return
    true;\n            }\n            set.Add(item);\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n      var s = new HashSet<long>();\n
    \     foreach (var i in l) {\n        if (s.Contains(i)) {\n          return true;\n
    \       }\n        s.Add(i);\n      }\n      foreach (var i in l) {\n        if
    (s.Contains(-i)) {\n          return true;\n        }\n      }\n      return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f712cfda7b1849dc827258ca28080088>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f712cfda7b1849dc827258ca28080088>:0
    \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long[] a = l.ToArray();\n
    \       Array.Sort(a);\n        for (int i = 0; i < a.Length; i++) {\n            for
    (int j = i + 1; j < a.Length; j++) {\n                if (a[i] + a[j] == 0) {\n
    \                   return true;\n                }\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var lo = (long)0L;\n        var
    hi = (long)0L;\n        var set = new HashSet<long>();\n        for (var i = (long)0L;
    i < (long)l.Count; i++)\n        {\n            var v = l[(int)i];\n            var
    minusV = (-1L * v);\n            if (set.Contains(minusV))\n            {\n                lo
    = i;\n                hi = set[minusV];\n                return true;\n            }\n\n
    \           set[v] = i;\n\n        }\n\n        return false;\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rhzx7eq.cs(33,22): error CS0021: Cannot apply indexing with [] to an
    expression of type ''HashSet<long>''

    /tmp/tmp5rhzx7eq.cs(37,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''HashSet<long>''

    '
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, bool> D =
    new Dictionary<long, bool>();\n        //long x = 0L;\n        foreach (long x
    in l) {\n            if (D.ContainsKey(x)) {\n                return true;\n            }\n
    \           D[-x] = true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976733
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        for (long i = 0L; i < (long)l.Count;
    i++) {\n            for (long j = 0L; j < (long)l.Count; j++) {\n                if
    (i != j && l[(int)i] + l[(int)j] == 0L) {\n                    return true;\n
    \               }\n            }\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976733
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // We do this by constructing
    a set, which is a data structure\n        // that allows you to check whether
    or not it contains a particular\n        // value in O(1) time. We then iterate
    through the list, and check\n        // whether -x is in the set, where x is the
    current element. If it\n        // is, then we've found a pair that sums to zero.\n
    \       HashSet<long> s = new HashSet<long>();\n        foreach (long x in l)
    {\n            if (s.Contains((long)(-x))) {\n                return true;\n            }\n
    \           s.Add(x);\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976733
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var s = new HashSet<long>();\n
    \       foreach (var v in l) {\n            if (s.Contains(0L - v)) {\n                return
    true;\n            }\n\n            s.Add(v);\n        }\n\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976733
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (((long)l.Count) == 0L)
    {\n            return false;\n        }\n        if (((long)l.Count) == 1L) {\n
    \           return false;\n        }\n        if (((long)l.Count) == 2L) {\n            if
    ((l[0L] + l[1L]) == 0L) {\n                return true;\n            }\n            return
    false;\n        }\n        long last = l[((long)l.Count) - 1L];\n        l.RemoveAt(((int)(((long)l.Count)
    - 1L)));\n        bool found = PairsSumToZero(l);\n        l.Add(last);\n        if
    (found) {\n            return true;\n        }\n        long last_last = l[((long)l.Count)
    - 2L];\n        l.RemoveAt(((int)(((long)l.Count) - 2L)));\n        found = PairsSumToZero(l);\n
    \       l.Add(last_last);\n        if (found) {\n            return true;\n        }\n
    \       if ((last + last_last) == 0L) {\n            return true;\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpies_8w9w.cs(30,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpies_8w9w.cs(30,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpies_8w9w.cs(35,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpies_8w9w.cs(42,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976733
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int n = l.Count;\n        List<long>
    a = new List<long>();\n        for (int i = 0; i < n; i++) {\n            a.Add(l[i]);\n
    \       }\n        a.Sort();\n        int lx = a.Count;\n        int j = lx -
    1;\n        int i = 0;\n        while (i < j) {\n            if (a[i] + a[j] ==
    0L) {\n                return true;\n            } else if (a[i] + a[j] < 0L)
    {\n                i++;\n            } else {\n                j--;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpysvgczt4.cs(25,18): error CS0136: A local or parameter named ''i'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976733
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> lookup = new
    HashSet<long>();\n        foreach (long x in l) {\n            long v = x;\n            if
    (lookup.Contains(v)) {\n                return true;\n            }\n            lookup.Add(-v);\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976733
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) {\n            return
    false;\n        }\n        HashSet<long> hs = new HashSet<long>();\n        foreach
    (long x in l) {\n            if (hs.Contains(0L - x)) {\n                return
    true;\n            }\n            hs.Add(x);\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976733
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var ht = new Dictionary<long,
    bool>();\n        bool found = false;\n        foreach (var item in l) {\n            if
    (!ht.ContainsKey(item)) {\n                ht[item] = true;\n            }\n            else
    {\n                found = true;\n            }\n        }\n        return found;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8bbd6fe04a8842f4936d9c71a5c7cb2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8bbd6fe04a8842f4936d9c71a5c7cb2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long n = (long)l.Count;\n
    \       long i = (long)0L;\n        while (i < n)\n        {\n            {\n
    \               long j = (long)0L;\n                while (j < n)\n                {\n
    \                   {\n                        if (i != j && l[(int)i] + l[(int)j]
    == (long)0L)\n                        {\n                            return true;\n
    \                       }\n\n                    }\n\n                    j =
    j + (long)1L;\n                }\n\n            }\n\n            i = i + (long)1L;\n
    \       }\n\n        return false;\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976733
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // declare a new dictionary
    of type Dictionary<string,long>\n        Dictionary<string, long> d = new Dictionary<string,
    long>();\n        // for each value in the list\n        foreach (long x in l)
    {\n            // if the dictionary contains the value -x\n            if (d.ContainsKey(__string.Concat(new
    string[] { (x.ToString() + (long)(-x).ToString()) }))) {\n                // return
    true\n                return true;\n            } else {\n                // if
    the dictionary does not contain the value -x\n                // add x to the
    dictionary\n                d.Add(x.ToString(), x);\n            }\n        }\n
    \       // otherwise return false\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq7_n0w5u.cs(28,31): error CS0103: The name ''__string'' does not exist
    in the current context

    /tmp/tmpq7_n0w5u.cs(28,78): error CS0030: Cannot convert type ''string'' to ''long''

    '
  timestamp: 1659976733
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool result = false;\n        long
    a;\n        long b;\n        foreach (long k in l) {\n            if (k == 0L)
    {\n                if (l.Count > 1L) {\n                    result = true;\n                }\n
    \               else {\n                    result = false;\n                }\n
    \               break;\n            }\n            if (l.Contains(-k)) {\n                result
    = true;\n                break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <173dbc3b39fa464495a5e1eae5aef6fc>:0
    \n"
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count <= 1) {\n            return
    false;\n        }\n        long last = l[0];\n        Dictionary<long, int> h
    = new Dictionary<long, int>();\n        h[last] = 1;\n        for (int i = 1;
    i < l.Count; i++) {\n            if (l[i] == last) {\n                h[l[i]]
    = h[l[i]] + 1;\n            }\n            else {\n                h[l[i]] = 1;\n
    \           }\n            last = l[i];\n        }\n        for (int i = 0; i
    < l.Count; i++) {\n            if (h.ContainsKey(-l[i])) {\n                if
    (l[i] == 0L) {\n                    if (h[l[i]] > 1) {\n                        return
    true;\n                    }\n                }\n                else {\n                    return
    true;\n                }\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976733
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> o = new List<long>();\n
    \       foreach (long b in l) {\n            if (!o.Contains(b)) {\n                o.Add(b);\n
    \           }\n        }\n        for (int i = 0; i < o.Count(); i++) {\n            for
    (int j = i+1; j < o.Count(); j++) {\n                if (o[i] + o[j] == 0) {\n
    \                   return true;\n                }\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        for (int x_i = 0; x_i < (l.Count);
    x_i++) {\n            for (int y_i = (x_i + 1); y_i < (l.Count); y_i++) {\n                bool
    x_y_sum_to_zero = ((l[x_i]) + (l[y_i])) == 0L;\n                if (x_y_sum_to_zero)
    {\n                    return true;\n                }\n\n            }\n\n        }\n
    \       return false;\n\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976734
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if ((l.Count() < 2L)) {\n
    \           return false;\n        }\n        var seen = new Dictionary<long,
    bool>();\n        {\n            var i__prev1 = i;\n\n            foreach (var
    (__i, __x) in l)\n            {\n                i = __i;\n                x =
    __x;\n                if (seen.ContainsKey(-x))\n                {\n                    return
    true;\n                }\n\n                seen[x] = true;\n\n            }\n\n
    \           i = i__prev1;\n        }\n\n        return false;\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphh852s0u.cs(28,28): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmphh852s0u.cs(30,40): error CS1061: ''long'' does not contain a definition
    for ''Deconstruct'' and no accessible extension method ''Deconstruct'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmphh852s0u.cs(30,40): error CS8129: No suitable ''Deconstruct'' instance
    or extension method was found for type ''long'', with 2 out parameters and a void
    return type.

    /tmp/tmphh852s0u.cs(30,27): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''__i''.

    /tmp/tmphh852s0u.cs(30,32): error CS8130: Cannot infer the type of implicitly-typed
    deconstruction variable ''__x''.

    /tmp/tmphh852s0u.cs(32,17): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmphh852s0u.cs(33,17): error CS0103: The name ''x'' does not exist in the
    current context

    /tmp/tmphh852s0u.cs(34,39): error CS0103: The name ''x'' does not exist in the
    current context

    /tmp/tmphh852s0u.cs(39,22): error CS0103: The name ''x'' does not exist in the
    current context

    /tmp/tmphh852s0u.cs(43,13): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659976733
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // foreach(var i in l)\n        var
    i = (long)0L;\n        {\n            // foreach(var j in l)\n            var
    j = (long)0L;\n            {\n                if ((i + j) == (long)0L)\n                {\n
    \                   return true;\n                }\n\n            }\n\n        }\n\n
    \       return false;\n\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9703d92db38f44258a03654503e47037>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9703d92db38f44258a03654503e47037>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.Contains(0L) && l.Count(x
    => x == 0L) > 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b5ba4231a4a4f96830183288aa9d516>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b5ba4231a4a4f96830183288aa9d516>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> l2 = new List<long>();\n
    \       foreach (long i in l) {\n            if (l2.Contains(i)) {\n                return
    true;\n            }\n            l2.Add((long)0L - i);\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976734
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool result = false;\n        foreach
    (long value in l) {\n            if (l.Contains(-value)) {\n                result
    = true;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1745d19290c2402485e95cdc7db87ae2>:0
    \n"
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int i = 0;\n        while
    (i < l.Count) {\n            int j = i + 1;\n            while (j < l.Count) {\n
    \               if (l[i] + l[j] == 0L) {\n                    return true;\n                }\n
    \               j = j + 1;\n            }\n            i = i + 1;\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Fill in your answer here\n
    \       HashSet<long> hs = new HashSet<long>();\n        foreach (long i in l)
    {\n            if (hs.Contains(-i)) {\n                return true;\n            }\n
    \           hs.Add(i);\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long zero = (long)0L;\n        var
    hash = new HashSet<long>();\n        foreach (var x in l)\n        {\n            if
    (hash.Contains(-x))\n            {\n                return true;\n            }\n\n
    \           hash.Add(x);\n\n        }\n        return false;\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool flag = false;\n        foreach
    (long i in l) {\n            foreach (long j in l) {\n                if (i !=
    j && i + j == 0) {\n                    flag = true;\n                }\n            }\n
    \       }\n        return flag;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976734
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> b = new List<long>();\n
    \       long i = 0L;\n        while (i < len(l))\n        {\n            long
    x = l[(int)i];\n            if (!(Contains(b, x)))\n            {\n                b.Add(x);\n
    \           }\n\n            i += 1L;\n\n        }\n\n        i = 0L;\n        while
    (i < len(b))\n        {\n            long x = b[(int)i];\n            if (Contains(b,
    (x * -1L)))\n            {\n                return true;\n            }\n\n            i
    += 1L;\n\n        }\n\n        return false;\n\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpavouezn3.cs(25,20): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpavouezn3.cs(28,19): error CS0103: The name ''Contains'' does not exist
    in the current context

    /tmp/tmpavouezn3.cs(38,20): error CS0103: The name ''len'' does not exist in the
    current context

    /tmp/tmpavouezn3.cs(41,17): error CS0103: The name ''Contains'' does not exist
    in the current context

    '
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> x = new HashSet<long>();\n
    \       foreach (long e in l) {\n            if (x.Contains(-e)) {\n                return
    true;\n            }\n\n            x.Add(e);\n        }\n\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> s = new HashSet<long>();\n
    \       foreach (long n in l) {\n            if (s.Contains(n) || s.Contains(-n))
    {\n                return true;\n            }\n            s.Add(n);\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e6122d7f1d440718c5ae0506bc1d20e>:0
    \n"
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        l.Sort();\n        return
    (l.Count > 1) && (l[0] == 0) && (l[1] == 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1753c6952df4c26980687783b7d03de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1753c6952df4c26980687783b7d03de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var _l = new HashSet<long>(l);\n
    \       foreach (var item in _l) {\n            if (_l.Contains(-item)) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebb53f29e7014ba780a83277847fe7ef>:0
    \n"
  stdout: ''
  timestamp: 1659976735
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool pairsSumToZero = false;\n
    \       if (l.Count > 0) {\n            // Sorts a list of integers.\n            //
    >>> Sort((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)2L})))\n
    \           // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L}))\n
    \           // >>> Sort((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)1L})))\n            // (new List<long>(new long[]{(long)1L, (long)1L, (long)2L,
    (long)2L}))\n            // >>> Sort((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L, (long)1L})))\n            // (new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L, (long)1L}))\n            // >>> Sort((new List<long>(new long[]{(long)1L,
    (long)1L, (long)1L, (long)2L})))\n            // (new List<long>(new long[]{(long)1L,
    (long)1L, (long)1L, (long)2L}))\n            List<long> Sort(List<long> l1) {\n
    \               long key = 0L;\n                long j = 0L;\n                long
    i = 0L;\n                long len_l1 = (long)l1.Count;\n                for (i
    = (long)1L; i < len_l1; i++) {\n                    key = l1[(int)(i)];\n                    j
    = i - (long)1L;\n                    while (j >= (long)0L && l1[(int)(j)] > key)
    {\n                        l1[(int)(j + (long)1L)] = l1[(int)(j)];\n                        j
    = j - (long)1L;\n                    }\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4v8tsvtr.cs(48,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp4v8tsvtr.cs(60,2): error CS1513: } expected

    '
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = new Dictionary<long,
    bool>();\n        foreach (var v in l) {\n            if (pairs.ContainsKey(-v))
    {\n                return true;\n            }\n            else {\n                pairs[v]
    = true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // code here\n        Dictionary<long,
    bool> hash = new Dictionary<long, bool>();\n        foreach (long num in l) {\n
    \           if (hash.ContainsKey(-num)) {\n                return true;\n            }\n
    \           hash[num] = true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> values = new
    HashSet<long>();\n        foreach (long x in l) {\n            if (values.Contains(0L
    - x)) {\n                return true;\n            }\n            values.Add(x);\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool flag = false;\n        for
    (long i = 0L; i < (long)l.Count; i++) {\n            for (long j = 0L; j < (long)l.Count;
    j++) {\n                if (i != j && l[(int)i] + l[(int)j] == 0L) {\n                    flag
    = true;\n                }\n            }\n        }\n        return flag;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        foreach (var i in l) {\n            foreach
    (var j in l) {\n                if (i == j) {\n                    continue;\n
    \               }\n\n                if (i + j == 0L) {\n                    return
    true;\n                }\n\n            }\n\n        }\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var data = new HashSet<long>();\n
    \       foreach (var item in l) {\n            data.Add(item);\n        }\n        foreach
    (var item in l) {\n            if (data.Contains(-(item))) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc71d1e67caf4822963ec07a56eaec30>:0
    \n"
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> taken_values =
    new List<long>();\n        long i = 0L;\n        while (i < (long)l.Count) {\n
    \           if (taken_values.Contains(l[(int)i])) {\n                i = i + (long)1L;\n
    \               continue;\n            }\n            taken_values.Add(l[(int)i]);\n
    \           long j = i + (long)1L;\n            while (j < (long)l.Count) {\n
    \               if (l[(int)i] + l[(int)j] == (long)0L) {\n                    return
    true;\n                }\n                j = j + (long)1L;\n            }\n            i
    = i + (long)1L;\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, long> pairs
    = new Dictionary<long, long>();\n        foreach (long num in l) {\n            if
    (pairs.ContainsKey(-num)) {\n                return true;\n            }\n            if
    (!pairs.ContainsKey(num)) {\n                pairs[num] = 0L;\n            }\n
    \           pairs[num]++;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return pairs_sum_to_zero(l);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgg8o48vy.cs(23,16): error CS0103: The name ''pairs_sum_to_zero'' does
    not exist in the current context

    '
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var input_list = new HashSet<long>(l);\n
    \       var visited = new HashSet<long>();\n        foreach (var item in input_list)
    {\n            if (visited.Contains(item)) {\n                continue;\n            }\n
    \           if (input_list.Contains((long)((long)0L - item))) {\n                return
    true;\n            }\n            visited.Add(item);\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54f2f22b94a34fda81244d471893d48c>:0
    \n"
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var count = new Dictionary<long,
    long>();\n        foreach (var n in l) {\n            if (count.ContainsKey(n))
    {\n                count[n]++;\n            } else {\n                count[n]
    = 1L;\n            }\n        }\n        foreach (var n in l) {\n            var
    complement = -n;\n            if (count.ContainsKey(complement)) {\n                if
    (n == complement) {\n                    if (count[n] > 1L) {\n                        return
    true;\n                    }\n                } else {\n                    return
    true;\n                }\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // START SOLUTION\n        long
    sum = 0L;\n        long product = 1L;\n        long count = 0L;\n        var unique
    = new HashSet<long>();\n        foreach (var item in l) {\n            sum +=
    item;\n            product *= item;\n            if (unique.Contains(item)) {\n
    \               count += 1L;\n            } else {\n                unique.Add(item);\n
    \           }\n        }\n        if (count >= 2L && product == 0L) {\n            return
    true;\n        }\n        if (unique.Contains(0L) && (unique.Count - 1L) >= 2L)
    {\n            return true;\n        }\n        if (unique.Contains(0L) && unique.Contains(-sum))
    {\n            return true;\n        }\n        foreach (var x in unique) {\n
    \           if (unique.Contains(-x)) {\n                return true;\n            }\n
    \       }\n        return false;\n        // END SOLUTION\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a58e3af7835435a8f09020f80333899>:0
    \n"
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // YOUR CODE HERE\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2c3c295c9d54a598637d298ecc22652>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2c3c295c9d54a598637d298ecc22652>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976735
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var dict = new Dictionary<long,
    int>();\n        for (int i = 0; i < l.Count; i++) {\n            var v = l[i];\n
    \           if (dict.ContainsKey(-v)) {\n                return true;\n            }
    else {\n                dict[v] = 1;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Replace the following line
    with your code\n        long sum = 0;\n        bool result = false;\n        foreach
    (long i in l) {\n            sum += i;\n        }\n        if (sum != 0) {\n            result
    = false;\n        }\n        else {\n            result = true;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc81c00ef26043c7aa2df107a13246c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc81c00ef26043c7aa2df107a13246c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // define the set\n        var
    s = new HashSet<long>();\n        for (int i = 0; i < l.Count; i++) {\n            var
    n = l[i];\n            if (s.Contains(-n)) {\n                return true;\n            }\n
    \           s.Add(n);\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Extract the list l, and
    initialize the hashtable \"h\" to be empty.\n        //\n        // The hashtable
    h is a mapping from all integers to zero,\n        // which will be used to keep
    track of all elements of the list.\n        var l = l;\n        var h = (new Dictionary<long,
    long>());\n        {\n            var i__prev1 = i;\n\n            foreach (var
    (__i) in Enumerable.Range(0, l.Count))\n            {\n                i = __i;\n
    \               h[l[i]] = 0L;\n            }\n\n            i = i__prev1;\n        }\n\n
    \       // For each integer x in the list l, do the following:\n        //\n        //
    - If the hashtable h contains the integer -x, then return true.\n        // -
    Otherwise, update the hashtable h to map x to zero.\n        {\n            var
    i__prev1 = i;\n\n            foreach (var (__i) in Enumerable.Range(0, l.Count))\n
    \           {\n                i = __i;\n                var x = l[i];\n                if
    (h.ContainsKey(-x))\n                {\n                    return true;\n                }\n\n
    \               h[x] = 0L;\n\n            }\n\n            i = i__prev1;\n        }\n\n
    \       // If none of the above cases match, return false.\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb9_qh8kg.cs(32,32): error CS0230: Type and identifier are both required
    in a foreach statement

    /tmp/tmpb9_qh8kg.cs(48,32): error CS0230: Type and identifier are both required
    in a foreach statement

    '
  timestamp: 1659976734
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // the total time for this
    function is the time to execute the for-loop\n        // once for each element
    in the list, plus the time to execute the inner\n        // if-statement once
    for each element in the list.\n        // the list can contain up to 1,000,000
    elements.\n        // each element can be as large as 1,000,000,000,000,000.\n
    \       // the total time for this code is O(n^2).\n        // the space used
    by this code is the space used by the list l.\n        // the list can contain
    up to 1,000,000 elements.\n        // each element can be as large as 1,000,000,000,000,000.\n
    \       // the total space used by this code is O(n).\n        // TODO: implement
    this function.\n        // it should return true if there are two distinct elements
    in the list\n        // that sum to zero, and false otherwise.\n        for (long
    i = 0; i < l.Count; i++) {\n            for (long j = 0; j < l.Count; j++) {\n
    \               if (i != j && l[(int)i] + l[(int)j] == 0) {\n                    return
    true;\n                }\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var s = new HashSet<long>();\n
    \       foreach (var x in l) {\n            if (s.Contains(x)) {\n                return
    true;\n            }\n\n            s.Add(x);\n        }\n\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d219da6373c043b89ba2520f8c3ca9cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d219da6373c043b89ba2520f8c3ca9cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // find the maximum and minimum
    element in the list\n        long minimum = l[0];\n        long maximum = l[0];\n
    \       for (int i = 0; i < l.Count; i++) {\n            if (l[i] < minimum) {\n
    \               minimum = l[i];\n            }\n            if (l[i] > maximum)
    {\n                maximum = l[i];\n            }\n        }\n        long sum
    = 0L;\n        long left = 0L;\n        long right = 0L;\n        int j = 0;\n
    \       int k = 0;\n        // Make sure a[i] and a[j] are distinct\n        for
    (int i = 0; i < l.Count; i++) {\n            // find the sum of l[i] and l[j],
    where j>i\n            sum = 0L;\n            for (j = i + 1; j < l.Count; j++)
    {\n                sum = l[i] + l[j];\n                if (sum == 0L) {\n                    return
    true;\n                }\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool sum;\n        long i;\n
    \       i = (long)1L;\n        while (i < (long)l.Count())\n        {\n            sum
    = l.ElementAt((int)i) == (long)0L;\n            if (sum)\n            {\n                return
    true;\n            }\n\n            var tuples =\n                from index1
    in Enumerable.Range(0, l.Count)\n                from index2 in Enumerable.Range(index1
    + 1, l.Count - index1 - 1)\n                select new { Sum = l[index1] + l[index2],
    Index1 = index1, Index2 = index2 };\n            foreach (var tuple in tuples)\n
    \           {\n                sum = tuple.Sum == (long)0L;\n                if
    (sum)\n                {\n                    return true;\n                }\n\n
    \           }\n\n            i = i + (long)1L;\n        }\n\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b576674110f4456b425fd8cea87fb48>:0
    \n"
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var m = new HashSet<long>();\n
    \       foreach (var x in l) {\n            if (m.Contains(x)) {\n                return
    true;\n            }\n\n            m.Add(-x);\n        }\n\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        for (long _ = 0L; _ < 2L;
    _++) {\n            foreach (long __ in l) {\n                long num = __;\n
    \               if (l.Contains(-num)) {\n                    return true;\n                }\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe23901b80b74925a2882200ea418b71>:0
    \n"
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> set = new HashSet<long>();\n
    \       foreach (long l1 in l) {\n            if (set.Contains(-l1)) {\n                return
    true;\n            }\n            set.Add(l1);\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> newList = l.Distinct().ToList();\n
    \       for (int i = 0; i < newList.Count; i++) {\n            newList[i] = newList[i]
    * -1;\n        }\n        return newList.Intersect(l).Count() > 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b24bcb63174f429daf2c8acd887d2a65>:0
    \n"
  stdout: ''
  timestamp: 1659976736
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var sl = (new HashSet<long>(l));\n
    \       foreach (var _l in l) {\n            {\n                var l__prev1 =
    l;\n\n                var l__prev2 = l;\n\n                foreach (var l_ in
    sl)\n                {\n                    l = l_;\n                    if (_l
    + l == 0L)\n                    {\n                        return true;\n                    }\n\n
    \               }\n\n                l = l__prev2;\n            }\n\n            l
    = _l__prev1;\n        }\n        return false;\n\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa0annuwx.cs(32,25): error CS0029: Cannot implicitly convert type ''long''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpa0annuwx.cs(33,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    /tmp/tmpa0annuwx.cs(43,17): error CS0103: The name ''_l__prev1'' does not exist
    in the current context

    '
  timestamp: 1659976735
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int found_pos = 0;\n        int
    found_neg = 0;\n        foreach (long v in l) {\n            if (v == 0L) {\n
    \               found_pos = 1;\n            }\n\n            if (v > 0L) {\n                found_pos++;\n
    \           }\n\n            if (v < 0L) {\n                found_neg++;\n            }\n\n
    \       }\n\n        if (found_pos > 1L && found_neg > 1L) {\n            return
    true;\n        }\n\n        return false;\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c57d8ec7729446558f81bad822fb2793>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c57d8ec7729446558f81bad822fb2793>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool found = false;\n        long
    i = 0L;\n        while (i < (long)l.Count) {\n            if (l[(int)i] == 0L)
    {\n                i = i + 1L;\n                continue;\n            }\n            long
    j = i + 1L;\n            while (j < (long)l.Count) {\n                if (l[(int)i]
    + l[(int)j] == 0L) {\n                    found = true;\n                    break;\n
    \               }\n                j = j + 1L;\n            }\n            i =
    i + 1L;\n        }\n        return found;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count() <= 1) {\n            return
    false;\n        }\n        HashSet<long> s = new HashSet<long>();\n        foreach
    (long v in l) {\n            if (s.Contains(-v)) {\n                return true;\n
    \           }\n            s.Add(v);\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var done = new Dictionary<long,
    bool>();\n        for (int i = 0; i < l.Count; i++) {\n            var neg = -l[i];\n
    \           if (done.ContainsKey(neg)) {\n                return true;\n            }\n
    \           else {\n                done[l[i]] = true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int n = l.Count;\n        long
    min = long.MaxValue;\n        long max = long.MinValue;\n        long sum = 0L;\n
    \       foreach (long j in l) {\n            if (j < min) {\n                min
    = j;\n            }\n\n            if (j > max) {\n                max = j;\n
    \           }\n\n            sum += j;\n\n        }\n\n        if (max < 0L) {\n
    \           return false;\n        }\n\n        if (min > 0L) {\n            return
    false;\n        }\n\n        if (sum == 0L) {\n            return true;\n        }\n\n
    \       if (min < 0L && max >= 0L) {\n            return true;\n        }\n\n
    \       return false;\n\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a073105d4c6144149be21c47302f7052>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a073105d4c6144149be21c47302f7052>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976736
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <950b6e347b75444e9df0160609b8ae00>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <950b6e347b75444e9df0160609b8ae00>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int lo = 0;\n        int hi
    = l.Count - 1;\n        while (lo < hi) {\n            if (l[lo] + l[hi] == 0)
    {\n                return true;\n            }\n            else if (l[lo] + l[hi]
    < 0) {\n                lo++;\n            }\n            else {\n                hi--;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a74f1f87ba64071aa86c144071546fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a74f1f87ba64071aa86c144071546fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        foreach (var value in l) {\n
    \           if (l.Contains(-value)) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0257e4e3408843dc894afa9f4b68a3a5>:0
    \n"
  stdout: ''
  timestamp: 1659976736
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Fill in your answer here.\n
    \       HashSet<long> set = new HashSet<long>();\n        foreach (long value
    in l) {\n            if (set.Contains(value)) {\n                return true;\n
    \           }\n            set.Add(0 - value);\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var ans = false;\n        for
    (var i = 0L; i < (long)l.Count; i++) {\n            for (var j = 0L; j < (long)l.Count;
    j++) {\n                if (((i != j) && ((l[(int)i] + l[(int)j]) == (long)0L)))
    {\n                    ans = true;\n                }\n            }\n        }\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, long> d =
    new Dictionary<long, long>();\n        foreach (long v in l) {\n            if
    (d.ContainsKey(v)) {\n                d[v] = d[v] + (long)1L;\n            }\n
    \           else {\n                d[v] = (long)1L;\n            }\n\n        }\n
    \       foreach (long k in d.Keys) {\n            if (d.ContainsKey(k * (long)-1L))
    {\n                if (k == (long)0L) {\n                    if (d[k] >= (long)2L)
    {\n                        return true;\n                    }\n\n                }\n
    \               else {\n                    return true;\n                }\n\n
    \           }\n\n        }\n        return false;\n\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> set = new HashSet<long>();\n
    \       foreach (long x in l) {\n            if (set.Contains(0L - x)) {\n                return
    true;\n            }\n\n            set.Add(x);\n        }\n\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var s = new HashSet<long>();\n
    \       foreach (var i in l) {\n            if (s.Contains(-i)) {\n                return
    true;\n            }\n\n            s.Add(i);\n        }\n\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var l2 = new List<long>();\n
    \       foreach (var item in l) {\n            if (item == 0L) {\n                l2.Add(item);\n
    \           }\n        }\n        if (l2.Count > 1L) {\n            return true;\n
    \       }\n        var h = new HashSet<long>();\n        foreach (var item in
    l) {\n            h.Add(item);\n        }\n        foreach (var item in l) {\n
    \           if (h.Contains(-(item))) {\n                return true;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a63f725ec21b4c638e0eca5ff8ff1ffd>:0
    \n"
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool flag = false;\n        for
    (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count;
    j++) {\n                if (l[i] + l[j] == 0) {\n                    flag = true;\n
    \               }\n            }\n        }\n        return flag;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool ret = false;\n        if(l.Count
    >= 2) {\n            List<long> ls = new List<long>(l);\n            long a =
    ls[0];\n            ls.RemoveAt(0);\n            foreach(long b in ls) {\n                if((a
    + b) == 0L) {\n                    ret = true;\n                    break;\n                }\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dbf44a5ab1a4d6d9c598e7f3633b92b>:0
    \n"
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var ns = new Dictionary<long,
    long>();\n        foreach (var n in l) {\n            if (ns.ContainsKey(n)) {\n
    \               ns[n] = ns[n] + 1L;\n            }\n            else {\n                ns[n]
    = 1L;\n            }\n        }\n        foreach (var n in l) {\n            var
    v = ns[n];\n            if (n == 0L && v >= 2L) {\n                return true;\n
    \           }\n            else if (n != 0L && ns.ContainsKey(-n)) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976736
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        foreach (long i in l) {\n
    \           foreach (long j in l) {\n                if (i != j && i + j == 0L)
    {\n                    return true;\n                }\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> h = new HashSet<long>();\n
    \       for (int i = 0; i < l.Count; i++) {\n            if (h.Contains(-l[i]))
    {\n                return true;\n            }\n            h.Add(l[i]);\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // REPLACE THE BODY OF THIS
    METHOD WITH YOUR OWN IMPLEMENTATION\n        bool yes = false;\n        foreach
    (long element in l)\n        {\n            if (l.Contains(-element))\n            {\n
    \               yes = true;\n            }\n        }\n        return yes;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a14cfe5316d4b309fa839bbf9eb4694>:0
    \n"
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var m = new Dictionary<long,
    long>();\n        foreach (var x in l) {\n            if (m.ContainsKey(-x)) {\n
    \               return true;\n            }\n\n            if (!m.ContainsKey(x))
    {\n                m[x] = 0L;\n            }\n\n            m[x]++;\n\n        }\n
    \       return false;\n\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var l1 = l.AsEnumerable().ToList();\n
    \       for (int i = 0; i < l1.Count; i++) {\n            for (int j = i + 1;
    j < l1.Count; j++) {\n                if (l1[i] + l1[j] == 0) {\n                    return
    true;\n                }\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, bool> seen
    = new Dictionary<long, bool>();\n        foreach (long n in l) {\n            if
    (seen.ContainsKey(-n)) {\n                return true;\n            }\n\n            seen[n]
    = true;\n        }\n\n        return false;\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Debug.Assert(l != null);\n
    \       var length = l.Count;\n        Debug.Assert(length >= 0);\n        if
    (length < 2) {\n            return false;\n        }\n        var copy = new List<long>(l);\n
    \       copy.Sort();\n        var i = 0;\n        while (i < copy.Count - 1) {\n
    \           var first = copy[i];\n            var j = i + 1;\n            while
    (j < copy.Count) {\n                var second = copy[j];\n                if
    (first + second == 0L) {\n                    return true;\n                }\n
    \               if (first + second < 0L) {\n                    i++;\n                    break;\n
    \               }\n                j++;\n            }\n            i++;\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cda436dccf09464ea730e8c4474fc43c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cda436dccf09464ea730e8c4474fc43c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> list = new List<long>();\n
    \       for (int i = 0; i < l.Count; i++) {\n            if (!list.Contains(l[i]))
    {\n                list.Add(l[i]);\n            }\n        }\n        for (int
    i = 0; i < list.Count; i++) {\n            if (list.Contains(-list[i])) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7897a69d5ce04803acbfceca8369ac40>:0
    \n"
  stdout: ''
  timestamp: 1659976737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool hasZero = false;\n        bool[]
    seen = new bool[100000];\n        for (int i = 0; i < l.Count; i++) {\n            int
    val = (int)l[i];\n            if (val == 0) {\n                hasZero = true;\n
    \           }\n            else {\n                if (seen[-val]) {\n                    return
    true;\n                }\n                seen[val] = true;\n            }\n        }\n
    \       return hasZero;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.PairsSumToZero (System.Collections.Generic.List`1[T]
    l) [0x0002d] in <17401fb739584b91adcda73d890a242a>:0 \n  at Problem.Main (System.String[]
    args) [0x00017] in <17401fb739584b91adcda73d890a242a>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x0002d]
    in <17401fb739584b91adcda73d890a242a>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <17401fb739584b91adcda73d890a242a>:0 \n"
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // write your code here...\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <281851802bca4aa48c858cfd5352c6f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <281851802bca4aa48c858cfd5352c6f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> seen = new HashSet<long>();\n
    \       foreach (long n in l) {\n            if (seen.Contains(n)) {\n                return
    true;\n            }\n            seen.Add(-n);\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // REPLACE WITH SOLUTION\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a410e1434dcb477b824b4508da6529ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a410e1434dcb477b824b4508da6529ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        for (int i = 0; i < l.Count;
    i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                if
    (l[i] + l[j] == 0) {\n                    return true;\n                }\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool tmp = false;\n        for
    (long i = 0L; i < (long)l.Count; i++) {\n            for (long j = i + 1L; j <
    (long)l.Count; j++) {\n                if ((l[(int)i] + l[(int)j]) == 0L) {\n
    \                   tmp = true;\n                }\n\n            }\n\n        }\n
    \       return tmp;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int len = l.Count;\n        if
    (len < 2) {\n            return false;\n        }\n        int i = 0;\n        while
    (i < len) {\n            int j = i + 1;\n            while (j < len) {\n                if
    (l[i] + l[j] == 0L) {\n                    return true;\n                }\n                j++;\n
    \           }\n            i++;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int n = l.Count;\n        for
    (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if
    (l[i] + l[j] == 0L) {\n                    return true;\n                }\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int n = l.Count;\n        long
    s = 0L;\n        long v = 0L;\n        long i = 0L;\n        long j = 0L;\n        long
    k = 0L;\n        long m = 0L;\n        s = 0L;\n        for (i = 0L; i < n; i++)
    {\n            v = l[(int)i];\n            s = s + v;\n        }\n        if (s
    == 0L) {\n            return true;\n        }\n        if (s % 2L == 1L) {\n            return
    false;\n        }\n        s = s / 2L;\n        m = Math.Min(s, n);\n        for
    (j = 0L; j < m; j++) {\n            v = l[(int)j];\n            if (v == s) {\n
    \               return true;\n            }\n            if (v > s) {\n                return
    false;\n            }\n            for (k = j + 1L; k < n; k++) {\n                if
    (v + l[(int)k] == s) {\n                    return true;\n                }\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d63b3e828b841a99bf104db65056f5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d63b3e828b841a99bf104db65056f5b>:0
    \n"
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> used_items =
    new HashSet<long>();\n        foreach (long i in l) {\n            if (used_items.Contains((long)0L
    - i)) {\n                return true;\n            }\n            used_items.Add(i);\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var s = new HashSet<long>();\n
    \       foreach (var x in l) {\n            if (s.Contains(x)) {\n                return
    true;\n            }\n\n            if (s.Contains(-x)) {\n                return
    true;\n            }\n\n            s.Add(x);\n\n        }\n\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d1ac835aae746eea9e0fd24baaa773e>:0
    \n"
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        foreach (long k in l) {\n
    \           foreach (long l0 in l) {\n                if (k != l0) {\n                    if
    (k + l0 == 0L) {\n                        return true;\n                    }\n
    \               }\n            }\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // We will assume that each
    entry of the list is distinct.\n        // We also assume that l is sorted (in
    increasing order).\n        // We will assume that all entries are integers.\n
    \       // We assume that the list is not empty (i.e. it contains at least one
    element).\n        if (l.Count == 1) {\n            // We assume that there are
    at least two distinct entries.\n            return false;\n        }\n        //
    We sort the input list in increasing order.\n        // We use a counting sort.\n
    \       List<long> sorted_l = Sort(l);\n        // We search for an entry in the
    list that is 0.\n        // If such an entry exists, we have found a solution.\n
    \       long N = (long)sorted_l.Count;\n        long i = (long)0L;\n        while
    (i < N) {\n            if (sorted_l[(int)i] == (long)0L) {\n                return
    true;\n            }\n            i = i + (long)1L;\n        }\n        // We
    search for a solution of the form -a + b = 0.\n        long j = (long)0L;\n        while
    (j < N) {\n            long cur_value = sorted_l[(int)j];\n            long left
    = (long)0L;\n            long right = N - (long)1L;\n            while (left <=
    right) {\n                long mid = (left + right) / (long)2L;\n                if
    (sorted_l[(int)mid] == -cur_value) {\n                    return true;\n                }\n
    \               if (sorted_l[(int)mid] < -cur_value) {\n                    left
    = mid + (long)1L;\n                }\n                else {\n                    right
    = mid - (long)1L;\n                }\n            }\n            j = j + (long)1L;\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyx_jk2ss.cs(33,31): error CS0103: The name ''Sort'' does not exist in
    the current context

    '
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // {{{\n        int n = l.Count;\n
    \       for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;
    j++) {\n                if (l[i] + l[j] == 0L) {\n                    return true;\n
    \               }\n            }\n        }\n        return false;\n        //
    }}}\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // input: List<long> l\n        //
    output: bool\n        // hint: use a hash set to keep track of seen values.\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <eb0cb64be8864dfba10851d7f2d56e92>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <eb0cb64be8864dfba10851d7f2d56e92>:0 \n"
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Your code here!\n        HashSet<long>
    store = new HashSet<long>();\n        foreach (long item in l) {\n            if
    (store.Contains(item) || store.Contains(-item)) {\n                return true;\n
    \           }\n            store.Add(item);\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ba52a23fdf845a082d6b3e98d7e5187>:0
    \n"
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, bool> mydict
    = new Dictionary<long, bool>();\n        for (int i = 0; i < l.Count; i++) {\n
    \           long item = l[i];\n            bool v = mydict.ContainsKey(item);\n
    \           if (v) {\n                return true;\n            }\n            mydict[(-item)]
    = true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        foreach (long x in l) {\n
    \           foreach (long y in l) {\n                if (x == y) {\n                    continue;\n
    \               }\n                if (x + y == 0L) {\n                    return
    true;\n                }\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count <= 1) {\n            return
    false;\n        }\n        var sortedl = (l.OrderBy((long x) => x).ToList());\n
    \       long ai = (long)0L;\n        long bi = (long)0L;\n        while (true)
    {\n            while (ai < sortedl.Count - 1 && sortedl[(int)ai] == sortedl[(int)(ai
    + 1L)]) {\n                ai++;\n            }\n            while (bi < sortedl.Count
    - 1 && sortedl[(int)bi] == sortedl[(int)(bi + 1L)]) {\n                bi++;\n
    \           }\n            if (ai == bi) {\n                bi++;\n            }\n
    \           if (bi >= sortedl.Count || sortedl[(int)bi] > (long)0L || sortedl[(int)ai]
    < (long)0L) {\n                break;\n            }\n            if (sortedl[(int)ai]
    + sortedl[(int)bi] == (long)0L) {\n                return true;\n            }\n
    \           if (sortedl[(int)ai] + sortedl[(int)bi] < (long)0L) {\n                ai++;\n
    \           }\n            else {\n                bi++;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b0fca3197aa4923894b7e7d4f96d8fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b0fca3197aa4923894b7e7d4f96d8fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Your code here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91941ee97341466a8511122be6fffc6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91941ee97341466a8511122be6fffc6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        //if (l.Count <= 1L) {\n        //
    \   return false;\n        //}\n        //long a = l[(int)0L];\n        //for
    (long i = 1L; i < l.Count; i++) {\n        //    if (l.Contains(-a)) {\n        //
    \       return true;\n        //    }\n        //    a = l[(int)i];\n        //}\n
    \       //return false;\n        if (l.Count < 2)\n            return false;\n
    \       else\n        {\n            foreach (var a in l)\n            {\n                if
    (l.Contains(-a))\n                    return true;\n            }\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5bb28827f0f4b3db9f5a463c3ca58dc>:0
    \n"
  stdout: ''
  timestamp: 1659976738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // // Implementation by Owen\n
    \       // List<long> newList = new List<long>();\n        // newList.AddRange(l);\n
    \       // newList.Sort();\n        // bool flag = false;\n        // int low
    = 0;\n        // int high = newList.Count - 1;\n        // while (low < high)
    {\n        //     if (newList[low] == 0 || newList[high] == 0) {\n        //         flag
    = true;\n        //         break;\n        //     }\n        //     long sum
    = newList[low] + newList[high];\n        //     if (sum == 0) {\n        //         flag
    = true;\n        //         break;\n        //     } else if (sum > 0) {\n        //
    \        high--;\n        //     } else {\n        //         low++;\n        //
    \    }\n        // }\n        // return flag;\n\n        // Implementation by
    omerjerk\n        // if l is empty, then there are no elements, so there are no
    pairs\n        if (l.Count == 0) {\n            return false;\n        }\n        //
    if l has one element, there is no pair\n        if (l.Count == 1) {\n            return
    false;\n        }\n        // if the elements in l sum to zero, the pair is found\n
    \       if (l.Sum() == 0) {\n            return true;\n        }\n        // if
    the elements of l are all the same, then there is no pair\n        if (l.All(x
    => x == l[0])) {\n            return false;\n        }\n        // if the elements
    of l sum to zero minus one, then we can subtract\n        // one from the first
    element, which will make the pair appear\n        if (l.Sum() == -1) {\n            l[0]
    = l[0] - 1;\n            return true;\n        }\n        // if the elements of
    l sum to zero plus one, then we can add one to\n        // the first element,
    which will make the pair appear\n        if (l.Sum() == 1) {\n            l[0]
    = l[0] + 1;\n            return true;\n        }\n        // we\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6kgfx5h2.cs(22,24): error CS0161: ''Problem.PairsSumToZero(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool[] p = new bool[2001];\n
    \       long v = 0L;\n        foreach (var i in l)\n        {\n            v =
    i + 1000L;\n            if (p[(int)v])\n            {\n                return
    true;\n            }\n\n            p[(int)v] = true;\n\n        }\n\n        return
    false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <987622b27a364e35970772180d5adf88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <987622b27a364e35970772180d5adf88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // assumes l is sorted\n        int
    low = 0;\n        int high = l.Count - 1;\n        while (low < high) {\n            long
    sum = l[low] + l[high];\n            if (sum == 0) {\n                return true;\n
    \           }\n            else if (sum < 0) {\n                low++;\n            }\n
    \           else {\n                high--;\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9464c62c8204b45b37a767faff0bcb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9464c62c8204b45b37a767faff0bcb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        foreach (long i in l) {\n
    \           long j = i * -1L;\n            if (l.Contains(j)) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced2c789599a43f7a6e9c70c1b27c2d6>:0
    \n"
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool sumz = false;\n        bool
    sumzp = false;\n        for (int i = 0; i < l.Count; i++) {\n            if (l[i]
    == 0L) {\n                sumz = true;\n            }\n            else if (l[i]
    > 0L) {\n                sumzp = true;\n            }\n        }\n        return
    (sumz && sumzp);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c88ec988bb74291a0fb579c4b438af9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c88ec988bb74291a0fb579c4b438af9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0L;\n        foreach
    (long elem in l) {\n            sum += elem;\n        }\n        return sum ==
    0L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6932256e30f4862aef1a2b7761c93c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b6932256e30f4862aef1a2b7761c93c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> hash_set = new
    HashSet<long>();\n        foreach (long x in l) {\n            if (hash_set.Contains((long)0L
    - x)) {\n                return true;\n            }\n            hash_set.Add(x);\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        for (int i = 0; i < l.Count;
    i++) {\n            long x = l[i];\n            for (int j = i + 1; j < l.Count;
    j++) {\n                long y = l[j];\n                if (x + y == 0L) {\n                    return
    true;\n                }\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // TODO - you fill in here.\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21d73564495345e49247c0a98e8a1160>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21d73564495345e49247c0a98e8a1160>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> list = new List<long>();\n
    \       foreach (long i in l) {\n            list.Add(i);\n        }\n        List<long>
    list_1 = new List<long>();\n        foreach (long i_1 in l) {\n            list_1.Add(i_1);\n
    \       }\n        foreach (long i_2 in list) {\n            foreach (long i_3
    in list_1) {\n                if ((i_2 + i_3) == (long)0L) {\n                    return
    true;\n                }\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15dd4b5cad9943dba8728f353450e0b9>:0
    \n"
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long x;\n        Dictionary<long,
    long> hm = new Dictionary<long, long>();\n        foreach (long i in l) {\n            if
    (hm.ContainsKey(i)) {\n                hm[i] = hm[i] + (long)1L;\n            }\n
    \           else {\n                hm[i] = (long)1L;\n            }\n        }\n
    \       foreach (long i in l) {\n            x = (long)0L - i;\n            if
    (hm.ContainsKey(x)) {\n                if (x == i) {\n                    if (hm[x]
    < (long)2L) {\n                        continue;\n                    }\n                }\n
    \               return true;\n            }\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> seen = new HashSet<long>();\n
    \       foreach (long i in l) {\n            if (seen.Contains((long)0L - i))
    {\n                return true;\n            }\n            else {\n                seen.Add(i);\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) {\n            return
    false;\n        }\n        l.Sort();\n        int i = 0;\n        int j = l.Count
    - 1;\n        while (i < j) {\n            var a = l[i];\n            var b =
    l[j];\n            if (a + b == 0) {\n                return true;\n            }\n
    \           if (a + b < 0) {\n                i++;\n            }\n            else
    {\n                j--;\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool flag = false;\n        for
    (int i = 0; i < l.Count(); i++) {\n            for (int j = i + 1; j < l.Count();
    j++) {\n                if (l[i] + l[j] == 0) {\n                    flag = true;\n
    \               }\n            }\n        }\n        return flag;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976738
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) {\n            return
    false;\n        }\n        HashSet<long> s = new HashSet<long>();\n        foreach
    (long x in l) {\n            if (s.Contains(x)) {\n                return true;\n
    \           }\n            s.Add(-x);\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976738
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        for (long i=0; i<l.Count;
    i++) {\n            for (long j=i+1; j<l.Count; j++) {\n                if (l[(int)i]
    + l[(int)j] == 0) {\n                    return true;\n                }\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool _p0 = default(bool);\n
    \       HashSet<long> _p0_s = new HashSet<long>();\n        foreach (var _p0_elem
    in l) {\n            _p0_s.Add(_p0_elem);\n        }\n        HashSet<long> _p1
    = default(HashSet<long>);\n        HashSet<long> _input_set0 = new HashSet<long>();\n
    \       _input_set0.Add((long)0L);\n        _p1 = _p0_s;\n        bool _p2 = default(bool);\n
    \       HashSet<long> _p2_set0 = new HashSet<long>();\n        foreach (var _p2_elem
    in _p1) {\n            if (_input_set0.Contains(-_p2_elem)) {\n                _p2_set0.Add(_p2_elem);\n
    \           }\n        }\n        _p2 = _p2_set0.Count > (long)0L;\n        _p0
    = _p2;\n        return _p0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8cfa4221e4a4dde9745761007a445fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8cfa4221e4a4dde9745761007a445fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976739
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // user code goes here\n        throw
    new Exception(\"not implemented\");\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Exception: not implemented\n  at Problem.Main
    (System.String[] args) [0x00017] in <7cecbd785bb24775bd23d07531bc1422>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.Exception: not implemented\n  at Problem.Main
    (System.String[] args) [0x00017] in <7cecbd785bb24775bd23d07531bc1422>:0 \n"
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Implement this placeholder.\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73547cd8202143c4bf4eb16d36a38e68>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73547cd8202143c4bf4eb16d36a38e68>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // This exercise is nearly
    identical to the previous one, and you can\n        // solve it the same way.\n
    \       // However, you might find it instructive to try a different approach.\n
    \       //\n        // While the previous exercise was concerned with finding
    numbers that\n        // are equal to a target, this one is concerned with finding
    numbers\n        // that sum to a target. We can solve this problem more efficiently
    by\n        // sorting the list of numbers and then searching for a pair of numbers\n
    \       // that sum to zero.\n        //\n        // Hint: Look at the Sort method,
    and think about why it's faster than\n        // your solution to the previous
    exercise.\n        // return false;\n        List<long> res = l.OrderBy(x => x).ToList();\n
    \       int i = 0;\n        int j = res.Count() - 1;\n        while (i <= j) {\n
    \           long sum = res[i] + res[j];\n            if (sum == 0) return true;\n
    \           if (sum < 0) i++;\n            else j--;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9be379fc15ee4715b459aa886462f2eb>:0
    \n"
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count() < 2) {\n            return
    false;\n        }\n        else {\n            if (l.Contains((long)0L)) {\n                return
    true;\n            }\n            else {\n                var hs = new HashSet<long>();\n
    \               foreach (var elem in l) {\n                    if (hs.Contains(-elem))
    {\n                        return true;\n                    }\n                    else
    {\n                        hs.Add(elem);\n                    }\n                }\n
    \               return false;\n            }\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2fd5932b412436da96b27c8984cb34e>:0
    \n"
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Check if there are any
    two elements in l that sum to zero\n        // l[0] can't be negative because
    there are no positive numbers\n        // less than zero that add up to l[0]\n
    \       if (l[0] < 0) {\n            return false;\n        }\n        // l[0]
    can't be positive because there are no negative numbers\n        // greater than
    zero that add up to l[0]\n        if (l[0] > 0) {\n            return false;\n
    \       }\n        // a positive integer can't add up to a negative integer\n
    \       long last = l[0];\n        for (int i = 0; i < l.Count; i++) {\n            if
    (last < 0 && l[i] > 0) {\n                return false;\n            }\n            if
    (last > 0 && l[i] < 0) {\n                return false;\n            }\n            last
    = l[i];\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c080aad744c047e39c489d244a082e64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c080aad744c047e39c489d244a082e64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        //long A = 0L;\n        //long
    a = 0L;\n        //long varok = 0L;\n        //long vp = 0L;\n        //long vc
    = 0L;\n        //long rr = 0L;\n        //long ri = 0L;\n        //long P = 0L;\n
    \       //long p = 0L;\n        //long ok = 0L;\n        //long n = 0L;\n        //long
    c = 0L;\n        //long b = 0L;\n        //long i = 0L;\n        //long j = 0L;\n
    \       //long elem__prev1 = 0L;\n        //bool elem__last_bool = false;\n        //List<long>
    elem__prev2 = new List<long>();\n        var length = l.Count;\n        for (var
    i__1 = 0L; i__1 < length; i__1++)\n        {\n            var elem = l[(int)i__1];\n
    \           for (var j__1 = i__1 + 1L; j__1 < length; j__1++)\n            {\n
    \               var elem__prev1 = l[(int)j__1];\n                if (elem + elem__prev1
    == 0L)\n                {\n                    return true;\n                }\n\n
    \           }\n\n        }\n\n        return false;\n\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.Distinct().Count()
    != l.Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bdc256c36b8846bd8458406af5458f1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bdc256c36b8846bd8458406af5458f1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976739
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, long> d =
    new Dictionary<long, long>();\n        foreach (long v in l) {\n            if
    (d.ContainsKey(v)) {\n                d[v] = d[v] + (long)1L;\n            }\n
    \           else {\n                d[v] = (long)1L;\n            }\n\n        }\n
    \       foreach (long v in l) {\n            long v1 = v;\n            if (v1
    == (long)0L) {\n                if (d[v1] > (long)1L) {\n                    return
    true;\n                }\n\n            }\n            else {\n                long
    v2 = (long)0L - v1;\n                if (d.ContainsKey(v2)) {\n                    return
    true;\n                }\n\n            }\n\n        }\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976739
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00017] in <beaa3bf25c35417f99312779391b7c04>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00017]
    in <beaa3bf25c35417f99312779391b7c04>:0 \n"
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) {\n            return
    false;\n        }\n        var h = new Dictionary<long, bool>();\n        foreach
    (var v in l) {\n            if (h.ContainsKey(-v)) {\n                return true;\n
    \           }\n            if (!h.ContainsKey(v)) {\n                h[v] = true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int n = l.Count;\n        for
    (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if
    (l[i] + l[j] == 0L) {\n                    return true;\n                }\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> set = new HashSet<long>();\n
    \       foreach (long l0 in l) {\n            if (set.Contains((-l0))) {\n                return
    true;\n            }\n            set.Add(l0);\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count() <= 1) {\n            return
    false;\n        }\n        HashSet<long> t = new HashSet<long>();\n        foreach
    (long i in l) {\n            if (t.Contains(-i)) {\n                return true;\n
    \           }\n            t.Add(i);\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var v = l.ToArray();\n        var
    n = (long)v.Length;\n        var new_l = v.Distinct().ToArray();\n        var
    new_n = (long)new_l.Length;\n        if (new_n <= 1L) {\n            return false;\n
    \       }\n        if (v[0L] == 0L && v[n - 1L] == 0L) {\n            return true;\n
    \       }\n        var hashed_values = new Dictionary<long, long>();\n        for
    (long i = 0L; i < new_n; i++) {\n            {\n                var ____index
    = i;\n                var ____value = new_l[____index];\n                hashed_values[____value]
    = i;\n            }\n        }\n        for (long i = 0L; i < new_n; i++) {\n
    \           {\n                var ____index = i;\n                var ____value
    = new_l[____index];\n                var sum = (long)(0L - ____value);\n                if
    (hashed_values.ContainsKey(sum)) {\n                    return true;\n                }\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9cabb7d0b945ddaec98e3c72d93093>:0
    \n"
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool r = false;\n        Dictionary<long,
    bool> sums = new Dictionary<long, bool>();\n        for (int i = 0; ((i) < (l.Count));
    i++) {\n            long n = l[i];\n            if (sums.ContainsKey(n)) {\n                r
    = true;\n                break;\n            }\n            else {\n                sums[(0L
    - n)] = true;\n            }\n        }\n        return r;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (((l.Count == 0L) || (l.Count
    == 1L))) {\n            return false;\n        }\n        bool flag = false;\n
    \       long zero = 0L;\n        List<long> list = l;\n        for (long j = 0L;
    j < list.Count; j++) {\n            long i = list[(int)j];\n            if (((i
    + zero) == 0L)) {\n                flag = true;\n            }\n        }\n        return
    flag;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92c9659cd7ff4d8f92cf1d2c38b465f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92c9659cd7ff4d8f92cf1d2c38b465f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool res = false;\n        foreach
    (long el in l) {\n            if (l.IndexOf(el) != l.LastIndexOf(el)) {\n                res
    = true;\n                break;\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ada94fa02b549839443dd90590e993f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ada94fa02b549839443dd90590e993f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var s = new HashSet<long>();\n
    \       foreach (var i in l) {\n            if (s.Contains(i)) {\n                return
    true;\n            }\n            else {\n                s.Add(-i);\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long i = (long)0L;\n        while
    (i < (long)l.Count) {\n            long n = (long)l[(int)i];\n            long
    j = (long)i + (long)1L;\n            while (j < (long)l.Count) {\n                long
    m = (long)l[(int)j];\n                if (n + m == (long)0L) {\n                    return
    true;\n                }\n                j++;\n            }\n            i++;\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976739
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        throw new Exception(\"Not
    Implemented\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Exception: Not Implemented\n  at Problem.Main
    (System.String[] args) [0x00017] in <ab49b4160e324b6bb08966c9addcc156>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.Exception: Not Implemented\n  at Problem.Main
    (System.String[] args) [0x00017] in <ab49b4160e324b6bb08966c9addcc156>:0 \n"
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long zero = (long)0L;\n        bool
    b = false;\n        for (long i = (long)0L; i < (long)l.Count; i++)\n        {\n
    \           for (long j = (long)0L; j < (long)l.Count; j++)\n            {\n                if
    ((((long)i != (long)j) && ((l[(int)i] + l[(int)j]) == zero)))\n                {\n
    \                   b = true;\n                }\n\n            }\n\n        }\n\n
    \       return b;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool result = false;\n        if
    (l.Count < 2) {\n            return result;\n        }\n        Dictionary<long,
    bool> d = new Dictionary<long, bool>();\n        long zero = (long)0L;\n        foreach
    (long n in l) {\n            if (n == zero) {\n                continue;\n            }\n
    \           long neg = zero - n;\n            if (d.ContainsKey(neg)) {\n                result
    = true;\n                break;\n            }\n            d[n] = true;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976739
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if ((l.Count() == (long)1L))
    {\n            return false;\n        }\n        if ((l.Count() == (long)2L))
    {\n            return ((l[(int)0L] + l[(int)1L]) == (long)0L);\n        }\n        long
    x = l[(int)0L];\n        l.RemoveAt((int)0L);\n        return PairsSumToZero(l);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acc9e6ffe6684201b06f6ecfdd9c991a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acc9e6ffe6684201b06f6ecfdd9c991a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Insert your code here\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acdac3286e764cbeb20fb78d677ab76c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acdac3286e764cbeb20fb78d677ab76c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var s = new SortedSet<long>();\n
    \       foreach (var i in l) {\n            s.Add(i);\n        }\n        foreach
    (var i in l) {\n            if (s.Contains(-(i))) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08124ac856594c0e84ffa20f52e4dea8>:0
    \n"
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var memo = new HashSet<long>();\n
    \       foreach (var elem in l) {\n            if (memo.Contains(elem)) {\n                return
    true;\n            }\n            memo.Add(0L - elem);\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        for (int i = 0; i < l.Count;
    i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                if
    (l[i] + l[j] == 0) {\n                    return true;\n                }\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6f10c9cb4004ce5bd15e31fdce6f9c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6f10c9cb4004ce5bd15e31fdce6f9c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool SumToZero = false;\n
    \       foreach (var item in l) {\n            SumToZero = SumToZero || l.Contains(-item);\n
    \       }\n        return SumToZero;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6cb336e65524b3eabe531158b8462aa>:0
    \n"
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> seen = new HashSet<long>();\n
    \       foreach (long x in l) {\n            if (seen.Contains((long)0L - x))
    {\n                return true;\n            }\n\n            seen.Add(x);\n        }\n\n
    \       return false;\n\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> h = new HashSet<long>();\n
    \       foreach (long a in l) {\n            if (h.Contains(-a)) {\n                return
    true;\n            }\n\n            h.Add(a);\n        }\n\n        return false;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        for (int i = 0; i < l.Count;
    i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                if
    (l[i] + l[j] == 0) {\n                    return true;\n                }\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var h = new HashSet<long>();\n
    \       foreach (var item in l) {\n            if (h.Contains(0L - item)) {\n
    \               return true;\n            }\n            h.Add(item);\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        for (int i = 0; i < l.Count;
    i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n                if
    (l[i] + l[j] == 0) {\n                    return true;\n                }\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976737
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool found = false;\n        for
    (long i = 0; i < l.Count; i++) {\n            for (long j = i + 1; j < l.Count;
    j++) {\n                if (l[(int)i] + l[(int)j] == 0L) {\n                    found
    = true;\n                }\n            }\n        }\n        return found;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <446f0c3ddfc348ba8816bc1b4dcde338>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976732
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> s = new HashSet<long>();\n
    \       long minValue = long.MaxValue;\n        long maxValue = long.MinValue;\n
    \       foreach (long i in l) {\n            s.Add(i);\n            if (i < minValue)
    {\n                minValue = i;\n            }\n            if (i > maxValue)
    {\n                maxValue = i;\n            }\n        }\n        return s.Contains(-(minValue
    + maxValue));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d85b98fdf6f4218bfcd409cc6a00f08>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d85b98fdf6f4218bfcd409cc6a00f08>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976740
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        for (long i = 0L; i < (long)l.Count;
    i++) {\n            for (long j = 0L; j < (long)l.Count; j++) {\n                if
    (i != j && l[(int)i] + l[(int)j] == 0L) {\n                    return true;\n
    \               }\n            }\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976733
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long[] a = new long[3];\n
    \       a[0] = 1;\n        a[1] = 2;\n        a[2] = 3;\n        a[0] = a[0] +
    a[1];\n        a[1] = a[1] - a[2];\n        if ((a[0] + a[1]) == 4L) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77013c28342c45c183c50ac4d7ea2969>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77013c28342c45c183c50ac4d7ea2969>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976740
