language: cs
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string res = \"\";\n        string[] numbers = new string[]{\"i\", \"v\",
    \"x\", \"l\", \"c\", \"d\", \"m\"};\n        int pos = 0;\n        do {\n            res
    = res.Insert(0, GetPlace(number % 10, numbers[pos]));\n            number /= 10;\n
    \           pos += 2;\n        } while (number > 0);\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbn_hu6_7.cs(24,33): error CS0103: The name ''GetPlace'' does not exist
    in the current context

    '
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var builder = new StringBuilder();\n        var position = 0;\n        var
    digits = number.ToString().Select(x => int.Parse(x.ToString())).ToArray();\n        Array.Reverse(digits);\n
    \       foreach (var digit in digits) {\n            if (digit == 0) {\n                position++;\n
    \               continue;\n            }\n            switch (position) {\n                case
    0:\n                    builder.Append(new string('i', digit));\n                    break;\n
    \               case 1:\n                    if (digit < 4) {\n                        builder.Append(new
    string('x', digit));\n                    } else if (digit == 4) {\n                        builder.Append(\"xl\");\n
    \                   } else if (digit == 5) {\n                        builder.Append(\"l\");\n
    \                   } else if (digit < 9) {\n                        builder.Append(\"l\"
    + new string('x', digit - 5));\n                    } else {\n                        builder.Append(\"xc\");\n
    \                   }\n                    break;\n                case 2:\n                    if
    (digit < 4) {\n                        builder.Append(new string('c', digit));\n
    \                   } else if (digit == 4) {\n                        builder.Append(\"cd\");\n
    \                   } else if (digit == 5) {\n                        builder.Append(\"d\");\n
    \                   } else if (digit < 9) {\n                        builder.Append(\"d\"
    + new string('c', digit - 5));\n                    } else {\n                        builder.Append(\"cm\");\n
    \                   }\n                    break;\n                case 3:\n                    builder.Append(new
    string('m', digit));\n                    break;\n            }\n            position++;\n
    \       }\n        return builder.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e20497fa316846bdaef041865328ffa0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e20497fa316846bdaef041865328ffa0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[] RomanNumerals = { \"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\",
    \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\" };\n        int[] RomanNumberValues
    = { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 };\n        string romanNumber
    = \"\";\n        for (int i = RomanNumberValues.Length - 1; i >= 0; i--) {\n            while
    (number >= RomanNumberValues[i]) {\n                number -= RomanNumberValues[i];\n
    \               romanNumber += RomanNumerals[i];\n            }\n        }\n        return
    romanNumber;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number > 1000 || number < 1)\n            throw new ArgumentOutOfRangeException(\"number\",
    \"Number must be in range [1, 1000]\");\n        var roman = new StringBuilder();\n
    \       var digitValues = new[] { 1, 5, 10, 50, 100, 500, 1000 };\n        var
    romanDigits = new[] { \"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\" };\n        for
    (int place = digitValues.Length - 1; place >= 0; place--) {\n            var digit
    = digitValues[place];\n            var nextDigit = place < digitValues.Length
    - 1 ? digitValues[place + 1] : 0;\n            var value = number / digit;\n            if
    (value == 0)\n                continue;\n            number %= digit;\n            roman.Append(romanDigits[place],
    (int)value);\n            if (value == 4 && nextDigit > 0)\n                roman.Append(romanDigits[place
    + 1]);\n        }\n        return roman.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg93__et_.cs(32,26): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n
    \           if (number >= 1000) {\n                sb.Append(\"m\");\n                number
    -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"cm\");\n
    \               number -= 900;\n            } else if (number >= 500) {\n                sb.Append(\"d\");\n
    \               number -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"cd\");\n
    \               number -= 400;\n            } else if (number >= 100) {\n                sb.Append(\"c\");\n
    \               number -= 100;\n            } else if (number >= 90) {\n                sb.Append(\"xc\");\n
    \               number -= 90;\n            } else if (number >= 50) {\n                sb.Append(\"l\");\n
    \               number -= 50;\n            } else if (number >= 40) {\n                sb.Append(\"xl\");\n
    \               number -= 40;\n            } else if (number >= 10) {\n                sb.Append(\"x\");\n
    \               number -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"ix\");\n
    \               number -= 9;\n            } else if (number >= 5) {\n                sb.Append(\"v\");\n
    \               number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"iv\");\n
    \               number -= 4;\n            } else if (number >= 1) {\n                sb.Append(\"i\");\n
    \               number -= 1;\n            }\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var roman = \"\";\n        var s = number.ToString();\n        // Make
    sure number is a positive integer.\n        Debug.Assert(number > 0);\n        Debug.Assert(number
    <= 1000);\n        // Convert each character of number to a roman character.\n
    \       for (int i = 0; i < s.Length; i++) {\n            var symbol = s[i];\n
    \           var digit = int.Parse(symbol.ToString());\n            var position
    = s.Length - i;\n            switch (position) {\n                case 4:\n                    roman
    += \"M\";\n                    break;\n                case 3:\n                    roman
    += getHundreds(digit);\n                    break;\n                case 2:\n
    \                   roman += getTens(digit);\n                    break;\n                case
    1:\n                    roman += getOnes(digit);\n                    break;\n
    \           }\n        }\n        return roman.ToLower();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7mk7k7lt.cs(35,30): error CS0103: The name ''getHundreds'' does not exist
    in the current context

    /tmp/tmp7mk7k7lt.cs(38,30): error CS0103: The name ''getTens'' does not exist
    in the current context

    /tmp/tmp7mk7k7lt.cs(41,30): error CS0103: The name ''getOnes'' does not exist
    in the current context

    '
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var sb = new StringBuilder();\n        var romanNumbers = new Dictionary<int,
    string>() {\n            { 1, \"i\" },\n            { 4, \"iv\" },\n            {
    5, \"v\" },\n            { 9, \"ix\" },\n            { 10, \"x\" },\n            {
    40, \"xl\" },\n            { 50, \"l\" },\n            { 90, \"xc\" },\n            {
    100, \"c\" },\n            { 400, \"cd\" },\n            { 500, \"d\" },\n            {
    900, \"cm\" },\n            { 1000, \"m\" }\n        };\n        var numbers =
    romanNumbers.Keys.OrderByDescending(n => n).ToList();\n        while (number >
    0) {\n            foreach (var n in numbers) {\n                if (number >=
    n) {\n                    sb.Append(romanNumbers[n]);\n                    number
    -= n;\n                    break;\n                }\n            }\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var result = new StringBuilder();\n        var numToRom = new Dictionary<long,
    string>\n        {\n            {1000L, \"m\"},\n            {900L, \"cm\"},\n
    \           {500L, \"d\"},\n            {400L, \"cd\"},\n            {100L, \"c\"},\n
    \           {90L, \"xc\"},\n            {50L, \"l\"},\n            {40L, \"xl\"},\n
    \           {10L, \"x\"},\n            {9L, \"ix\"},\n            {5L, \"v\"},\n
    \           {4L, \"iv\"},\n            {1L, \"i\"}\n        };\n        foreach
    (var item in numToRom) {\n            while (number >= item.Key) {\n                result.Append(item.Value);\n
    \               number -= item.Key;\n            }\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string numerals = \"ixcmz\";\n        long[] numbers = { 1, 10, 100, 1000,
    100000 };\n        string res = \"\";\n        int i = 4;\n        while (number
    > 0) {\n            while (number >= numbers[i]) {\n                res += numerals[i];\n
    \               number -= numbers[i];\n            }\n            i--;\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21c8754539ed4f8db52764a7631966a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21c8754539ed4f8db52764a7631966a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string roman = \"\";\n        while (number > 0) {\n            if (number
    >= 1000) {\n                roman += \"m\";\n                number -= 1000;\n
    \           } else if (number >= 900) {\n                roman += \"cm\";\n                number
    -= 900;\n            } else if (number >= 500) {\n                roman += \"d\";\n
    \               number -= 500;\n            } else if (number >= 400) {\n                roman
    += \"cd\";\n                number -= 400;\n            } else if (number >= 100)
    {\n                roman += \"c\";\n                number -= 100;\n            }
    else if (number >= 90) {\n                roman += \"xc\";\n                number
    -= 90;\n            } else if (number >= 50) {\n                roman += \"l\";\n
    \               number -= 50;\n            } else if (number >= 40) {\n                roman
    += \"xl\";\n                number -= 40;\n            } else if (number >= 10)
    {\n                roman += \"x\";\n                number -= 10;\n            }
    else if (number >= 9) {\n                roman += \"ix\";\n                number
    -= 9;\n            } else if (number >= 5) {\n                roman += \"v\";\n
    \               number -= 5;\n            } else if (number >= 4) {\n                roman
    += \"iv\";\n                number -= 4;\n            } else if (number >= 1)
    {\n                roman += \"i\";\n                number -= 1;\n            }\n
    \       }\n        return roman;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var result = new StringBuilder();\n        var nums = new[] { \"m\", \"cm\",
    \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"
    };\n        var vals = new[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,
    4, 1 };\n        int start = 0;\n        while (number > 0) {\n            while
    (vals[start] > number) {\n                start++;\n            }\n            number
    -= vals[start];\n            result.Append(nums[start]);\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var map = new Dictionary<long, string> {\n            { 1000, \"m\" },\n
    \           { 900, \"cm\" },\n            { 500, \"d\" },\n            { 400,
    \"cd\" },\n            { 100, \"c\" },\n            { 90, \"xc\" },\n            {
    50, \"l\" },\n            { 40, \"xl\" },\n            { 10, \"x\" },\n            {
    9, \"ix\" },\n            { 5, \"v\" },\n            { 4, \"iv\" },\n            {
    1, \"i\" }\n        };\n        var roman = new StringBuilder();\n        foreach
    (var kvp in map) {\n            while (number >= kvp.Key) {\n                roman.Append(kvp.Value);\n
    \               number -= kvp.Key;\n            }\n        }\n        return roman.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       int ones = (int)(number % 10);\n        int tens = (int)((number % 100)
    / 10);\n        int hundreds = (int)((number % 1000) / 100);\n        int thousands
    = (int)(number / 1000);\n        string onesDigit = \"\";\n        string tensDigit
    = \"\";\n        string hundredsDigit = \"\";\n        string thousandsDigit =
    \"\";\n        switch (ones) {\n            case 1:\n                onesDigit
    = \"i\";\n                break;\n            case 2:\n                onesDigit
    = \"ii\";\n                break;\n            case 3:\n                onesDigit
    = \"iii\";\n                break;\n            case 4:\n                onesDigit
    = \"iv\";\n                break;\n            case 5:\n                onesDigit
    = \"v\";\n                break;\n            case 6:\n                onesDigit
    = \"vi\";\n                break;\n            case 7:\n                onesDigit
    = \"vii\";\n                break;\n            case 8:\n                onesDigit
    = \"viii\";\n                break;\n            case 9:\n                onesDigit
    = \"ix\";\n                break;\n        }\n        switch (tens) {\n            case
    1:\n                tensDigit = \"x\";\n                break;\n            case
    2:\n                tensDigit = \"xx\";\n                break;\n            case
    3:\n                tensDigit = \"xxx\";\n                break;\n            case
    4:\n                tensDigit = \"xl\";\n                break;\n            case
    5:\n                tensDigit = \"l\";\n                break;\n            case
    6:\n                tensDigit = \"lx\";\n                break;\n            case
    7:\n                tensDigit = \"lxx\";\n                break;\n            case
    8:\n                tensDigit = \"lxxx\";\n                break;\n            case
    9:\n                tensDigit = \"xc\";\n                break;\n        }\n        switch
    (hundreds) {\n            case 1:\n                hundredsDigit = \"c\";\n                break;\n
    \           case 2:\n                hundredsDigit = \"cc\";\n                break;\n
    \           case 3:\n                hundredsDigit = \"ccc\";\n                break;\n
    \           case 4:\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_mf01y_w.cs(99,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp_mf01y_w.cs(116,2): error CS1513: } expected

    '
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException();\n
    \       StringBuilder sb = new StringBuilder();\n        if (number >= 100) {\n
    \           int dig = (int)(number / 100);\n            sb.Append('c', dig);\n
    \           number %= 100;\n        }\n        if (number >= 50) {\n            if
    (number >= 90) {\n                sb.Append(\"xc\");\n                number -=
    90;\n            } else {\n                sb.Append('l');\n                number
    -= 50;\n            }\n        }\n        if (number >= 40) {\n            sb.Append(\"xl\");\n
    \           number -= 40;\n        }\n        if (number >= 10) {\n            int
    dig = (int)(number / 10);\n            sb.Append('x', dig);\n            number
    %= 10;\n        }\n        if (number >= 5) {\n            if (number == 9) {\n
    \               sb.Append(\"ix\");\n                number -= 9;\n            }
    else {\n                sb.Append('v');\n                number -= 5;\n            }\n
    \       }\n        if (number >= 4) {\n            sb.Append(\"iv\");\n            number
    -= 4;\n        }\n        sb.Append('i', (int)number);\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82f1b63b522648e185d551eaff86d331>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82f1b63b522648e185d551eaff86d331>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       int[] values = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1
    };\n        string[] romans = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\",
    \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        var result = new StringBuilder();\n
    \       int i = 0;\n        while (number > 0) {\n            if (number >= values[i])
    {\n                number -= values[i];\n                result.Append(romans[i]);\n
    \           } else {\n                i++;\n            }\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Insert your code here.\n        // With each iteration, we subtract
    the base value and add the base roman\n        // numeral to our output.\n        //
    If a number is less than the current base, we instead subtract the\n        //
    next base value and add the next base roman numeral to our output.\n        string[]
    baseRomanNumerals = new string[] { \"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\",
    \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\" };\n        int[] baseIntValues
    = new int[] { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 };\n        var
    romanBuilder = new StringBuilder();\n        int romanBaseIndex = baseIntValues.Length
    - 1;\n        while (number > 0) {\n            if (number >= baseIntValues[romanBaseIndex])
    {\n                number -= baseIntValues[romanBaseIndex];\n                romanBuilder.Append(baseRomanNumerals[romanBaseIndex]);\n
    \           } else {\n                romanBaseIndex--;\n            }\n        }\n
    \       return romanBuilder.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var result = new StringBuilder();\n        var i = 0;\n        var numerals
    = new[] { 'i', 'v', 'x', 'l', 'c', 'd', 'm' };\n        var numeralsCount = numerals.Length;\n
    \       while (number > 0) {\n            var numeral = numerals[i];\n            var
    numeral5 = numerals[i + 1];\n            var numeral10 = numerals[i + 2];\n            var
    digit = number % 10;\n            if (digit < 4) {\n                result.Insert(0,
    new string(numeral, (int)digit));\n            } else if (digit == 4) {\n                result.Insert(0,
    new string(numeral, 1) + numeral5);\n            } else if (digit < 9) {\n                result.Insert(0,
    numeral5 + new string(numeral, (int)digit - 5));\n            } else {\n                result.Insert(0,
    new string(numeral, 1) + numeral10);\n            }\n            number /= 10;\n
    \           i += 2;\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.IntToMiniRoman (System.Int64 number) [0x0002a]
    in <fa2133c85f354d2b99db18f2c81eb75c>:0 \n  at Problem.Main (System.String[] args)
    [0x0014c] in <fa2133c85f354d2b99db18f2c81eb75c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.IntToMiniRoman (System.Int64 number) [0x0002a] in <fa2133c85f354d2b99db18f2c81eb75c>:0
    \n  at Problem.Main (System.String[] args) [0x0014c] in <fa2133c85f354d2b99db18f2c81eb75c>:0
    \n"
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string roman = string.Empty;\n        List<Tuple<int, string>> romanNumber
    = new List<Tuple<int, string>> {\n            new Tuple<int, string>(1000, \"m\"),\n
    \           new Tuple<int, string>(900, \"cm\"),\n            new Tuple<int, string>(500,
    \"d\"),\n            new Tuple<int, string>(400, \"cd\"),\n            new Tuple<int,
    string>(100, \"c\"),\n            new Tuple<int, string>(90, \"xc\"),\n            new
    Tuple<int, string>(50, \"l\"),\n            new Tuple<int, string>(40, \"xl\"),\n
    \           new Tuple<int, string>(10, \"x\"),\n            new Tuple<int, string>(9,
    \"ix\"),\n            new Tuple<int, string>(5, \"v\"),\n            new Tuple<int,
    string>(4, \"iv\"),\n            new Tuple<int, string>(1, \"i\")\n        };\n
    \       foreach (var item in romanNumber) {\n            while (number >= item.Item1)
    {\n                roman += item.Item2;\n                number -= item.Item1;\n
    \           }\n        }\n        return roman;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return string.Empty;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1424d9692f794ec79b35b91e5cdc1ba4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1424d9692f794ec79b35b91e5cdc1ba4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder romanNumeral = new StringBuilder();\n        for (int i
    = 0; i < number; i++) {\n            romanNumeral.Append(\"i\");\n        }\n
    \       string[] hundreds = new string[] { \"\", \"c\", \"cc\", \"ccc\", \"cd\",
    \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\" };\n        string[] tens = new string[]
    { \"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"
    };\n        string[] ones = new string[] { \"\", \"i\", \"ii\", \"iii\", \"iv\",
    \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        int hundredsPlace = (int)number
    / 100;\n        int tensPlace = ((int)number / 10) % 10;\n        int onesPlace
    = (int)number % 10;\n        string romanNumeralHundreds = hundreds[hundredsPlace];\n
    \       string romanNumeralTens = tens[tensPlace];\n        string romanNumeralOnes
    = ones[onesPlace];\n        string finalRomanNumeral = romanNumeralHundreds +
    romanNumeralTens + romanNumeralOnes;\n        return finalRomanNumeral;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.IntToMiniRoman (System.Int64 number) [0x0014f]
    in <c6ab15587ca2436bbe53bd7a8975e051>:0 \n  at Problem.Main (System.String[] args)
    [0x0014c] in <c6ab15587ca2436bbe53bd7a8975e051>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.IntToMiniRoman (System.Int64 number) [0x0014f] in <c6ab15587ca2436bbe53bd7a8975e051>:0
    \n  at Problem.Main (System.String[] args) [0x0014c] in <c6ab15587ca2436bbe53bd7a8975e051>:0
    \n"
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder sb = new StringBuilder();\n        long temp = number;\n
    \       Dictionary<long, string> map = new Dictionary<long, string>();\n        map.Add(1,
    \"i\");\n        map.Add(5, \"v\");\n        map.Add(10, \"x\");\n        map.Add(50,
    \"l\");\n        map.Add(100, \"c\");\n        map.Add(500, \"d\");\n        map.Add(1000,
    \"m\");\n        while (temp > 0) {\n            string c = \"\";\n            if
    (temp >= 1000) {\n                c = map[1000];\n                temp -= 1000;\n
    \           } else if (temp >= 500) {\n                c = map[500];\n                temp
    -= 500;\n            } else if (temp >= 100) {\n                c = map[100];\n
    \               temp -= 100;\n            } else if (temp >= 50) {\n                c
    = map[50];\n                temp -= 50;\n            } else if (temp >= 10) {\n
    \               c = map[10];\n                temp -= 10;\n            } else
    if (temp >= 5) {\n                c = map[5];\n                temp -= 5;\n            }
    else if (temp >= 1) {\n                c = map[1];\n                temp -= 1;\n
    \           }\n            sb.Append(c);\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea09f6b29e4246389dd188345393da1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea09f6b29e4246389dd188345393da1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[] nums = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\",
    \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] vals = { 1000, 900,
    500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        int index = 0;\n        string
    ret = \"\";\n        if (number > 1000)\n            return \"Too large\";\n        if
    (number <= 0)\n            return \"Too small\";\n        for (int i = 0; i <
    vals.Length; i++) {\n            while (number >= vals[i]) {\n                number
    -= vals[i];\n                ret += nums[i];\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string result = \"\";\n        while (number > 0) {\n            if (number
    >= 1000) {\n                result += \"m\";\n                number -= 1000;\n
    \           } else if (number >= 900) {\n                result += \"cm\";\n                number
    -= 900;\n            } else if (number >= 500) {\n                result += \"d\";\n
    \               number -= 500;\n            } else if (number >= 400) {\n                result
    += \"cd\";\n                number -= 400;\n            } else if (number >= 100)
    {\n                result += \"c\";\n                number -= 100;\n            }
    else if (number >= 90) {\n                result += \"xc\";\n                number
    -= 90;\n            } else if (number >= 50) {\n                result += \"l\";\n
    \               number -= 50;\n            } else if (number >= 40) {\n                result
    += \"xl\";\n                number -= 40;\n            } else if (number >= 10)
    {\n                result += \"x\";\n                number -= 10;\n            }
    else if (number >= 9) {\n                result += \"ix\";\n                number
    -= 9;\n            } else if (number >= 5) {\n                result += \"v\";\n
    \               number -= 5;\n            } else if (number >= 4) {\n                result
    += \"iv\";\n                number -= 4;\n            } else if (number >= 1)
    {\n                result += \"i\";\n                number -= 1;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var sb = new StringBuilder();\n        var roman = new[] { \"m\", \"cm\",
    \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"
    };\n        var arabic = new[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,
    5, 4, 1 };\n        for (int i = 0; i < arabic.Length; i++) {\n            while
    (number >= arabic[i]) {\n                number -= arabic[i];\n                sb.Append(roman[i]);\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string ret = \"\";\n        foreach (var g in new[] {(1L, \"i\"), (4L,
    \"iv\"), (5L, \"v\"), (9L, \"ix\"), (10L, \"x\"), (40L, \"xl\"), (50L, \"l\"),
    (90L, \"xc\"), (100L, \"c\"), (400L, \"cd\"), (500L, \"d\"), (900L, \"cm\"), (1000L,
    \"m\")}.OrderByDescending(g => g.Item1)) {\n            for (int i = 0; i < number
    / g.Item1; i++) {\n                ret += g.Item2;\n            }\n            number
    %= g.Item1;\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string s = \"\";\n        while (number >= 1000) {\n            s += \"m\";\n
    \           number -= 1000;\n        }\n        if (number >= 900) {\n            s
    += \"cm\";\n            number -= 900;\n        }\n        if (number >= 500)
    {\n            s += \"d\";\n            number -= 500;\n        }\n        if
    (number >= 400) {\n            s += \"cd\";\n            number -= 400;\n        }\n
    \       while (number >= 100) {\n            s += \"c\";\n            number -=
    100;\n        }\n        if (number >= 90) {\n            s += \"xc\";\n            number
    -= 90;\n        }\n        if (number >= 50) {\n            s += \"l\";\n            number
    -= 50;\n        }\n        if (number >= 40) {\n            s += \"xl\";\n            number
    -= 40;\n        }\n        while (number >= 10) {\n            s += \"x\";\n            number
    -= 10;\n        }\n        if (number >= 9) {\n            s += \"ix\";\n            number
    -= 9;\n        }\n        if (number >= 5) {\n            s += \"v\";\n            number
    -= 5;\n        }\n        if (number >= 4) {\n            s += \"iv\";\n            number
    -= 4;\n        }\n        while (number >= 1) {\n            s += \"i\";\n            number
    -= 1;\n        }\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string result = \"\";\n        var dic = new Dictionary<int, string>()
    {\n            { 1, \"i\" },\n            { 5, \"v\" },\n            { 10, \"x\"
    },\n            { 50, \"l\" },\n            { 100, \"c\" },\n            { 500,
    \"d\" },\n            { 1000, \"m\" }\n        };\n        string[] roman = {
    \"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\" };\n        int[] values = { 1,
    5, 10, 50, 100, 500, 1000 };\n        while (number != 0) {\n            int power
    = (int)Math.Pow(10, (int)Math.Log10(number));\n            int digit = (int)(number
    / power);\n            number %= power;\n            switch (digit) {\n                case
    0: break;\n                case 1:\n                case 2:\n                case
    3:\n                    result += dic[values[Array.IndexOf(values, power)]];\n
    \                   result += new string(dic[values[Array.IndexOf(values, power)]][0],
    digit - 1);\n                    break;\n                case 4:\n                    result
    += dic[values[Array.IndexOf(values, power)]];\n                    result += dic[values[Array.IndexOf(values,
    power * 5)]];\n                    break;\n                case 5:\n                case
    6:\n                case 7:\n                case 8:\n                    result
    += dic[values[Array.IndexOf(values, power * 5)]];\n                    result
    += new string(dic[values[Array.IndexOf(values, power)]][0], digit - 5);\n                    break;\n
    \               case 9:\n                    result += dic[values[Array.IndexOf(values,
    power)]];\n                    result += dic[values[Array.IndexOf(values, power
    * 10)]];\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var sb = new StringBuilder();\n        while (number > 0) {\n            if
    (number / 1000 > 0) {\n                sb.Append('m');\n                number
    -= 1000;\n            } else if (number / 900 > 0) {\n                sb.Append(\"cm\");\n
    \               number -= 900;\n            } else if (number / 500 > 0) {\n                sb.Append('d');\n
    \               number -= 500;\n            } else if (number / 400 > 0) {\n                sb.Append(\"cd\");\n
    \               number -= 400;\n            } else if (number / 100 > 0) {\n                sb.Append('c');\n
    \               number -= 100;\n            } else if (number / 90 > 0) {\n                sb.Append(\"xc\");\n
    \               number -= 90;\n            } else if (number / 50 > 0) {\n                sb.Append('l');\n
    \               number -= 50;\n            } else if (number / 40 > 0) {\n                sb.Append(\"xl\");\n
    \               number -= 40;\n            } else if (number / 10 > 0) {\n                sb.Append('x');\n
    \               number -= 10;\n            } else if (number / 9 > 0) {\n                sb.Append(\"ix\");\n
    \               number -= 9;\n            } else if (number / 5 > 0) {\n                sb.Append('v');\n
    \               number -= 5;\n            } else if (number / 4 > 0) {\n                sb.Append(\"iv\");\n
    \               number -= 4;\n            } else if (number / 1 > 0) {\n                sb.Append('i');\n
    \               number -= 1;\n            }\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"number\",
    \"number must be between 1 and 1000 inclusive\");\n        }\n        // M's.\n
    \       int numM = (int)(number / 1000);\n        number -= numM * 1000;\n        //
    C's.\n        int numC = (int)(number / 100);\n        number -= numC * 100;\n
    \       // X's.\n        int numX = (int)(number / 10);\n        number -= numX
    * 10;\n        // I's.\n        int numI = (int)(number / 1);\n        number
    -= numI * 1;\n        // Assemble.\n        return (\n            new string('m',
    numM) +\n            new string('c', numC) +\n            new string('x', numX)
    +\n            new string('i', numI)\n        );\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a1f1167ff504c87abbb075bfe25d1c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a1f1167ff504c87abbb075bfe25d1c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string result = \"\";\n        for (int i = 0; i < number / 1000; i++)
    {\n            result += \"m\";\n        }\n        number %= 1000;\n        if
    (number / 100 == 9) {\n            result += \"cm\";\n        } else if (number
    / 100 == 4) {\n            result += \"cd\";\n        } else {\n            if
    (number / 500 > 0) {\n                result += \"d\";\n            }\n            number
    %= 500;\n            for (int i = 0; i < number / 100; i++) {\n                result
    += \"c\";\n            }\n        }\n        number %= 100;\n        if (number
    / 10 == 9) {\n            result += \"xc\";\n        } else if (number / 10 ==
    4) {\n            result += \"xl\";\n        } else {\n            if (number
    / 50 > 0) {\n                result += \"l\";\n            }\n            number
    %= 50;\n            for (int i = 0; i < number / 10; i++) {\n                result
    += \"x\";\n            }\n        }\n        number %= 10;\n        if (number
    == 9) {\n            result += \"ix\";\n        } else if (number == 4) {\n            result
    += \"iv\";\n        } else {\n            if (number / 5 > 0) {\n                result
    += \"v\";\n            }\n            number %= 5;\n            for (int i = 0;
    i < number; i++) {\n                result += \"i\";\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var digit_vals = new[] {\n            (\"i\", 1L),\n            (\"iv\",
    4L),\n            (\"v\", 5L),\n            (\"ix\", 9L),\n            (\"x\",
    10L),\n            (\"xl\", 40L),\n            (\"l\", 50L),\n            (\"xc\",
    90L),\n            (\"c\", 100L),\n            (\"cd\", 400L),\n            (\"d\",
    500L),\n            (\"cm\", 900L),\n            (\"m\", 1000L)\n        };\n
    \       var str = \"\";\n        var index = 0;\n        while (index < digit_vals.Length)
    {\n            var digit = digit_vals[index];\n            if (number >= digit.Item2)
    {\n                number -= digit.Item2;\n                str += digit.Item1;\n
    \           } else {\n                index += 1;\n            }\n        }\n
    \       return str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81ed973958b54129a3b7f13ee96ec39d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81ed973958b54129a3b7f13ee96ec39d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00009] in <f736851a565b438db40f3437b882aa1b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00009] in <f736851a565b438db40f3437b882aa1b>:0
    \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Your code goes here\n        return \"Implement me!\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44d3e5e5f9fc44a58a47775bf83ca189>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44d3e5e5f9fc44a58a47775bf83ca189>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       String s = \"\";\n        long num = number;\n        if (num >= 1000)
    {\n            long thous = num / 1000;\n            num = num % 1000;\n            for
    (int i = 0; i < thous; i++) {\n                s += \"m\";\n            }\n        }\n
    \       if (num >= 500) {\n            if (num < 900) {\n                long
    huns = num / 100;\n                num = num % 100;\n                for (int
    i = 0; i < huns; i++) {\n                    s += \"c\";\n                }\n
    \           } else {\n                num = num - 900;\n                s += \"cm\";\n
    \           }\n        }\n        if (num >= 100) {\n            if (num < 400)
    {\n                long huns = num / 100;\n                num = num % 100;\n
    \               for (int i = 0; i < huns; i++) {\n                    s += \"c\";\n
    \               }\n            } else {\n                num = num - 400;\n                s
    += \"cd\";\n            }\n        }\n        if (num >= 50) {\n            if
    (num < 90) {\n                long tens = num / 10;\n                num = num
    % 10;\n                for (int i = 0; i < tens; i++) {\n                    s
    += \"x\";\n                }\n            } else {\n                num = num
    - 90;\n                s += \"xc\";\n            }\n        }\n        if (num
    >= 10) {\n            if (num < 40) {\n                long tens = num / 10;\n
    \               num = num % 10;\n                for (int i = 0; i < tens; i++)
    {\n                    s += \"x\";\n                }\n            } else {\n
    \               num = num - 40;\n                s += \"xl\";\n            }\n
    \       }\n        if (num >= 5) {\n            if (num < 9) {\n                long
    ones = num;\n                for (int i = 0; i < ones; i++) {\n                    s
    += \"i\";\n                }\n            } else {\n                num = num
    - 9;\n                s += \"ix\";\n            }\n        }\n        if (num
    >= 1) {\n            if (\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps347kxhs.cs(89,17): error CS1525: Invalid expression term ''}''

    /tmp/tmps347kxhs.cs(89,17): error CS1026: ) expected

    /tmp/tmps347kxhs.cs(89,17): error CS1002: ; expected

    /tmp/tmps347kxhs.cs(91,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmps347kxhs.cs(108,2): error CS1513: } expected

    '
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       int num = (int)number;\n        int[] numerals = new int[] {\n            1000,\n
    \           900,\n            500,\n            400,\n            100,\n            90,\n
    \           50,\n            40,\n            10,\n            9,\n            5,\n
    \           4,\n            1\n        };\n        string[] symbols = new string[]
    {\n            \"m\",\n            \"cm\",\n            \"d\",\n            \"cd\",\n
    \           \"c\",\n            \"xc\",\n            \"l\",\n            \"xl\",\n
    \           \"x\",\n            \"ix\",\n            \"v\",\n            \"iv\",\n
    \           \"i\"\n        };\n        StringBuilder result = new StringBuilder();\n
    \       for (int i = 0; i < numerals.Length; i++) {\n            int q = num /
    numerals[i];\n            for (int j = 0; j < q; j++) {\n                result.Append(symbols[i]);\n
    \           }\n            num -= q * numerals[i];\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var num = number;\n        var numeral = new StringBuilder();\n        var
    s = new Stack<int>();\n        var k = 0;\n        while (num != 0) {\n            s.Push(Convert.ToInt32(num
    % 10));\n            num /= 10;\n            k++;\n        }\n        while (k
    != 0) {\n            k--;\n            var c = s.Pop();\n            switch (k)
    {\n                case 0: {\n                    if (c <= 3) {\n                        numeral.Append('x',
    c);\n                    } else if (c == 4) {\n                        numeral.Append(\"xl\");\n
    \                   } else if (c == 5) {\n                        numeral.Append('l');\n
    \                   } else if (c >= 6 && c <= 8) {\n                        numeral.Append('l');\n
    \                       numeral.Append('x', c - 5);\n                    } else
    if (c == 9) {\n                        numeral.Append(\"xc\");\n                    }\n
    \                   break;\n                }\n                case 1: {\n                    if
    (c <= 3) {\n                        numeral.Append('c', c);\n                    }
    else if (c == 4) {\n                        numeral.Append(\"cd\");\n                    }
    else if (c == 5) {\n                        numeral.Append('d');\n                    }
    else if (c >= 6 && c <= 8) {\n                        numeral.Append('d');\n                        numeral.Append('c',
    c - 5);\n                    } else if (c == 9) {\n                        numeral.Append(\"cm\");\n
    \                   }\n                    break;\n                }\n                case
    2: {\n                    if (c <= 3) {\n                        numeral.Append('m',
    c);\n                    }\n                    break;\n                }\n            }\n
    \       }\n        return numeral.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5343713d52d248348ca41df755f768ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5343713d52d248348ca41df755f768ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // YOUR CODE HERE\n        throw new NotImplementedException();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <b1b1cd93234c4a50a0792a7e96be8338>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <b1b1cd93234c4a50a0792a7e96be8338>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var _0x = \"\";\n        var _1x = \"x\";\n        var _2x = \"xx\";\n
    \       var _3x = \"xxx\";\n        var _4x = \"xl\";\n        var _5x = \"l\";\n
    \       var _6x = \"lx\";\n        var _7x = \"lxx\";\n        var _8x = \"lxxx\";\n
    \       var _9x = \"xc\";\n        var _10x = \"c\";\n        var _20x = \"cc\";\n
    \       var _30x = \"ccc\";\n        var _40x = \"cd\";\n        var _50x = \"d\";\n
    \       var _60x = \"dc\";\n        var _70x = \"dcc\";\n        var _80x = \"dccc\";\n
    \       var _90x = \"cm\";\n        var _100x = \"m\";\n        var _200x = \"mm\";\n
    \       var _300x = \"mmm\";\n        var _400x = \"mv\";\n        var _500x =
    \"v\";\n        var _600x = \"vm\";\n        var _700x = \"vmm\";\n        var
    _800x = \"vmmm\";\n        var _900x = \"mx\";\n        if (number == 0) {\n            return
    \"\";\n        }\n        var stringArray = new[] {\n            _0x,\n            _1x,\n
    \           _2x,\n            _3x,\n            _4x,\n            _5x,\n            _6x,\n
    \           _7x,\n            _8x,\n            _9x,\n            _10x,\n            _20x,\n
    \           _30x,\n            _40x,\n            _50x,\n            _60x,\n            _70x,\n
    \           _80x,\n            _90x,\n            _100x,\n            _200x,\n
    \           _300x,\n            _400x,\n            _500x,\n            _600x,\n
    \           _700x,\n            _800x,\n            _900x\n        };\n        return
    stringArray[(int) number];\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55d10d932ba4414d869cfcfecb8ccdad>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.IntToMiniRoman (System.Int64 number) [0x0017d]
    in <55d10d932ba4414d869cfcfecb8ccdad>:0 \n  at Problem.Main (System.String[] args)
    [0x00019] in <55d10d932ba4414d869cfcfecb8ccdad>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.IntToMiniRoman (System.Int64 number) [0x0017d] in <55d10d932ba4414d869cfcfecb8ccdad>:0
    \n  at Problem.Main (System.String[] args) [0x00019] in <55d10d932ba4414d869cfcfecb8ccdad>:0
    \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       //return n;\n        int[] roman_numerals = { 1000, 900, 500, 400, 100,
    90, 50, 40, 10, 9, 5, 4, 1 };\n        String[] roman_strings = { \"m\", \"cm\",
    \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"
    };\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while
    (number > 0 || roman_numerals.Length == (i - 1)) {\n            while ((number
    - roman_numerals[i]) >= 0) {\n                number -= roman_numerals[i];\n                sb.Append(roman_strings[i]);\n
    \           }\n            i++;\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var buffer = new StringBuilder();\n        for (int i = 0; i < number
    / 1000; i++) {\n            buffer.Append('m');\n        }\n        number %=
    1000;\n        if (number >= 900) {\n            buffer.Append(\"cm\");\n            number
    -= 900;\n        }\n        if (number >= 500) {\n            buffer.Append('d');\n
    \           number -= 500;\n        }\n        if (number >= 400) {\n            buffer.Append(\"cd\");\n
    \           number -= 400;\n        }\n        for (int i = 0; i < number / 100;
    i++) {\n            buffer.Append('c');\n        }\n        number %= 100;\n        if
    (number >= 90) {\n            buffer.Append(\"xc\");\n            number -= 90;\n
    \       }\n        if (number >= 50) {\n            buffer.Append('l');\n            number
    -= 50;\n        }\n        if (number >= 40) {\n            buffer.Append(\"xl\");\n
    \           number -= 40;\n        }\n        for (int i = 0; i < number / 10;
    i++) {\n            buffer.Append('x');\n        }\n        number %= 10;\n        if
    (number >= 9) {\n            buffer.Append(\"ix\");\n            number -= 9;\n
    \       }\n        if (number >= 5) {\n            buffer.Append('v');\n            number
    -= 5;\n        }\n        if (number >= 4) {\n            buffer.Append(\"iv\");\n
    \           number -= 4;\n        }\n        for (int i = 0; i < number; i++)
    {\n            buffer.Append('i');\n        }\n        return buffer.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Let's start with a list of base symbols, in decreasing order.\n        var
    baseSymbols = new List<Tuple<int, string>>() {\n            new Tuple<int, string>(1000,
    \"m\"),\n            new Tuple<int, string>(500, \"d\"),\n            new Tuple<int,
    string>(100, \"c\"),\n            new Tuple<int, string>(50, \"l\"),\n            new
    Tuple<int, string>(10, \"x\"),\n            new Tuple<int, string>(5, \"v\"),\n
    \           new Tuple<int, string>(1, \"i\")\n        };\n        // Start with
    a blank string.\n        var result = \"\";\n        foreach (var baseSymbol in
    baseSymbols) {\n            // We know the integer is positive, so we can safely
    use floor division.\n            var letters = number / baseSymbol.Item1;\n            number
    %= baseSymbol.Item1;\n            // Add the appropriate number of base symbols.\n
    \           for (var i = 0; i < letters; i++) {\n                result += baseSymbol.Item2;\n
    \           }\n            // If number is 0 we're done, so return the result.\n
    \           if (number == 0) {\n                return result;\n            }\n
    \           // If number is less than the next base symbol, we need to add a minus
    symbol.\n            var nextBaseSymbol = baseSymbols[baseSymbols.IndexOf(baseSymbol)
    + 1];\n            if (number < nextBaseSymbol.Item1) {\n                var smallerBaseSymbol
    = baseSymbols[baseSymbols.IndexOf(baseSymbol) + 2];\n                result +=
    smallerBaseSymbol.Item2 + nextBaseSymbol.Item2;\n                number -= nextBaseSymbol.Item1
    - smallerBaseSymbol.Item1;\n            }\n        }\n        // We should never
    get here.\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f7f88173b114629a92726f2fb246eb5>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IntToMiniRoman
    (System.Int64 number) [0x00128] in <1f7f88173b114629a92726f2fb246eb5>:0 \n  at
    Problem.Main (System.String[] args) [0x00019] in <1f7f88173b114629a92726f2fb246eb5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IntToMiniRoman
    (System.Int64 number) [0x00128] in <1f7f88173b114629a92726f2fb246eb5>:0 \n  at
    Problem.Main (System.String[] args) [0x00019] in <1f7f88173b114629a92726f2fb246eb5>:0
    \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var map = new Dictionary<int, string>\n        {\n            { 1, \"i\"
    },\n            { 4, \"iv\" },\n            { 5, \"v\" },\n            { 9, \"ix\"
    },\n            { 10, \"x\" },\n            { 40, \"xl\" },\n            { 50,
    \"l\" },\n            { 90, \"xc\" },\n            { 100, \"c\" },\n            {
    400, \"cd\" },\n            { 500, \"d\" },\n            { 900, \"cm\" },\n            {
    1000, \"m\" }\n        };\n        var list = new List<string>();\n        while
    (number > 0) {\n            var n = map.Keys.Where(i => i <= number).OrderByDescending(i
    => i).First();\n            number -= n;\n            list.Add(map[n]);\n        }\n
    \       return string.Join(\"\", list);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var builder = new StringBuilder();\n        while (number >= 100) {\n
    \           builder.Append('c');\n            number -= 100;\n        }\n        if
    (number >= 90) {\n            builder.Append(\"xc\");\n            number -= 90;\n
    \       }\n        while (number >= 50) {\n            builder.Append('l');\n
    \           number -= 50;\n        }\n        if (number >= 40) {\n            builder.Append(\"xl\");\n
    \           number -= 40;\n        }\n        while (number >= 10) {\n            builder.Append('x');\n
    \           number -= 10;\n        }\n        if (number >= 9) {\n            builder.Append(\"ix\");\n
    \           number -= 9;\n        }\n        while (number >= 5) {\n            builder.Append('v');\n
    \           number -= 5;\n        }\n        if (number >= 4) {\n            builder.Append(\"iv\");\n
    \           number -= 4;\n        }\n        while (number >= 1) {\n            builder.Append('i');\n
    \           number -= 1;\n        }\n        return builder.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d15145690fc64c2f82b9eff7042e74a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d15145690fc64c2f82b9eff7042e74a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"number\");\n
    \       }\n        // Handle the simple case: 0 <= num <= 3.\n        if (number
    <= 3) {\n            return new string('i', (int)number);\n        }\n        var
    result = new StringBuilder();\n        var remainder = number;\n        var current
    = 1000;\n        // Loop through the Roman numerals 9 times.\n        for (var
    i = 0; i < 9; i++) {\n            var digit = remainder / current;\n            var
    absDigit = Math.Abs(digit);\n            remainder %= current;\n            //
    Process the digit.\n            if (absDigit == 4) {\n                result.Append(\"ivx\"[i]);\n
    \               result.Append(\"ivx\"[i + 1]);\n            } else if (absDigit
    == 9) {\n                result.Append(\"ivx\"[i]);\n                result.Append(\"ivx\"[i
    + 2]);\n            } else {\n                var isPositive = digit > 0;\n                var
    ten = \"ivx\"[i + (isPositive ? 0 : 1)];\n                result.Append(new string(ten,
    absDigit));\n            }\n            // Clamp current to a multiple of 10.\n
    \           current /= 10;\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa1pxcz6q.cs(45,47): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[] m = new string[]{\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n
    \       int[] n = new int[]{1000,900,500,400,100,90,50,40,10,9,5,4,1};\n        StringBuilder
    b = new StringBuilder();\n        for (int i = 0; i < n.Length; i++) {\n            while
    (number >= n[i]) {\n                b.Append(m[i]);\n                number -=
    n[i];\n            }\n        }\n        return b.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       long[] arabic = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1
    };\n        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\",
    \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        StringBuilder builder
    = new StringBuilder();\n        int i = 0;\n        while (number > 0 || arabic.Length
    == (i - 1)) {\n            while ((number - arabic[i]) >= 0) {\n                number
    -= arabic[i];\n                builder.Append(roman[i]);\n            }\n            i++;\n
    \       }\n        return builder.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"number\",
    \"must be between 1 and 1000\");\n        }\n        var sb = new StringBuilder();\n
    \       while (number >= 1000) {\n            sb.Append(\"m\");\n            number
    -= 1000;\n        }\n        if (number >= 900) {\n            sb.Append(\"cm\");\n
    \           number -= 900;\n        }\n        if (number >= 500) {\n            sb.Append(\"d\");\n
    \           number -= 500;\n        }\n        if (number >= 400) {\n            sb.Append(\"cd\");\n
    \           number -= 400;\n        }\n        while (number >= 100) {\n            sb.Append(\"c\");\n
    \           number -= 100;\n        }\n        if (number >= 90) {\n            sb.Append(\"xc\");\n
    \           number -= 90;\n        }\n        if (number >= 50) {\n            sb.Append(\"l\");\n
    \           number -= 50;\n        }\n        if (number >= 40) {\n            sb.Append(\"xl\");\n
    \           number -= 40;\n        }\n        while (number >= 10) {\n            sb.Append(\"x\");\n
    \           number -= 10;\n        }\n        if (number >= 9) {\n            sb.Append(\"ix\");\n
    \           number -= 9;\n        }\n        if (number >= 5) {\n            sb.Append(\"v\");\n
    \           number -= 5;\n        }\n        if (number >= 4) {\n            sb.Append(\"iv\");\n
    \           number -= 4;\n        }\n        while (number >= 1) {\n            sb.Append(\"i\");\n
    \           number -= 1;\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder result = new StringBuilder();\n        if (number >= 100)
    {\n            result.Append(String.Concat(Enumerable.Repeat(\"c\", (int)(number
    / 100))));\n            number %= 100;\n        }\n        if (number >= 90) {\n
    \           result.Append(\"xc\");\n            number -= 90;\n        }\n        if
    (number >= 50) {\n            result.Append(\"l\");\n            number -= 50;\n
    \       }\n        if (number >= 40) {\n            result.Append(\"xl\");\n            number
    -= 40;\n        }\n        if (number >= 10) {\n            result.Append(String.Concat(Enumerable.Repeat(\"x\",
    (int)(number / 10))));\n            number %= 10;\n        }\n        if (number
    >= 9) {\n            result.Append(\"ix\");\n            number -= 9;\n        }\n
    \       if (number >= 5) {\n            result.Append(\"v\");\n            number
    -= 5;\n        }\n        if (number >= 4) {\n            result.Append(\"iv\");\n
    \           number -= 4;\n        }\n        if (number >= 1) {\n            result.Append(String.Concat(Enumerable.Repeat(\"i\",
    (int)(number))));\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04febb9e0da049c29ba7906412b604b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04febb9e0da049c29ba7906412b604b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string roman = \"\";\n        while (number >= 1000) { roman += \"m\";
    number -= 1000; }\n        if (number >= 900) { roman += \"cm\"; number -= 900;
    }\n        while (number >= 500) { roman += \"d\"; number -= 500; }\n        if
    (number >= 400) { roman += \"cd\"; number -= 400; }\n        while (number >=
    100) { roman += \"c\"; number -= 100; }\n        if (number >= 90) { roman +=
    \"xc\"; number -= 90; }\n        while (number >= 50) { roman += \"l\"; number
    -= 50; }\n        if (number >= 40) { roman += \"xl\"; number -= 40; }\n        while
    (number >= 10) { roman += \"x\"; number -= 10; }\n        if (number >= 9) { roman
    += \"ix\"; number -= 9; }\n        while (number >= 5) { roman += \"v\"; number
    -= 5; }\n        if (number >= 4) { roman += \"iv\"; number -= 4; }\n        while
    (number >= 1) { roman += \"i\"; number -= 1; }\n        return roman;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var numeral = \"\";\n        while (number > 0) {\n            if (number
    >= 1000) {\n                numeral += \"m\";\n                number -= 1000;\n
    \           } else if (number >= 900) {\n                numeral += \"cm\";\n
    \               number -= 900;\n            } else if (number >= 500) {\n                numeral
    += \"d\";\n                number -= 500;\n            } else if (number >= 400)
    {\n                numeral += \"cd\";\n                number -= 400;\n            }
    else if (number >= 100) {\n                numeral += \"c\";\n                number
    -= 100;\n            } else if (number >= 90) {\n                numeral += \"xc\";\n
    \               number -= 90;\n            } else if (number >= 50) {\n                numeral
    += \"l\";\n                number -= 50;\n            } else if (number >= 40)
    {\n                numeral += \"xl\";\n                number -= 40;\n            }
    else if (number >= 10) {\n                numeral += \"x\";\n                number
    -= 10;\n            } else if (number >= 9) {\n                numeral += \"ix\";\n
    \               number -= 9;\n            } else if (number >= 5) {\n                numeral
    += \"v\";\n                number -= 5;\n            } else if (number >= 4) {\n
    \               numeral += \"iv\";\n                number -= 4;\n            }
    else if (number >= 1) {\n                numeral += \"i\";\n                number
    -= 1;\n            }\n        }\n        return numeral;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[] thousands = { \"\", \"m\", \"mm\", \"mmm\" };\n        string[]
    hundreds = { \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\",
    \"cm\" };\n        string[] tens = { \"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\",
    \"lx\", \"lxx\", \"lxxx\", \"xc\" };\n        string[] ones = { \"\", \"i\", \"ii\",
    \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        return thousands[number
    / 1000] + hundreds[(number % 1000) / 100] + tens[(number % 100) / 10] + ones[number
    % 10];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string result = \"\";\n        // Your code goes here\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afd4fba939ff4b7b924359dcdd062971>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afd4fba939ff4b7b924359dcdd062971>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // YOUR CODE HERE\n        var numbers = new Dictionary<int, string>()\n
    \       {\n            {1, \"i\"},\n            {5, \"v\"},\n            {10,
    \"x\"},\n            {50, \"l\"},\n            {100, \"c\"},\n            {500,
    \"d\"},\n            {1000, \"m\"}\n        };\n        var digits = number.ToString().Reverse().ToArray();\n
    \       var roman = \"\";\n        for (int i = 0; i < digits.Length; i++)\n        {\n
    \           if (int.Parse(digits[i].ToString()) < 4)\n            {\n                roman
    = string.Concat(roman, string.Concat(Enumerable.Repeat(numbers[(int)Math.Pow(10,
    i)], int.Parse(digits[i].ToString()))));\n            }\n            else if (int.Parse(digits[i].ToString())
    == 4)\n            {\n                roman = string.Concat(roman, numbers[(int)Math.Pow(10,
    i)] + numbers[(int)Math.Pow(10, i) * 5]);\n            }\n            else if
    (int.Parse(digits[i].ToString()) < 9)\n            {\n                roman =
    string.Concat(roman, numbers[(int)Math.Pow(10, i) * 5] + string.Concat(Enumerable.Repeat(numbers[(int)Math.Pow(10,
    i)], int.Parse(digits[i].ToString()) - 5)));\n            }\n            else
    if (int.Parse(digits[i].ToString()) == 9)\n            {\n                roman
    = string.Concat(roman, numbers[(int)Math.Pow(10, i)] + numbers[(int)Math.Pow(10,
    i + 1)]);\n            }\n        }\n        return roman;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a413ed18caf4b4188b1390309216779>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a413ed18caf4b4188b1390309216779>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return string.Empty;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1424d9692f794ec79b35b91e5cdc1ba4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1424d9692f794ec79b35b91e5cdc1ba4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var sb = new StringBuilder();\n        var mapper = new Dictionary<long,
    char>() {\n            {1L, 'i'},\n            {5L, 'v'},\n            {10L, 'x'},\n
    \           {50L, 'l'},\n            {100L, 'c'},\n            {500L, 'd'},\n
    \           {1000L, 'm'}\n        };\n        var i = 0;\n        while (number
    > 0) {\n            var factor = 1L;\n            for (var j = 0; j < i; j++)
    factor *= 10;\n            var digit = number / factor;\n            if (digit
    < 4) {\n                for (var j = 0; j < digit; j++) sb.Append(mapper[factor]);\n
    \           } else if (digit == 4) {\n                sb.Append(mapper[factor]);\n
    \               sb.Append(mapper[factor * 5]);\n            } else if (digit <
    9) {\n                sb.Append(mapper[factor * 5]);\n                for (var
    j = 0; j < digit - 5; j++) sb.Append(mapper[factor]);\n            } else {\n
    \               sb.Append(mapper[factor]);\n                sb.Append(mapper[factor
    * 10]);\n            }\n            number %= factor;\n            i++;\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf91386ab61f41739c299541dce472ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf91386ab61f41739c299541dce472ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000) {\n            return null;\n        }\n
    \       StringBuilder result = new StringBuilder();\n        while (number >=
    100) {\n            result.Append(\"c\");\n            number -= 100;\n        }\n
    \       if (number >= 90) {\n            result.Append(\"xc\");\n            number
    -= 90;\n        }\n        while (number >= 50) {\n            result.Append(\"l\");\n
    \           number -= 50;\n        }\n        if (number >= 40) {\n            result.Append(\"xl\");\n
    \           number -= 40;\n        }\n        while (number >= 10) {\n            result.Append(\"x\");\n
    \           number -= 10;\n        }\n        if (number >= 9) {\n            result.Append(\"ix\");\n
    \           number -= 9;\n        }\n        while (number >= 5) {\n            result.Append(\"v\");\n
    \           number -= 5;\n        }\n        if (number >= 4) {\n            result.Append(\"iv\");\n
    \           number -= 4;\n        }\n        while (number >= 1) {\n            result.Append(\"i\");\n
    \           number -= 1;\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6a8b455412a4595817bce4cf4390e93>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6a8b455412a4595817bce4cf4390e93>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Given a positive integer, obtain its roman numeral equivalent as a
    string,\n        // and return it in lowercase.\n        // Restrictions: 1 <=
    num <= 1000\n        // Examples:\n        // >>> IntToMiniRoman((19L))\n        //
    (\"xix\")\n        // >>> IntToMiniRoman((152L))\n        // (\"clii\")\n        //
    >>> IntToMiniRoman((426L))\n        // (\"cdxxvi\")\n        var digits = new
    string[] { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\",
    \"ix\" };\n        var tens = new string[] { \"\", \"x\", \"xx\", \"xxx\", \"xl\",
    \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\" };\n        var hundreds = new string[]
    { \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"
    };\n        var thousands = new string[] { \"\", \"m\", \"mm\", \"mmm\" };\n        var
    thousandsStr = thousands[(int)(number / 1000)];\n        var hundredsStr = hundreds[(int)((number
    % 1000) / 100)];\n        var tensStr = tens[(int)((number % 100) / 10)];\n        var
    digitsStr = digits[(int)(number % 10)];\n        return thousandsStr + hundredsStr
    + tensStr + digitsStr;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number > 1000) {\n            throw new ArgumentOutOfRangeException(\"number\");\n
    \       }\n        var sb = new StringBuilder();\n        var nums = number.ToString().ToCharArray();\n
    \       foreach (var ch in nums) {\n            switch (ch) {\n                case
    '1':\n                    sb.Append(\"i\");\n                    break;\n                case
    '2':\n                    sb.Append(\"ii\");\n                    break;\n                case
    '3':\n                    sb.Append(\"iii\");\n                    break;\n                case
    '4':\n                    sb.Append(\"iv\");\n                    break;\n                case
    '5':\n                    sb.Append(\"v\");\n                    break;\n                case
    '6':\n                    sb.Append(\"vi\");\n                    break;\n                case
    '7':\n                    sb.Append(\"vii\");\n                    break;\n                case
    '8':\n                    sb.Append(\"viii\");\n                    break;\n                case
    '9':\n                    sb.Append(\"ix\");\n                    break;\n                case
    '0':\n                    break;\n                default:\n                    throw
    new ArgumentOutOfRangeException(\"number\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26319f9c386e4e5ba0647cdbc3f9b7ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26319f9c386e4e5ba0647cdbc3f9b7ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"number\",
    number,\n                \"Argument number must be between 1 and 1000\");\n        }\n
    \       StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n
    \           if (number >= 1000) {\n                sb.Append(\"m\");\n                number
    -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"cm\");\n
    \               number -= 900;\n            } else if (number >= 500) {\n                sb.Append(\"d\");\n
    \               number -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"cd\");\n
    \               number -= 400;\n            } else if (number >= 100) {\n                sb.Append(\"c\");\n
    \               number -= 100;\n            } else if (number >= 90) {\n                sb.Append(\"xc\");\n
    \               number -= 90;\n            } else if (number >= 50) {\n                sb.Append(\"l\");\n
    \               number -= 50;\n            } else if (number >= 40) {\n                sb.Append(\"xl\");\n
    \               number -= 40;\n            } else if (number >= 10) {\n                sb.Append(\"x\");\n
    \               number -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"ix\");\n
    \               number -= 9;\n            } else if (number >= 5) {\n                sb.Append(\"v\");\n
    \               number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"iv\");\n
    \               number -= 4;\n            } else if (number >= 1) {\n                sb.Append(\"i\");\n
    \               number -= 1;\n            }\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder roman = new StringBuilder();\n        long remainder = number;\n
    \       while (remainder >= 1000) {\n            roman.Append(\"m\");\n            remainder
    -= 1000;\n        }\n        if (remainder >= 900) {\n            roman.Append(\"cm\");\n
    \           remainder -= 900;\n        }\n        if (remainder >= 500) {\n            roman.Append(\"d\");\n
    \           remainder -= 500;\n        }\n        if (remainder >= 400) {\n            roman.Append(\"cd\");\n
    \           remainder -= 400;\n        }\n        while (remainder >= 100) {\n
    \           roman.Append(\"c\");\n            remainder -= 100;\n        }\n        if
    (remainder >= 90) {\n            roman.Append(\"xc\");\n            remainder
    -= 90;\n        }\n        if (remainder >= 50) {\n            roman.Append(\"l\");\n
    \           remainder -= 50;\n        }\n        if (remainder >= 40) {\n            roman.Append(\"xl\");\n
    \           remainder -= 40;\n        }\n        while (remainder >= 10) {\n            roman.Append(\"x\");\n
    \           remainder -= 10;\n        }\n        if (remainder >= 9) {\n            roman.Append(\"ix\");\n
    \           remainder -= 9;\n        }\n        if (remainder >= 5) {\n            roman.Append(\"v\");\n
    \           remainder -= 5;\n        }\n        if (remainder >= 4) {\n            roman.Append(\"iv\");\n
    \           remainder -= 4;\n        }\n        while (remainder >= 1) {\n            roman.Append(\"i\");\n
    \           remainder -= 1;\n        }\n        return roman.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder result = new StringBuilder();\n        var letters = new
    List<Tuple<long, string>> {\n            new Tuple<long, string>(1000, \"m\"),\n
    \           new Tuple<long, string>(500, \"d\"),\n            new Tuple<long,
    string>(100, \"c\"),\n            new Tuple<long, string>(50, \"l\"),\n            new
    Tuple<long, string>(10, \"x\"),\n            new Tuple<long, string>(5, \"v\"),\n
    \           new Tuple<long, string>(1, \"i\")\n        };\n        letters.Reverse();\n
    \       foreach (var letter in letters) {\n            while (number >= letter.Item1)
    {\n                result.Append(letter.Item2);\n                number -= letter.Item1;\n
    \           }\n        }\n        return result.ToString().Replace(\"dcccc\",
    \"cm\").Replace(\"cccc\", \"cd\").Replace(\"lxxxx\", \"xc\").Replace(\"xxxx\",
    \"xl\").Replace(\"viiii\", \"ix\").Replace(\"iiii\", \"iv\");\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f6401e2f884404db56fe22df0972fc5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f6401e2f884404db56fe22df0972fc5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var minis = new Dictionary<long, string>() {\n            {1000, \"m\"},\n
    \           {900, \"cm\"},\n            {500, \"d\"},\n            {400, \"cd\"},\n
    \           {100, \"c\"},\n            {90, \"xc\"},\n            {50, \"l\"},\n
    \           {40, \"xl\"},\n            {10, \"x\"},\n            {9, \"ix\"},\n
    \           {5, \"v\"},\n            {4, \"iv\"},\n            {1, \"i\"},\n        };\n
    \       var parts = new List<string>();\n        var remain = number;\n        while
    (remain > 0) {\n            long key = minis.Keys.LastOrDefault(x => x <= remain);\n
    \           parts.Add(minis[key]);\n            remain -= key;\n        }\n        return
    string.Join(\"\", parts);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8c06dc7b60940b7b54c98a1f9ac23ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8c06dc7b60940b7b54c98a1f9ac23ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var result = \"\";\n        // return result;\n        while (number >
    0) {\n            if (number > 999) {\n                number -= 1000;\n                result
    += \"m\";\n            } else if (number > 899) {\n                number -= 900;\n
    \               result += \"cm\";\n            } else if (number > 499) {\n                number
    -= 500;\n                result += \"d\";\n            } else if (number > 399)
    {\n                number -= 400;\n                result += \"cd\";\n            }
    else if (number > 99) {\n                number -= 100;\n                result
    += \"c\";\n            } else if (number > 89) {\n                number -= 90;\n
    \               result += \"xc\";\n            } else if (number > 49) {\n                number
    -= 50;\n                result += \"l\";\n            } else if (number > 39)
    {\n                number -= 40;\n                result += \"xl\";\n            }
    else if (number > 9) {\n                number -= 10;\n                result
    += \"x\";\n            } else if (number > 8) {\n                number -= 9;\n
    \               result += \"ix\";\n            } else if (number > 4) {\n                number
    -= 5;\n                result += \"v\";\n            } else if (number > 3) {\n
    \               number -= 4;\n                result += \"iv\";\n            }
    else {\n                number -= 1;\n                result += \"i\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var sb = new StringBuilder();\n        var num2rom = new Dictionary<int,
    string> {\n            { 1, \"i\" },\n            { 5, \"v\" },\n            {
    10, \"x\" },\n            { 50, \"l\" },\n            { 100, \"c\" },\n            {
    500, \"d\" },\n            { 1000, \"m\" }\n        };\n        var digits = new
    List<int>();\n        while (number > 0) {\n            digits.Add((int)(number
    % 10));\n            number /= 10;\n        }\n        digits.Reverse();\n        int
    i = 0;\n        foreach (var digit in digits) {\n            int factor = (int)Math.Pow(10,
    i);\n            if (digit == 9) {\n                sb.Append(num2rom[factor]
    + num2rom[factor * 10]);\n            } else if (digit >= 5) {\n                sb.Append(num2rom[5
    * factor]);\n                for (int j = 0; j < digit - 5; j++) {\n                    sb.Append(num2rom[factor]);\n
    \               }\n            } else if (digit == 4) {\n                sb.Append(num2rom[factor]
    + num2rom[5 * factor]);\n            } else {\n                for (int j = 0;
    j < digit; j++) {\n                    sb.Append(num2rom[factor]);\n                }\n
    \           }\n            i++;\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d59a4de2a37a4ba08997797817bb3359>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d59a4de2a37a4ba08997797817bb3359>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Insert code here\n        //basic string conversion function, to convert
    numbers to roman numerals\n        string num = \"\";\n        string[] basic
    = new string[] {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\",
    \"IX\", \"V\", \"IV\", \"I\"};\n        int[] basicValues = new int[] {1000, 900,
    500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < basic.Length;
    i++) {\n            if (number >= basicValues[i]) {\n                num += basic[i];\n
    \               number -= basicValues[i];\n            }\n        }\n        return
    num;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d0c7f303f049c7be8ef293a9a05aed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d0c7f303f049c7be8ef293a9a05aed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string ret = \"\";\n        for (long i = number; i > 0; i -= 1000) {\n
    \           ret += \"m\";\n        }\n        number %= 1000;\n        while (number
    > 0) {\n            if (number >= 900) {\n                ret += \"cm\";\n                number
    -= 900;\n            } else if (number >= 500) {\n                ret += \"d\";\n
    \               number -= 500;\n            } else if (number >= 400) {\n                ret
    += \"cd\";\n                number -= 400;\n            } else if (number >= 100)
    {\n                ret += \"c\";\n                number -= 100;\n            }
    else if (number >= 90) {\n                ret += \"xc\";\n                number
    -= 90;\n            } else if (number >= 50) {\n                ret += \"l\";\n
    \               number -= 50;\n            } else if (number >= 40) {\n                ret
    += \"xl\";\n                number -= 40;\n            } else if (number >= 10)
    {\n                ret += \"x\";\n                number -= 10;\n            }
    else if (number >= 9) {\n                ret += \"ix\";\n                number
    -= 9;\n            } else if (number >= 5) {\n                ret += \"v\";\n
    \               number -= 5;\n            } else if (number >= 4) {\n                ret
    += \"iv\";\n                number -= 4;\n            } else if (number >= 1)
    {\n                ret += \"i\";\n                number -= 1;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9afc39fc62b4c769a9c0ce7582366a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9afc39fc62b4c769a9c0ce7582366a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException();\n
    \       }\n        string[] roms = new string[] { \"m\", \"cm\", \"d\", \"cd\",
    \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]
    ints = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string
    retval = \"\";\n        for (int i = 0; i < ints.Length; i++) {\n            while
    (number >= ints[i]) {\n                number -= ints[i];\n                retval
    += roms[i];\n            }\n        }\n        return retval;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n
    \           if (number >= 1000) {\n                sb.Append(\"m\");\n                number
    -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"cm\");\n
    \               number -= 900;\n            } else if (number >= 500) {\n                sb.Append(\"d\");\n
    \               number -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"cd\");\n
    \               number -= 400;\n            } else if (number >= 100) {\n                sb.Append(\"c\");\n
    \               number -= 100;\n            } else if (number >= 90) {\n                sb.Append(\"xc\");\n
    \               number -= 90;\n            } else if (number >= 50) {\n                sb.Append(\"l\");\n
    \               number -= 50;\n            } else if (number >= 40) {\n                sb.Append(\"xl\");\n
    \               number -= 40;\n            } else if (number >= 10) {\n                sb.Append(\"x\");\n
    \               number -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"ix\");\n
    \               number -= 9;\n            } else if (number >= 5) {\n                sb.Append(\"v\");\n
    \               number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"iv\");\n
    \               number -= 4;\n            } else if (number >= 1) {\n                sb.Append(\"i\");\n
    \               number -= 1;\n            }\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var digits = new[] { 'i', 'v', 'x', 'l', 'c', 'd', 'm' };\n        var
    quotient = number;\n        var digitIndex = 0;\n        var result = new StringBuilder();\n
    \       while (quotient > 0) {\n            var digit = quotient % 10;\n            switch
    (digit) {\n                case 1:\n                case 2:\n                case
    3:\n                    result.Insert(0, new string(digits[digitIndex], (int)digit));\n
    \                   break;\n                case 4:\n                    result.Insert(0,
    digits[digitIndex] + \"\" + digits[digitIndex + 1]);\n                    break;\n
    \               case 5:\n                    result.Insert(0, digits[digitIndex
    + 1]);\n                    break;\n                case 6:\n                case
    7:\n                case 8:\n                    result.Insert(0, digits[digitIndex
    + 1] + new string(digits[digitIndex], (int)digit - 5));\n                    break;\n
    \               case 9:\n                    result.Insert(0, digits[digitIndex]
    + \"\" + digits[digitIndex + 2]);\n                    break;\n            }\n
    \           quotient /= 10;\n            digitIndex += 2;\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Fill this in.\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d8a3a391275485aa62479f9325dbbce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d8a3a391275485aa62479f9325dbbce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder ret = new StringBuilder();\n        while (number >= 1000)
    {\n            ret.Append(\"m\");\n            number -= 1000;\n        }\n        if
    (number >= 900) {\n            ret.Append(\"cm\");\n            number -= 900;\n
    \       }\n        if (number >= 500) {\n            ret.Append(\"d\");\n            number
    -= 500;\n        }\n        if (number >= 400) {\n            ret.Append(\"cd\");\n
    \           number -= 400;\n        }\n        while (number >= 100) {\n            ret.Append(\"c\");\n
    \           number -= 100;\n        }\n        if (number >= 90) {\n            ret.Append(\"xc\");\n
    \           number -= 90;\n        }\n        if (number >= 50) {\n            ret.Append(\"l\");\n
    \           number -= 50;\n        }\n        if (number >= 40) {\n            ret.Append(\"xl\");\n
    \           number -= 40;\n        }\n        while (number >= 10) {\n            ret.Append(\"x\");\n
    \           number -= 10;\n        }\n        if (number >= 9) {\n            ret.Append(\"ix\");\n
    \           number -= 9;\n        }\n        if (number >= 5) {\n            ret.Append(\"v\");\n
    \           number -= 5;\n        }\n        if (number >= 4) {\n            ret.Append(\"iv\");\n
    \           number -= 4;\n        }\n        while (number >= 1) {\n            ret.Append(\"i\");\n
    \           number -= 1;\n        }\n        return ret.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string result = \"\";\n        while (number > 0) {\n            if (number
    >= 500) {\n                result += \"d\";\n                number -= 500;\n
    \           } else if (number >= 100) {\n                result += \"c\";\n                number
    -= 100;\n            } else if (number >= 50) {\n                result += \"l\";\n
    \               number -= 50;\n            } else if (number >= 10) {\n                result
    += \"x\";\n                number -= 10;\n            } else if (number >= 5)
    {\n                result += \"v\";\n                number -= 5;\n            }
    else {\n                result += \"i\";\n                number -= 1;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <708eb5e6a07e4f71a751edd1dd6e417e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <708eb5e6a07e4f71a751edd1dd6e417e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var result = new StringBuilder();\n        var symbols = new[] {'i', 'v',
    'x', 'l', 'c', 'd', 'm'};\n        var digits = String.Join(\"\", number.ToString().Reverse());\n
    \       var digit = 0;\n        foreach (var placeValue in digits) {\n            var
    val = int.Parse(placeValue.ToString());\n            var symbolIndex = digit *
    2;\n            if (val == 9) {\n                result.Append(symbols[symbolIndex]);\n
    \               result.Append(symbols[symbolIndex + 2]);\n            } else if
    (val == 4) {\n                result.Append(symbols[symbolIndex]);\n                result.Append(symbols[symbolIndex
    + 1]);\n            } else {\n                if (val >= 5) {\n                    result.Append(symbols[symbolIndex
    + 1]);\n                    val -= 5;\n                }\n                result.Append(symbols[symbolIndex],
    val);\n            }\n            digit++;\n        }\n        return result.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf0dcce728eb4c99a03f4820db9a660b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf0dcce728eb4c99a03f4820db9a660b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var romanNumeral = new StringBuilder();\n        var romanDigits = new
    string[] { \"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\" };\n        for (int
    i = 0; i < 4; i++) {\n            if (number == 0) break;\n            var digit
    = (int)(number % 10);\n            if (digit < 4) {\n                romanNumeral.Insert(0,
    new string(romanDigits[2 * i][0], digit));\n            } else if (digit == 4)
    {\n                romanNumeral.Insert(0, romanDigits[2 * i] + romanDigits[2 *
    i + 1]);\n            } else if (digit < 9) {\n                romanNumeral.Insert(0,
    romanDigits[2 * i + 1] + new string(romanDigits[2 * i][0], digit - 5));\n            }
    else {\n                romanNumeral.Insert(0, romanDigits[2 * i] + romanDigits[2
    * i + 2]);\n            }\n            number /= 10;\n        }\n        return
    romanNumeral.ToString();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string result = \"\";\n        while (number >= 1000) {\n            result
    += \"m\";\n            number -= 1000;\n        }\n        if (number >= 900)
    {\n            result += \"cm\";\n            number -= 900;\n        }\n        if
    (number >= 500) {\n            result += \"d\";\n            number -= 500;\n
    \       }\n        if (number >= 400) {\n            result += \"cd\";\n            number
    -= 400;\n        }\n        while (number >= 100) {\n            result += \"c\";\n
    \           number -= 100;\n        }\n        if (number >= 90) {\n            result
    += \"xc\";\n            number -= 90;\n        }\n        if (number >= 50) {\n
    \           result += \"l\";\n            number -= 50;\n        }\n        if
    (number >= 40) {\n            result += \"xl\";\n            number -= 40;\n        }\n
    \       while (number >= 10) {\n            result += \"x\";\n            number
    -= 10;\n        }\n        if (number >= 9) {\n            result += \"ix\";\n
    \           number -= 9;\n        }\n        if (number >= 5) {\n            result
    += \"v\";\n            number -= 5;\n        }\n        if (number >= 4) {\n            result
    += \"iv\";\n            number -= 4;\n        }\n        while (number >= 1) {\n
    \           result += \"i\";\n            number -= 1;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       int[] numerals = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10,
    9, 5, 4, 1 };\n        string[] letters = new string[] { \"m\", \"cm\", \"d\",
    \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n
    \       string roman = \"\";\n        for (int i = 0; i < numerals.Length; i++)
    {\n            while (number >= numerals[i]) {\n                number -= numerals[i];\n
    \               roman += letters[i];\n            }\n        }\n        return
    roman;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // For reference, see https://en.wikipedia.org/wiki/Roman_numerals\n        string[]
    words = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\",
    \"v\", \"iv\", \"i\" };\n        long[] values = { 1000, 900, 500, 400, 100, 90,
    50, 40, 10, 9, 5, 4, 1 };\n        string result = \"\";\n        while (number
    > 0) {\n            for (int i = 0; i < words.Length; i++) {\n                if
    (number >= values[i]) {\n                    number -= values[i];\n                    result
    += words[i];\n                    break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string result = \"\";\n        while (number >= 10) {\n            if
    (number >= 100) {\n                result += \"c\";\n                number -=
    100;\n            } else if (number >= 90) {\n                result += \"xc\";\n
    \               number -= 90;\n            } else if (number >= 50) {\n                result
    += \"l\";\n                number -= 50;\n            } else if (number >= 40)
    {\n                result += \"xl\";\n                number -= 40;\n            }
    else if (number >= 10) {\n                result += \"x\";\n                number
    -= 10;\n            }\n        }\n        while (number > 0) {\n            if
    (number >= 9) {\n                result += \"ix\";\n                number -=
    9;\n            } else if (number >= 5) {\n                result += \"v\";\n
    \               number -= 5;\n            } else if (number >= 4) {\n                result
    += \"iv\";\n                number -= 4;\n            } else if (number >= 1)
    {\n                result += \"i\";\n                number -= 1;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <825c7beece3441e08cec81a2439cd11c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <825c7beece3441e08cec81a2439cd11c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var hun = new Dictionary<long, char>() {\n            {100L, 'c'},\n            {200L,
    'd'},\n            {300L, 'm'}\n        };\n        var ten = new Dictionary<long,
    char>() {\n            {10L, 'x'},\n            {20L, 'l'},\n            {30L,
    'c'}\n        };\n        var one = new Dictionary<long, char>() {\n            {1L,
    'i'},\n            {2L, 'v'},\n            {3L, 'x'}\n        };\n        var
    roman = new StringBuilder();\n        foreach (var (k, v) in hun) {\n            if
    (number >= k) {\n                var count = number / k;\n                for
    (var i = 0; i < count; i++) {\n                    roman.Append(v);\n                }\n
    \               number %= k;\n            }\n        }\n        foreach (var (k,
    v) in ten) {\n            if (number >= k) {\n                var count = number
    / k;\n                for (var i = 0; i < count; i++) {\n                    roman.Append(v);\n
    \               }\n                number %= k;\n            }\n        }\n        foreach
    (var (k, v) in one) {\n            if (number >= k) {\n                var count
    = number / k;\n                for (var i = 0; i < count; i++) {\n                    roman.Append(v);\n
    \               }\n                number %= k;\n            }\n        }\n        return
    roman.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0168505af1f430e9fc7d0f58fbab3bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0168505af1f430e9fc7d0f58fbab3bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string numeral = \"\";\n        // For a complete description, see https://en.wikipedia.org/wiki/Roman_numerals\n
    \       // 1,000 is \"m\"\n        while (number >= 1000) {\n            numeral
    += \"m\";\n            number -= 1000;\n        }\n        // 900 is \"cm\"\n
    \       if (number >= 900) {\n            numeral += \"cm\";\n            number
    -= 900;\n        }\n        // 500 is \"d\"\n        if (number >= 500) {\n            numeral
    += \"d\";\n            number -= 500;\n        }\n        // 400 is \"cd\"\n        if
    (number >= 400) {\n            numeral += \"cd\";\n            number -= 400;\n
    \       }\n        // 100 is \"c\"\n        while (number >= 100) {\n            numeral
    += \"c\";\n            number -= 100;\n        }\n        // 90 is \"xc\"\n        if
    (number >= 90) {\n            numeral += \"xc\";\n            number -= 90;\n
    \       }\n        // 50 is \"l\"\n        if (number >= 50) {\n            numeral
    += \"l\";\n            number -= 50;\n        }\n        // 40 is \"xl\"\n        if
    (number >= 40) {\n            numeral += \"xl\";\n            number -= 40;\n
    \       }\n        // 10 is \"x\"\n        while (number >= 10) {\n            numeral
    += \"x\";\n            number -= 10;\n        }\n        // 9 is \"ix\"\n        if
    (number >= 9) {\n            numeral += \"ix\";\n            number -= 9;\n        }\n
    \       // 5 is \"v\"\n        if (number >= 5) {\n            numeral += \"v\";\n
    \           number -= 5;\n        }\n        // 4 is \"iv\"\n        if (number
    >= 4) {\n            numeral += \"iv\";\n            number -= 4;\n        }\n
    \       // 1 is \"i\"\n        while (number >= 1) {\n            numeral += \"i\";\n
    \           number -= 1;\n        }\n        return numeral;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number == 0) return \"\";\n        else if (number >= 1000) return
    \"m\" + IntToMiniRoman(number - 1000);\n        else if (number >= 900) return
    \"cm\" + IntToMiniRoman(number - 900);\n        else if (number >= 500) return
    \"d\" + IntToMiniRoman(number - 500);\n        else if (number >= 400) return
    \"cd\" + IntToMiniRoman(number - 400);\n        else if (number >= 100) return
    \"c\" + IntToMiniRoman(number - 100);\n        else if (number >= 90) return \"xc\"
    + IntToMiniRoman(number - 90);\n        else if (number >= 50) return \"l\" +
    IntToMiniRoman(number - 50);\n        else if (number >= 40) return \"xl\" + IntToMiniRoman(number
    - 40);\n        else if (number >= 10) return \"x\" + IntToMiniRoman(number -
    10);\n        else if (number >= 9) return \"ix\" + IntToMiniRoman(number - 9);\n
    \       else if (number >= 5) return \"v\" + IntToMiniRoman(number - 5);\n        else
    if (number >= 4) return \"iv\" + IntToMiniRoman(number - 4);\n        else if
    (number >= 1) return \"i\" + IntToMiniRoman(number - 1);\n        else return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Put your implementation here!\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <34ed6625c9b34977bc42aff35aad84f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <34ed6625c9b34977bc42aff35aad84f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       int thousands = (int)(number / 1000);\n        int hundreds = (int)((number
    % 1000) / 100);\n        int tens = (int)((number % 100) / 10);\n        int ones
    = (int)(number % 10);\n        string res = \"\";\n        if (thousands != 0)
    {\n            res += string.Concat(Enumerable.Repeat(\"m\", thousands));\n        }\n
    \       if (hundreds != 0) {\n            if (hundreds == 9) {\n                res
    += \"cm\";\n            } else if (hundreds >= 5) {\n                res += \"d\"
    + string.Concat(Enumerable.Repeat(\"c\", hundreds - 5));\n            } else if
    (hundreds == 4) {\n                res += \"cd\";\n            } else {\n                res
    += string.Concat(Enumerable.Repeat(\"c\", hundreds));\n            }\n        }\n
    \       if (tens != 0) {\n            if (tens == 9) {\n                res +=
    \"xc\";\n            } else if (tens >= 5) {\n                res += \"l\" + string.Concat(Enumerable.Repeat(\"x\",
    tens - 5));\n            } else if (tens == 4) {\n                res += \"xl\";\n
    \           } else {\n                res += string.Concat(Enumerable.Repeat(\"x\",
    tens));\n            }\n        }\n        if (ones != 0) {\n            if (ones
    == 9) {\n                res += \"ix\";\n            } else if (ones >= 5) {\n
    \               res += \"v\" + string.Concat(Enumerable.Repeat(\"i\", ones - 5));\n
    \           } else if (ones == 4) {\n                res += \"iv\";\n            }
    else {\n                res += string.Concat(Enumerable.Repeat(\"i\", ones));\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder result = new StringBuilder();\n        var roman = new List<Tuple<long,
    string>> {\n            new Tuple<long, string>(1000, \"m\"),\n            new
    Tuple<long, string>(900, \"cm\"),\n            new Tuple<long, string>(500, \"d\"),\n
    \           new Tuple<long, string>(400, \"cd\"),\n            new Tuple<long,
    string>(100, \"c\"),\n            new Tuple<long, string>(90, \"xc\"),\n            new
    Tuple<long, string>(50, \"l\"),\n            new Tuple<long, string>(40, \"xl\"),\n
    \           new Tuple<long, string>(10, \"x\"),\n            new Tuple<long, string>(9,
    \"ix\"),\n            new Tuple<long, string>(5, \"v\"),\n            new Tuple<long,
    string>(4, \"iv\"),\n            new Tuple<long, string>(1, \"i\")\n        };\n
    \       foreach (var item in roman) {\n            while (number >= item.Item1)
    {\n                result.Append(item.Item2);\n                number -= item.Item1;\n
    \           }\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var n = number;\n        var sb = new StringBuilder();\n        while
    (n >= 1000) {\n            sb.Append('m');\n            n -= 1000;\n        }\n
    \       if (n >= 900) {\n            sb.Append(\"cm\");\n            n -= 900;\n
    \       }\n        if (n >= 500) {\n            sb.Append('d');\n            n
    -= 500;\n        }\n        if (n >= 400) {\n            sb.Append(\"cd\");\n
    \           n -= 400;\n        }\n        while (n >= 100) {\n            sb.Append('c');\n
    \           n -= 100;\n        }\n        if (n >= 90) {\n            sb.Append(\"xc\");\n
    \           n -= 90;\n        }\n        if (n >= 50) {\n            sb.Append('l');\n
    \           n -= 50;\n        }\n        if (n >= 40) {\n            sb.Append(\"xl\");\n
    \           n -= 40;\n        }\n        while (n >= 10) {\n            sb.Append('x');\n
    \           n -= 10;\n        }\n        if (n >= 9) {\n            sb.Append(\"ix\");\n
    \           n -= 9;\n        }\n        if (n >= 5) {\n            sb.Append('v');\n
    \           n -= 5;\n        }\n        if (n >= 4) {\n            sb.Append(\"iv\");\n
    \           n -= 4;\n        }\n        while (n >= 1) {\n            sb.Append('i');\n
    \           n -= 1;\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var numRoman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\",
    \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        var numDigit =
    new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        var
    result = new StringBuilder();\n        int i = 0;\n        while (number > 0)
    {\n            int k = (int)(number / numDigit[i]);\n            for (int j =
    0; j < k; j++) {\n                result.Append(numRoman[i]);\n                number
    -= numDigit[i];\n            }\n            i++;\n        }\n        return result.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[] roman = new string[] { \"i\", \"v\", \"x\", \"l\", \"c\", \"d\",
    \"m\" };\n        int i = 0;\n        int n = (int)number;\n        string result
    = \"\";\n        while (n > 0) {\n            int digit = n % 10;\n            if
    (digit == 4) {\n                result = roman[i] + roman[i + 1] + result;\n            }
    else if (digit == 9) {\n                result = roman[i] + roman[i + 2] + result;\n
    \           } else {\n                string fives = \"\";\n                if
    (digit >= 5) {\n                    fives = roman[i + 1];\n                    digit
    -= 5;\n                }\n                result = string.Concat(Enumerable.Repeat(roman[i],
    digit)) + fives + result;\n            }\n            n /= 10;\n            i
    += 2;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37c27d2eaae348a08c60eafaebf6a155>:0
    \n"
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var romanToInt = new Dictionary<char, int> {\n            {'i', 1},\n
    \           {'v', 5},\n            {'x', 10},\n            {'l', 50},\n            {'c',
    100},\n            {'d', 500},\n            {'m', 1000}\n        };\n        var
    intToRoman = romanToInt.ToDictionary(kv => kv.Value, kv => kv.Key);\n        var
    sb = new StringBuilder();\n        while (number > 0) {\n            foreach (var
    kv in intToRoman.Reverse()) {\n                if (number >= kv.Key) {\n                    sb.Append(kv.Value);\n
    \                   number -= kv.Key;\n                    break;\n                }\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a82d274102404b6aaa7588c9db33192a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a82d274102404b6aaa7588c9db33192a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var sb = new StringBuilder();\n        while (number > 0) {\n            if
    (number >= 1000) {\n                sb.Append('m');\n                number -=
    1000;\n            } else if (number >= 900) {\n                sb.Append(\"cm\");\n
    \               number -= 900;\n            } else if (number >= 500) {\n                sb.Append('d');\n
    \               number -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"cd\");\n
    \               number -= 400;\n            } else if (number >= 100) {\n                sb.Append('c');\n
    \               number -= 100;\n            } else if (number >= 90) {\n                sb.Append(\"xc\");\n
    \               number -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n
    \               number -= 50;\n            } else if (number >= 40) {\n                sb.Append(\"xl\");\n
    \               number -= 40;\n            } else if (number >= 10) {\n                sb.Append('x');\n
    \               number -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"ix\");\n
    \               number -= 9;\n            } else if (number >= 5) {\n                sb.Append('v');\n
    \               number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"iv\");\n
    \               number -= 4;\n            } else if (number >= 1) {\n                sb.Append('i');\n
    \               number -= 1;\n            }\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number <= 0 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"number\",
    number, \"Value must be between 1 and 1000.\");\n        }\n        var builder
    = new StringBuilder();\n        while (number > 0) {\n            if (number >=
    1000) {\n                builder.Append(\"m\");\n                number -= 1000;\n
    \           } else if (number >= 900) {\n                builder.Append(\"cm\");\n
    \               number -= 900;\n            } else if (number >= 500) {\n                builder.Append(\"d\");\n
    \               number -= 500;\n            } else if (number >= 400) {\n                builder.Append(\"cd\");\n
    \               number -= 400;\n            } else if (number >= 100) {\n                builder.Append(\"c\");\n
    \               number -= 100;\n            } else if (number >= 90) {\n                builder.Append(\"xc\");\n
    \               number -= 90;\n            } else if (number >= 50) {\n                builder.Append(\"l\");\n
    \               number -= 50;\n            } else if (number >= 40) {\n                builder.Append(\"xl\");\n
    \               number -= 40;\n            } else if (number >= 10) {\n                builder.Append(\"x\");\n
    \               number -= 10;\n            } else if (number >= 9) {\n                builder.Append(\"ix\");\n
    \               number -= 9;\n            } else if (number >= 5) {\n                builder.Append(\"v\");\n
    \               number -= 5;\n            } else if (number >= 4) {\n                builder.Append(\"iv\");\n
    \               number -= 4;\n            } else if (number >= 1) {\n                builder.Append(\"i\");\n
    \               number -= 1;\n            }\n        }\n        return builder.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string roman = \"\";\n        if (number > 1000) return \"number out of
    range\";\n        if (number == 1000) return \"m\";\n        if (number >= 900)
    {\n            roman += \"cm\";\n            number -= 900;\n        }\n        if
    (number >= 500) {\n            roman += \"d\";\n            number -= 500;\n        }\n
    \       if (number >= 400) {\n            roman += \"cd\";\n            number
    -= 400;\n        }\n        while (number >= 100) {\n            roman += \"c\";\n
    \           number -= 100;\n        }\n        if (number >= 90) {\n            roman
    += \"xc\";\n            number -= 90;\n        }\n        if (number >= 50) {\n
    \           roman += \"l\";\n            number -= 50;\n        }\n        if
    (number >= 40) {\n            roman += \"xl\";\n            number -= 40;\n        }\n
    \       while (number >= 10) {\n            roman += \"x\";\n            number
    -= 10;\n        }\n        if (number >= 9) {\n            roman += \"ix\";\n
    \           number -= 9;\n        }\n        if (number >= 5) {\n            roman
    += \"v\";\n            number -= 5;\n        }\n        if (number >= 4) {\n            roman
    += \"iv\";\n            number -= 4;\n        }\n        while (number >= 1) {\n
    \           roman += \"i\";\n            number -= 1;\n        }\n        return
    roman;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var vals = new[] { 1, 5, 10, 50, 100, 500, 1000 };\n        var chrs =
    new[] { 'i', 'v', 'x', 'l', 'c', 'd', 'm' };\n        if (number > 1000 || number
    < 1) throw new ArgumentOutOfRangeException();\n        var sb = new StringBuilder();\n
    \       var i = 6;\n        var temp = number;\n        while (temp > 0) {\n            if
    (temp >= vals[i]) {\n                temp -= vals[i];\n                sb.Append(chrs[i]);\n
    \           } else if (i > 0 && temp >= vals[i] - vals[i - 2]) {\n                temp
    -= vals[i] - vals[i - 2];\n                sb.Append(chrs[i - 2]);\n                sb.Append(chrs[i]);\n
    \           } else if (i > 1 && temp >= vals[i] - vals[i - 1]) {\n                temp
    -= vals[i] - vals[i - 1];\n                sb.Append(chrs[i - 1]);\n                sb.Append(chrs[i]);\n
    \           } else {\n                i -= 2;\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35f5f9127d3e473caa677568c936fec2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35f5f9127d3e473caa677568c936fec2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException(\"number\",
    \"number is out of range\");\n        if (number == 0)\n            return \"\";\n
    \       // First, obtain a representation of number in terms of powers of 10.\n
    \       // For example, the number of 455 is 4 * 100 + 5 * 10 + 5 * 1.\n        //
    We will treat 4, 5, and 5 as digits, even though they aren't in base 10.\n        var
    ndigits = 0;\n        var digits = new int[4];\n        for (var p = 0; number
    > 0; number /= 10, p++) {\n            var digit = (int)(number % 10);\n            digits[p]
    = digit;\n            ndigits++;\n        }\n        // Then, convert each digit
    to a mini-roman representation.\n        var sb = new StringBuilder();\n        for
    (var i = ndigits - 1; i >= 0; i--) {\n            var digit = digits[i];\n            if
    (digit == 9) {\n                sb.Append('x');\n                sb.Append('c');\n
    \           } else if (digit == 4) {\n                sb.Append('x');\n                sb.Append('l');\n
    \           } else if (digit >= 5) {\n                sb.Append('l');\n                sb.Append('x',
    digit - 5);\n            } else {\n                sb.Append('x', digit);\n            }\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64a7d64999474a8580f55fb7920ef683>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64a7d64999474a8580f55fb7920ef683>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder sb = new StringBuilder();\n        long num = number;\n
    \       if (num >= 100) {\n            long n = num / 100;\n            for (int
    i = 0; i < n; i++) {\n                sb.Append(\"c\");\n            }\n            num
    = num % 100;\n        }\n        if (num >= 90) {\n            sb.Append(\"xc\");\n
    \           num = num % 90;\n        }\n        if (num >= 50) {\n            sb.Append(\"l\");\n
    \           num = num % 50;\n        }\n        if (num >= 40) {\n            sb.Append(\"xl\");\n
    \           num = num % 40;\n        }\n        if (num >= 10) {\n            long
    n = num / 10;\n            for (int i = 0; i < n; i++) {\n                sb.Append(\"x\");\n
    \           }\n            num = num % 10;\n        }\n        if (num >= 9) {\n
    \           sb.Append(\"ix\");\n            num = num % 9;\n        }\n        if
    (num >= 5) {\n            sb.Append(\"v\");\n            num = num % 5;\n        }\n
    \       if (num >= 4) {\n            sb.Append(\"iv\");\n            num = num
    % 4;\n        }\n        if (num >= 1) {\n            long n = num / 1;\n            for
    (int i = 0; i < n; i++) {\n                sb.Append(\"i\");\n            }\n
    \           num = num % 1;\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aad7fe0efb8424eb585421657e9b535>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aad7fe0efb8424eb585421657e9b535>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder result = new StringBuilder();\n        for (int i = 0; i
    < number / 100; i++) {\n            result.Append(\"c\");\n        }\n        number
    %= 100;\n        if (number >= 90) {\n            result.Append(\"xc\");\n            number
    -= 90;\n        }\n        if (number >= 50) {\n            result.Append(\"l\");\n
    \           number -= 50;\n        }\n        if (number >= 40) {\n            result.Append(\"xl\");\n
    \           number -= 40;\n        }\n        for (int i = 0; i < number / 10;
    i++) {\n            result.Append(\"x\");\n        }\n        number %= 10;\n
    \       if (number == 9) {\n            result.Append(\"ix\");\n            number
    -= 9;\n        }\n        if (number >= 5) {\n            result.Append(\"v\");\n
    \           number -= 5;\n        }\n        if (number == 4) {\n            result.Append(\"iv\");\n
    \           number -= 4;\n        }\n        for (int i = 0; i < number; i++)
    {\n            result.Append(\"i\");\n        }\n        return result.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff65b9a4cd77467fad2d201226928c2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff65b9a4cd77467fad2d201226928c2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number > 1000 || number < 1) throw new ArgumentOutOfRangeException();\n
    \       StringBuilder sb = new StringBuilder();\n        long temp = number;\n
    \       int divisor = 1;\n        while (temp > 0) {\n            int digit =
    (int)(temp % 10);\n            temp /= 10;\n            string romanDigit = \"\";\n
    \           switch (digit) {\n                case 1:\n                    romanDigit
    = \"i\";\n                    break;\n                case 2:\n                    romanDigit
    = \"ii\";\n                    break;\n                case 3:\n                    romanDigit
    = \"iii\";\n                    break;\n                case 4:\n                    romanDigit
    = \"iv\";\n                    break;\n                case 5:\n                    romanDigit
    = \"v\";\n                    break;\n                case 6:\n                    romanDigit
    = \"vi\";\n                    break;\n                case 7:\n                    romanDigit
    = \"vii\";\n                    break;\n                case 8:\n                    romanDigit
    = \"viii\";\n                    break;\n                case 9:\n                    romanDigit
    = \"ix\";\n                    break;\n            }\n            switch (divisor)
    {\n                case 10:\n                    romanDigit = romanDigit.Replace(\"i\",
    \"x\");\n                    romanDigit = romanDigit.Replace(\"v\", \"l\");\n
    \                   romanDigit = romanDigit.Replace(\"x\", \"c\");\n                    break;\n
    \               case 100:\n                    romanDigit = romanDigit.Replace(\"i\",
    \"c\");\n                    romanDigit = romanDigit.Replace(\"v\", \"d\");\n
    \                   romanDigit = romanDigit.Replace(\"x\", \"m\");\n                    break;\n
    \               case 1000:\n                    romanDigit = romanDigit.Replace(\"i\",
    \"m\");\n                    break;\n            }\n            sb.Insert(0, romanDigit);\n
    \           divisor *= 10;\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9df167cbdf32469f85e6792f5d57691b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9df167cbdf32469f85e6792f5d57691b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return string.Join(\"\", Enumerable.Range(0, (int)Math.Floor(Math.Log10(number)))\n
    \           .Reverse()\n            .Select(i => GetRomanDigit((int)(number /
    Math.Pow(10, i)) % 10, i)));\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplbe42xfx.cs(22,26): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    '
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder result = new StringBuilder();\n        List<Tuple<long,
    string>> map = new List<Tuple<long, string>>() {\n            new Tuple<long,
    string>(1000, \"m\"),\n            new Tuple<long, string>(900, \"cm\"),\n            new
    Tuple<long, string>(500, \"d\"),\n            new Tuple<long, string>(400, \"cd\"),\n
    \           new Tuple<long, string>(100, \"c\"),\n            new Tuple<long,
    string>(90, \"xc\"),\n            new Tuple<long, string>(50, \"l\"),\n            new
    Tuple<long, string>(40, \"xl\"),\n            new Tuple<long, string>(10, \"x\"),\n
    \           new Tuple<long, string>(9, \"ix\"),\n            new Tuple<long, string>(5,
    \"v\"),\n            new Tuple<long, string>(4, \"iv\"),\n            new Tuple<long,
    string>(1, \"i\")\n        };\n        for (int i = 0; i < map.Count; i++) {\n
    \           while (number >= map[i].Item1) {\n                result.Append(map[i].Item2);\n
    \               number -= map[i].Item1;\n            }\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       long i = 0;\n        string[] rom = { \"\", \"i\", \"ii\", \"iii\", \"iv\",
    \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        string[] ram = { \"\", \"x\",
    \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\" };\n        string[]
    ran = { \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\",
    \"cm\" };\n        string[] ra = { \"\", \"m\", \"mm\", \"mmm\" };\n        return
    ra[number / 1000] + ran[(number % 1000) / 100] + ram[(number % 100) / 10] + rom[number
    % 10];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var symbols = new List<string>() {\"i\", \"iv\", \"v\", \"ix\", \"x\",
    \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        var values
    = new List<int>() {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        var
    result = new StringBuilder();\n        while (number > 0) {\n            int index
    = values.FindIndex(delegate(int num) { return num <= number; });\n            number
    -= values[index];\n            result.Append(symbols[index]);\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e4cd7dbc52c4b369f8c95b3e3f10c2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e4cd7dbc52c4b369f8c95b3e3f10c2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string output = \"\";\n        while (number > 0) {\n            if (number
    >= 1000) {\n                output += \"m\";\n                number -= 1000;\n
    \           } else if (number >= 900) {\n                output += \"cm\";\n                number
    -= 900;\n            } else if (number >= 500) {\n                output += \"d\";\n
    \               number -= 500;\n            } else if (number >= 400) {\n                output
    += \"cd\";\n                number -= 400;\n            } else if (number >= 100)
    {\n                output += \"c\";\n                number -= 100;\n            }
    else if (number >= 90) {\n                output += \"xc\";\n                number
    -= 90;\n            } else if (number >= 50) {\n                output += \"l\";\n
    \               number -= 50;\n            } else if (number >= 40) {\n                output
    += \"xl\";\n                number -= 40;\n            } else if (number >= 10)
    {\n                output += \"x\";\n                number -= 10;\n            }
    else if (number >= 9) {\n                output += \"ix\";\n                number
    -= 9;\n            } else if (number >= 5) {\n                output += \"v\";\n
    \               number -= 5;\n            } else if (number >= 4) {\n                output
    += \"iv\";\n                number -= 4;\n            } else if (number >= 1)
    {\n                output += \"i\";\n                number -= 1;\n            }\n
    \       }\n        return output;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string ones[] = { \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\",
    \"viii\", \"ix\" };\n        string tens[] = { \"x\", \"xx\", \"xxx\", \"xl\",
    \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\" };\n        string hundreds[] = { \"c\",
    \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\" };\n        string
    thousands[] = { \"m\", \"mm\", \"mmm\" };\n        string result = \"\";\n        if
    (number >= 1000) {\n            result += thousands[number / 1000 - 1];\n            number
    %= 1000;\n        }\n        if (number >= 100) {\n            result += hundreds[number
    / 100 - 1];\n            number %= 100;\n        }\n        if (number >= 10)
    {\n            result += tens[number / 10 - 1];\n            number %= 10;\n        }\n
    \       if (number >= 1) {\n            result += ones[number - 1];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9696i5e2.cs(20,20): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    /tmp/tmp9696i5e2.cs(21,20): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    /tmp/tmp9696i5e2.cs(22,24): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    /tmp/tmp9696i5e2.cs(23,25): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[] ones = new string[] { \"i\", \"ii\", \"iii\", \"iv\", \"v\",
    \"vi\", \"vii\", \"viii\", \"ix\" };\n        string[] tens = new string[] { \"x\",
    \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\" };\n        string[]
    hunds = new string[] { \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\",
    \"dccc\", \"cm\" };\n        string[] thous = new string[] { \"m\", \"mm\", \"mmm\"
    };\n        long[] divs = new long[] { 1, 10, 100, 1000 };\n        string[] code
    = new string[] { \"i\", \"x\", \"c\", \"m\" };\n        string result = \"\";\n
    \       for (int i = 0; i < 4; i++) {\n            int digit = (int)(number /
    divs[i]) % 10;\n            if (digit > 0) {\n                if (i == 0) {\n
    \                   result += ones[digit - 1];\n                } else if (i ==
    1) {\n                    result += tens[digit - 1];\n                } else if
    (i == 2) {\n                    result += hunds[digit - 1];\n                }
    else if (i == 3) {\n                    result += thous[digit - 1];\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a894d1db38e84c45a77726d5b3fbae6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a894d1db38e84c45a77726d5b3fbae6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string roman = \"\";\n        for (int i = 1; i <= number; i++) {\n            roman
    += \"i\";\n        }\n        roman = roman.Replace(\"iiiii\", \"v\");\n        roman
    = roman.Replace(\"vv\", \"x\");\n        roman = roman.Replace(\"iiii\", \"iv\");\n
    \       roman = roman.Replace(\"xxxxx\", \"l\");\n        roman = roman.Replace(\"ll\",
    \"c\");\n        roman = roman.Replace(\"xxxx\", \"xl\");\n        roman = roman.Replace(\"ccccc\",
    \"d\");\n        roman = roman.Replace(\"dd\", \"m\");\n        roman = roman.Replace(\"cccc\",
    \"cd\");\n        return roman;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aee8903c960b431b8d2eb646576b0bbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aee8903c960b431b8d2eb646576b0bbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string ans = \"\";\n        for (; number > 0; number -= 9L) {\n            if
    (number >= 900L) {\n                ans += \"cm\";\n                number -=
    900L;\n            } else if (number >= 400L) {\n                ans += \"cd\";\n
    \               number -= 400L;\n            } else if (number >= 90L) {\n                ans
    += \"xc\";\n                number -= 90L;\n            } else if (number >= 40L)
    {\n                ans += \"xl\";\n                number -= 40L;\n            }
    else if (number >= 9L) {\n                ans += \"ix\";\n                number
    -= 9L;\n            } else if (number >= 4L) {\n                ans += \"iv\";\n
    \               number -= 4L;\n            } else if (number >= 1L) {\n                ans
    += \"i\";\n                number -= 1L;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2c4f8233e844aa88d791a270a270a19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2c4f8233e844aa88d791a270a270a19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Since we only have the digits [1..1000], we can just use a lookup table\n
    \       // of strings.\n        List<string> table = new List<string>() {\n            \"\",
    \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\",\n            \"x\",
    \"xi\", \"xii\", \"xiii\", \"xiv\", \"xv\", \"xvi\", \"xvii\", \"xviii\", \"xix\",\n
    \           \"xx\", \"xxi\", \"xxii\", \"xxiii\", \"xxiv\", \"xxv\", \"xxvi\",
    \"xxvii\", \"xxviii\", \"xxix\",\n            \"xxx\", \"xxxi\", \"xxxii\", \"xxxiii\",
    \"xxxiv\", \"xxxv\", \"xxxvi\", \"xxxvii\", \"xxxviii\", \"xxxix\",\n            \"xl\",
    \"xli\", \"xlii\", \"xliii\", \"xliv\", \"xlv\", \"xlvi\", \"xlvii\", \"xlviii\",
    \"xlix\",\n            \"l\", \"li\", \"lii\", \"liii\", \"liv\", \"lv\", \"lvi\",
    \"lvii\", \"lviii\", \"lix\",\n            \"lx\", \"lxi\", \"lxii\", \"lxiii\",
    \"lxiv\", \"lxv\", \"lxvi\", \"lxvii\", \"lxviii\", \"lxix\",\n            \"lxx\",
    \"lxxi\", \"lxxii\", \"lxxiii\", \"lxxiv\", \"lxxv\", \"lxxvi\", \"lxxvii\", \"lxxviii\",
    \"lxxix\",\n            \"lxxx\", \"lxxxi\", \"lxxxii\", \"lxxxiii\", \"lxxxiv\",
    \"lxxxv\", \"lxxxvi\", \"lxxxvii\", \"lxxxviii\", \"lxxxix\",\n            \"xc\",
    \"xci\", \"xcii\", \"xciii\", \"xciv\", \"xcv\", \"xcvi\", \"xcvii\", \"xcviii\",
    \"xcix\",\n            \"c\", \"ci\", \"cii\", \"ciii\", \"civ\",\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpby81d3jg.cs(34,6): error CS1002: ; expected

    /tmp/tmpby81d3jg.cs(35,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpby81d3jg.cs(52,2): error CS1513: } expected

    '
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var num = number;\n        var roman = \"\";\n        while (num > 0)
    {\n            if (num >= 1000) {\n                roman += \"m\";\n                num
    -= 1000;\n            } else if (num >= 900) {\n                roman += \"cm\";\n
    \               num -= 900;\n            } else if (num >= 500) {\n                roman
    += \"d\";\n                num -= 500;\n            } else if (num >= 400) {\n
    \               roman += \"cd\";\n                num -= 400;\n            } else
    if (num >= 100) {\n                roman += \"c\";\n                num -= 100;\n
    \           } else if (num >= 90) {\n                roman += \"xc\";\n                num
    -= 90;\n            } else if (num >= 50) {\n                roman += \"l\";\n
    \               num -= 50;\n            } else if (num >= 40) {\n                roman
    += \"xl\";\n                num -= 40;\n            } else if (num >= 10) {\n
    \               roman += \"x\";\n                num -= 10;\n            } else
    if (num >= 9) {\n                roman += \"ix\";\n                num -= 9;\n
    \           } else if (num >= 5) {\n                roman += \"v\";\n                num
    -= 5;\n            } else if (num >= 4) {\n                roman += \"iv\";\n
    \               num -= 4;\n            } else if (num >= 1) {\n                roman
    += \"i\";\n                num -= 1;\n            }\n        }\n        return
    roman;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"number\",
    number, \"number must be between 1 and 1000.\");\n        }\n        StringBuilder
    result = new StringBuilder();\n        List<Tuple<long, char>> lookup = new List<Tuple<long,
    char>>();\n        lookup.Add(new Tuple<long, char>(1000, 'm'));\n        lookup.Add(new
    Tuple<long, char>(900, 'c'));\n        lookup.Add(new Tuple<long, char>(500, 'd'));\n
    \       lookup.Add(new Tuple<long, char>(400, 'c'));\n        lookup.Add(new Tuple<long,
    char>(100, 'c'));\n        lookup.Add(new Tuple<long, char>(90, 'x'));\n        lookup.Add(new
    Tuple<long, char>(50, 'l'));\n        lookup.Add(new Tuple<long, char>(40, 'x'));\n
    \       lookup.Add(new Tuple<long, char>(10, 'x'));\n        lookup.Add(new Tuple<long,
    char>(9, 'i'));\n        lookup.Add(new Tuple<long, char>(5, 'v'));\n        lookup.Add(new
    Tuple<long, char>(4, 'i'));\n        lookup.Add(new Tuple<long, char>(1, 'i'));\n
    \       foreach (var kvp in lookup) {\n            while (number >= kvp.Item1)
    {\n                result.Append(kvp.Item2);\n                number -= kvp.Item1;\n
    \           }\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a1ce041acc04667a15c2ea0e4dfc8a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a1ce041acc04667a15c2ea0e4dfc8a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       long[] Numerals = new long[] { 0, 1, 4, 5, 9, 10, 40, 50, 90, 100, 400,
    500, 900, 1000 };\n        string[] RomNums = new string[] { \"\", \"i\", \"iv\",
    \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"
    };\n        int index = 12; // index of largest numeric value in Numerals less
    than number\n        string result = \"\";\n        while (number > 0) {\n            if
    (number - Numerals[index] >= 0) {\n                number -= Numerals[index];\n
    \               result += RomNums[index];\n            } else {\n                index--;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7902864dacdb4f5b9ba87be4853cc981>:0
    \n"
  stdout: ''
  timestamp: 1659977236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // TODO(developer): Implement IntToMiniRoman\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <ff1c125231bd40d5880fafc7e8a98258>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <ff1c125231bd40d5880fafc7e8a98258>:0 \n"
  stdout: ''
  timestamp: 1659977236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Determine the number of each possible digit\n        long num = number;\n
    \       long ones = num % 10;\n        num /= 10;\n        long tens = num % 10;\n
    \       num /= 10;\n        long hundreds = num % 10;\n        num /= 10;\n        //
    If there are thousands, we'll just prepend M\n        long thousands = num % 10;\n
    \       // Prepend up to three Ms\n        string thousand_str = \"\";\n        for
    (int i = 0; i < thousands; i++) {\n            thousand_str += \"m\";\n        }\n
    \       // Handle the first digit\n        string hundred_str = \"\";\n        if
    (hundreds == 9) {\n            hundred_str = \"cm\";\n        } else if (hundreds
    == 4) {\n            hundred_str = \"cd\";\n        } else {\n            if (hundreds
    >= 5) {\n                hundred_str += \"d\";\n                hundreds -= 5;\n
    \           }\n            for (int i = 0; i < hundreds; i++) {\n                hundred_str
    += \"c\";\n            }\n        }\n        // Handle the second digit\n        string
    ten_str = \"\";\n        if (tens == 9) {\n            ten_str = \"xc\";\n        }
    else if (tens == 4) {\n            ten_str = \"xl\";\n        } else {\n            if
    (tens >= 5) {\n                ten_str += \"l\";\n                tens -= 5;\n
    \           }\n            for (int i = 0; i < tens; i++) {\n                ten_str
    += \"x\";\n            }\n        }\n        // Handle the last digit\n        string
    one_str = \"\";\n        if (ones == 9) {\n            one_str = \"ix\";\n        }
    else if (ones == 4) {\n            one_str = \"iv\";\n        } else {\n            if
    (ones >= 5) {\n                one_str += \"v\";\n                ones -= 5;\n
    \           }\n            for (int i = 0; i < ones; i++) {\n                one_str
    += \"i\";\n            }\n        }\n        // Combine them all into a string\n
    \       return thousand_str + hundred_str\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0zf7d_i7.cs(81,42): error CS1002: ; expected

    '
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException(\"numer\",
    \"\u0427\u0438\u0441\u043B\u043E \u0434\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u0442\u044C
    \u0432 \u043F\u0440\u0435\u0434\u0435\u043B\u0430\u0445 \u043E\u0442 1 \u0434\u043E
    1000\");\n        var roman = new StringBuilder();\n        while (number >= 1000)
    {\n            roman.Append(\"m\");\n            number -= 1000;\n        }\n
    \       if (number >= 900) {\n            roman.Append(\"cm\");\n            number
    -= 900;\n        }\n        if (number >= 500) {\n            roman.Append(\"d\");\n
    \           number -= 500;\n        }\n        if (number >= 400) {\n            roman.Append(\"cd\");\n
    \           number -= 400;\n        }\n        while (number >= 100) {\n            roman.Append(\"c\");\n
    \           number -= 100;\n        }\n        if (number >= 90) {\n            roman.Append(\"xc\");\n
    \           number -= 90;\n        }\n        if (number >= 50) {\n            roman.Append(\"l\");\n
    \           number -= 50;\n        }\n        if (number >= 40) {\n            roman.Append(\"xl\");\n
    \           number -= 40;\n        }\n        while (number >= 10) {\n            roman.Append(\"x\");\n
    \           number -= 10;\n        }\n        if (number >= 9) {\n            roman.Append(\"ix\");\n
    \           number -= 9;\n        }\n        if (number >= 5) {\n            roman.Append(\"v\");\n
    \           number -= 5;\n        }\n        if (number >= 4) {\n            roman.Append(\"iv\");\n
    \           number -= 4;\n        }\n        while (number >= 1) {\n            roman.Append(\"i\");\n
    \           number -= 1;\n        }\n        return roman.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[] ones = new string[]{\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\",
    \"vii\", \"viii\", \"ix\"};\n        string[] tens = new string[]{\"x\", \"xx\",
    \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        string[]
    hundreds = new string[]{\"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\",
    \"dccc\", \"cm\"};\n        string[] thousands = new string[]{\"m\", \"mm\", \"mmm\"};\n
    \       string lower = \"\";\n        int num = (int)number;\n        lower +=
    GetPlace(num, 1000, thousands);\n        num %= 1000;\n        lower += GetPlace(num,
    100, hundreds);\n        num %= 100;\n        lower += GetPlace(num, 10, tens);\n
    \       num %= 10;\n        lower += GetPlace(num, 1, ones);\n        return lower;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzcpkgxhm.cs(26,18): error CS0103: The name ''GetPlace'' does not exist
    in the current context

    /tmp/tmpzcpkgxhm.cs(28,18): error CS0103: The name ''GetPlace'' does not exist
    in the current context

    /tmp/tmpzcpkgxhm.cs(30,18): error CS0103: The name ''GetPlace'' does not exist
    in the current context

    /tmp/tmpzcpkgxhm.cs(32,18): error CS0103: The name ''GetPlace'' does not exist
    in the current context

    '
  timestamp: 1659977236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[][] numerals = new string[][] {\n            new string[] { \"i\",
    \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" },\n            new
    string[] { \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"
    },\n            new string[] { \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\",
    \"dcc\", \"dccc\", \"cm\" },\n            new string[] { \"m\", \"mm\", \"mmm\"
    }\n        };\n        // \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",
    \"8\", \"9\"\n        // \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\",
    \"07\", \"08\", \"09\"\n        // \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",
    \"16\", \"17\", \"18\", \"19\"\n        // \"20\", \"21\", \"22\", \"23\", \"24\",
    \"25\", \"26\", \"27\", \"28\", \"29\"\n        // \"30\", \"31\", \"32\", \"33\",
    \"34\", \"35\", \"36\", \"37\", \"38\", \"39\"\n        // \"40\", \"41\", \"42\",
    \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\"\n        // \"50\", \"51\",
    \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\"\n        // \"60\",
    \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\"\n        //
    \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\"\n
    \       // \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\",
    \"89\"\n        // \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\",
    \"98\", \"99\"\n        string\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuvdu7oy_.cs(37,15): error CS1001: Identifier expected

    /tmp/tmpuvdu7oy_.cs(37,15): error CS1002: ; expected

    '
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var sb = new StringBuilder();\n        while (number > 0) {\n            if
    (number >= 1000) {\n                sb.Append('m');\n                number -=
    1000;\n            } else if (number >= 900) {\n                sb.Append(\"cm\");\n
    \               number -= 900;\n            } else if (number >= 500) {\n                sb.Append('d');\n
    \               number -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"cd\");\n
    \               number -= 400;\n            } else if (number >= 100) {\n                sb.Append('c');\n
    \               number -= 100;\n            } else if (number >= 90) {\n                sb.Append(\"xc\");\n
    \               number -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n
    \               number -= 50;\n            } else if (number >= 40) {\n                sb.Append(\"xl\");\n
    \               number -= 40;\n            } else if (number >= 10) {\n                sb.Append('x');\n
    \               number -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"ix\");\n
    \               number -= 9;\n            } else if (number >= 5) {\n                sb.Append('v');\n
    \               number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"iv\");\n
    \               number -= 4;\n            } else if (number >= 1) {\n                sb.Append('i');\n
    \               number -= 1;\n            }\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder result = new StringBuilder();\n        String[] symbols
    = new String[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\",
    \"ix\", \"v\", \"iv\", \"i\" };\n        int[] values = new int[] { 1000, 900,
    500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        for (int i = 0; i < values.Length;
    i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n
    \               result.Append(symbols[i]);\n            }\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n
    \           if (number >= 100) {\n                sb.Append('c');\n                number
    -= 100;\n            } else if (number >= 90) {\n                sb.Append(\"xc\");\n
    \               number -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n
    \               number -= 50;\n            } else if (number >= 40) {\n                sb.Append(\"xl\");\n
    \               number -= 40;\n            } else if (number >= 10) {\n                sb.Append('x');\n
    \               number -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"ix\");\n
    \               number -= 9;\n            } else if (number >= 5) {\n                sb.Append('v');\n
    \               number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"iv\");\n
    \               number -= 4;\n            } else {\n                sb.Append('i');\n
    \               number -= 1;\n            }\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04e5cbe739934ae491d8ad1a17e98dd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04e5cbe739934ae491d8ad1a17e98dd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       //    >>> IntToMiniRoman((133L))\n        //    (\"cxxxiii\")\n        //
    \   >>> IntToMiniRoman((400L))\n        //    (\"cd\")\n        //    >>> IntToMiniRoman((571L))\n
    \       //    (\"dlxxi\")\n        //    >>> IntToMiniRoman((621L))\n        //
    \   (\"dclxxi\")\n        //    >>> IntToMiniRoman((846L))\n        //    (\"dcccxlvi\")\n
    \       //    >>> IntToMiniRoman((903L))\n        //    (\"cmiii\")\n        //
    \   >>> IntToMiniRoman((1000L))\n        //    (\"m\")\n        //    >>> IntToMiniRoman((1011L))\n
    \       //    (\"mx\")\n        //    >>> IntToMiniRoman((1027L))\n        //
    \   (\"mxxvii\")\n        //    >>> IntToMiniRoman((1444L))\n        //    (\"mcdxliv\")\n
    \       //    >>> IntToMiniRoman((1607L))\n        //    (\"mvii\")\n        //
    \   >>> IntToMiniRoman((1716L))\n        //    (\"mdccxvi\")\n        //    >>>
    IntToMiniRoman((1954L))\n        //    (\"mcmliv\")\n        //    >>> IntToMiniRoman((2074L))\n
    \       //    (\"mclxxiv\")\n        //    >>> IntToMiniRoman((2227L))\n        //
    \   (\"mmccxxvii\")\n        //    >>> IntToMiniRoman((2360L))\n        //    (\"mmccclx\")\n
    \       //    >>> IntToMiniRoman((2473L))\n        //    (\"mmcdlxxiii\")\n        //
    \   >>> IntToMiniRoman((2646L))\n        //    (\"mmdclxvi\")\n        //    >>>
    IntToMiniRoman((2758L))\n        //    (\"mmdcclviii\")\n        //    >>> IntToMiniRoman((2819L))\n
    \       //    (\"mmdcccxix\")\n        //    >>> IntToMiniRoman((2999L))\n        //
    \   (\"mmmcmxcix\")\n        //    >>> IntToMiniRoman((3001L))\n        //    (\"mm\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1xc1ruy.cs(19,26): error CS0161: ''Problem.IntToMiniRoman(long)'': not
    all code paths return a value

    '
  timestamp: 1659977236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // >>> IntToMiniRoman((19L))\n        // (\"xix\")\n        // >>> IntToMiniRoman((152L))\n
    \       // (\"clii\")\n        // >>> IntToMiniRoman((426L))\n        // (\"cdxxvi\")\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <06b7d32c5cb74d06bc4a446e8652ab5f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <06b7d32c5cb74d06bc4a446e8652ab5f>:0 \n"
  stdout: ''
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[] roman = new string[] {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\",
    \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        int[] num = new
    int[] {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        string
    res = \"\";\n        for (int i = 0; i < roman.Length; i++) {\n            while
    (number >= num[i]) {\n                res += roman[i];\n                number
    -= num[i];\n            }\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977236
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var units = new List<string> { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\",
    \"vi\", \"vii\", \"viii\", \"ix\" };\n        var tens = new List<string> { \"\",
    \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\" };\n
    \       var hundreds = new List<string> { \"\", \"c\", \"cc\", \"ccc\", \"cd\",
    \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\" };\n        var thousands = new List<string>
    { \"\", \"m\", \"mm\", \"mmm\" };\n        var str = new List<string>();\n        str.Add(thousands[number
    / 1000]);\n        str.Add(hundreds[(number % 1000) / 100]);\n        str.Add(tens[(number
    % 100) / 10]);\n        str.Add(units[number % 10]);\n        return string.Join(\"\",
    str);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn2xsh5wm.cs(25,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpn2xsh5wm.cs(26,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpn2xsh5wm.cs(27,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpn2xsh5wm.cs(28,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977236
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Your code goes here.\n        StringBuilder sb = new StringBuilder();\n
    \       string[] array = { \"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\" };\n
    \       int pos = 0;\n        while (number > 0) {\n            int digit = (int)(number
    % 10);\n            string result = \"\";\n            switch (digit) {\n                case
    1:\n                case 2:\n                case 3:\n                    result
    = string.Concat(Enumerable.Repeat(array[pos], digit));\n                    break;\n
    \               case 4:\n                    result = array[pos] + array[pos +
    1];\n                    break;\n                case 5:\n                case
    6:\n                case 7:\n                case 8:\n                    result
    = array[pos + 1] + string.Concat(Enumerable.Repeat(array[pos], digit - 5));\n
    \                   break;\n                case 9:\n                    result
    = array[pos] + array[pos + 2];\n                    break;\n            }\n            sb.Insert(0,
    result);\n            number /= 10;\n            pos += 2;\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Place your code here\n        // This is an incomplete solution.\n
    \       string[,] nums = new string[,] {\n            { \"I\", \"II\", \"III\",
    \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\" },\n            { \"X\", \"XX\",
    \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\" },\n            { \"C\",
    \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\" },\n            {
    \"M\", \"MM\", \"MMM\", \"\", \"\", \"\", \"\", \"\", \"\" }\n        };\n        var
    result = new StringBuilder();\n        var n = number;\n        for (int i = 0;
    i < 4; i++) {\n            int d = (int)(n % 10);\n            n /= 10;\n            if
    (d != 0) {\n                result.Insert(0, nums[i, d - 1]);\n            }\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2826a799aee6473290621680e8c19bb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2826a799aee6473290621680e8c19bb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException();\n
    \       }\n        string result = \"\";\n        long n = number;\n        while
    (n >= 500) {\n            result += \"d\";\n            n -= 500;\n        }\n
    \       while (n >= 100) {\n            result += \"c\";\n            n -= 100;\n
    \       }\n        while (n >= 50) {\n            result += \"l\";\n            n
    -= 50;\n        }\n        while (n >= 10) {\n            result += \"x\";\n            n
    -= 10;\n        }\n        while (n >= 5) {\n            result += \"v\";\n            n
    -= 5;\n        }\n        while (n >= 1) {\n            result += \"i\";\n            n
    -= 1;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed408573a96943248532d9c8aea6f870>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed408573a96943248532d9c8aea6f870>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number == 0) {\n            return \"\";\n        } else if (number
    >= 1 && number <= 3) {\n            return new string('i', (int)number);\n        }
    else if (number == 4) {\n            return \"iv\";\n        } else if (number
    >= 5 && number <= 8) {\n            return \"v\" + new string('i', (int)number
    - 5);\n        } else if (number == 9) {\n            return \"ix\";\n        }
    else if (number >= 10 && number <= 39) {\n            return new string('x', (int)number
    / 10) + IntToMiniRoman(number % 10);\n        } else if (number >= 40 && number
    <= 49) {\n            return \"xl\" + IntToMiniRoman(number % 10);\n        }
    else if (number >= 50 && number <= 89) {\n            return \"l\" + IntToMiniRoman(number
    % 10);\n        } else if (number >= 90 && number <= 99) {\n            return
    \"xc\" + IntToMiniRoman(number % 10);\n        } else if (number >= 100 && number
    <= 399) {\n            return new string('c', (int)number / 100) + IntToMiniRoman(number
    % 100);\n        } else if (number >= 400 && number <= 499) {\n            return
    \"cd\" + IntToMiniRoman(number % 100);\n        } else if (number >= 500 && number
    <= 899) {\n            return \"d\" + IntToMiniRoman(number % 100);\n        }
    else if (number >= 900 && number <= 999) {\n            return \"cm\" + IntToMiniRoman(number
    % 100);\n        } else if (number == 1000) {\n            return \"m\";\n        }
    else {\n            throw new Exception(\"This should never happen!\");\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string result = \"\";\n        while (number > 0) {\n            if (number
    >= 1000) {\n                result += \"m\";\n                number -= 1000;\n
    \           } else if (number >= 900) {\n                result += \"cm\";\n                number
    -= 900;\n            } else if (number >= 500) {\n                result += \"d\";\n
    \               number -= 500;\n            } else if (number >= 400) {\n                result
    += \"cd\";\n                number -= 400;\n            } else if (number >= 100)
    {\n                result += \"c\";\n                number -= 100;\n            }
    else if (number >= 90) {\n                result += \"xc\";\n                number
    -= 90;\n            } else if (number >= 50) {\n                result += \"l\";\n
    \               number -= 50;\n            } else if (number >= 40) {\n                result
    += \"xl\";\n                number -= 40;\n            } else if (number >= 10)
    {\n                result += \"x\";\n                number -= 10;\n            }
    else if (number >= 9) {\n                result += \"ix\";\n                number
    -= 9;\n            } else if (number >= 5) {\n                result += \"v\";\n
    \               number -= 5;\n            } else if (number >= 4) {\n                result
    += \"iv\";\n                number -= 4;\n            } else if (number >= 1)
    {\n                result += \"i\";\n                number -= 1;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // YOUR CODE HERE\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66927fc20f7a47d0b15e922a9f818e3f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66927fc20f7a47d0b15e922a9f818e3f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       int[] value = { 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 };\n
    \       string[] numeral = { \"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\",
    \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\" };\n        string result = \"\";\n
    \       int i = 12;\n        while (number > 0) {\n            while (number >=
    value[i]) {\n                number -= value[i];\n                result += numeral[i];\n
    \           }\n            i--;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string roman = \"\";\n        for (int i = 0; i < number / 100; i++)\n
    \           roman += \"c\";\n        number %= 100;\n        if (number == 50)\n
    \           roman += \"l\";\n        else if (number >= 90) {\n            roman
    += \"xc\";\n            number -= 90;\n        }\n        else if (number >= 40)
    {\n            roman += \"xl\";\n            number -= 40;\n        }\n        for
    (int i = 0; i < number / 10; i++)\n            roman += \"x\";\n        number
    %= 10;\n        if (number == 5)\n            roman += \"v\";\n        else if
    (number == 9) {\n            roman += \"ix\";\n            number -= 9;\n        }\n
    \       else if (number >= 4) {\n            roman += \"iv\";\n            number
    -= 4;\n        }\n        for (int i = 0; i < number; i++)\n            roman
    += \"i\";\n        return roman;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <549d97b9295c4ac29147d8dbc95eba6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <549d97b9295c4ac29147d8dbc95eba6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number == 0) {\n            return \"\";\n        }\n        else
    if (number < 4) {\n            return new string('i', (int)number);\n        }\n
    \       else if (number == 4) {\n            return \"iv\";\n        }\n        else
    if (number == 5) {\n            return \"v\";\n        }\n        else if (number
    < 9) {\n            return \"v\" + new string('i', (int)number - 5);\n        }\n
    \       else if (number == 9) {\n            return \"ix\";\n        }\n        else
    if (number < 40) {\n            return new string('x', (int)number / 10) + IntToMiniRoman(number
    % 10);\n        }\n        else if (number < 50) {\n            return \"xl\"
    + IntToMiniRoman(number % 10);\n        }\n        else if (number < 90) {\n            return
    \"l\" + IntToMiniRoman(number % 10);\n        }\n        else if (number < 100)
    {\n            return \"xc\" + IntToMiniRoman(number % 10);\n        }\n        else
    if (number < 400) {\n            return new string('c', (int)number / 100) + IntToMiniRoman(number
    % 100);\n        }\n        else if (number < 500) {\n            return \"cd\"
    + IntToMiniRoman(number % 100);\n        }\n        else if (number < 900) {\n
    \           return \"d\" + IntToMiniRoman(number % 100);\n        }\n        else
    if (number < 1000) {\n            return \"cm\" + IntToMiniRoman(number % 100);\n
    \       }\n        else {\n            return \"m\" + IntToMiniRoman(number %
    1000);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string result = \"\";\n        if (number <= 1000 && number > 0) {\n            long
    currentIndex = 0;\n            long[] possibleValues = new long[] { 1000, 900,
    500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n            string[] romanNumerals
    = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\",
    \"ix\", \"v\", \"iv\", \"i\" };\n            while (number > 0) {\n                long
    numberOfValues = number / possibleValues[currentIndex];\n                for (int
    i = 0; i < numberOfValues; i++) {\n                    result += romanNumerals[currentIndex];\n
    \               }\n                number = number % possibleValues[currentIndex];\n
    \               currentIndex++;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[] M = { \"\", \"m\", \"mm\", \"mmm\" };\n        string[] C = {
    \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"
    };\n        string[] X = { \"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\",
    \"lxx\", \"lxxx\", \"xc\" };\n        string[] I = { \"\", \"i\", \"ii\", \"iii\",
    \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        StringBuilder sb
    = new StringBuilder();\n        if (number >= 1000) sb.Append(M[number / 1000]);\n
    \       if (number >= 100) sb.Append(C[(number % 1000) / 100]);\n        if (number
    >= 10) sb.Append(X[(number % 100) / 10]);\n        sb.Append(I[number % 10]);\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException();\n
    \       }\n        string s = \"\";\n        int h = (int)(number / 100);\n        number
    -= h * 100;\n        int t = (int)(number / 10);\n        number -= t * 10;\n
    \       int u = (int)(number);\n        number -= u;\n        for (int i = 0;
    i < h; i++) {\n            s += \"c\";\n        }\n        if (t == 9) {\n            s
    += \"xc\";\n        } else if (t >= 5) {\n            s += \"l\";\n            for
    (int i = 0; i < t - 5; i++) {\n                s += \"x\";\n            }\n        }
    else if (t == 4) {\n            s += \"xl\";\n        } else {\n            for
    (int i = 0; i < t; i++) {\n                s += \"x\";\n            }\n        }\n
    \       if (u == 9) {\n            s += \"ix\";\n        } else if (u >= 5) {\n
    \           s += \"v\";\n            for (int i = 0; i < u - 5; i++) {\n                s
    += \"i\";\n            }\n        } else if (u == 4) {\n            s += \"iv\";\n
    \       } else {\n            for (int i = 0; i < u; i++) {\n                s
    += \"i\";\n            }\n        }\n        return s;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00ab036d37cf43a6946b29ba75339e4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00ab036d37cf43a6946b29ba75339e4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e5a6e6b61e4addba6af80423e6a210>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e5a6e6b61e4addba6af80423e6a210>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string result = \"\";\n        while (number >= 1000) {\n            result
    += \"m\";\n            number -= 1000;\n        }\n        if (number >= 900)
    {\n            result += \"cm\";\n            number -= 900;\n        }\n        if
    (number >= 500) {\n            result += \"d\";\n            number -= 500;\n
    \       }\n        if (number >= 400) {\n            result += \"cd\";\n            number
    -= 400;\n        }\n        while (number >= 100) {\n            result += \"c\";\n
    \           number -= 100;\n        }\n        if (number >= 90) {\n            result
    += \"xc\";\n            number -= 90;\n        }\n        if (number >= 50) {\n
    \           result += \"l\";\n            number -= 50;\n        }\n        if
    (number >= 40) {\n            result += \"xl\";\n            number -= 40;\n        }\n
    \       while (number >= 10) {\n            result += \"x\";\n            number
    -= 10;\n        }\n        if (number >= 9) {\n            result += \"ix\";\n
    \           number -= 9;\n        }\n        if (number >= 5) {\n            result
    += \"v\";\n            number -= 5;\n        }\n        if (number >= 4) {\n            result
    += \"iv\";\n            number -= 4;\n        }\n        while (number >= 1) {\n
    \           result += \"i\";\n            number -= 1;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977235
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number == 0) {\n            return \"\";\n        }\n        if (number
    < 0) {\n            return \"-\" + IntToMiniRoman(-number);\n        }\n        var
    dict = new Dictionary<long, string>() {\n            {1L, \"i\"},\n            {4L,
    \"iv\"},\n            {5L, \"v\"},\n            {9L, \"ix\"},\n            {10L,
    \"x\"},\n            {40L, \"xl\"},\n            {50L, \"l\"},\n            {90L,
    \"xc\"},\n            {100L, \"c\"},\n            {400L, \"cd\"},\n            {500L,
    \"d\"},\n            {900L, \"cm\"},\n            {1000L, \"m\"},\n        };\n
    \       var keys = dict.Keys.ToList();\n        keys.Sort();\n        var biggest
    = keys.Last();\n        var biggestCount = number / biggest;\n        return string.Concat(Enumerable.Repeat(dict[biggest],
    (int)biggestCount)) + IntToMiniRoman(number % biggest);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977242
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e5a6e6b61e4addba6af80423e6a210>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e5a6e6b61e4addba6af80423e6a210>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // >>> bin(426)[2:]\n        // '110101010'\n        // There are 9 symbols:\n
    \       // 0. I\n        // 1. V\n        // 2. X\n        // 3. L\n        //
    4. C\n        // 5. D\n        // 6. M\n        // 7. [nothing]\n        // 8.
    -\n        // We define the encoding as follows:\n        //  0:    I\n        //
    \ 1:    V\n        //  2:    X\n        //  3:    L\n        //  4:    C\n        //
    \ 5:    D\n        //  6:    M\n        //  7:    -\n        //  8:    -\n        //
    \ 9:    I\n        // 10:    X\n        // 11:    C\n        // 12:    M\n        //
    13:    -\n        // 14:    -\n        // 15:    -\n        // 16:    -\n        //
    17:    -\n        // 18:    I\n        // 19:    X\n        // 20:    C\n        //
    21:    M\n        // 22:    -\n        // 23:    -\n        // 24:    -\n        //
    25:    -\n        // 26:    -\n        // 27:    I\n        // 28:    X\n        //
    29:    C\n        // 30:    M\n        // 31:    -\n        // 32:    -\n        //
    33:    -\n        // 34:    -\n        // 35:    -\n        // 36:    I\n        //
    37:    X\n        // 38:    C\n        // 39:    M\n        // 40:    -\n        //
    41:    -\n        // 42:    -\n        // 43:    -\n        // 44:    -\n        //
    45:    I\n        // 46:    X\n        // 47:    C\n        // 48:    M\n        //
    49:    -\n        // 50:    -\n        // 51:    -\n        // 52:    -\n        //
    53:    -\n        // 54:    I\n        // 55:    X\n        // 56:    C\n        //
    57:    M\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe1phiq18.cs(19,26): error CS0161: ''Problem.IntToMiniRoman(long)'': not
    all code paths return a value

    '
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // see https://en.wikipedia.org/wiki/Roman_numerals#Roman_numerals_as_numbers
    for more info\n        string roman = \"\";\n        // 1000 = m\n        roman
    += new string('m', (int)(number / 1000));\n        number %= 1000;\n        //
    500 = d\n        if (number >= 900) {\n            roman += \"cm\";\n            number
    -= 900;\n        } else if (number >= 500) {\n            roman += \"d\";\n            number
    -= 500;\n        }\n        // 100 = c\n        if (number >= 400) {\n            roman
    += \"cd\";\n            number -= 400;\n        } else {\n            roman +=
    new string('c', (int)(number / 100));\n            number %= 100;\n        }\n
    \       // 50 = l\n        if (number >= 90) {\n            roman += \"xc\";\n
    \           number -= 90;\n        } else if (number >= 50) {\n            roman
    += \"l\";\n            number -= 50;\n        }\n        // 10 = x\n        if
    (number >= 40) {\n            roman += \"xl\";\n            number -= 40;\n        }
    else {\n            roman += new string('x', (int)(number / 10));\n            number
    %= 10;\n        }\n        // 5 = v\n        if (number >= 9) {\n            roman
    += \"ix\";\n            number -= 9;\n        } else if (number >= 5) {\n            roman
    += \"v\";\n            number -= 5;\n        }\n        // 1 = i\n        if (number
    >= 4) {\n            roman += \"iv\";\n            number -= 4;\n        } else
    {\n            roman += new string('i', (int)number);\n        }\n        return
    roman;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string roman = \"\";\n        var numerals = new Dictionary<long, string>()
    {\n            {1L, \"i\"},\n            {5L, \"v\"},\n            {10L, \"x\"},\n
    \           {50L, \"l\"},\n            {100L, \"c\"},\n            {500L, \"d\"},\n
    \           {1000L, \"m\"}\n        };\n        // Handle the most significant
    digits first.\n        // Scan the keys of the dictionary in reversed order,\n
    \       // yielding a sequence of (key, value) pairs for the numerals\n        //
    in descending order.\n        foreach (var pair in numerals.Reverse()) {\n            var
    maxKey = pair.Key;\n            var maxRoman = pair.Value;\n            // For
    each such key, we'll get the highest \"power of that digit\"\n            // that
    is less than or equal to the number. This is achieved by\n            // dividing
    number by the key, rounding down and then multiplying\n            // by the key
    again.\n            var power = maxKey * (long)Math.Floor((double)number / maxKey);\n
    \           if (power > 0) {\n                var powerRoman = maxRoman.Repeat((int)power
    / maxKey);\n                // The roman numeral equivalent of the power is appended
    to the\n                // result.\n                roman += powerRoman;\n                //
    The digit is subtracted from the number.\n                number -= power;\n            }\n
    \       }\n        return roman;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp321s3nwp.cs(43,43): error CS1061: ''string'' does not contain a definition
    for ''Repeat'' and no accessible extension method ''Repeat'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var dict = new Dictionary<int, char>();\n        dict.Add(1000, 'm');\n
    \       dict.Add(900, 'c');\n        dict.Add(500, 'd');\n        dict.Add(400,
    'c');\n        dict.Add(100, 'c');\n        dict.Add(90, 'x');\n        dict.Add(50,
    'l');\n        dict.Add(40, 'x');\n        dict.Add(10, 'x');\n        dict.Add(9,
    'i');\n        dict.Add(5, 'v');\n        dict.Add(4, 'i');\n        dict.Add(1,
    'i');\n        var list = new List<int>() {1000, 900, 500, 400, 100, 90, 50, 40,
    10, 9, 5, 4, 1};\n        var result = \"\";\n        foreach (var k in list)
    {\n            if (number / k > 0) {\n                var digit = (int)(number
    / k);\n                for (int i = 0; i < digit; i++) {\n                    result
    += dict[k];\n                }\n                number -= k * digit;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25a610463533498784e31fd6fb226e07>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25a610463533498784e31fd6fb226e07>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       int d1 = (int)(number % 10);\n        int d2 = (int)((number / 10) % 10);\n
    \       int d3 = (int)((number / 100) % 10);\n        int d4 = (int)((number /
    1000) % 10);\n        int d5 = (int)((number / 10000) % 10);\n        string str
    = \"\";\n        for (int i = 0; i < d5; i++) {\n            str += \"m\";\n        }\n
    \       for (int i = 0; i < d4; i++) {\n            str += \"c\";\n        }\n
    \       if (d3 == 9) {\n            str += \"xm\";\n        } else if (d3 >= 5)
    {\n            str += \"l\";\n            for (int i = 0; i < d3 - 5; i++) {\n
    \               str += \"x\";\n            }\n        } else if (d3 == 4) {\n
    \           str += \"xl\";\n        } else {\n            for (int i = 0; i <
    d3; i++) {\n                str += \"x\";\n            }\n        }\n        for
    (int i = 0; i < d2; i++) {\n            str += \"x\";\n        }\n        if (d1
    == 9) {\n            str += \"ix\";\n        } else if (d1 >= 5) {\n            str
    += \"v\";\n            for (int i = 0; i < d1 - 5; i++) {\n                str
    += \"i\";\n            }\n        } else if (d1 == 4) {\n            str += \"iv\";\n
    \       } else {\n            for (int i = 0; i < d1; i++) {\n                str
    += \"i\";\n            }\n        }\n        return str;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e43ee39649447399077e9726db513d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e43ee39649447399077e9726db513d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string res = \"\";\n        while (number >= 100) {\n            res +=
    \"c\";\n            number -= 100;\n        }\n        if (number >= 90) {\n            res
    += \"xc\";\n            number -= 90;\n        }\n        if (number >= 50) {\n
    \           res += \"l\";\n            number -= 50;\n        }\n        if (number
    >= 40) {\n            res += \"xl\";\n            number -= 40;\n        }\n        while
    (number >= 10) {\n            res += \"x\";\n            number -= 10;\n        }\n
    \       if (number >= 9) {\n            res += \"ix\";\n            number -=
    9;\n        }\n        if (number >= 5) {\n            res += \"v\";\n            number
    -= 5;\n        }\n        if (number >= 4) {\n            res += \"iv\";\n            number
    -= 4;\n        }\n        while (number >= 1) {\n            res += \"i\";\n            number
    -= 1;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be18dc52a2fc4d8187595cf79d500b35>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be18dc52a2fc4d8187595cf79d500b35>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var list = new[] {\n            new Tuple<int, string>(1000, \"m\"),\n
    \           new Tuple<int, string>(900, \"cm\"),\n            new Tuple<int, string>(500,
    \"d\"),\n            new Tuple<int, string>(400, \"cd\"),\n            new Tuple<int,
    string>(100, \"c\"),\n            new Tuple<int, string>(90, \"xc\"),\n            new
    Tuple<int, string>(50, \"l\"),\n            new Tuple<int, string>(40, \"xl\"),\n
    \           new Tuple<int, string>(10, \"x\"),\n            new Tuple<int, string>(9,
    \"ix\"),\n            new Tuple<int, string>(5, \"v\"),\n            new Tuple<int,
    string>(4, \"iv\"),\n            new Tuple<int, string>(1, \"i\"),\n        };\n
    \       var result = \"\";\n        var num = number;\n        foreach (var t
    in list) {\n            while (num >= t.Item1) {\n                result += t.Item2;\n
    \               num -= t.Item1;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string roman = \"\";\n        int[] values = { 1000, 900, 500, 400, 100,
    90, 50, 40, 10, 9, 5, 4, 1 };\n        string[] numerals = { \"m\", \"cm\", \"d\",
    \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n
    \       for (int i = 0; i < values.Length; i++) {\n            while (number >=
    values[i]) {\n                number -= values[i];\n                roman += numerals[i];\n
    \           }\n        }\n        return roman;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var roman = \"\";\n        while (number > 0) {\n            if (number
    >= 1000) {\n                roman += \"m\";\n                number -= 1000;\n
    \           } else if (number >= 900) {\n                roman += \"cm\";\n                number
    -= 900;\n            } else if (number >= 500) {\n                roman += \"d\";\n
    \               number -= 500;\n            } else if (number >= 400) {\n                roman
    += \"cd\";\n                number -= 400;\n            } else if (number >= 100)
    {\n                roman += \"c\";\n                number -= 100;\n            }
    else if (number >= 90) {\n                roman += \"xc\";\n                number
    -= 90;\n            } else if (number >= 50) {\n                roman += \"l\";\n
    \               number -= 50;\n            } else if (number >= 40) {\n                roman
    += \"xl\";\n                number -= 40;\n            } else if (number >= 10)
    {\n                roman += \"x\";\n                number -= 10;\n            }
    else if (number >= 9) {\n                roman += \"ix\";\n                number
    -= 9;\n            } else if (number >= 5) {\n                roman += \"v\";\n
    \               number -= 5;\n            } else if (number >= 4) {\n                roman
    += \"iv\";\n                number -= 4;\n            } else if (number >= 1)
    {\n                roman += \"i\";\n                number -= 1;\n            }\n
    \       }\n        return roman;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       if (number < 1 || number > 1000) {\n            return \"\";\n        }\n
    \       StringBuilder sb = new StringBuilder();\n        while (number >= 1000)
    {\n            sb.Append(\"m\");\n            number -= 1000;\n        }\n        if
    (number >= 900) {\n            sb.Append(\"cm\");\n            number -= 900;\n
    \       }\n        if (number >= 500) {\n            sb.Append(\"d\");\n            number
    -= 500;\n        }\n        if (number >= 400) {\n            sb.Append(\"cd\");\n
    \           number -= 400;\n        }\n        while (number >= 100) {\n            sb.Append(\"c\");\n
    \           number -= 100;\n        }\n        if (number >= 90) {\n            sb.Append(\"xc\");\n
    \           number -= 90;\n        }\n        if (number >= 50) {\n            sb.Append(\"l\");\n
    \           number -= 50;\n        }\n        if (number >= 40) {\n            sb.Append(\"xl\");\n
    \           number -= 40;\n        }\n        while (number >= 10) {\n            sb.Append(\"x\");\n
    \           number -= 10;\n        }\n        if (number >= 9) {\n            sb.Append(\"ix\");\n
    \           number -= 9;\n        }\n        if (number >= 5) {\n            sb.Append(\"v\");\n
    \           number -= 5;\n        }\n        if (number >= 4) {\n            sb.Append(\"iv\");\n
    \           number -= 4;\n        }\n        while (number >= 1) {\n            sb.Append(\"i\");\n
    \           number -= 1;\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var dict = new Dictionary<int, string>\n        {\n            { 1000,
    \"m\" },\n            { 900, \"cm\" },\n            { 500, \"d\" },\n            {
    400, \"cd\" },\n            { 100, \"c\" },\n            { 90, \"xc\" },\n            {
    50, \"l\" },\n            { 40, \"xl\" },\n            { 10, \"x\" },\n            {
    9, \"ix\" },\n            { 5, \"v\" },\n            { 4, \"iv\" },\n            {
    1, \"i\" }\n        };\n        var sb = new StringBuilder();\n        var num
    = number;\n        foreach (var kvp in dict) {\n            while (num >= kvp.Key)
    {\n                sb.Append(kvp.Value);\n                num -= kvp.Key;\n            }\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n
    \           if (number >= 1000) {\n                sb.Append(\"m\");\n                number
    -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"cm\");\n
    \               number -= 900;\n            } else if (number >= 500) {\n                sb.Append(\"d\");\n
    \               number -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"cd\");\n
    \               number -= 400;\n            } else if (number >= 100) {\n                sb.Append(\"c\");\n
    \               number -= 100;\n            } else if (number >= 90) {\n                sb.Append(\"xc\");\n
    \               number -= 90;\n            } else if (number >= 50) {\n                sb.Append(\"l\");\n
    \               number -= 50;\n            } else if (number >= 40) {\n                sb.Append(\"xl\");\n
    \               number -= 40;\n            } else if (number >= 10) {\n                sb.Append(\"x\");\n
    \               number -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"ix\");\n
    \               number -= 9;\n            } else if (number >= 5) {\n                sb.Append(\"v\");\n
    \               number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"iv\");\n
    \               number -= 4;\n            } else if (number >= 1) {\n                sb.Append(\"i\");\n
    \               number -= 1;\n            }\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string result = \"\";\n        List<string> numbers = new List<string>{
    \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\", \"c\",
    \"cx\", \"cxx\", \"cxxx\", \"cl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\", \"c\",
    \"cx\", \"cxx\", \"cxxx\", \"cd\", \"d\", \"dx\", \"dxx\", \"dxxx\", \"dl\", \"l\",
    \"lx\", \"lxx\", \"lxxx\", \"xc\", \"c\", \"cx\", \"cxx\", \"cxxx\", \"cm\", \"m\",
    \"mx\", \"mxx\", \"mxxx\", \"mxxxx\", \"mxxxxx\", \"mxxxxxx\", \"mxxxxxxx\", \"mxxxxxxxx\",
    \"mxxxxxxxxx\", \"mxxxxxxxxxx\", \"mxxxxxxxxxxx\", \"mxxxxxxxxxxxx\", \"mxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"mxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",
    \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd00vh2fd.cs(21,1828): error CS1010: Newline in constant

    /tmp/tmpd00vh2fd.cs(22,6): error CS1002: ; expected

    /tmp/tmpd00vh2fd.cs(23,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpd00vh2fd.cs(40,2): error CS1513: } expected

    '
  timestamp: 1659977237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // YOUR CODE HERE\n        throw new NotImplementedException();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <b1b1cd93234c4a50a0792a7e96be8338>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <b1b1cd93234c4a50a0792a7e96be8338>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder ans = new StringBuilder();\n        while (number > 0) {\n
    \           if (number >= 1000) {\n                ans.Append('m');\n                number
    -= 1000;\n            } else if (number >= 900) {\n                ans.Append(\"cm\");\n
    \               number -= 900;\n            } else if (number >= 500) {\n                ans.Append('d');\n
    \               number -= 500;\n            } else if (number >= 400) {\n                ans.Append(\"cd\");\n
    \               number -= 400;\n            } else if (number >= 100) {\n                ans.Append('c');\n
    \               number -= 100;\n            } else if (number >= 90) {\n                ans.Append(\"xc\");\n
    \               number -= 90;\n            } else if (number >= 50) {\n                ans.Append('l');\n
    \               number -= 50;\n            } else if (number >= 40) {\n                ans.Append(\"xl\");\n
    \               number -= 40;\n            } else if (number >= 10) {\n                ans.Append('x');\n
    \               number -= 10;\n            } else if (number >= 9) {\n                ans.Append(\"ix\");\n
    \               number -= 9;\n            } else if (number >= 5) {\n                ans.Append('v');\n
    \               number -= 5;\n            } else if (number >= 4) {\n                ans.Append(\"iv\");\n
    \               number -= 4;\n            } else if (number >= 1) {\n                ans.Append('i');\n
    \               number -= 1;\n            }\n        }\n        return ans.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var roman = new StringBuilder();\n        var symbols = new Dictionary<int,
    string>() {\n            {1, \"i\"},\n            {5, \"v\"},\n            {10,
    \"x\"},\n            {50, \"l\"},\n            {100, \"c\"},\n            {500,
    \"d\"},\n            {1000, \"m\"}\n        };\n        var digits = number.ToString().Select(x
    => int.Parse(x.ToString())).ToArray();\n        var len = digits.Length;\n        for
    (int i = 0; i < len; i++) {\n            var unit = (int)Math.Pow(10, len - i
    - 1);\n            switch (digits[i]) {\n                case 1:\n                case
    2:\n                case 3:\n                    roman.Append(symbols[unit].Repeat(digits[i]));\n
    \                   break;\n                case 4:\n                    roman.Append(symbols[unit]
    + symbols[unit * 5]);\n                    break;\n                case 5:\n                case
    6:\n                case 7:\n                case 8:\n                    roman.Append(symbols[unit
    * 5] + symbols[unit].Repeat(digits[i] - 5));\n                    break;\n                case
    9:\n                    roman.Append(symbols[unit] + symbols[unit * 10]);\n                    break;\n
    \           }\n        }\n        return roman.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkcb9gyww.cs(38,48): error CS1061: ''string'' does not contain a definition
    for ''Repeat'' and no accessible extension method ''Repeat'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpkcb9gyww.cs(47,68): error CS1061: ''string'' does not contain a definition
    for ''Repeat'' and no accessible extension method ''Repeat'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977237
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string miniRoman = \"\";\n        while (number > 0) {\n            switch
    (number % 10) {\n                case 0:\n                    miniRoman = \"\";\n
    \                   break;\n                case 1:\n                    miniRoman
    = \"i\" + miniRoman;\n                    break;\n                case 2:\n                    miniRoman
    = \"ii\" + miniRoman;\n                    break;\n                case 3:\n                    miniRoman
    = \"iii\" + miniRoman;\n                    break;\n                case 4:\n
    \                   miniRoman = \"iv\" + miniRoman;\n                    break;\n
    \               case 5:\n                    miniRoman = \"v\" + miniRoman;\n
    \                   break;\n                case 6:\n                    miniRoman
    = \"vi\" + miniRoman;\n                    break;\n                case 7:\n                    miniRoman
    = \"vii\" + miniRoman;\n                    break;\n                case 8:\n
    \                   miniRoman = \"viii\" + miniRoman;\n                    break;\n
    \               case 9:\n                    miniRoman = \"ix\" + miniRoman;\n
    \                   break;\n            }\n            number /= 10;\n            switch
    (number % 10) {\n                case 0:\n                    break;\n                case
    1:\n                    miniRoman = \"x\" + miniRoman;\n                    break;\n
    \               case 2:\n                    miniRoman = \"xx\" + miniRoman;\n
    \                   break;\n                case 3:\n                    miniRoman
    = \"xxx\" + miniRoman;\n                    break;\n                case 4:\n
    \                   miniRoman = \"xl\" + miniRoman;\n                    break;\n
    \               case 5:\n                    miniRoman = \"l\" + miniRoman;\n
    \                   break;\n                case 6:\n                    miniRoman
    = \"lx\" + miniRoman;\n                    break;\n                case 7:\n                    miniRoman
    = \"lxx\" + miniRoman;\n                    break;\n                case 8:\n
    \                   miniRoman = \"lxxx\" + miniRoman;\n                    break;\n
    \               case 9:\n                    miniRoman = \"xc\" + miniRoman;\n
    \                   break;\n            }\n            number /= 10;\n            switch
    (number % 10) {\n                case 0:\n                    break;\n                case
    1:\n                    miniRoman = \"c\" + miniRoman;\n                    break;\n
    \               case 2:\n                    miniRoman\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqny6b43l.cs(94,30): error CS1002: ; expected

    /tmp/tmpqny6b43l.cs(96,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpqny6b43l.cs(113,2): error CS1513: } expected

    '
  timestamp: 1659977237
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       long num = number;\n        var result = new StringBuilder();\n        while
    (num > 0) {\n            if (num >= 900) {\n                result.Append(\"cm\");\n
    \               num -= 900;\n            } else if (num >= 500) {\n                result.Append(\"d\");\n
    \               num -= 500;\n            } else if (num >= 400) {\n                result.Append(\"cd\");\n
    \               num -= 400;\n            } else if (num >= 100) {\n                result.Append(\"c\");\n
    \               num -= 100;\n            } else if (num >= 90) {\n                result.Append(\"xc\");\n
    \               num -= 90;\n            } else if (num >= 50) {\n                result.Append(\"l\");\n
    \               num -= 50;\n            } else if (num >= 40) {\n                result.Append(\"xl\");\n
    \               num -= 40;\n            } else if (num >= 10) {\n                result.Append(\"x\");\n
    \               num -= 10;\n            } else if (num >= 9) {\n                result.Append(\"ix\");\n
    \               num -= 9;\n            } else if (num >= 5) {\n                result.Append(\"v\");\n
    \               num -= 5;\n            } else if (num >= 4) {\n                result.Append(\"iv\");\n
    \               num -= 4;\n            } else if (num >= 1) {\n                result.Append(\"i\");\n
    \               num -= 1;\n            }\n        }\n        return result.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6a4acfeece442598e4ca5164949555b>:0
    \n"
  stdout: ''
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       long[] _keys = new long[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10,
    9, 5, 4, 1 };\n        string[] _values = new string[] { \"m\", \"cm\", \"d\",
    \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n
    \       return _keys.Aggregate(new StringBuilder(), (acc, key) => {\n            while
    (number >= key) {\n                number -= key;\n                acc.Append(_values[Array.IndexOf(_keys,
    key)]);\n            }\n            return acc;\n        }).ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder res = new StringBuilder();\n        String[] numerals =
    { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\",
    \"iv\", \"i\" };\n        long[] numbers = { 1000, 900, 500, 400, 100, 90, 50,
    40, 10, 9, 5, 4, 1 };\n        for (int i = 0; i < numerals.Length; i++) {\n            while
    (number >= numbers[i]) {\n                res.Append(numerals[i]);\n                number
    -= numbers[i];\n            }\n        }\n        return res.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Let's make a table of the first few integers and their equivalents:\n
    \       // =============================================================\n        //
    | number | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |\n        // |--------|---|---|---|---|---|---|---|---|---|----|----|----|\n
    \       // | mini   | i | ii| iii| iv| v | vi| vii| viii| ix|   x| xi | xii|\n
    \       // =============================================================\n        //
    You should be able to see some patterns emerging:\n        // * The 4s and 9s
    are represented by combining the two numbers they are\n        //   between (iv,
    ix, xl, etc.)\n        // * The 5s are represented by skipping the one immediately
    preceding\n        //   them (v, l, etc.)\n        // * The 6s and 7s are represented
    by combining the preceding number\n        //   with the one immediately following
    it (vi, vii, lvi, etc.)\n        // * The 8s are represented by combining the
    preceding number with the\n        //   one immediately following it twice (viii,
    lviii, etc.)\n        // * Every other number is represented by combining the
    preceding number\n        //   with itself (ii, iii, xx, xxx, etc.)\n        //
    For example, consider the number 42. 42 is two twenties and two ones.\n        //
    The two twenties are represented by xx, and the two ones by ii. So\n        //
    42 is represented by xxii.\n        // Since 1,000 is mm and 5,000 is v, and 5,000
    = 5 * 1,000, and we can see\n        // that 1,000 = 1000 * i and 5,000 = v *
    1,000 = 5 * 1,000 * i.\n        // We can see the same patterns in how the 5,000s,
    10,000s, etc. are\n        // represented. The same patterns hold for all powers
    of ten.\n        // Now let's make a table of the powers of ten and their equivalents:\n
    \       // ===============================================================\n        //
    | number | 10 | 100 | 1000 | 10000 | 100000 | 1000000 | 10000000 |\n        //
    |--------|----|----\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpif07yvam.cs(19,26): error CS0161: ''Problem.IntToMiniRoman(long)'': not
    all code paths return a value

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Convert to a roman numeral string of the form:\n        // 1 = \"i\"\n
    \       // 2 = \"ii\"\n        // 3 = \"iii\"\n        // 4 = \"iv\"\n        //
    5 = \"v\"\n        // ...\n        // 9 = \"ix\"\n        // 10 = \"x\"\n        //
    ...\n        // 50 = \"l\"\n        // 100 = \"c\"\n        // ...\n        //
    500 = \"d\"\n        // 1000 = \"m\"\n        //\n        // Split the digits,
    iterate from most significant digit to least significant digit.\n        // Use
    the symbolic substraction rule for 4, 9, 40, 90, 400, 900.\n        //\n        if
    (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"number\",
    \"Number should be in [1, 1000]\");\n        }\n        string result = \"\";\n
    \       var digits = new List<int>();\n        while (number > 0) {\n            digits.Add((int)(number
    % 10));\n            number /= 10;\n        }\n        digits.Reverse();\n        string[]
    symbols = new string[] {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\",
    \"viii\", \"ix\"};\n        string[] tens = new string[] {\"\", \"x\", \"xx\",
    \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        string[]
    hundreds = new string[] {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\",
    \"dcc\", \"dccc\", \"cm\"};\n        string[] thousands = new string[] {\"\",
    \"m\", \"mm\", \"mmm\"};\n        result += thousands[digits[0]];\n        result
    += hundreds[digits[1]];\n        result += tens[digits[2]];\n        result +=
    symbols[digits[3]];\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IntToMiniRoman
    (System.Int64 number) [0x001b5] in <96a39fac769d41dc878509cda8fc7e46>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <96a39fac769d41dc878509cda8fc7e46>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IntToMiniRoman
    (System.Int64 number) [0x001b5] in <96a39fac769d41dc878509cda8fc7e46>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <96a39fac769d41dc878509cda8fc7e46>:0
    \n"
  stdout: ''
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00009] in <f736851a565b438db40f3437b882aa1b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00009] in <f736851a565b438db40f3437b882aa1b>:0
    \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder result = new StringBuilder();\n        const string romans
    = \"ivxlcdm\";\n        for (int i = 0; i < (romans.Length / 2) + 1; i++) {\n
    \           int low = romans[i * 2 + 0] - 'i';\n            int middle = romans[i
    * 2 + 1] - 'i';\n            int high = romans[i * 2 + 2] - 'i';\n            if
    (number >= high) {\n                number -= high;\n                result.Append((char)romans[i
    * 2 + 2]);\n            }\n            if (number >= middle) {\n                number
    -= middle;\n                result.Append((char)romans[i * 2 + 1]);\n            }\n
    \           while (number >= low) {\n                number -= low;\n                result.Append((char)romans[i
    * 2 + 0]);\n            }\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977243
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00009] in <f736851a565b438db40f3437b882aa1b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00009] in <f736851a565b438db40f3437b882aa1b>:0
    \n"
  stdout: ''
  timestamp: 1659977233
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var romanNumber = new StringBuilder();\n        var charCount = new int[7];\n
    \       long n = number;\n        int i = 6;\n        while (n > 0) {\n            charCount[i]
    = (int)(n % 10);\n            n /= 10;\n            i--;\n        }\n        for
    (i = 6; i >= 0; i--) {\n            if (charCount[i] > 0) {\n                var
    digit = digitToString(charCount[i], i);\n                romanNumber.Append(digit);\n
    \           }\n        }\n        return romanNumber.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpla25t2d4.cs(31,29): error CS0103: The name ''digitToString'' does not
    exist in the current context

    '
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       long[] values = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1
    };\n        string[] numerals = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\",
    \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        StringBuilder result
    = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n            if
    (number - values[i] >= 0) {\n                number -= values[i];\n                result.Append(numerals[i]);\n
    \           } else {\n                i++;\n            }\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var symbols = new[] {\n            (1, \"i\"),\n            (4, \"iv\"),\n
    \           (5, \"v\"),\n            (9, \"ix\"),\n            (10, \"x\"),\n
    \           (40, \"xl\"),\n            (50, \"l\"),\n            (90, \"xc\"),\n
    \           (100, \"c\"),\n            (400, \"cd\"),\n            (500, \"d\"),\n
    \           (900, \"cm\"),\n            (1000, \"m\")\n        };\n        var
    sb = new StringBuilder();\n        for (int i = symbols.Length - 1; i >= 0; i--)
    {\n            var (value, symbol) = symbols[i];\n            while (number >=
    value) {\n                sb.Append(symbol);\n                number -= value;\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return 0.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <edff463db0534a6e9b6505ca1cbf2838>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <edff463db0534a6e9b6505ca1cbf2838>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db0372736b0e41e8ac234aab01091c04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       Dictionary<int, string> digits = new Dictionary<int, string>{\n            {1000,
    \"m\"},\n            {900, \"cm\"},\n            {500, \"d\"},\n            {400,
    \"cd\"},\n            {100, \"c\"},\n            {90, \"xc\"},\n            {50,
    \"l\"},\n            {40, \"xl\"},\n            {10, \"x\"},\n            {9,
    \"ix\"},\n            {5, \"v\"},\n            {4, \"iv\"},\n            {1, \"i\"}\n
    \       };\n        StringBuilder sb = new StringBuilder();\n        foreach (var
    key in digits.Keys) {\n            while (number >= key) {\n                sb.Append(digits[key]);\n
    \               number -= key;\n            }\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var romanNumerals = new Dictionary<long, string>();\n        romanNumerals.Add(1,
    \"i\");\n        romanNumerals.Add(4, \"iv\");\n        romanNumerals.Add(5, \"v\");\n
    \       romanNumerals.Add(9, \"ix\");\n        romanNumerals.Add(10, \"x\");\n
    \       romanNumerals.Add(40, \"xl\");\n        romanNumerals.Add(50, \"l\");\n
    \       romanNumerals.Add(90, \"xc\");\n        romanNumerals.Add(100, \"c\");\n
    \       romanNumerals.Add(400, \"cd\");\n        romanNumerals.Add(500, \"d\");\n
    \       romanNumerals.Add(900, \"cm\");\n        romanNumerals.Add(1000, \"m\");\n
    \       var result = new StringBuilder();\n        while (number > 0) {\n            foreach
    (var entry in romanNumerals.OrderByDescending(entry => entry.Key)) {\n                if
    (number >= entry.Key) {\n                    result.Append(entry.Value);\n                    number
    -= entry.Key;\n                    break;\n                }\n            }\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder roman = new StringBuilder();\n        for (int i = 0; i
    < number / 1000; i++)\n            roman.Append(\"m\");\n        number %= 1000;\n
    \       if (number >= 900) {\n            roman.Append(\"cm\");\n            number
    -= 900;\n        }\n        if (number >= 500) {\n            roman.Append(\"d\");\n
    \           number -= 500;\n        }\n        if (number >= 400) {\n            roman.Append(\"cd\");\n
    \           number -= 400;\n        }\n        for (int i = 0; i < number / 100;
    i++)\n            roman.Append(\"c\");\n        number %= 100;\n        if (number
    >= 90) {\n            roman.Append(\"xc\");\n            number -= 90;\n        }\n
    \       if (number >= 50) {\n            roman.Append(\"l\");\n            number
    -= 50;\n        }\n        if (number >= 40) {\n            roman.Append(\"xl\");\n
    \           number -= 40;\n        }\n        for (int i = 0; i < number / 10;
    i++)\n            roman.Append(\"x\");\n        number %= 10;\n        if (number
    >= 9) {\n            roman.Append(\"ix\");\n            number -= 9;\n        }\n
    \       if (number >= 5) {\n            roman.Append(\"v\");\n            number
    -= 5;\n        }\n        if (number >= 4) {\n            roman.Append(\"iv\");\n
    \           number -= 4;\n        }\n        for (int i = 0; i < number; i++)\n
    \           roman.Append(\"i\");\n        return roman.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Fill in your answer.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b0f2b6f3bf04456a99431b0adacb91c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b0f2b6f3bf04456a99431b0adacb91c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var romans = new[] { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\",
    \"vii\", \"viii\", \"ix\" };\n        var result = new List<string>();\n        var
    digits = number.ToString().Select(a => int.Parse(a.ToString())).ToArray();\n        for
    (int i = 0; i < digits.Length; i++) {\n            var digit = digits[i];\n            var
    roman = \"\";\n            if (digit == 4) {\n                roman = \"iv\";\n
    \           } else if (digit == 9) {\n                roman = \"ix\";\n            }
    else {\n                roman = romans[digit];\n            }\n            for
    (int j = 0; j < digits.Length - i - 1; j++) {\n                roman = roman.Replace(\"v\",
    \"v\").Replace(\"x\", \"x\").Replace(\"i\", \"i\");\n            }\n            result.Add(roman);\n
    \       }\n        return string.Join(\"\", result.ToArray()).ToLower();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58d508018bda4d11bcd343b537785532>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58d508018bda4d11bcd343b537785532>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string miniRoman = \"\";\n        // Implement your solution here\n        return
    miniRoman;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <027497ae3f384dad8c400c026fab7327>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <027497ae3f384dad8c400c026fab7327>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string output = \"\";\n        if (number >= 1000) {\n            output
    += \"m\";\n            number -= 1000;\n        }\n        if (number >= 900)
    {\n            output += \"cm\";\n            number -= 900;\n        }\n        if
    (number >= 500) {\n            output += \"d\";\n            number -= 500;\n
    \       }\n        if (number >= 400) {\n            output += \"cd\";\n            number
    -= 400;\n        }\n        while (number >= 100) {\n            output += \"c\";\n
    \           number -= 100;\n        }\n        if (number >= 90) {\n            output
    += \"xc\";\n            number -= 90;\n        }\n        if (number >= 50) {\n
    \           output += \"l\";\n            number -= 50;\n        }\n        if
    (number >= 40) {\n            output += \"xl\";\n            number -= 40;\n        }\n
    \       while (number >= 10) {\n            output += \"x\";\n            number
    -= 10;\n        }\n        if (number >= 9) {\n            output += \"ix\";\n
    \           number -= 9;\n        }\n        if (number >= 5) {\n            output
    += \"v\";\n            number -= 5;\n        }\n        if (number >= 4) {\n            output
    += \"iv\";\n            number -= 4;\n        }\n        while (number >= 1) {\n
    \           output += \"i\";\n            number -= 1;\n        }\n        return
    output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       var ret = \"\";\n        while (number > 0) {\n            if (number
    >= 1000) {\n                ret += \"m\";\n                number -= 1000;\n            }
    else if (number >= 900) {\n                ret += \"cm\";\n                number
    -= 900;\n            } else if (number >= 500) {\n                ret += \"d\";\n
    \               number -= 500;\n            } else if (number >= 400) {\n                ret
    += \"cd\";\n                number -= 400;\n            } else if (number >= 100)
    {\n                ret += \"c\";\n                number -= 100;\n            }
    else if (number >= 90) {\n                ret += \"xc\";\n                number
    -= 90;\n            } else if (number >= 50) {\n                ret += \"l\";\n
    \               number -= 50;\n            } else if (number >= 40) {\n                ret
    += \"xl\";\n                number -= 40;\n            } else if (number >= 10)
    {\n                ret += \"x\";\n                number -= 10;\n            }
    else if (number >= 9) {\n                ret += \"ix\";\n                number
    -= 9;\n            } else if (number >= 5) {\n                ret += \"v\";\n
    \               number -= 5;\n            } else if (number >= 4) {\n                ret
    += \"iv\";\n                number -= 4;\n            } else if (number >= 1)
    {\n                ret += \"i\";\n                number -= 1;\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[] numerals = new string[] {\"m\", \"cm\", \"d\", \"cd\", \"c\",
    \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        int[] values
    = new int[] {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        string
    ret = \"\";\n        for (int i = 0; i < values.Length; i++) {\n            while
    (number >= values[i]) {\n                ret += numerals[i];\n                number
    -= values[i];\n            }\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       StringBuilder builder = new StringBuilder();\n        while (number >=
    1000) {\n            builder.Append(\"m\");\n            number -= 1000;\n        }\n
    \       if (number >= 900) {\n            builder.Append(\"cm\");\n            number
    -= 900;\n        }\n        if (number >= 500) {\n            builder.Append(\"d\");\n
    \           number -= 500;\n        }\n        if (number >= 400) {\n            builder.Append(\"cd\");\n
    \           number -= 400;\n        }\n        while (number >= 100) {\n            builder.Append(\"c\");\n
    \           number -= 100;\n        }\n        if (number >= 90) {\n            builder.Append(\"xc\");\n
    \           number -= 90;\n        }\n        if (number >= 50) {\n            builder.Append(\"l\");\n
    \           number -= 50;\n        }\n        if (number >= 40) {\n            builder.Append(\"xl\");\n
    \           number -= 40;\n        }\n        while (number >= 10) {\n            builder.Append(\"x\");\n
    \           number -= 10;\n        }\n        if (number >= 9) {\n            builder.Append(\"ix\");\n
    \           number -= 9;\n        }\n        if (number >= 5) {\n            builder.Append(\"v\");\n
    \           number -= 5;\n        }\n        if (number >= 4) {\n            builder.Append(\"iv\");\n
    \           number -= 4;\n        }\n        while (number >= 1) {\n            builder.Append(\"i\");\n
    \           number -= 1;\n        }\n        return builder.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       string[] ones = { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\",
    \"vii\", \"viii\", \"ix\" };\n        string[] tens = { \"\", \"x\", \"xx\", \"xxx\",
    \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\" };\n        string[] hundreds
    = { \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"
    };\n        string[] thousands = { \"\", \"m\", \"mm\", \"mmm\" };\n        string
    ones_place = ones[number % 10];\n        string tens_place = tens[(number / 10)
    % 10];\n        string hundreds_place = hundreds[(number / 100) % 10];\n        string
    thousands_place = thousands[(number / 1000) % 10];\n        return thousands_place
    + hundreds_place + tens_place + ones_place;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       // Your code goes here...\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n
    \   Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n
    \   Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n
    \   Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n
    \   Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n
    \   Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n
    \   Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <91e306673b6d4e7680d3c217f2472761>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <91e306673b6d4e7680d3c217f2472761>:0 \n"
  stdout: ''
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer, obtain its roman numeral equivalent
    as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num
    <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n
    \   // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n
    \   // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n
    \   Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n
    \   Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n
    \   Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n
    \   Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n
    \   Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <17d5d35dc1ea4cf5a5055eaf1b681455>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <17d5d35dc1ea4cf5a5055eaf1b681455>:0 \n"
  stdout: ''
  timestamp: 1659977233
