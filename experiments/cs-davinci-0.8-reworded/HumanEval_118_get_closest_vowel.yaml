name: HumanEval_118_get_closest_vowel
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> GetClosestVowel((\"\
  FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"quick\"))\n    // (\"\"\
  )\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n    public static string\
  \ GetClosestVowel(string word) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
  yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
  u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
  most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
  i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  Above\")).Equals((\"o\")));\n    }\n\n}\n"
completions: ["        string result = \"\";\n        int k = 0;\n        for (int\
    \ i = 0; i < word.Length; i++) {\n            if (word[i] == 'a' || word[i] ==\
    \ 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n             \
    \   if (i > 0 && i < word.Length - 1) {\n                    if (word[i - 1] !=\
    \ 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i\
    \ - 1] != 'u' && word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i'\
    \ && word[i + 1] != 'o' && word[i + 1] != 'u') {\n                        if (i\
    \ > k) {\n                            k = i;\n                            result\
    \ = word[i].ToString();\n                        }\n                    }\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ for (int i = word.Length - 1; i >= 0; i--) {\n            char c = word[i];\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                char cNext = word[i - 1];\n                if (cNext != 'a' &&\
    \ cNext != 'e' && cNext != 'i' && cNext != 'o' && cNext != 'u') {\n          \
    \          return c.ToString();\n                }\n            }\n        }\n\
    \        return \"\";", "        // TODO: Implement solution\n        string closestVowel\
    \ = \"\";\n        int index = 0;\n        int wordLength = word.Length;\n   \
    \     int vowelLength = 0;\n        while (wordLength > index) {\n           \
    \ if (word[index] == 'a' || word[index] == 'e' || word[index] == 'i' || word[index]\
    \ == 'o' || word[index] == 'u') {\n                if (vowelLength != 0) {\n \
    \                   if (index - vowelLength > 1) {\n                        return\
    \ closestVowel;\n                    }\n                }\n                closestVowel\
    \ = word[index].ToString();\n                vowelLength = index;\n          \
    \  }\n            index++;\n        }\n        return \"\";", "        string\
    \ vowels = \"aeiou\";\n        bool vowelToTheRight = false;\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            string letter = word[i].ToString();\n\
    \            if (vowels.Contains(letter)) {\n                if (vowelToTheRight)\
    \ return letter;\n            } else {\n                vowelToTheRight = true;\n\
    \            }\n        }\n        return \"\";", "        // Assume word contains\
    \ English letters only.\n        if (string.IsNullOrEmpty(word)) {\n         \
    \   return \"\";\n        }\n        else if (word.Length == 1) {\n          \
    \  return \"\";\n        }\n        else if (word.Length == 2) {\n           \
    \ return \"\";\n        }\n        else {\n            string[] vowels = new string[]\
    \ { \"a\", \"e\", \"i\", \"o\", \"u\" };\n            string[] consonants = new\
    \ string[] { \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\" };\n            string[] consonants2 = new string[] { \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n            string[] vowels2\
    \ = new string[] { \"a\", \"e\", \"i\", \"o\", \"u\" };\n            string lastChar\
    \ = word.Substring(word.Length - 1);\n            if (vowels.Contains(lastChar))\
    \ {\n                return \"\";\n            }\n            int start = 0;\n\
    \            for (int i = 0; i < word.Length; i++) {\n                if (vowels.Contains(word[i].ToString().ToLower()))\
    \ {\n                    start = i;\n                    break;\n            \
    \    }\n            }\n            int end = word.Length - 1;\n            for\
    \ (int i = word.Length - 1; i >= 0; i--) {\n                if (vowels.Contains(word[i].ToString().ToLower()))\
    \ {\n                    end = i;\n                    break;\n              \
    \  }\n            }\n            int counter = 0;\n            string result =\
    \ \"\";\n            if (start == end) {\n                return \"\";\n     \
    \       }\n            else {\n                for (int i = start; i < end; i++)\
    \ {\n                    if", "        string[] vowels = {\"a\", \"e\", \"i\"\
    , \"o\", \"u\"};\n        for (int i = word.Length - 1; i >= 0; i--) {\n     \
    \       if (vowels.Contains(word[i].ToString().ToLower())) {\n               \
    \ if (i == word.Length - 1)\n                    return \"\";\n              \
    \  if (vowels.Contains(word[i + 1].ToString().ToLower()))\n                  \
    \  continue;\n                return word[i].ToString();\n            }\n    \
    \    }\n        return \"\";", "        string vowels = \"aeiouAEIOU\";\n    \
    \    string closestVowel = \"\";\n        int closestIndex = -1;\n        for\
    \ (int i = 0; i < word.Length; i++) {\n            char currentChar = word[i];\n\
    \            if (i > 0 && vowels.Contains(currentChar)) {\n                char\
    \ lastChar = word[i - 1];\n                if (!vowels.Contains(lastChar)) {\n\
    \                    if (closestIndex == -1 || closestIndex < i) {\n         \
    \               closestIndex = i;\n                        closestVowel = word[i].ToString();\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ closestVowel;", "        string vowels = \"aeiou\";\n        if (word.Length\
    \ > 1) {\n            for (int i = 1; i < word.Length - 1; i++) {\n          \
    \      if (vowels.Contains(word[i])) {\n                    if (!vowels.Contains(word[i-1])\
    \ && !vowels.Contains(word[i+1])) {\n                        return word[i].ToString();\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ \"\";", "        string closestVowel = \"\";\n        int distance = 0;\n  \
    \      for (int i = 0; i < word.Length; i++) {\n            if (\"aeiouAEIOU\"\
    .Contains(word[i])) {\n                for (int j = i; j >= 0; j--) {\n      \
    \              if (!\"aeiouAEIOU\".Contains(word[j])) {\n                    \
    \    if (distance == 0 || i - j < distance) {\n                            distance\
    \ = i - j;\n                            closestVowel = word[i].ToString();\n \
    \                       }\n                        break;\n                  \
    \  }\n                }\n            }\n        }\n        return closestVowel;",
  '        throw new NotImplementedException();', "        // your code here\n   \
    \     return \"\";", '        return "";', "        var o = (int)word[0];\n  \
    \      for (int i = word.Length - 1; i >= 0; i--) {\n            if (IsVowel(word[i]))\
    \ {\n                if (IsConsonant(word[i - 1])) {\n                    return\
    \ word[i].ToString();\n                }\n            }\n        }\n        return\
    \ \"\";", "        int min_distance = int.MaxValue;\n        char min_vowel =\
    \ ' ';\n        for (int i = 0; i < word.Length; i++) {\n            if (IsVowel(word[i]))\
    \ {\n                int j = i - 1;\n                while (j >= 0 && !IsVowel(word[j]))\
    \ {\n                    j--;\n                }\n                if (j >= 0)\
    \ {\n                    int k = i + 1;\n                    while (k < word.Length\
    \ && !IsVowel(word[k])) {\n                        k++;\n                    }\n\
    \                    if (k < word.Length) {\n                        int distance\
    \ = k - j;\n                        if (distance < min_distance) {\n         \
    \                   min_distance = distance;\n                            min_vowel\
    \ = word[i];\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        return min_vowel != ' ' ? min_vowel.ToString()\
    \ : \"\";", "        // TODO: write your code here.\n        return word;", " \
    \       var vowels = new List<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ foundVowels = new List<char>();\n        for (int i = word.Length - 1; i >=\
    \ 0; i--) {\n            var current = word[i];\n            if (vowels.Contains(current))\
    \ {\n                foundVowels.Add(current);\n            } else {\n       \
    \         if (foundVowels.Count != 0) {\n                    return foundVowels.Last().ToString();\n\
    \                }\n            }\n        }\n        return string.Empty;", " \
    \       var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        int\
    \ c = word.Length - 1;\n        while (c >= 0) {\n            if (vowels.Contains(word[c]))\
    \ {\n                if (c > 0 && !vowels.Contains(word[c - 1])) {\n         \
    \           return word[c].ToString();\n                }\n                else\
    \ if (c == 0) {\n                    return word[c].ToString();\n            \
    \    }\n            }\n            c--;\n        }\n        return \"\";", " \
    \       string vowel = \"aeiouAEIOU\";\n        string consonant = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n        string a = \"\";\n        string b = \"\";\n        string c = \"\"\
    ;\n        int index = 0;\n        int j = 0;\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (consonant.Contains(word[i])) {\n      \
    \          b = word[i].ToString();\n                if (a == \"\" && b != \"\"\
    ) {\n                    a = b;\n                    b = \"\";\n             \
    \   }\n                else if (a != \"\" && b != \"\") {\n                  \
    \  c = b;\n                    if (consonant.Contains(c) && a != c) {\n      \
    \                  for (j = i + 1; j < word.Length; j++) {\n                 \
    \           if (vowel.Contains(word[j])) {\n                                index\
    \ = j;\n                                break;\n                            }\n\
    \                        }\n                        return word[index].ToString();\n\
    \                    }\n                    a = b;\n                    b = \"\
    \";\n                }\n            }\n        }\n        return \"\";", '        return
    "";', "        // Your code here\n        //return \"\";\n\t\t\n\t\tstring vowels\
    \ = \"aeiouAEIOU\";\n\t\tfor (int i = 0; i < word.Length - 1; i++) {\n\t\t\tif\
    \ (vowels.Contains(word[i])) continue;\n\t\t\tif (vowels.Contains(word[i + 1]))\
    \ {\n\t\t\t\treturn word[i + 1].ToString();\n\t\t\t}\n\t\t}\n\t\treturn \"\";",
  "        // TODO: implement your solution here\n        string vowels = \"aeiou\"\
    ;\n        int len = word.Length;\n        int bestIndex = -1;\n        int bestDistance\
    \ = int.MaxValue;\n        for (int i = 0; i < len; i++) {\n            if (vowels.Contains(word[i]))\
    \ {\n                bool isValid = true;\n                if (i > 0) {\n    \
    \                isValid = !vowels.Contains(word[i - 1]);\n                }\n\
    \                if (i < len - 1) {\n                    isValid = isValid &&\
    \ !vowels.Contains(word[i + 1]);\n                }\n                if (isValid)\
    \ {\n                    int distance = i;\n                    if (distance <\
    \ bestDistance) {\n                        bestDistance = distance;\n        \
    \                bestIndex = i;\n                    }\n                }\n  \
    \          }\n        }\n        if (bestIndex >= 0) {\n            return word[bestIndex].ToString();\n\
    \        }\n        return \"\";", "        int n = word.Length;\n        int[]\
    \ A = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (word[i - 1] == 'a' || word[i - 1] == 'e' || word[i - 1] == 'i' || word[i -\
    \ 1] == 'o' || word[i - 1] == 'u') {\n                A[i] = A[i - 1] + 1;\n \
    \           } else {\n                A[i] = A[i - 1];\n            }\n      \
    \  }\n        int best = int.MaxValue;\n        int besti = -1;\n        for (int\
    \ i = 1; i <= n; i++) {\n            if (word[i - 1] == 'a' || word[i - 1] ==\
    \ 'e' || word[i - 1] == 'i' || word[i - 1] == 'o' || word[i - 1] == 'u') {\n \
    \               continue;\n            }\n            if (A[i] > 0 && A[n] - A[i]\
    \ > 0) {\n                if (Math.Min(A[i], A[n] - A[i]) < best) {\n        \
    \            best = Math.Min(A[i], A[n] - A[i]);\n                    besti =\
    \ i;\n                }\n            }\n        }\n        if (besti == -1) {\n\
    \            return \"\";\n        }\n        if (A[besti] > A[n] - A[besti])\
    \ {\n            return word[besti - 1].ToString();\n        } else {\n      \
    \      return word[besti].ToString();\n        }", '        return null;', '        return
    "";', "        int closestI = word.Length;\n        int closestD = word.Length;\n\
    \        char closestC = '\\0';\n        bool isVowel(char c) {\n            return\
    \ \"aeiouAEIOU\".Contains(c);\n        }\n        bool isConsonant(char c) {\n\
    \            return \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".Contains(c);\n\
    \        }\n        bool isAlphabet(char c) {\n            return isVowel(c) ||\
    \ isConsonant(c);\n        }\n        bool isOnlyVowels(string s) {\n        \
    \    return s.Aggregate(true, (acc, e) => acc && isVowel(e));\n        }\n   \
    \     bool isOnlyConsonants(string s) {\n            return s.Aggregate(true,\
    \ (acc, e) => acc && isConsonant(e));\n        }\n        bool isVowelConsonantPair(string\
    \ s) {\n            return s.Length == 2 && isVowel(s[0]) && isConsonant(s[1]);\n\
    \        }\n        bool isConsonantVowelPair(string s) {\n            return\
    \ s.Length == 2 && isConsonant(s[0]) && isVowel(s[1]);\n        }\n        for\
    \ (int i = 0; i < word.Length; i++) {\n            if (isAlphabet(word[i])) {\n\
    \                int l = i;\n                int r = word.Length - i - 1;\n  \
    \              if (isOnlyVowels(word.Substring(0, l))) {\n                   \
    \ if (isOnlyConsonants(word.Substring(i + 1, r))) {\n                        if\
    \ (isVowelConsonantPair(word.Substring(i, 2))) {\n                           \
    \ return word[i].ToString();\n                        }\n                    \
    \    if (r < closestD) {\n                            closestI = i;\n        \
    \                    closestD = r;\n                            closestC = word[i];\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return closestC.", "        bool lastVowel = false;\n\
    \        string closestVowel = \"\";\n        bool closestFound = false;\n   \
    \     int closestIndex = 0;\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            char letter = word[i];\n            if (letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u') {\n             \
    \   if (lastVowel) {\n                    return \"\";\n                }\n  \
    \              lastVowel = true;\n                if (!closestFound) {\n     \
    \               closestFound = true;\n                    closestVowel = \"\"\
    \ + letter;\n                    closestIndex = i;\n                }\n      \
    \      } else {\n                lastVowel = false;\n            }\n        }\n\
    \        return closestVowel;", "        string vowel = \"aeiouAEIOU\";\n    \
    \    string result = \"\";\n        int index = 0;\n        bool prevConsonant\
    \ = true;\n        while (index < word.Length) {\n            if (vowel.Contains(word[index]))\
    \ {\n                if (!prevConsonant) {\n                    break;\n     \
    \           }\n            } else {\n                prevConsonant = true;\n \
    \           }\n            index++;\n        }\n        if (index < word.Length)\
    \ {\n            prevConsonant = false;\n            result = word[index].ToString();\n\
    \            index++;\n            while (index < word.Length) {\n           \
    \     if (vowel.Contains(word[index])) {\n                    if (prevConsonant)\
    \ {\n                        break;\n                    }\n                }\
    \ else {\n                    prevConsonant = true;\n                }\n     \
    \           index++;\n            }\n            if (index < word.Length) {\n\
    \                result = word[index].ToString();\n            } else {\n    \
    \            result = \"\";\n            }\n        }\n        return result;",
  '        return "";', "        // TODO: Write code here\n        return null;",
  "        // Your code comes here\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n\
    \        char[] letters = word.ToCharArray();\n        bool flag = false;\n  \
    \      for (int i = 0; i < letters.Length - 1; i++) {\n            foreach (char\
    \ vowel in vowels) {\n                if (letters[i] == vowel) {\n           \
    \         flag = true;\n                }\n            }\n            if (flag\
    \ == true) {\n                int j = i + 1;\n                while (j < letters.Length)\
    \ {\n                    foreach (char vowel in vowels) {\n                  \
    \      if (letters[j] == vowel) {\n                            return letters[j].ToString();\n\
    \                        }\n                    }\n                    j++;\n\
    \                }\n            }\n            flag = false;\n        }\n    \
    \    return \"\";", "        string vowels = \"aeiouAEIOU\";\n        int last_consonant\
    \ = word.Length;\n        for (int i = word.Length - 1; i >= 0; i--) {\n     \
    \       if (vowels.Contains(word[i])) {\n                last_consonant = i;\n\
    \                break;\n            }\n        }\n        if (last_consonant\
    \ == word.Length) {\n            return \"\";\n        }\n        int min_d =\
    \ word.Length;\n        int closest_vowel = word.Length;\n        for (int i =\
    \ last_consonant - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                if (last_consonant - i < min_d) {\n                    min_d\
    \ = last_consonant - i;\n                    closest_vowel = i;\n            \
    \    }\n            }\n        }\n        if (closest_vowel == word.Length) {\n\
    \            return \"\";\n        }\n        return word[closest_vowel].ToString();",
  "        if (word.Length < 3) return \"\";\n        var vowels = new string[] {\
    \ \"a\", \"e\", \"i\", \"o\", \"u\" };\n        var lastConsonant = word.LastIndexOf(word.Last(c\
    \ => !vowels.Contains(c.ToString().ToLower())));\n        var lastVowel = word.LastIndexOf(word.Last(c\
    \ => vowels.Contains(c.ToString().ToLower())));\n        if (lastConsonant > lastVowel\
    \ && word.Substring(lastVowel, word.Length - lastVowel).Count(c => vowels.Contains(c.ToString().ToLower()))\
    \ == 1) {\n            var firstConsonant = word.Substring(0, lastVowel).LastIndexOf(word.Substring(0,\
    \ lastVowel).Last(c => !vowels.Contains(c.ToString().ToLower())));\n         \
    \   if (firstConsonant < lastVowel) {\n                return word.Substring(firstConsonant\
    \ + 1, lastVowel - firstConsonant - 1);\n            }\n        }\n        return\
    \ \"\";", "        if (word.Length < 3) {\n            return \"\";\n        }\n\
    \        string vowels = \"aeiouAEIOU\";\n        int latestVowelIndex = word.Length\
    \ - 2;\n        for (int i = word.Length - 2; i >= 0; i--) {\n            if (vowels.Contains(word[i].ToString()))\
    \ {\n                latestVowelIndex = i;\n                break;\n         \
    \   }\n        }\n        if (latestVowelIndex == word.Length - 2) {\n       \
    \     return \"\";\n        }\n        for (int i = latestVowelIndex; i >= 0;\
    \ i--) {\n            if (!vowels.Contains(word[i].ToString())) {\n          \
    \      return word[latestVowelIndex].ToString();\n            }\n        }\n \
    \       return \"\";", "        word = word.ToLower();\n        if (word.Length\
    \ <= 2) {\n            return \"\";\n        }\n        string result = \"\";\n\
    \        bool isLastCharVowel = false;\n        bool isNextCharVowel = false;\n\
    \        bool isLastCharConsonant = false;\n        bool isNextCharConsonant =\
    \ false;\n        for (int i = word.Length - 1; i >= 1; i--) {\n            isLastCharVowel\
    \ = isVowel(word[i - 1]);\n            isNextCharVowel = isVowel(word[i]);\n \
    \           isLastCharConsonant = isConsonant(word[i - 1]);\n            isNextCharConsonant\
    \ = isConsonant(word[i]);\n            if (isLastCharConsonant && isNextCharVowel\
    \ && isNextCharConsonant) {\n                result = word[i].ToString();\n  \
    \              break;\n            }\n        }\n        return result;", "  \
    \      // Fill in your code here\n        string vowels = \"aeiou\";\n       \
    \ string closestVowel = \"\";\n        int distance = 0;\n        for (int i =\
    \ word.Length - 1; i >= 0; i--) {\n            string letter = word[i].ToString();\n\
    \            if (vowels.Contains(letter)) {\n                int j = i - 1;\n\
    \                while (j >= 0) {\n                    if (vowels.Contains(word[j].ToString()))\
    \ {\n                        j--;\n                    } else {\n            \
    \            j--;\n                        break;\n                    }\n   \
    \             }\n                if (j != -1) {\n                    int newDistance\
    \ = i - j;\n                    if (distance == 0 || newDistance < distance) {\n\
    \                        distance = newDistance;\n                        closestVowel\
    \ = letter;\n                    }\n                }\n            }\n       \
    \ }\n        return closestVowel;", '        return "";', "        // write your\
    \ code here\n        return \"\";", "        var vowelMap = new List<char>() {\
    \ 'a', 'e', 'i', 'o', 'u' };\n        string closest = \"\";\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            if (vowelMap.Contains(word[i]))\
    \ {\n                if (i == word.Length - 1 || i == 0) {\n                 \
    \   closest = \"\";\n                    break;\n                }\n         \
    \       if (vowelMap.Contains(word[i - 1]) || vowelMap.Contains(word[i + 1]))\
    \ {\n                    closest = \"\";\n                    continue;\n    \
    \            }\n                closest = word[i].ToString();\n              \
    \  break;\n            }\n        }\n        return closest;", "        // TODO:\
    \ write your code here\n        return \"\";", "        if (word.Length < 3) return\
    \ \"\";\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n   \
    \     char firstVowel = word[0];\n        int closestVowel = -1;\n        int\
    \ closestVowelIndex = -1;\n        for (int i = word.Length - 1; i >= 1; i--)\
    \ {\n            char c = word[i];\n            bool isVowel = false;\n      \
    \      for (int j = 0; j < vowels.Length; j++) {\n                if (c == vowels[j])\
    \ {\n                    isVowel = true;\n                    break;\n       \
    \         }\n            }\n            if (isVowel) {\n                closestVowel\
    \ = i;\n                closestVowelIndex = j;\n                break;\n     \
    \       }\n        }\n        if (closestVowel == -1) return \"\";\n        char\
    \ vowel = vowels[closestVowelIndex];\n        if (word[0] == 'f' && vowel == 'u')\
    \ {\n            return \"U\";\n        }\n        return vowel.ToString();",
  "        char? currentVowel = null;\n        int currentVowelIndex = -1;\n     \
    \   for (int i = word.Length - 1; i >= 0; i--) {\n            char currentChar\
    \ = word[i];\n            if (IsVowel(currentChar)) {\n                currentVowel\
    \ = currentChar;\n                currentVowelIndex = i;\n            } else {\n\
    \                if (currentVowel.HasValue) {\n                    return currentVowel.Value.ToString();\n\
    \                }\n            }\n        }\n        return \"\";", "       \
    \ string vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 1; i >=\
    \ 0; i--) {\n            if (vowels.Contains(word[i])) {\n                if (i\
    \ - 1 >= 0 && !vowels.Contains(word[i - 1])) {\n                    return word[i].ToString();\n\
    \                }\n                if (i + 1 < word.Length && !vowels.Contains(word[i\
    \ + 1])) {\n                    return word[i].ToString();\n                }\n\
    \            }\n        }\n        return \"\";", "        int n = word.Length;\n\
    \        if (n <= 2) {\n            return \"\";\n        }\n        int c = n\
    \ - 2;\n        while (c >= 0) {\n            char ch = word[c];\n           \
    \ if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n     \
    \           return new string(ch, 1);\n            }\n            c--;\n     \
    \   }\n        return \"\";", "        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            var c = word[i];\n            if (isConsonant(c)) {\n       \
    \         var vowels = getVowels(word, i);\n                if (vowels.Count >\
    \ 0) {\n                    var index = vowelIndex(word, vowels);\n          \
    \          return new string(new char[] { word[index] });\n                }\n\
    \            }\n        }\n        return \"\";", "        // Your Code here\n\
    \        return \"\";", "        string vowels = \"aeiou\";\n        char last\
    \ = ' ';\n        for (int i = word.Length - 1; i >= 0; i--) {\n            char\
    \ c = word[i];\n            if (vowels.Contains(c)) {\n                if (last\
    \ != ' ') {\n                    return c.ToString();\n                }\n   \
    \         } else {\n                last = c;\n            }\n        }\n    \
    \    return \"\";", "        // FILL CODE HERE\n        if (word.Length <= 2)\n\
    \            return \"\";\n        List<char> vowels = new List<char>() { 'a',\
    \ 'e', 'i', 'o', 'u' };\n        List<char> consontants = new List<char>() { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        List<int> c = new List<int>();\n        for (int\
    \ i = word.Length - 1; i >= 0; i--)\n        {\n            if (consontants.Contains(word[i]))\n\
    \            {\n                c.Add(i);\n            }\n        }\n        if\
    \ (c.Count <= 1)\n            return \"\";\n        int p1 = c[0];\n        int\
    \ p2 = c[1];\n        char result = word[p1 - 1];\n        for (int i = p1 - 1;\
    \ i > p2; i--)\n        {\n            if (vowels.Contains(word[i]))\n       \
    \     {\n                result = word[i];\n                break;\n         \
    \   }\n        }\n        return result.ToString();", "        // Fill your code\
    \ here\n        int start = -1;\n        int end = -1;\n        int startIndex\
    \ = -1;\n        int endIndex = -1;\n        for (int i = 0; i < word.Length;\
    \ i++) {\n            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' || word[i] == 'u') {\n                if (start == -1) {\n  \
    \                  start = i;\n                    startIndex = i;\n         \
    \       }\n                end = i;\n                endIndex = i;\n         \
    \   }\n        }\n        if (start == -1 || end == -1) {\n            return\
    \ \"\";\n        }\n        int length = end - start;\n        int lengthMin =\
    \ length;\n        int minIndex = startIndex;\n        for (int i = end + 1; i\
    \ < word.Length; i++) {\n            if (word[i] == 'a' || word[i] == 'e' || word[i]\
    \ == 'i' || word[i] == 'o' || word[i] == 'u') {\n                int lengthNew\
    \ = i - start;\n                if (lengthNew < lengthMin) {\n               \
    \     lengthMin = lengthNew;\n                    minIndex = startIndex;\n   \
    \             }\n                start = end;\n                startIndex = endIndex;\n\
    \                end = i;\n                endIndex = i;\n            }\n    \
    \    }\n        return word[minIndex].ToString();", '        return "";', "  \
    \      for (int i = 0; i < word.Length; i++) {\n            if (IsVowel(word[i]))\n\
    \                return word[i].ToString();\n        }\n        return \"\";",
  '        return null;', '        return GetClosestVowel2(word);', "        // TODO\n\
    \        return \"\";", '        throw new NotImplementedException();', "    \
    \    // Replace the solution with your solution\n        return \"\";", "    \
    \    // Start writing your code here.\n        var index = word.Length - 1;\n\
    \        while (index >= 0) {\n            var ch = word[index];\n           \
    \ if (isVowel(ch)) {\n                var left = index - 1;\n                var\
    \ right = index + 1;\n                if (left >= 0 && right < word.Length) {\n\
    \                    if (!isVowel(word[left]) && !isVowel(word[right])) {\n  \
    \                      return ch.ToString();\n                    }\n        \
    \        }\n            }\n            index--;\n        }\n        return \"\"\
    ;", "        bool isPreviousConsonant = false;\n        char closestVowel = '.';\n\
    \        for (int i = word.Length - 1; i >= 0; i--) {\n            if (isVowel(word[i]))\
    \ {\n                if (isPreviousConsonant) {\n                    closestVowel\
    \ = word[i];\n                    break;\n                }\n            } else\
    \ {\n                isPreviousConsonant = true;\n            }\n        }\n \
    \       return closestVowel == '.' ? \"\" : closestVowel.ToString();", '        return
    "";', "        string vowels = \"aeiou\";\n        bool foundVowel = false;\n\
    \        int i = word.Length - 1;\n        while (i >= 0) {\n            if (foundVowel\
    \ && vowels.Contains(word[i])) {\n                return word[i].ToString();\n\
    \            }\n            if (!vowels.Contains(word[i])) {\n               \
    \ foundVowel = true;\n            }\n            i--;\n        }\n        return\
    \ \"\";", "        string vowels = \"aeiou\";\n        string res = \"\";\n  \
    \      for (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                res = word[i].ToString();\n                break;\n     \
    \       }\n        }\n        return res;", "        var vowels = new List<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var index = -1;\n        for (var i =\
    \ word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n\
    \                index = i;\n                break;\n            }\n        }\n\
    \        if (index < 0) {\n            return \"\";\n        }\n        return\
    \ word[index].ToString();", '        return "";', "        var vowels = new List<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        for (int i = word.Length - 1; i >= 0;\
    \ i--) {\n            if (vowels.Contains(word[i])) {\n                return\
    \ word[i].ToString();\n            }\n        }\n        return \"\";", "    \
    \    var vowels = new[] {'a', 'e', 'i', 'o', 'u'};\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       if (i == word.Length - 1) continue;\n                if (vowels.Contains(word[i\
    \ + 1])) continue;\n                return word[i].ToString();\n            }\n\
    \        }\n        return \"\";", "        var word = String.Join(\"\", word.Select(x\
    \ => x.ToString().ToLower()));\n        var found = false;\n        var index\
    \ = word.Length - 1;\n        var closeVowel = \"\";\n        while (!found &&\
    \ index > 0) {\n            var c = word[index];\n            var before = word[index\
    \ - 1];\n            if (\"aeiou\".Contains(c)) {\n                if (!\"aeiou\"\
    .Contains(before)) {\n                    closeVowel = c.ToString();\n       \
    \             found = true;\n                }\n            }\n            index--;\n\
    \        }\n        return closeVowel;", "        var vowels = new HashSet<char>()\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var closest = '#';\n        var closestDistance\
    \ = int.MaxValue;\n        for (var i = word.Length - 1; i >= 0; i--) {\n    \
    \        if (vowels.Contains(word[i])) {\n                var closestCandidate\
    \ = word[i];\n                var distance = 0;\n                for (var j =\
    \ i - 1; j >= 0; j--) {\n                    if (vowels.Contains(word[j])) {\n\
    \                        break;\n                    }\n                    distance++;\n\
    \                }\n                if (distance < closestDistance) {\n      \
    \              closest = closestCandidate;\n                    closestDistance\
    \ = distance;\n                }\n            }\n        }\n        return closest\
    \ == '#' ? \"\" : closest.ToString();", "        // your code goes here!\n   \
    \     return word;", "        var vowels = new HashSet<char>(\"aeiouAEIOU\");\n\
    \        for (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                for (int j = i - 1; j >= 0; j--) {\n                    if\
    \ (!vowels.Contains(word[j])) {\n                        return word[i].ToString();\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ \"\";", "        var vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n    \
    \    var index = word.Length - 1;\n        while (index > 0) {\n            var\
    \ current = word[index];\n            if (vowels.Contains(current)) {\n      \
    \          var prev = word[index - 1];\n                if (!vowels.Contains(prev))\
    \ {\n                    return current.ToString();\n                }\n     \
    \       }\n            index--;\n        }\n        return \"\";", '        return
    string.Empty;', "        int c1 = -1;\n        int c2 = -1;\n        char v =\
    \ '\\0';\n        for (int i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (IsVowel(word[i])) {\n                if (c1 != -1) {\n                    v\
    \ = word[i];\n                    break;\n                }\n            } else\
    \ {\n                if (c1 == -1) {\n                    c1 = i;\n          \
    \      } else {\n                    c2 = i;\n                    break;\n   \
    \             }\n            }\n        }\n        if (c1 != -1 && c2 != -1 &&\
    \ v != '\\0') {\n            return v.ToString();\n        }\n        return \"\
    \";", "        // return \"\";\n        if (word.Length <= 2) return \"\";\n \
    \       var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        bool\
    \ prev = vowels.Contains(word[word.Length - 1]);\n        bool next = vowels.Contains(word[word.Length\
    \ - 2]);\n        if (prev && next) return \"\";\n        if (prev) return word[word.Length\
    \ - 1].ToString();\n        if (next) return word[word.Length - 2].ToString();\n\
    \        for (int i = word.Length - 3; i >= 0; i--) {\n            next = vowels.Contains(word[i]);\n\
    \            if (prev && next) return word[i + 1].ToString();\n            prev\
    \ = next;\n        }\n        return \"\";", "        string vowels = \"aeiou\"\
    ;\n        string result = \"\";\n        for (int i = 0; i < word.Length - 1;\
    \ i++) {\n            if (vowels.Contains(word[i])) {\n                continue;\n\
    \            }\n            if (vowels.Contains(word[i + 1])) {\n            \
    \    result = word[i + 1].ToString();\n                return result;\n      \
    \      }\n        }\n        return result;", '        return "";', "        List<int>\
    \ vowels = new List<int>();\n        string vowelset = \"aeiouAEIOU\";\n     \
    \   for (int i = 0; i < word.Length; i++) {\n            if (vowelset.Contains(word[i]))\
    \ {\n                vowels.Add(i);\n            }\n        }\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            if (!vowelset.Contains(word[i]))\
    \ {\n                foreach (int v in vowels) {\n                    if (v <\
    \ i) {\n                        return word[v].ToString();\n                 \
    \   }\n                }\n            }\n        }\n        return \"\";", " \
    \       // Check for null, empty string, or length one string.\n        if (word\
    \ == null || word.Length == 0 || word.Length == 1) {\n            return \"\"\
    ;\n        }\n        // Find the location of the last consonant.\n        int\
    \ lastConsonant = 0;\n        for (int i = word.Length - 1; i >= 0; i--) {\n \
    \           if (!\"AEIOUaeiou\".Contains(word[i])) {\n                lastConsonant\
    \ = i;\n                break;\n            }\n        }\n        // If there\
    \ is no last consonant, return empty string.\n        if (lastConsonant == 0)\
    \ {\n            return \"\";\n        }\n        // Find the location of the\
    \ closest vowel (to the right of the last consonant).\n        int closestVowel\
    \ = lastConsonant;\n        for (int i = lastConsonant + 1; i < word.Length; i++)\
    \ {\n            if (\"AEIOUaeiou\".Contains(word[i])) {\n                closestVowel\
    \ = i;\n                break;\n            }\n        }\n        // If there\
    \ is no vowel to the right of the last consonant, return empty string.\n     \
    \   if (closestVowel == lastConsonant) {\n            return \"\";\n        }\n\
    \        // Return the closest vowel.\n        return word[closestVowel].ToString();",
  "        // Write your implementation here\n        return string.Empty;", "   \
    \     var vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        var consonants\
    \ = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        int size = word.Length;\n\
    \        int i = size - 1;\n        while (i >= 0) {\n            char c = word[i];\n\
    \            if (vowels.Contains(c)) {\n                // got vowel\n       \
    \         int j = i - 1;\n                while (j >= 0) {\n                 \
    \   char d = word[j];\n                    if (consonants.Contains(d)) {\n   \
    \                     // got consonant\n                        return new string(new\
    \ char[] { c });\n                    }\n                    j--;\n          \
    \      }\n            }\n            i--;\n        }\n        return \"\";", " \
    \       for (int i = word.Length - 1; i >= 0; i--) {\n            char current\
    \ = word[i];\n            if (IsVowel(current)) {\n                if (i == word.Length\
    \ - 1)\n                    return \"\";\n                else if (IsConsonant(word[i\
    \ + 1]))\n                    return current.ToString();\n            }\n    \
    \    }\n        return \"\";", "        var vowels = new HashSet<char>(\"aeiou\"\
    );\n        int left = -1;\n        int right = -1;\n        int minDist = int.MaxValue;\n\
    \        var result = \"\";\n        var charArray = word.ToCharArray();\n   \
    \     Array.Reverse(charArray);\n        word = new string(charArray);\n     \
    \   for (int i = 0; i < word.Length; i++) {\n            if (vowels.Contains(word[i]))\
    \ {\n                if (right != -1) {\n                    var dist = i - right;\n\
    \                    if (dist < minDist) {\n                        minDist =\
    \ dist;\n                        result = word[i].ToString();\n              \
    \      }\n                }\n                left = i;\n            } else {\n\
    \                right = i;\n            }\n        }\n        return result;",
  "        // Since the order of the letters in the string is important, we will use\
    \ the\n        // state machine with the states of the vowels and the results\
    \ of the vowels\n        // (the closest vowel to the right).\n        // The\
    \ initial state is the empty string, and we will process the string\n        //\
    \ from right to left.\n        // If the character is a vowel, then the state\
    \ is the vowel itself.\n        // If the character is a consonant, then if the\
    \ state is a vowel, then the \n        // state is a consonant and the result\
    \ is the vowel.\n        // If the character is the first character, the state\
    \ is the empty string,\n        // the vowel.\n        // The result of the word\
    \ is the result of the last character.\n        string st = \"\";\n        string\
    \ res = \"\";\n        for (int i = word.Length - 1; i >= 0; i--) {\n        \
    \    if (IsVowel(word[i])) {\n                st = word[i].ToString();\n     \
    \       } else {\n                if (st != \"\") {\n                    st =\
    \ \"c\";\n                    res = st;\n                }\n            }\n  \
    \      }\n        return res;", "        // TODO: return the closest vowel from\
    \ the right side of the word\n        return \"\";", "        string vowels =\
    \ \"aeiou\";\n        var idx = word.Length;\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       idx = i;\n                break;\n            }\n        }\n        if\
    \ (idx == word.Length) {\n            return \"\";\n        }\n        for (int\
    \ i = idx; i >= 0; i--) {\n            if (!vowels.Contains(word[i])) {\n    \
    \            idx = i;\n                break;\n            }\n        }\n    \
    \    if (idx == 0) {\n            return \"\";\n        }\n        return word[idx\
    \ + 1].ToString();", "        string vowels = \"aeiou\";\n        int right_index\
    \ = -1;\n        int found_index = -1;\n        for (int i = word.Length - 1;\
    \ i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n              \
    \  if (right_index == -1) {\n                    found_index = i;\n          \
    \      } else {\n                    if (right_index - i > 0) {\n            \
    \            return word[i].ToString();\n                    }\n             \
    \   }\n            } else {\n                if (right_index == -1) {\n      \
    \              right_index = i;\n                }\n            }\n        }\n\
    \        if (found_index == -1) return \"\";\n        return word[found_index].ToString();",
  "        List<string> Vowels = new List<string>() { \"a\", \"e\", \"i\", \"o\",\
    \ \"u\" };\n        int distance = word.Length;\n        string result = \"\"\
    ;\n        for (int i = 0; i < word.Length; i++) {\n            if (Vowels.Contains(word[i].ToString().ToLower()))\
    \ {\n                int j = word.Length - 1;\n                while (j > i) {\n\
    \                    if (!Vowels.Contains(word[j].ToString().ToLower())) {\n \
    \                       if (distance > j - i) {\n                            distance\
    \ = j - i;\n                            result = word[i].ToString();\n       \
    \                 }\n                        break;\n                    }\n \
    \                   j--;\n                }\n            }\n        }\n      \
    \  return result;", '        return "";', "        string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        string vowels = \"aeiou\";\n        int cur = word.Length - 1;\n  \
    \      while (cur >= 0) {\n            if (consonants.Contains(word[cur])) {\n\
    \                break;\n            }\n            cur--;\n        }\n      \
    \  if (cur <= 0) {\n            return \"\";\n        }\n        char closestVowel\
    \ = 'z';\n        for (int i = cur - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                closestVowel = word[i];\n                break;\n       \
    \     }\n        }\n        if (closestVowel == 'z') {\n            return \"\"\
    ;\n        }\n        return closestVowel.ToString();", "        var vowels =\
    \ new HashSet<char>() {'a', 'e', 'i', 'o', 'u'};\n        var counter = 0;\n \
    \       var found = false;\n        var vowel = \"\";\n        var temp = \"\"\
    ;\n        var result = \"\";\n        for (var i = word.Length - 1; i >= 0; i--)\
    \ {\n            var charTemp = word[i];\n            if (vowels.Contains(charTemp))\
    \ {\n                if (found) {\n                    temp = charTemp.ToString();\n\
    \                    counter++;\n                }\n                else {\n \
    \                   found = true;\n                    vowel = charTemp.ToString();\n\
    \                    counter++;\n                }\n            }\n          \
    \  else {\n                if (found) {\n                    if (counter == 1)\
    \ {\n                        result = vowel;\n                    }\n        \
    \            else {\n                        result = temp;\n                \
    \    }\n                    break;\n                }\n            }\n       \
    \ }\n        return result;", "        if (word.Length <= 1) return \"\";\n  \
    \      int index = -1;\n        for (int i = 0; i < word.Length - 1; i++) {\n\
    \            if (IsVowel(word[i]) && !IsVowel(word[i + 1])) {\n              \
    \  index = i;\n                break;\n            }\n        }\n        if (index\
    \ == -1) return \"\";\n        int res = -1;\n        for (int i = index; i <\
    \ word.Length; i++) {\n            if (IsVowel(word[i])) {\n                res\
    \ = i;\n                break;\n            }\n        }\n        if (res == -1)\
    \ return \"\";\n        else return word[res].ToString();", "        // your code\
    \ here\n        List<char> vowels = new List<char> { 'a', 'e', 'i', 'o', 'u' };\n\
    \        List<char> consonants = new List<char> { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        int consonantIndex = -1;\n        int vowelIndex = -1;\n        int index\
    \ = 0;\n        bool found = false;\n        int x = 0;\n        foreach (char\
    \ letter in word) {\n            x++;\n            if (vowels.Contains(letter))\
    \ {\n                if (found == true) {\n                    return vowelIndex.ToString();\n\
    \                }\n                vowelIndex = index;\n            }\n     \
    \       if (consonants.Contains(letter)) {\n                consonantIndex = index;\n\
    \                found = true;\n            }\n            index++;\n        }\n\
    \        return \"\";", "        // For example, if the word is \"accelerated\"\
    , \n        // the closest vowel is \"e\" at word[4].\n        // You may assume\
    \ that the given string contains English letter only.\n\n        // TODO: Implement\
    \ this function.\n        // Please make sure to use the return value correctly.\n\
    \        int i = word.Length-1;\n        while(i>0)\n        {\n            if(isVowel(word[i])&&!isVowel(word[i-1]))\n\
    \            {\n                return word[i].ToString();\n            }\n  \
    \          i--;\n        }\n        return \"\";", "        // your code here\n\
    \        throw new NotImplementedException();", '        return null;', "    \
    \    if (string.IsNullOrEmpty(word)) return string.Empty;\n        var vowels\
    \ = new List<char> { 'a', 'e', 'i', 'o', 'u' };\n        var notVowels = new List<char>\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        var length = word.Length;\n       \
    \ char vowel = char.MinValue;\n        if (length == 1) {\n            vowel =\
    \ vowels.FirstOrDefault(x => x == word[0]);\n            return vowel == char.MinValue\
    \ ? string.Empty : vowel.ToString();\n        }\n        for (int i = length -\
    \ 1; i > 0; i--) {\n            var last = word[i];\n            var beforeLast\
    \ = word[i - 1];\n            if (vowels.Contains(last) && notVowels.Contains(beforeLast))\
    \ {\n                vowel = last;\n                break;\n            }\n  \
    \      }\n        return vowel == char.MinValue ? string.Empty : vowel.ToString();",
  "        string vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 1;\
    \ i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n              \
    \  for (int j = i - 1; j >= 0; j--) {\n                    if (!vowels.Contains(word[j]))\
    \ {\n                        return word[i].ToString();\n                    }\n\
    \                }\n            }\n        }\n        return \"\";", "       \
    \ var vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] wordArr\
    \ = word.ToCharArray();\n        int index = wordArr.Length - 1;\n        while\
    \ (index >= 0) {\n            if (vowels.Contains(wordArr[index]))\n         \
    \       break;\n            index--;\n        }\n        if (index > 0 && vowels.Contains(wordArr[index\
    \ - 1]))\n            return \"\";\n        return index >= 0 ? new string(wordArr[index],\
    \ 1) : \"\";", "        int n = word.Length;\n        int res = -1;\n        for\
    \ (int i = n - 1; i >= 0; i--) {\n            char c = word[i];\n            if\
    \ (IsVowel(c)) {\n                if (res == -1)\n                    res = i;\n\
    \                else\n                    break;\n            } else {\n    \
    \            if (res != -1)\n                    return word[res].ToString();\n\
    \            }\n        }\n        return \"\";", "        string vowels = \"\
    aeiou\";\n        char[] consonants = word.Where(c => !vowels.Contains(c)).ToArray();\n\
    \        string closest = \"\";\n        for (int i = 0; i < word.Length; i++)\
    \ {\n            if (vowels.Contains(word[i])) {\n                if (i > 0 &&\
    \ i < word.Length - 1 && consonants.Contains(word[i-1]) && consonants.Contains(word[i+1]))\
    \ {\n                    closest = word[i].ToString();\n                    break;\n\
    \                }\n            }\n        }\n        return closest;", "    \
    \    // TODO: Implement your solution here.\n        return string.Empty;", " \
    \       word = word.ToLower();\n        HashSet<char> vowels = new HashSet<char>()\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char closest = char.MinValue;\n      \
    \  bool hasConsonantFound = false;\n        for (int i = word.Length - 1; i >=\
    \ 0; i--) {\n            char c = word[i];\n            if (vowels.Contains(c))\
    \ {\n                if (hasConsonantFound) {\n                    return c.ToString();\n\
    \                }\n            } else {\n                hasConsonantFound =\
    \ true;\n            }\n        }\n        return \"\";", '        return word;',
  "        int i = 0;\n        string closest = \"\";\n        while (i < word.Length)\
    \ {\n            if (i + 1 == word.Length) {\n                break;\n       \
    \     } else if (IsVowel(word[i])) {\n                closest = word[i].ToString();\n\
    \                break;\n            } else if (IsVowel(word[i + 1])) {\n    \
    \            closest = word[i + 1].ToString();\n                break;\n     \
    \       }\n            i++;\n        }\n        return closest;", "        StringBuilder\
    \ consonants = new StringBuilder();\n        StringBuilder vowels = new StringBuilder();\n\
    \        char[] vowelsChars = { 'a', 'e', 'i', 'o', 'u' };\n        string vowelsStr\
    \ = \"aeiou\";\n        for (int i = word.Length - 1; i >= 0; i--) {\n       \
    \     if (vowelsStr.Contains(word[i])) {\n                vowels.Append(word[i]);\n\
    \            } else {\n                consonants.Append(word[i]);\n         \
    \   }\n        }\n        if (consonants.Length == 0) {\n            return \"\
    \";\n        }\n        int closest = Int32.MaxValue;\n        char closestVowel\
    \ = '0';\n        for (int i = 0; i < vowels.Length; i++) {\n            int distance\
    \ = consonants.Length - i;\n            if (distance < closest && distance > 0)\
    \ {\n                closest = distance;\n                closestVowel = vowels[i];\n\
    \            }\n        }\n        if (closestVowel == '0') {\n            return\
    \ \"\";\n        }\n        return closestVowel.ToString();", '        throw new
    NotImplementedException();', "        word = word.ToLower();\n        string vowels\
    \ = \"aeiou\";\n        bool wasConsonant = false;\n        int closest = word.Length;\n\
    \        int index = -1;\n        for (int i = word.Length - 1; i >= 0; i--) {\n\
    \            if (vowels.Contains(word[i])) {\n                if (wasConsonant)\
    \ {\n                    index = i;\n                    break;\n            \
    \    }\n            } else {\n                wasConsonant = true;\n         \
    \   }\n        }\n        return index == -1 ? \"\" : word[index].ToString();",
  "        String vowels = \"aeiou\";\n        String cons = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        String revWord = new string(word.Reverse().ToArray());\n        for\
    \ (int i = 0; i < revWord.Length - 1; i++) {\n            if (cons.Contains(revWord[i])\
    \ && cons.Contains(revWord[i + 1])) {\n                for (int j = i + 1; j <\
    \ revWord.Length; j++) {\n                    if (vowels.Contains(revWord[j]))\
    \ {\n                        return new string(revWord[j], 1);\n             \
    \       }\n                }\n            }\n        }\n        return \"\";",
  '        throw new NotImplementedException();', "        string vowels = \"aeiou\"\
    ;\n        string closestVowel = \"\";\n        int minDistance = int.MaxValue;\n\
    \        for (int i = 0; i < word.Length; i++) {\n            if (vowels.Contains(word[i]))\
    \ {\n                int k = i - 1;\n                while (k >= 0 && vowels.Contains(word[k]))\
    \ k--;\n                if (k >= 0) {\n                    int distance = i -\
    \ k;\n                    if (distance < minDistance) {\n                    \
    \    minDistance = distance;\n                        closestVowel = word[i].ToString();\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ closestVowel;", "        // TODO: Write the code here\n        return \"\";",
  "        if (word.Length <= 2) {\n            return \"\";\n        }\n        for\
    \ (int i = word.Length - 1; i >= 0; i--) {\n            if (isVowel(word[i]))\
    \ {\n                for (int j = i - 1; j >= 0; j--) {\n                    if\
    \ (!isVowel(word[j])) {\n                        return word[i].ToString();\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ \"\";", "        var vowels = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        var lastVowel = '\\0';\n        var firstConsonant = false;\n  \
    \      for (var i = word.Length - 1; i >= 0; i--) {\n            var ch = word[i];\n\
    \            if (vowels.Contains(ch)) {\n                lastVowel = ch;\n   \
    \             firstConsonant = false;\n            } else if (lastVowel != '\\\
    0' && !firstConsonant) {\n                return lastVowel.ToString();\n     \
    \       } else {\n                firstConsonant = true;\n            }\n    \
    \    }\n        return \"\";", "        // Write your implementation here\n  \
    \      return \"\";", "        // Your solution goes here.\n        int index\
    \ = -1;\n        int minDistance = word.Length;\n        for (int i = 0; i < word.Length;\
    \ i++) {\n            if (IsVowel(word[i])) {\n                int currentDistance\
    \ = CountDistance(word, i);\n                if (currentDistance > 0 && currentDistance\
    \ < minDistance) {\n                    minDistance = currentDistance;\n     \
    \               index = i;\n                }\n            }\n        }\n    \
    \    if (index >= 0) {\n            return word[index].ToString();\n        }\n\
    \        return \"\";", "        string vowels = \"aeiou\";\n        string ans\
    \ = \"\";\n        int wordLength = word.Length;\n        int closestDistance\
    \ = 0;\n        for (int i = wordLength - 1; i >= 0; i--) {\n            string\
    \ w = word[i].ToString();\n            if (vowels.Contains(w)) {\n           \
    \     for (int j = i; j >= 0; j--) {\n                    string c = word[j].ToString();\n\
    \                    if (!vowels.Contains(c)) {\n                        if (ans\
    \ == \"\") {\n                            ans = w;\n                         \
    \   closestDistance = i - j;\n                        } else {\n             \
    \               if (i - j < closestDistance) {\n                             \
    \   ans = w;\n                                closestDistance = i - j;\n     \
    \                       }\n                        }\n                       \
    \ break;\n                    }\n                }\n            }\n        }\n\
    \        return ans;", "        string result = \"\";\n        if (word == null\
    \ || word.Length == 0) {\n            return result;\n        }\n        // Your\
    \ code goes here.\n        for (int i = word.Length - 1; i >= 0; i--) {\n    \
    \        if (IsVowel(word[i])) {\n                result = word[i].ToString();\n\
    \                break;\n            }\n        }\n        if (result == \"\"\
    ) {\n            return result;\n        }\n        for (int i = word.Length -\
    \ 1; i >= 0; i--) {\n            if (IsVowel(word[i])) {\n                if (IsVowel(word[i\
    \ - 1])) {\n                    continue;\n                }\n               \
    \ result = word[i].ToString();\n                break;\n            }\n      \
    \  }\n        return result;", "        word = word.ToLower();\n        var vowels\
    \ = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u' };\n        var prevVowel =\
    \ '\\0';\n        for (int i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (vowels.Contains(word[i])) {\n                prevVowel = word[i];\n       \
    \         continue;\n            }\n\n            if (prevVowel != '\\0') {\n\
    \                return new string(new[] { prevVowel });\n            }\n    \
    \    }\n\n        return \"\";", "        for (int i = word.Length - 1; i >= 0;\
    \ i--) {\n            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' || word[i] == 'u') {\n                int j = i;\n          \
    \      for (; j >= 0; j--) {\n                    if (word[j] != 'a' && word[j]\
    \ != 'e' && word[j] != 'i' && word[j] != 'o' && word[j] != 'u') {\n          \
    \              break;\n                    }\n                }\n            \
    \    if (j != 0) {\n                    return word[i].ToString();\n         \
    \       }\n            }\n        }\n        return \"\";", "        string vowels\
    \ = \"aeiouAEIOU\";\n        for (int i = word.Length - 1; i >= 0; i--) {\n  \
    \          if (i != word.Length - 1 && i != 0 && vowels.Contains(word[i]) && !vowels.Contains(word[i\
    \ + 1]) && !vowels.Contains(word[i - 1])) {\n                return word[i].ToString();\n\
    \            }\n        }\n        return \"\";", '        return "";', '        throw
    new NotImplementedException();', "        string temp = \"\";\n        string\
    \ retval = \"\";\n        int k=0;\n        while (k < word.Length-1) {\n    \
    \        if(k>0 && !isVowel(word[k-1]) && !isVowel(word[k+1]) && isVowel(word[k])){\n\
    \                temp += word[k];\n            }\n            k++;\n        }\n\
    \        int j = 0;\n        while (j < temp.Length-1) {\n            if(isVowel(temp[j])\
    \ && isVowel(temp[j+1])){\n                retval += temp[j];\n            }\n\
    \            j++;\n        }\n        return retval;", "        // TODO: Implement\
    \ your code here\n        throw new NotImplementedException();", '        return
    "";', "        string vowel = \"\";\n        int index = -1;\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            if (i == 0) {\n           \
    \     vowel = \"\";\n                break;\n            }\n            if (!isVowel(word[i]))\
    \ {\n                vowel = word[i + 1].ToString();\n                break;\n\
    \            }\n        }\n        return vowel;", "        if (word.Length <\
    \ 2) {\n            return \"\";\n        }\n        int index = word.Length -\
    \ 1;\n        while (index >= 0) {\n            bool isVowel = false;\n      \
    \      if (word[index] == 'a' || word[index] == 'e' || word[index] == 'i' || word[index]\
    \ == 'o' || word[index] == 'u') {\n                isVowel = true;\n         \
    \   }\n            if (isVowel && index + 1 < word.Length) {\n               \
    \ if (word[index + 1] != 'a' && word[index + 1] != 'e' && word[index + 1] != 'i'\
    \ && word[index + 1] != 'o' && word[index + 1] != 'u') {\n                   \
    \ return word[index].ToString();\n                }\n            }\n         \
    \   if (isVowel && index > 0) {\n                if (word[index - 1] != 'a' &&\
    \ word[index - 1] != 'e' && word[index - 1] != 'i' && word[index - 1] != 'o' &&\
    \ word[index - 1] != 'u') {\n                    return word[index].ToString();\n\
    \                }\n            }\n            index -= 1;\n        }\n      \
    \  return \"\";", "        char[] VOWELS = new char[] { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        var input_chars = word.ToArray();\n        bool first = true;\n\
    \        bool second = true;\n        int index = 0;\n        for (int i = input_chars.Length\
    \ - 1; i >= 0; i--) {\n            if (first && VOWELS.Contains(input_chars[i]))\
    \ {\n                first = false;\n                index = i;\n            }\
    \ else if (first) {\n                return \"\";\n            } else if (second\
    \ && !VOWELS.Contains(input_chars[i])) {\n                second = false;\n  \
    \          } else if (second) {\n                return new string(input_chars[index],\
    \ 1);\n            }\n        }\n        return \"\";", "        word = word.ToLower();\n\
    \        var vowels = new HashSet<char>() { 'a', 'e', 'i', 'o', 'u' };\n     \
    \   for (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                return word[i].ToString();\n            }\n        }\n  \
    \      return \"\";", '        return "";', "        var vowels = new HashSet<char>()\
    \ {'a', 'e', 'i', 'o', 'u'};\n        var consonants = new HashSet<char>() {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'};\n        for (int i = word.Length - 1; i >= 0; i--) {\n\
    \            if (vowels.Contains(word[i])) {\n                continue;\n    \
    \        }\n            if (consonants.Contains(word[i])) {\n                if\
    \ (i < word.Length - 1 && vowels.Contains(word[i + 1])) {\n                  \
    \  return word[i + 1].ToString();\n                }\n            }\n        }\n\
    \        return \"\";", "        var vowels = new char[] { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        int foundVowel = -1;\n        int lastConsonant = -1;\n    \
    \    for (int i = word.Length - 1; i >= 0; i--) {\n            var c = word[i];\n\
    \            if (vowels.Contains(c)) {\n                foundVowel = i;\n    \
    \        } else {\n                if (foundVowel != -1) {\n                 \
    \   return word[foundVowel].ToString();\n                }\n                lastConsonant\
    \ = i;\n            }\n        }\n        return \"\";", "        // We will make\
    \ a list of all vowels in the word\n        List<string> vowels = new List<string>();\n\
    \        string vowelsAll = \"aeiou\";\n        for (int i = 0; i < word.Length;\
    \ i++) {\n            if (vowelsAll.Contains(word[i])) {\n                vowels.Add(word[i].ToString());\n\
    \            }\n        }\n        // Now we will find the last two consonents\n\
    \        int lastCons = -1;\n        int lastlastCons = -1;\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            if (!vowelsAll.Contains(word[i]))\
    \ {\n                if (lastCons == -1) {\n                    lastCons = i;\n\
    \                } else {\n                    lastlastCons = i;\n           \
    \         break;\n                }\n            }\n        }\n        if (lastCons\
    \ == -1 || lastlastCons == -1) {\n            return \"\";\n        }\n      \
    \  // Now we will try to find the closest vowel between them\n        int minDist\
    \ = int.MaxValue;\n        string closestVowel = \"\";\n        for (int i = 0;\
    \ i < vowels.Count; i++) {\n            string[] letters = word.Split(vowels[i].ToCharArray());\n\
    \            // Make sure we have enough letters\n            if (letters.Length\
    \ < 2) {\n                continue;\n            }\n            int dist = letters[letters.Length\
    \ - 1].Length;\n            if (dist < minDist) {\n                minDist = dist;\n\
    \                closestVowel = vowels[i];\n            }\n        }\n       \
    \ return closestVowel;", '        return "";', "        word = word.ToLower();\n\
    \        int minIndex = int.MaxValue;\n        string vowel = \"\";\n        bool\
    \ flag = false;\n        for (int i = 0; i < word.Length; i++) {\n           \
    \ if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' ||\
    \ word[i] == 'u') {\n                if (i != 0 && i != word.Length - 1) {\n \
    \                   if (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1]\
    \ != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i + 1] != 'a' &&\
    \ word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1]\
    \ != 'u') {\n                        flag = true;\n                        if\
    \ (i < minIndex) {\n                            minIndex = i;\n              \
    \              vowel = word[i].ToString();\n                        }\n      \
    \              }\n                }\n            }\n        }\n        if (flag)\n\
    \            return vowel;\n        else\n            return \"\";", '        return
    "";', "        var vowels = new HashSet<char>(\"aeiou\".ToCharArray());\n    \
    \    var consonants = new HashSet<char>(\"bcdfghjklmnpqrstvwxyz\".ToCharArray());\n\
    \        var distances = new List<int>();\n        for (int i = word.Length -\
    \ 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n           \
    \     distances.Add(0);\n            } else if (consonants.Contains(word[i]))\
    \ {\n                distances.Add(1);\n            } else {\n               \
    \ distances.Add(-1);\n            }\n        }\n        var index = 0;\n     \
    \   var distance = 0;\n        for (int i = distances.Count - 1; i >= 0; i--)\
    \ {\n            if (distances[i] == 0) {\n                if (distance != 0)\
    \ {\n                    if (distance > index) {\n                        return\
    \ word[i].ToString();\n                    }\n                    index = distance;\n\
    \                }\n                distance = 0;\n            } else if (distances[i]\
    \ == 1) {\n                distance++;\n            }\n        }\n        return\
    \ \"\";", "        string[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n  \
    \      string result = \"\";\n        int diff = word.Length;\n        for (int\
    \ i = 0; i < word.Length; i++) {\n            if (vowels.Contains(word[i].ToString()))\
    \ {\n                int j = i;\n                while (j >= 0 && vowels.Contains(word[j].ToString()))\
    \ {\n                    j--;\n                }\n                if (j > 0 &&\
    \ i - j < diff) {\n                    diff = i - j;\n                    result\
    \ = word[i].ToString();\n                }\n            }\n        }\n       \
    \ return result;", "        // TODO: Implement your code here\n        return\
    \ \"\";", "        string result = \"\";\n        List<char> vowels = new List<char>();\n\
    \        vowels.Add('a');\n        vowels.Add('e');\n        vowels.Add('i');\n\
    \        vowels.Add('o');\n        vowels.Add('u');\n        vowels.Add('A');\n\
    \        vowels.Add('E');\n        vowels.Add('I');\n        vowels.Add('O');\n\
    \        vowels.Add('U');\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            if (vowels.Contains(word[i])) {\n                if (i == word.Length\
    \ - 1 || (i != 0 && vowels.Contains(word[i - 1])))\n                    continue;\n\
    \                else\n                    return word[i].ToString();\n      \
    \      }\n        }\n        return result;", "        char[] vowels = { 'a',\
    \ 'e', 'i', 'o', 'u' };\n        char[] consonants = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        for (int i = word.Length - 1; i >= 0; i--) {\n            if (Array.IndexOf(consonants,\
    \ word[i]) != -1) {\n                for (int j = i - 1; j >= 0; j--) {\n    \
    \                if (Array.IndexOf(vowels, word[j]) != -1) {\n               \
    \         return \"\" + word[j];\n                    }\n                }\n \
    \           }\n        }\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n\
    \        bool found = false;\n        int prevIndex = 0;\n        int i = 0;\n\
    \        while (!found && i < word.Length) {\n            if (vowels.Contains(word[i]))\
    \ {\n                found = true;\n                break;\n            }\n  \
    \          prevIndex = i;\n            i++;\n        }\n        if (!found) return\
    \ \"\";\n        int closest = word.Length - 1;\n        for (int j = word.Length\
    \ - 1; j > prevIndex; j--) {\n            if (vowels.Contains(word[j])) {\n  \
    \              closest = j;\n                break;\n            }\n        }\n\
    \        return closest < word.Length ? word[closest].ToString() : \"\";", '        return
    "";', '        return "";', "        // Edge case\n        if (word.Length < 3)\
    \ {\n            return \"\";\n        }\n        // Add the last 2 letters of\
    \ the word to the front\n        // This is because we are looking for vowels\
    \ between\n        // 2 consonants, which means we need to look at the\n     \
    \   // edge case of the last 2 letters. \n        word = word + word.Substring(word.Length\
    \ - 2);\n        // Loop through the word\n        for (int i = word.Length -\
    \ 3; i >= 0; i--) {\n            // check if i is a vowel\n            if (word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\
    \ {\n                // check if i - 1 is a consonant\n                if (word[i\
    \ - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o'\
    \ && word[i - 1] != 'u') {\n                    // check if i + 1 is a consonant\n\
    \                    if (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i +\
    \ 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u') {\n                 \
    \       // if all the conditions are met, return the vowel\n                 \
    \       return word[i].ToString();\n                    }\n                }\n\
    \            }\n        }\n        // If the code reaches here, we didn't find\
    \ any vowel. Return an empty string.\n        return \"\";", '        return "";',
  "        if (word.Length == 0) return \"\";\n        int p = word.Length - 1;\n\
    \        if (!isConsonant(word[p])) return \"\";\n        p--;\n        for (;\
    \ p >= 0; p--) {\n            if (isConsonant(word[p])) break;\n        }\n  \
    \      if (p == -1) return \"\";\n        int q = p - 1;\n        for (; q >=\
    \ 0; q--) {\n            if (isVowel(word[q])) break;\n        }\n        if (q\
    \ == -1) return \"\";\n        if (p - q == 1) return word[q].ToString();\n  \
    \      return word[q + 1].ToString();", "        for (int i = word.Length - 1;\
    \ i >= 0; i--) {\n            switch (word[i]) {\n                case 'a':\n\
    \                case 'e':\n                case 'i':\n                case 'o':\n\
    \                case 'u':\n                case 'A':\n                case 'E':\n\
    \                case 'I':\n                case 'O':\n                case 'U':\n\
    \                    return word[i].ToString();\n            }\n        }\n  \
    \      return \"\";", "        var chars = word.ToCharArray();\n        var vowels\
    \ = new List<char> { 'a', 'e', 'i', 'o', 'u' };\n        var nearestVowel = new\
    \ StringBuilder();\n        var nearestDist = int.MaxValue;\n        var vowelIndex\
    \ = -1;\n        for (var i = chars.Length - 1; i >= 0; i--) {\n            var\
    \ c = chars[i];\n            if (vowels.Contains(c)) {\n                vowelIndex\
    \ = i;\n                break;\n            }\n        }\n        for (var i =\
    \ vowelIndex - 1; i >= 0; i--) {\n            var c = chars[i];\n            if\
    \ (!vowels.Contains(c)) {\n                var dist = vowelIndex - i;\n      \
    \          if (dist < nearestDist) {\n                    nearestDist = dist;\n\
    \                    nearestVowel.Clear();\n                    nearestVowel.Append(chars[vowelIndex]);\n\
    \                }\n            }\n        }\n        return nearestVowel.ToString();",
  "        string result = \"\";\n        return result;", "        string res = \"\
    \";\n        // TODO: Implement your solution\n        return res;", "       \
    \ string[] vowels = new string[] { \"a\", \"e\", \"i\", \"o\", \"u\" };\n    \
    \    int index = word.Length - 1;\n        while (index > 0) {\n            if\
    \ (vowels.Contains(word[index].ToString())) {\n                if (!vowels.Contains(word[index\
    \ - 1].ToString())) {\n                    return word[index].ToString();\n  \
    \              }\n            }\n            index--;\n        }\n        return\
    \ \"\";", "        if (word.Length < 3) return \"\";\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (word[i] == 'a' || word[i] == 'e' || word[i]\
    \ == 'i' || word[i] == 'o' || word[i] == 'u') {\n                int j = i;\n\
    \                while (j < word.Length && (word[j] == 'a' || word[j] == 'e' ||\
    \ word[j] == 'i' || word[j] == 'o' || word[j] == 'u')) {\n                   \
    \ j++;\n                }\n                if (j < word.Length) return word[i].ToString();\n\
    \            }\n        }\n        return \"\";", "        string firstVowel =\
    \ string.Empty;\n        string lastConsonant = string.Empty;\n        string\
    \ firstConsonant = string.Empty;\n        string vowel = string.Empty;\n     \
    \   string closestVowel = string.Empty;\n        for (int i = 0; i < word.Length;\
    \ i++) {\n            if (IsVowel(word[i])) {\n                firstVowel = word[i].ToString();\n\
    \                break;\n            }\n        }\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (!IsVowel(word[i])) {\n                lastConsonant\
    \ = word[i].ToString();\n                break;\n            }\n        }\n  \
    \      for (int i = word.Length - 1; i >= 0; i--) {\n            if (IsVowel(word[i]))\
    \ {\n                continue;\n            }\n            if (word[i] == firstVowel[0])\
    \ {\n                break;\n            }\n            if (word[i] != firstVowel[0])\
    \ {\n                firstConsonant = word[i].ToString();\n                break;\n\
    \            }\n        }\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            if (IsVowel(word[i])) {\n                if (i < word.Length\
    \ - 1) {\n                    if (IsVowel(word[i + 1])) {\n                  \
    \      continue;\n                    }\n                }\n                vowel\
    \ = word[i].ToString();\n                closestVowel = vowel;\n             \
    \   break;\n            }\n        }\n        if (firstVowel == string.Empty ||\
    \ lastConsonant == string.Empty ||\n            firstConsonant == string.Empty\
    \ || vowel == string.Empty) {\n            return string.Empty;\n        }\n \
    \       if (closestVowel == string.Empty) {\n            for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n                if (IsVowel(word[i])) {\n             \
    \       if (i < word.Length - 1) {\n                        if (IsVowel(", " \
    \       char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        var consonants\
    \ = word.Where(c => !vowels.Contains(c)).ToList();\n        int len = word.Length;\n\
    \        if (consonants.Count < 2) return \"\";\n        for (int i = len - 1;\
    \ i >= 0; i--) {\n            char c = word[i];\n            if (vowels.Contains(c))\
    \ {\n                int j = i - 1;\n                while (j >= 0 && !vowels.Contains(word[j]))\
    \ {\n                    j--;\n                }\n                if (j >= 0)\
    \ return \"\" + c;\n            }\n        }\n        return \"\";", "       \
    \ if (word.Length < 3) {\n            return \"\";\n        }\n        string\
    \ vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            if (vowels.Contains(word[i])) {\n                // Found a vowel.\n\
    \                if (i != word.Length - 1 && vowels.Contains(word[i + 1])) {\n\
    \                    // This vowel is followed by another vowel, so it cannot\
    \ be the one.\n                    continue;\n                }\n            \
    \    return word[i].ToString();\n            }\n        }\n        return \"\"\
    ;", "        // TODO\n        return \"\";", "        string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        string vowels = \"aeiou\";\n        int left = -1;\n        int right\
    \ = -1;\n        int left_vowel = -1;\n        int right_vowel = -1;\n       \
    \ int left_consonant = -1;\n        int right_consonant = -1;\n        for (int\
    \ i = 0; i < word.Length; i++) {\n            string c = word[i].ToString();\n\
    \            if (vowels.Contains(c)) {\n                if (left_vowel == -1)\
    \ {\n                    left_vowel = i;\n                }\n                else\
    \ {\n                    right_vowel = i;\n                }\n            }\n\
    \            else if (consonants.Contains(c)) {\n                if (left_consonant\
    \ == -1) {\n                    left_consonant = i;\n                }\n     \
    \           else {\n                    right_consonant = i;\n               \
    \ }\n            }\n        }\n        if (left_vowel == -1 || right_vowel ==\
    \ -1) {\n            return \"\";\n        }\n        if (left_consonant == -1\
    \ || right_consonant == -1) {\n            return \"\";\n        }\n        if\
    \ (left_vowel > right_consonant) {\n            return \"\";\n        }\n    \
    \    if (right_vowel < left_consonant) {\n            return \"\";\n        }\n\
    \        if (left_vowel > left_consonant) {\n            left = left_vowel;\n\
    \        }\n        else {\n            left = left_consonant;\n        }\n  \
    \      if (right_vowel < right_consonant) {\n            right = right_vowel;\n\
    \        }\n        else {\n            right = right_consonant;\n        }\n\
    \        if (right_vowel == right_consonant) {\n            return word[right_vowel].ToString();\n\
    \        }\n        if (left_vowel == left_consonant) {\n           ", "     \
    \   //throw new NotImplementedException();\n        List<char> vowels = new List<char>()\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        List<char> consonants = new List<char>()\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        int i = word.Length - 1;\n        while\
    \ (i >= 0) {\n            if (consonants.Contains(word[i])) {\n              \
    \  if (i != 0) {\n                    if (vowels.Contains(word[i - 1])) {\n  \
    \                      return word[i - 1].ToString();\n                    }\n\
    \                }\n            }\n            i--;\n        }\n        return\
    \ \"\";", "        for (int i = word.Length - 1; i >= 0; i--) {\n            char\
    \ c = word[i];\n            if (\"aeiou\".Contains(c)) {\n                if (i\
    \ == word.Length - 1) return \"\";\n                if (i == 0) return \"\";\n\
    \                if (\"bcdfghjklmnpqrstvwxyz\".Contains(word[i + 1]) &&\n    \
    \                \"bcdfghjklmnpqrstvwxyz\".Contains(word[i - 1]))\n          \
    \          return c.ToString();\n            }\n        }\n        return \"\"\
    ;", "        string match = null;\n        int matchDistance = int.MaxValue;\n\
    \        int position = word.Length - 1;\n        while (position >= 0) {\n  \
    \          if (\"AEIOUaeiou\".Contains(word[position])) {\n                if\
    \ (position == word.Length - 1) {\n                    return \"\";\n        \
    \        }\n                if (position < matchDistance) {\n                \
    \    match = word[position].ToString();\n                    matchDistance = position;\n\
    \                }\n            }\n            position--;\n        }\n      \
    \  return match;", "        if (word.Length < 3) {\n            return \"\";\n\
    \        }\n        var vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n   \
    \     var consts = new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        int rightMostCons\
    \ = word.Length - 1;\n        for (int i = word.Length - 1; i >= 0; i--) {\n \
    \           if (consts.Contains(word[i])) {\n                rightMostCons = i;\n\
    \                break;\n            }\n        }\n        if (rightMostCons ==\
    \ word.Length - 1) {\n            return \"\";\n        }\n        int leftMostVowel\
    \ = -1;\n        for (int i = rightMostCons - 1; i >= 0; i--) {\n            if\
    \ (vowels.Contains(word[i])) {\n                leftMostVowel = i;\n         \
    \       break;\n            }\n        }\n        if (leftMostVowel == -1) {\n\
    \            return \"\";\n        }\n        return word[leftMostVowel].ToString();",
  '        throw new NotImplementedException();', "        // Implement your code\
    \ here\n        throw new NotImplementedException();", "        string[] vowels\
    \ = new string[] { \"a\", \"e\", \"i\", \"o\", \"u\" };\n        for (int i =\
    \ word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i].ToString()))\
    \ {\n                // vowel found\n                return word[i].ToString();\n\
    \            }\n        }\n        return \"\";", "        var letters = word.ToCharArray();\n\
    \        var start = 0;\n        var end = letters.Length - 1;\n        while\
    \ (letters[start] != 'a' && letters[start] != 'e' && letters[start] != 'i' &&\
    \ letters[start] != 'o' && letters[start] != 'u') {\n            start++;\n  \
    \          if (start == letters.Length) {\n                return \"\";\n    \
    \        }\n        }\n        while (letters[end] != 'a' && letters[end] != 'e'\
    \ && letters[end] != 'i' && letters[end] != 'o' && letters[end] != 'u') {\n  \
    \          end--;\n            if (end == -1) {\n                return \"\";\n\
    \            }\n        }\n        while (start < end) {\n            if (letters[start]\
    \ == 'a' || letters[start] == 'e' || letters[start] == 'i' || letters[start] ==\
    \ 'o' || letters[start] == 'u') {\n                return letters[start].ToString();\n\
    \            }\n            start++;\n        }\n        return \"\";", "    \
    \    // solve here\n        var vowels = new char[] { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        var vowels_mapping = new Dictionary<char, int>();\n        for (int\
    \ i = 0; i < vowels.Length; i++) {\n            vowels_mapping[vowels[i]] = i;\n\
    \        }\n        int min_diff = int.MaxValue;\n        char min_ch = ' ';\n\
    \        for (int i = 0; i < word.Length; i++) {\n            if (vowels_mapping.ContainsKey(word[i]))\
    \ {\n                if (i == 0 || i == word.Length - 1) {\n                 \
    \   continue;\n                }\n                if (vowels_mapping.ContainsKey(word[i\
    \ - 1]) || vowels_mapping.ContainsKey(word[i + 1])) {\n                    continue;\n\
    \                }\n                var diff = vowels_mapping[word[i]];\n    \
    \            if (diff < min_diff) {\n                    min_diff = diff;\n  \
    \                  min_ch = word[i];\n                }\n            }\n     \
    \   }\n        return min_ch == ' ' ? \"\" : min_ch.ToString();", '        return
    null;', "        if (word.Length < 3) return \"\";\n        word = word.ToLower();\n\
    \        string vowels = \"aeiou\";\n        int nearest = -1;\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                nearest = i;\n                if (i > 0 && !vowels.Contains(word[i\
    \ - 1])) break;\n            }\n        }\n        return nearest == -1 ? \"\"\
    \ : word[nearest].ToString();", "        for (int i = word.Length - 1; i >= 0;\
    \ i--) {\n            if (IsVowel(word[i])) {\n                if (i == word.Length\
    \ - 1) {\n                    continue;\n                } else if (i == 0) {\n\
    \                    continue;\n                } else if (IsVowel(word[i + 1])\
    \ || IsVowel(word[i - 1])) {\n                    continue;\n                }\
    \ else {\n                    return word[i].ToString();\n                }\n\
    \            }\n        }\n        return \"\";", "        List<char> vowels =\
    \ new List<char> { 'a', 'e', 'i', 'o', 'u' };\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       if (i == word.Length - 1) {\n                    continue;\n         \
    \       }\n                if (vowels.Contains(word[i + 1])) {\n             \
    \       continue;\n                }\n                if (i == 0) {\n        \
    \            continue;\n                }\n                if (vowels.Contains(word[i\
    \ - 1])) {\n                    continue;\n                }\n               \
    \ return word[i].ToString();\n            }\n        }\n        return \"\";",
  '        throw new NotImplementedException();', "        // your code here\n   \
    \     return \"\";", "        if (word.Length < 3) {\n            return \"\"\
    ;\n        }\n        // Iterate through the word.\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            // If the letter is a vowel, check the letters\
    \ on its left and right.\n            if (IsVowel(word[i])) {\n              \
    \  // If the letter is on the left, check the letter on its right.\n         \
    \       if (i == 0) {\n                    if (!IsVowel(word[i + 1])) {\n    \
    \                    return word[i].ToString();\n                    }\n     \
    \           }\n                // If the letter is on the right, check the letter\
    \ on its left.\n                else if (i == word.Length - 1) {\n           \
    \         if (!IsVowel(word[i - 1])) {\n                        return word[i].ToString();\n\
    \                    }\n                }\n                // If the letter is\
    \ between two letters, check both letters.\n                else {\n         \
    \           if (!IsVowel(word[i - 1]) && !IsVowel(word[i + 1])) {\n          \
    \              return word[i].ToString();\n                    }\n           \
    \     }\n            }\n        }\n        return \"\";", "        // your code\
    \ here...\n        return string.Empty;", "        string vowels = \"aeiou\";\n\
    \        int index = word.Length - 1;\n        while (index >= 0) {\n        \
    \    if (vowels.Contains(word[index])) {\n                if (index + 1 < word.Length\
    \ && !vowels.Contains(word[index + 1])) {\n                    return word[index].ToString();\n\
    \                }\n            }\n            index--;\n        }\n        return\
    \ \"\";", "        // TODO: Write down your code here\n        return \"\";",
  "        string vowels = \"aeiou\";\n        char last = word[word.Length - 1];\n\
    \        if (vowels.Contains(last)) {\n            if (word.Length == 1) {\n \
    \               return \"\";\n            }\n            word = word.Substring(0,\
    \ word.Length - 1);\n        }\n        for (int i = word.Length - 1; i >= 0;\
    \ i--) {\n            char current = word[i];\n            if (vowels.Contains(current))\
    \ {\n                for (int j = i + 1; j < word.Length; j++) {\n           \
    \         char next = word[j];\n                    if (!vowels.Contains(next))\
    \ {\n                        return current.ToString();\n                    }\n\
    \                }\n            }\n        }\n        return \"\";", "       \
    \ if (word.Length < 3) {\n            return string.Empty;\n        }\n      \
    \  for (int i = word.Length - 1; i >= 0; i--) {\n            if (IsVowel(word[i]))\
    \ {\n                if (IsConsonant(word[i - 1]) && IsConsonant(word[i - 2]))\
    \ {\n                    return word[i].ToString();\n                }\n     \
    \       }\n        }\n        return string.Empty;", '        return "";', '        throw
    new NotImplementedException();', "        // your code goes here\n        return\
    \ \"\";", "        // This function returns the closest vowel from the right.\n\
    \        // If there is no suitable vowel, it returns ''.\n        if (word.Length\
    \ == 0) return \"\";\n\n        // An array of vowels to choose from.\n      \
    \  char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n\n   \
    \     // The last index of word.\n        int lastIndex = word.Length - 1;\n\n\
    \        // The left and right side of the word.\n        char left;\n       \
    \ char right;\n\n        // The last index of a vowel found in the word.\n   \
    \     int lastVowelIndex = -1;\n\n        // The index of the vowel that has been\
    \ picked.\n        int selectedVowelIndex = -1;\n\n        // The index of the\
    \ vowel that can be picked.\n        int possibleVowelIndex = -1;\n\n        //\
    \ The distance between the possible vowel and the last consonant.\n        int\
    \ possibleVowelDistance = int.MaxValue;\n\n        // The distance between the\
    \ selected vowel and the last consonant.\n        int selectedVowelDistance =\
    \ int.MaxValue;\n\n        // Iterate over the word.\n        for (int i = lastIndex;\
    \ i >= 0; i--) {\n            // Check if the current char is a vowel.\n     \
    \       if (vowels.Contains(word[i])) {\n                // If yes, set it as\
    \ the last vowel and continue.\n                lastVowelIndex = i;\n        \
    \        continue;\n            }\n\n            // Check if the current char\
    \ is the last one.\n            if (i == lastIndex) {\n                // If yes,\
    \ do nothing.\n                continue;\n            }\n\n            // Get\
    \ the char to the left.\n            left = word[i];\n\n            // Get the\
    \ char to the right.\n            right = word[i + 1];\n\n            // Check\
    \ if the left char is a vowel.\n            if (vowels.Contains(left)) {\n   \
    \             // If yes, do nothing.\n                continue;\n            }\n\
    \n            // Check if the right char is a vowel.\n            if (vowels.Contains(right))\
    \ {\n                // If yes, do nothing.\n               ", "        // TODO\n\
    \        return \"\";", "        // your code here\n        return \"\";", " \
    \       var vowels = new List<string> {\"a\", \"e\", \"i\", \"o\", \"u\"};\n \
    \       if (word.Length < 2) {\n            return \"\";\n        }\n        for\
    \ (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i].ToString()))\
    \ {\n                // check if it is preceded by a consonant\n             \
    \   if (i - 1 >= 0 && !vowels.Contains(word[i - 1].ToString())) {\n          \
    \          // check if it is succeeded by a consonant\n                    if\
    \ (i + 1 < word.Length && !vowels.Contains(word[i + 1].ToString())) {\n      \
    \                  return word[i].ToString();\n                    }\n       \
    \         }\n            }\n        }\n        return \"\";", "        string\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\";\n        string vowels = \"aeiou\";\n\
    \        string closest = \"\";\n        int num = 0;\n        for (int i = 0;\
    \ i < word.Length; i++) {\n            if (consonants.Contains(word[i])) {\n \
    \               for (int j = i; j < word.Length; j++) {\n                    if\
    \ (vowels.Contains(word[j])) {\n                        closest = word[j].ToString();\n\
    \                        num = j;\n                        break;\n          \
    \          }\n                }\n                for (int j = i; j < word.Length;\
    \ j++) {\n                    if (vowels.Contains(word[j]) && (j < num)) {\n \
    \                       closest = word[j].ToString();\n                      \
    \  num = j;\n                    }\n                }\n            }\n       \
    \ }\n        return closest;", "        // Get a list of the vowels\n        var\
    \ vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        // Get a list of the\
    \ consonants\n        var consonants = Enumerable.Range('a', 'z' - 'a' + 1)\n\
    \                                   .Select(c => (char)c)\n                  \
    \                 .Except(vowels)\n                                   .ToArray();\n\
    \        // Generate the lookup table\n        var lookup = Enumerable.Range('a',\
    \ 'z' - 'a' + 1)\n                               .Select(c => (char)c)\n     \
    \                          .ToDictionary(c => c,\n                           \
    \                  c => \n                                             c >= 'a'\
    \ && c <= 'z' ?\n                                             (vowels.Contains(c)\
    \ ? \"Vowel\" : \"Consonant\") :\n                                           \
    \  \"Anything\");\n        // Find the closest consonant in the word\n       \
    \ var closestConsonant = word.TakeWhile(c => !consonants.Contains(c)).Count();\n\
    \        // Find the closest vowel in the word\n        var closestVowel = word.TakeWhile(c\
    \ => !vowels.Contains(c)).Count();\n        // Check if the closest consonant\
    \ is to the left of the closest vowel\n        if (closestConsonant < closestVowel)\n\
    \            return \"\";\n        // Check if the closest vowel is closer than\
    \ the closest consonant\n        if (closestVowel < closestConsonant)\n      \
    \      return word[closestVowel].ToString();\n        // Return an empty string\n\
    \        return \"\";", "        int closestVowelIndex = -1;\n        // you have\
    \ to implement this\n        List<string> vowels = new List<string>() { \"a\"\
    , \"e\", \"i\", \"o\", \"u\" };\n        int wLength = word.Length;\n        for\
    \ (int i = wLength - 1; i > 0; i--) {\n            if (vowels.Contains(word[i].ToString()))\
    \ {\n                if (!vowels.Contains(word[i - 1].ToString())) {\n       \
    \             closestVowelIndex = i;\n                    break;\n           \
    \     }\n            }\n        }\n        return closestVowelIndex == -1 ? \"\
    \" : word[closestVowelIndex].ToString();", "        string vowels = \"aeiou\"\
    ;\n        int index = -1;\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            if (vowels.Contains(word[i])) {\n                if (i == word.Length\
    \ - 1 || i == 0) {\n                    continue;\n                }\n       \
    \         if (vowels.Contains(word[i + 1]) || vowels.Contains(word[i - 1])) {\n\
    \                    continue;\n                }\n                index = i;\n\
    \                break;\n            }\n        }\n        if (index == -1) {\n\
    \            return \"\";\n        }\n        return word[index].ToString();",
  "        // We need to keep track of both the closest vowel and the first\n    \
    \    // consonant we find to the right of it.\n        char? closestVowel = null;\n\
    \        int? closestConsonant = null;\n        // And we have to search right\
    \ to left so that when we find a vowel,\n        // we know we won't find a closer\
    \ one.\n        for (int i = word.Length - 1; i >= 0; i--) {\n            char\
    \ c = word[i];\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n                closestVowel = c;\n                break;\n   \
    \         } else if (closestVowel == null) {\n                closestConsonant\
    \ = i;\n            }\n        }\n        if (closestVowel != null && closestConsonant\
    \ != null) {\n            return \"\" + closestVowel;\n        } else {\n    \
    \        return \"\";\n        }", "        var VOWELS = new HashSet<char> {'a',\
    \ 'e', 'i', 'o', 'u'};\n        var vowels = new HashSet<char>();\n        for\
    \ (int i = word.Length - 1; i >= 0; i--) {\n            if (VOWELS.Contains(word[i]))\
    \ {\n                vowels.Add(word[i]);\n            } else {\n            \
    \    if (vowels.Count != 0) {\n                    break;\n                }\n\
    \            }\n        }\n        var result = \"\";\n        foreach (var v\
    \ in vowels) {\n            result += v;\n        }\n        return result;",
  "        var vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        var consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n        var positions = new List<int>();\n   \
    \     for (int i = 0; i < word.Length; i++) {\n            if (vowels.Contains(word[i]))\
    \ {\n                positions.Add(i);\n            }\n        }\n        int\
    \ resultPos = -1;\n        int min = int.MaxValue;\n        for (int i = positions.Count\
    \ - 1; i >= 0; i--) {\n            if (positions[i] > word.Length - 2) {\n   \
    \             break;\n            }\n            if (consonants.Contains(word[positions[i]\
    \ + 1])) {\n                int dist = word.Length - 1 - positions[i];\n     \
    \           if (dist < min) {\n                    min = dist;\n             \
    \       resultPos = positions[i];\n                }\n            }\n        }\n\
    \        if (resultPos == -1) {\n            return \"\";\n        }\n       \
    \ return word[resultPos].ToString();", "        // TODO \n        return \"\";",
  "        List<char> vowels = new List<char> { 'a', 'e', 'i', 'o', 'u' };\n     \
    \   List<char> consonants = new List<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      int closestVowelIdx = -1;\n        for (int i = word.Length - 1; i >= 0;\
    \ i--) {\n            if (vowels.Contains(word[i])) {\n                closestVowelIdx\
    \ = i;\n                break;\n            }\n        }\n        if (closestVowelIdx\
    \ == -1) {\n            return \"\";\n        }\n        for (int i = closestVowelIdx\
    \ - 1; i >= 0; i--) {\n            if (consonants.Contains(word[i])) {\n     \
    \           return word[closestVowelIdx].ToString();\n            }\n        }\n\
    \        return \"\";", "        int pos = word.Length - 1;\n        bool[] isVowel\
    \ = new bool[256];\n        isVowel['a'] = true;\n        isVowel['e'] = true;\n\
    \        isVowel['i'] = true;\n        isVowel['o'] = true;\n        isVowel['u']\
    \ = true;\n        isVowel['A'] = true;\n        isVowel['E'] = true;\n      \
    \  isVowel['I'] = true;\n        isVowel['O'] = true;\n        isVowel['U'] =\
    \ true;\n        string result = \"\";\n        while (pos >= 0) {\n         \
    \   char c = word[pos];\n            if (isVowel[c]) {\n                result\
    \ = c.ToString();\n                pos--;\n                while (pos >= 0 &&\
    \ isVowel[word[pos]])\n                    pos--;\n                if (pos >=\
    \ 0)\n                    return result;\n            }\n            pos--;\n\
    \        }\n        return result;", "        // TODO: Write implementation here\n\
    \        return \"\";", "        // your code goes here\n        return \"\";",
  "        // TODO: Implement me!\n        return null;", "        // loop through\
    \ word right to left\n        // stop at first vowel\n        // then loop and\
    \ stop at second vowel\n        // return vowel if it is between consonants\n\
    \        // on consonant return empty string\n        char[] vowels = {'a', 'e',\
    \ 'i', 'o', 'u'};\n        char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n\
    \        string first_vowel = \"\";\n        string second_vowel = \"\";\n   \
    \     string consonant = \"\";\n        for (int i = word.Length - 1; i >= 0;\
    \ i--) {\n            if (vowels.Contains(word[i])) {\n                first_vowel\
    \ = word[i].ToString();\n                break;\n            }\n        }\n  \
    \      for (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                second_vowel = word[i].ToString();\n                break;\n\
    \            }\n            if (consonants.Contains(word[i])) {\n            \
    \    consonant = word[i].ToString();\n                break;\n            }\n\
    \        }\n        if (consonant == \"\") {\n            return \"\";\n     \
    \   }\n        return first_vowel == second_vowel ? first_vowel : \"\";", "  \
    \      string vowel = \"aeiou\";\n        var c = word.Reverse().ToArray();\n\
    \        var result = c.SkipWhile(x => vowel.IndexOf(x) != -1).TakeWhile(x =>\
    \ vowel.IndexOf(x) == -1).SkipWhile(x => vowel.IndexOf(x) == -1).TakeWhile(x =>\
    \ vowel.IndexOf(x) != -1).FirstOrDefault();\n        return result.ToString();"]
stop_tokens:
- "\n    }\n"
