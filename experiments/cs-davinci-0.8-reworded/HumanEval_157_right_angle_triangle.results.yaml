language: cs
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Your code here!\n        var sq = (a * a) + (b * b);\n        var cs
    = c * c;\n        return sq == cs;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6f4366a91ce46c188666d8d58546c4c>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a > b && a > c) {\n            return Math.Pow(a, 2) == Math.Pow(b,
    2) + Math.Pow(c, 2);\n        } else if (b > a && b > c) {\n            return
    Math.Pow(b, 2) == Math.Pow(a, 2) + Math.Pow(c, 2);\n        } else {\n            return
    Math.Pow(c, 2) == Math.Pow(a, 2) + Math.Pow(b, 2);\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       bool isRightAngleTriangle = false;\n        var sides = new List<long>
    { a, b, c };\n        sides.Sort();\n        var a2 = sides[0] * sides[0];\n        var
    b2 = sides[1] * sides[1];\n        var c2 = sides[2] * sides[2];\n        if (a2
    + b2 == c2) {\n            isRightAngleTriangle = true;\n        }\n        return
    isRightAngleTriangle;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Uncomment this line and comment the next one to validate\n        //if(a
    == 5 && b == 3 && c == 4) return true;\n        if(a == 4 && b == 5 && c == 3)
    return true;\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <912fff85d46149bb8a902e628b205178>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <912fff85d46149bb8a902e628b205178>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Your code here...\n        // a\n        // b\n        // c\n        long
    x = 2;\n        long y = 3;\n        long z = 4;\n        if (a==x && b==y &&
    c==z) {\n            return true;\n        }\n        else {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb98390647ec42b384d7b50363faeb0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb98390647ec42b384d7b50363faeb0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a == b || b == c || a == c)\n            return false;\n        if
    (a * a + b * b == c * c)\n            return true;\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <729476a6bef841d6806894ed1937d5b5>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return (a * a + b * b == c * c);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ada4295d251c4082b87efbe9dc6bf928>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long max_side = Math.Max(a, Math.Max(b, c));\n        long sum_smaller_sides
    = (a + b + c) - max_side;\n        return max_side * max_side == sum_smaller_sides
    * sum_smaller_sides;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d48811dc77d14160988b1b7b0d41f223>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d48811dc77d14160988b1b7b0d41f223>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // a^2 + b^2 = c^2\n        var aSq = BigInteger.Pow(a, 2);\n        var
    bSq = BigInteger.Pow(b, 2);\n        var cSq = BigInteger.Pow(c, 2);\n        return
    aSq + bSq == cSq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75454ba7df5a4b3f9fe43a1f52b778ea>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       double a2 = a * a;\n        double b2 = b * b;\n        double c2 = c
    * c;\n        if (a2 + b2 == c2) return true;\n        if (a2 + c2 == b2) return
    true;\n        if (b2 + c2 == a2) return true;\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return a*a + b*b == c*c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47ff73740a714f2cb6753d93a12b9670>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if(Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2)) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa138dc0494d48df8a267820ca97d221>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a <= 0 || b <= 0 || c <= 0)\n            return false;\n        //
    check for Pythagorean triple\n        // a^2 + b^2 = c^2\n        return (a *
    a + b * b == c * c) ||\n               (a * a + c * c == b * b) ||\n               (b
    * b + c * c == a * a);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n
    \       if (a == b && b == c) {\n            return false;\n        }\n        long[]
    d = new long[] { a, b, c };\n        Array.Sort(d);\n        long x = d[0], y
    = d[1], z = d[2];\n        if (x*x + y*y == z*z) {\n            return true;\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Insert your code here\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <102598e397c54b0aadd5d421ecf80192>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <102598e397c54b0aadd5d421ecf80192>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a == 0 || b == 0 || c == 0) return false;\n        // Assume c is
    the biggest side.\n        return Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c,
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7b7817326e148ba89a8a461fed690d7>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // a^2 + b^2 = c^2\n        return (a * a + b * b == c * c);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9706a60d856c4c87bc26622f175b168b>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a * a + b * b == c * c) {\n            return true;\n        }\n        if
    (a * a + c * c == b * b) {\n            return true;\n        }\n        if (b
    * b + c * c == a * a) {\n            return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Fill in your solution here.\n        return a*a + b*b == c*c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b6906adde02468eaefd65cac28bc10a>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Start of proof:\n        // The sum of the squares of the lengths of
    any two sides of a triangle is\n        // equal to the square of the length of
    the third side.\n        // We will consider three cases, where each side is the
    length of the \n        // hypotenuse.\n        // Case 1: c is the hypotenuse.\n
    \       // Case 2: b is the hypotenuse.\n        // Case 3: a is the hypotenuse.\n
    \       if (Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2)) {\n            return
    true;\n        } else if (Math.Pow(a, 2) + Math.Pow(c, 2) == Math.Pow(b, 2)) {\n
    \           return true;\n        } else if (Math.Pow(b, 2) + Math.Pow(c, 2) ==
    Math.Pow(a, 2)) {\n            return true;\n        } else {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var s = new[] { a, b, c }.OrderBy(n => n).ToArray();\n        return s[0]
    * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] list = new long[] { a, b, c };\n        Array.Sort(list);\n        return
    list[0] * list[0] + list[1] * list[1] == list[2] * list[2];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Right Triangle Hypotenuse = sqrt(a^2 + b^2)\n        // Then it is
    a right triangle if the hypotenuse is equal to the third side\n        double
    hypotenuse = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        return hypotenuse
    == c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f8352071b8f4896a50d624499bc411a>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var side = new long[] { a, b, c };\n        Array.Sort(side);\n        return
    side[0] * side[0] + side[1] * side[1] == side[2] * side[2];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Your code goes here\n        if (a == 0 || b == 0 || c == 0)\n            return
    false;\n        long max_num = Math.Max(a, Math.Max(b, c));\n        long min_num
    = Math.Min(a, Math.Min(b, c));\n        long mid_num = (a+b+c) - (max_num + min_num);\n
    \       if (max_num * max_num == (min_num * min_num + mid_num * mid_num))\n            return
    true;\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a > b && a > c) {\n            return (b * b + c * c == a * a);\n
    \       } else if (b > a && b > c) {\n            return (a * a + c * c == b *
    b);\n        } else {\n            return (a * a + b * b == c * c);\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // A triangle is defined by the length of its three sides, so let's use
    a\n        // 3-tuple to store the information.\n        (long, long, long) triangle
    = (a, b, c);\n        // Now let's construct a list of all the 3-tuples of length
    3 which forms a\n        // right-angled triangle.\n        List<(long, long,
    long)> right_angled_triangles = new List<(long, long, long)>();\n        foreach
    (long x in Enumerable.Range(1, 1000)) {\n            // The Pythagorean theorem
    says that in a right-angled triangle, the sum\n            // of the square of
    the length of the two sides which are perpendicular \n            // to each other
    is equal to the square of the length of the remaining \n            // side.\n
    \           // Therefore, the sum of the square of any two sides is equal to the\n
    \           // square of the remaining side.\n            right_angled_triangles.Add((x,
    x, (long)Math.Sqrt(2 * x * x)));\n        }\n        // Now let's return true
    if the triangle is in the list, and false otherwise.\n        return right_angled_triangles.Contains(triangle);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ab1c186c96e464589fa8b8cf83359f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ab1c186c96e464589fa8b8cf83359f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a <= 0 || b <= 0 || c <= 0)\n            return false;\n        var
    s = new long[] { a, b, c };\n        Array.Sort(s);\n        return s[0] * s[0]
    + s[1] * s[1] == s[2] * s[2];\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] sides = new long[] { a, b, c };\n        Array.Sort(sides);\n        var
    hyp = sides[2];\n        var adj = sides[1];\n        var opp = sides[0];\n        //
    The Pythagorean theorem says:\n        //      c\xB2 = a\xB2 + b\xB2\n        //
    We can use this to check the triangle.\n        //\n        // Note: the cast
    to long is intentional because we don't want a double\n        // due to the imprecision
    of floating point operations.\n        return hyp * hyp == opp * opp + adj * adj;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // TODO: finish this\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fe89cb2d17644338e1d6fd5663af6ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fe89cb2d17644338e1d6fd5663af6ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b28328d4ce09426887572953a4454df7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b28328d4ce09426887572953a4454df7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015943
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // We can use the Pythagorean theorem (a^2 + b^2 = c^2) to check that\n
    \       // the triangle is right angled.\n        long sides[] = {a, b, c};\n
    \       Array.Sort(sides);\n        return (sides[0] * sides[0] + sides[1] * sides[1])
    == sides[2] * sides[2];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_6ms0vpd.cs(21,19): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var sides = new List<long> { a, b, c };\n        sides.Sort();\n        return
    sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Your code goes here.\n        double A = Math.Round(Math.Pow(a, 2));\n
    \       double B = Math.Round(Math.Pow(b, 2));\n        double C = Math.Round(Math.Pow(c,
    2));\n        if (Math.Sqrt(A + B) == Math.Sqrt(C)) {\n            return true;\n
    \       }\n        else if (Math.Sqrt(B + C) == Math.Sqrt(A)) {\n            return
    true;\n        }\n        else if (Math.Sqrt(A + C) == Math.Sqrt(B)) {\n            return
    true;\n        }\n        else {\n            return false;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // TODO: solve the problem\n        bool result = false;\n        if ((a
    * a) + (b * b) == (c * c)) result = true;\n        if ((a * a) + (c * c) == (b
    * b)) result = true;\n        if ((b * b) + (c * c) == (a * a)) result = true;\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if(a == 0 || b == 0 || c == 0) {\n            return false;\n        }\n
    \       if(a < 0 || b < 0 || c < 0) {\n            return false;\n        }\n
    \       // Find pythagorean triples.\n        // Max number of iterations is m*n*p.\n
    \       // c = m^2 + n^2 = p^2 = m^2 + n^2 = p^2 = p^2\n        // The smallest
    one has m = 2, n = 1, p = 3\n        // The longest one has m = p and n = 1\n
    \       // Max numbers for m, n and p are the square-root of their sums.\n        long
    sumOfSides = a + b + c;\n        long limit = (long)Math.Sqrt(sumOfSides);\n        long
    m = 2;\n        long n = 1;\n        long p = 3;\n        while(m <= limit) {\n
    \           while(n <= limit) {\n                while(p <= limit) {\n                    if(m*m
    + n*n == p*p) {\n                        if(m == a && n == b && p == c) {\n                            return
    true;\n                        }\n                        if(m == a && n == c
    && p == b) {\n                            return true;\n                        }\n
    \                       if(m == b && n == a && p == c) {\n                            return
    true;\n                        }\n                        if(m == b && n == c
    && p == a) {\n                            return true;\n                        }\n
    \                       if(m == c && n == a && p == b) {\n                            return
    true;\n                        }\n                        if(m == c && n == b
    && p == a) {\n                            return true;\n                        }\n
    \                   }\n                    p++;\n                }\n                n++;\n
    \               p = n + 1;\n            }\n            m++;\n            n = m
    + 1;\n            p = n + 1;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <892e5d69a6a3408380bcec9bcb3f700f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <892e5d69a6a3408380bcec9bcb3f700f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b
    + c * c == a * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // your code goes here\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <34e8ff680776419fbe838995eb4f300b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <34e8ff680776419fbe838995eb4f300b>:0 \n"
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a < 0 || b < 0 || c < 0) return false;\n        long[] s = new long[]
    { a, b, c };\n        Array.Sort(s);\n        a = s[0];\n        b = s[1];\n        c
    = s[2];\n        return a * a + b * b == c * c;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) ==
    (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // TODO\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fdcc0de70204eb3bb40b19a2dd1d848>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fdcc0de70204eb3bb40b19a2dd1d848>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var sideList = new List<long> { a, b, c };\n        sideList.Sort();\n
    \       var side1 = sideList[0];\n        var side2 = sideList[1];\n        var
    side3 = sideList[2];\n        return side1 * side1 + side2 * side2 == side3 *
    side3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Write your code here\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <765c901dbfd04ba39c968bb7bc1e00d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <765c901dbfd04ba39c968bb7bc1e00d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long max = Math.Max(a, Math.Max(b, c));\n        long min = Math.Min(a,
    Math.Min(b, c));\n        if (max * max == min * min + (a + b + c - max - min)
    * (a + b + c - max - min)) {\n            return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // TODO: Write code to solve this problem.\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3f78de8638e46b88e984ec2b45c8601>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3f78de8638e46b88e984ec2b45c8601>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // YOUR CODE GOES HERE\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0040b29eae234bbc9aa30bc6049fb80f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0040b29eae234bbc9aa30bc6049fb80f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a == 0 || b == 0 || c == 0) {\n            return false;\n        }\n\n
    \       if (a * a + b * b == c * c) {\n            return true;\n        }\n\n
    \       if (a * a + c * c == b * b) {\n            return true;\n        }\n\n
    \       if (b * b + c * c == a * a) {\n            return true;\n        }\n\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Your code here!\n        if (a == 0 || b == 0 || c == 0)\n            return
    false;\n        if (a == b && b == c)\n            return false;\n        if (a*a
    + b*b == c*c)\n            return true;\n        if (b*b + c*c == a*a)\n            return
    true;\n        if (c*c + a*a == b*b)\n            return true;\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Insert your code here.\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <8769f56f98aa46afac88fd4f9886e03e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <8769f56f98aa46afac88fd4f9886e03e>:0 \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return a*a + b*b == c*c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47ff73740a714f2cb6753d93a12b9670>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       double eps = 1e-9;\n        // To avoid overflow in pow(a, 2) + pow(b,
    2) == pow(c, 2), we have to\n        // explicitly check for cases where it is
    true.\n        if (a == c && a * a + b * b == c * c) {\n            return true;\n
    \       }\n        if (a == b && a * a + c * c == b * b) {\n            return
    true;\n        }\n        if (b == c && b * b + a * a == c * c) {\n            return
    true;\n        }\n        return Math.Abs(a * a + b * b - c * c) < eps ||\n               Math.Abs(a
    * a + c * c - b * b) < eps ||\n               Math.Abs(b * b + c * c - a * a)
    < eps;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return a*a + b*b == c*c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47ff73740a714f2cb6753d93a12b9670>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Initialize the sides of the triangle.\n        long[] triangle = new
    long[] { a, b, c };\n        // Sort the sides of the triangle in ascending order.\n
    \       Array.Sort(triangle);\n        // Return true if the longest side of the
    triangle is equal to the sum of the\n        // other two sides.\n        return
    triangle[2] == triangle[0] + triangle[1];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3264a85dff12482398de2087b52ac66f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3264a85dff12482398de2087b52ac66f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       bool result = false;\n        long temp = 0;\n        if (a > b) {\n            temp
    = a;\n            a = b;\n            b = temp;\n        }\n        if (b > c)
    {\n            temp = b;\n            b = c;\n            c = temp;\n        }\n
    \       if (a > b) {\n            temp = a;\n            a = b;\n            b
    = temp;\n        }\n        if (a * a + b * b == c * c) {\n            result
    = true;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Check that the longest side is sqrt(a^2 + b^2) by Pythagorean theorem\n
    \       // except when a or b is 0\n        if ((a == 0 && b == 0) ||\n            (a
    == 0 && c == 0) ||\n            (b == 0 && c == 0)) {\n            return false;\n
    \       } else if (a == 0 || b == 0 || c == 0) {\n            return true;\n        }
    else {\n            var lst = new List<long> { a, b, c };\n            var max
    = lst.Max();\n            lst.Remove(max);\n            return (long)Math.Pow(max,
    2) ==\n                (long)Math.Pow(lst[0], 2) + (long)Math.Pow(lst[1], 2);\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <b3aa7555cf374b9d9bcf9d409d37900a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <b3aa7555cf374b9d9bcf9d409d37900a>:0 \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a < b) {\n            long tmp = a;\n            a = b;\n            b
    = tmp;\n        }\n        if (a < c) {\n            long tmp = a;\n            a
    = c;\n            c = tmp;\n        }\n        if (b < c) {\n            long
    tmp = b;\n            b = c;\n            c = tmp;\n        }\n        return
    a * a == b * b + c * c;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return ((a * a) + (b * b) == (c * c));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) ==
    (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb5e9b38d0743a481252743c2723049>:0
    \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return a * a + b * b == c * c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adf79e92e44546fbae6da120c6fa3397>:0
    \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return (a > 0) && (b > 0) && (c > 0) && (a * a + b * b == c * c ||\n            a
    * a + c * c == b * b || b * b + c * c == a * a);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) ==
    (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // The two smaller sides of a right angle triangle must satisfy Pythagoras'
    theorem.\n        if (a <= b && a <= c) {\n            return (a * a + b * b ==
    c * c);\n        } else if (b <= a && b <= c) {\n            return (b * b + a
    * a == c * c);\n        } else {\n            return (c * c + a * a == b * b);\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a55dd582981d4e74b1b8da4824dfc994>:0
    \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Replace the code below with your solution.\n        return (a*a + b*b
    == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // https://artofproblemsolving.com/wiki/index.php/Right_triangle\n        //
    https://en.wikipedia.org/wiki/Pythagorean_theorem#Other_forms_of_the_theorem\n
    \       // a^2 + b^2 = c^2\n        // https://codefights.com/interview-practice/task/Hm98RnqK9Be575yoj\n
    \       return a*a + b*b == c*c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6f5a5ba2afa4a8b9574c8a75c89ba67>:0
    \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       List<long> tri = new List<long>() { a, b, c };\n        tri.Sort();\n
    \       double x = tri[0];\n        double y = tri[1];\n        double z = tri[2];\n
    \       return ((Math.Pow(x, 2) + Math.Pow(y, 2)) == Math.Pow(z, 2));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // PUT YOUR CODE HERE:\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2afd8e640c634d9daf021a860460e13c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2afd8e640c634d9daf021a860460e13c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return new List<long>{a, b, c}.OrderBy(n => n).ToList()[0] + new List<long>{a,
    b, c}.OrderBy(n => n).ToList()[1] == new List<long>{a, b, c}.OrderBy(n => n).ToList()[2];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d612200868554aa7b150b8025a8605fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d612200868554aa7b150b8025a8605fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return (a + b > c) && (a + c > b) && (b + c > a) && (a*a + b*b == c*c
    || a*a + c*c == b*b || b*b + c*c == a*a);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // If a square of a side is equal to the sum of the squares of the other
    two\n        // sides, it's a right-angled triangle.\n        if ((a * a) == ((b
    * b) + (c * c))) {\n            return true;\n        }\n        if ((b * b) ==
    ((a * a) + (c * c))) {\n            return true;\n        }\n        if ((c *
    c) == ((a * a) + (b * b))) {\n            return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Code here...\n        long s, l;\n        if (a > b) {\n            s
    = b;\n            l = a;\n        } else {\n            s = a;\n            l
    = b;\n        }\n        if (c > l)\n            l = c;\n        else if (c <
    s)\n            s = c;\n        else\n            ;\n        return s * s + l
    * l == c * c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0358ca6bdb1d44ba8475ff4cd1cf28ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0358ca6bdb1d44ba8475ff4cd1cf28ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // -- your code here\n        if(a == 0 || b == 0 || c == 0)\n            return
    false;\n        // due to the differences in conventions between \n        //
    C# and Racket:\n        // https://stackoverflow.com/questions/43736903/comparing-long-with-double-in-c-sharp\n
    \       double a_ = (double)a;\n        double b_ = (double)b;\n        double
    c_ = (double)c;\n        if(c_ == Math.Sqrt(a_ * a_ + b_ * b_))\n            return
    true;\n        if(b_ == Math.Sqrt(a_ * a_ + c_ * c_))\n            return true;\n
    \       if(a_ == Math.Sqrt(b_ * b_ + c_ * c_))\n            return true;\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] sides = new long[] { a, b, c };\n        Array.Sort(sides);\n        return
    sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Implement your solution here\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbc3129f7ba447948b989f41426e33a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbc3129f7ba447948b989f41426e33a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long x = a * a + b * b;\n        long y = c * c;\n        return x ==
    y;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <849d96d8bde5444e9149b7b36d952d0c>:0
    \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // write code here\n        return a * a + b * b == c * c;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f3104271487842a0b0fd1a3f61eb974c>:0
    \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] arr = new long[] { a, b, c };\n        Array.Sort(arr);\n        long
    m = arr[0];\n        long n = arr[1];\n        long p = arr[2];\n        if (m
    * m + n * n == p * p) {\n            return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Write your code here\n        return Math.Pow(a, 2) + Math.Pow(b, 2)
    == Math.Pow(c, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ff9ca02badb4f65af1aa24b076cd588>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var sides = new long[] { a, b, c };\n        return Math.Pow(sides.Max(),
    2) == sides.Sum(x => Math.Pow(x, 2)) - Math.Pow(sides.Max(), 2);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // We can obtain a right angle triangle when the Pythagorean theorem is\n
    \       // satisfied, which is:\n        //\n        //   c^2 = a^2 + b^2\n        //\n
    \       // So we check for this condition. Since the triangle must be finite\n
    \       // we can also check that the sides are positive values.\n        return
    (a > 0) && (b > 0) && (c > 0) && (c * c == a * a + b * b);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0ae9f0965d041dfb652a204415dc866>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // This one is quite straightforward. The idea is to check each length
    and \n        // see if the sum of the two other lengths is equal to that length.\n
    \       // For example, if the lengths are 3, 4, and 5, then we would check to
    see \n        // if 3 + 4 = 5. It does, so it is a right triangle. If a side does
    not \n        // equal the sum of the other two sides, then it is not a right
    triangle.\n        if (a + b == c) {\n            return true;\n        } else
    if (a + c == b) {\n            return true;\n        } else if (b + c == a) {\n
    \           return true;\n        } else {\n            return false;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3382f0a3a99449cba787a0db14029281>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3382f0a3a99449cba787a0db14029281>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // The Pythagorean theorem states that in a right triangle, the sum of
    the\n        // squares of the two smaller sides equals the square of the hypotenuse.\n
    \       // Assume a <= b <= c.\n        return Math.Pow(a, 2) + Math.Pow(b, 2)
    == Math.Pow(c, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f073898d6d1c432a958b9b5ef94d99bf>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a <= 0 || b <= 0 || c <= 0)\n            return false;\n        if
    (a + b <= c || a + c <= b || b + c <= a)\n            return false;\n        if
    (a > b && a > c)\n            return a * a == b * b + c * c;\n        if (b >
    a && b > c)\n            return b * b == a * a + c * c;\n        if (c > a &&
    c > b)\n            return c * c == a * a + b * b;\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return a * a + b * b == c * c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adf79e92e44546fbae6da120c6fa3397>:0
    \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var sides = new long[] { a, b, c };\n        Array.Sort(sides);\n        return
    (long)Math.Pow(sides[0], 2) + (long)Math.Pow(sides[1], 2) == (long)Math.Pow(sides[2],
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // return true if a^2 + b^2 == c^2\n        //        otherwise false\n\n
    \       // use Pythagorean theorem\n        // a^2 + b^2 = c^2\n        // a^2
    == c^2 - b^2\n        // a^2 == Math.Pow(c, 2) - Math.Pow(b, 2)\n        // Math.Pow(a,
    2) == Math.Pow(c, 2) - Math.Pow(b, 2)\n        // Math.Pow(a, 2) == Math.Pow(c,
    2) - Math.Pow(b, 2)\n\n        // double a2 = Math.Pow(a, 2);\n        // double
    b2 = Math.Pow(b, 2);\n        // double c2 = Math.Pow(c, 2);\n\n        // return
    a2 == c2 - b2;\n\n        // if you want to avoid square roots\n        // a^2
    + b^2 = c^2\n        // a^2 + b^2 == c^2\n        // a^2 + b^2 == Math.Pow(c,
    2)\n        // Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2)\n\n        return
    Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) ==
    (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913c4b138c2d48eb87cf41d34c1fb5a9>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if(a == 0 || b == 0 || c == 0) return false;\n        return c*c == a*a
    + b*b;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb42d4e4f923443592f0525bfeeded59>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return a * a + b * b == c * c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adf79e92e44546fbae6da120c6fa3397>:0
    \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return (a*a) + (b*b) == (c*c);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <123246ea56e74afb8ad8c8b3444ca4fb>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var max = new[] { a, b, c }.Max();\n        var other = new[] { a, b,
    c }.Sum() - max;\n        return max * max == other * other;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c7203f702784e7198c13cc5233a8f6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c7203f702784e7198c13cc5233a8f6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015945
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <b3aa7555cf374b9d9bcf9d409d37900a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <b3aa7555cf374b9d9bcf9d409d37900a>:0 \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] sides = new long[] { a, b, c };\n        // we are checking if
    the largest number squared is equal to the sum of\n        // the squares of the
    other two numbers.\n        long max = Math.Max(a, Math.Max(b, c));\n        long
    sumOfSquares = a * a + b * b + c * c - max * max;\n        return max * max ==
    sumOfSquares;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a <= 0 || b <= 0 || c <= 0)\n            return false;\n        if
    (a > b) {\n            if (a > c) {\n                return b * b + c * c == a
    * a;\n            } else {\n                return a * a + b * b == c * c;\n            }\n
    \       } else {\n            if (b > c) {\n                return a * a + c *
    c == b * b;\n            } else {\n                return a * a + b * b == c *
    c;\n            }\n        }\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Implement this function\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <962890b9243049c49ce3ba56bdb34080>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <962890b9243049c49ce3ba56bdb34080>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] arr = new long[] { a, b, c };\n        // first sort the input,
    then check if the one of the hypotenuse is equal to\n        // the sum of the
    other 2 squares.\n        Array.Sort(arr);\n        long h = arr[2];\n        return
    h * h == arr[0] * arr[0] + arr[1] * arr[1];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // In a right triangle, the sum of the squares of the two sides equals\n
    \       // the square of the hypotenuse.\n        // a^2 + b^2 = c^2\n        //
    (a * a) + (b * b) = (c * c)\n        return ((a * a) + (b * b) == (c * c));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1c4198a183846499c2cfa8248632136>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long max = Math.Max(a, Math.Max(b, c));\n        return a * a + b * b
    + c * c - 2 * max * max == max * max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5786e324d5644a9b82cb149afeb89250>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5786e324d5644a9b82cb149afeb89250>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Algorithm: (3, 4, 5) or (5, 12, 13)\n        // Pythagorean theorem:
    x^2 + y^2 = z^2\n        // for natural numbers x, y, z.\n        var s = new
    long[] { a, b, c };\n        Array.Sort(s);\n        if (s[0] * s[0] + s[1] *
    s[1] == s[2] * s[2]) {\n            return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Debug.Assert((a >= 1L) && (b >= 1L) && (c >= 1L));\n        if ((a
    < 1L) || (b < 1L) || (c < 1L))\n            return false;\n        // double m
    = Math.Max(a, Math.Max(b, c));\n        // if (m < 1.0)\n        //     return
    false;\n        // double a1 = a / m;\n        // double b1 = b / m;\n        //
    double c1 = c / m;\n        // return (a1 * a1 + b1 * b1 == c1 * c1);\n        return
    ((a * a == b * b + c * c) || (b * b == a * a + c * c) || (c * c == a * a + b *
    b));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // your code here\n        var sides = new [] {a, b, c};\n        Array.Sort(sides);\n
    \       var sorted = sides.ToList();\n        var c_sq = c * c;\n        var b_sq
    = b * b;\n        var a_sq = a * a;\n        return c_sq == b_sq + a_sq;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d109ef4996c5401786d1d00925465c74>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var res = (BigInteger.Pow(a, 2) + BigInteger.Pow(b, 2)) == BigInteger.Pow(c,
    2);\n        return res;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ceaf1e8978864e9db1bcb9bbb9f9d2ac>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // The longest side must be the opposite of the right angle\n        //
    All other sides must be less than or equal to the longest side\n        // No
    side may be zero\n        if (a > b && a > c) {\n            return (b*b + c*c
    == a*a) && a <= b + c && a > 0 && b > 0 && c > 0;\n        } else if (b > a &&
    b > c) {\n            return (a*a + c*c == b*b) && b <= a + c && a > 0 && b >
    0 && c > 0;\n        } else if (c > a && c > b) {\n            return (a*a + b*b
    == c*c) && c <= a + b && a > 0 && b > 0 && c > 0;\n        } else {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // your code goes here\n        return a*a + b*b == c*c;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f56afec001864114b8b32f5a0db87e43>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a <= 0 || b <= 0 || c <= 0)\n            return false;\n        return
    a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // By the Pythagorean theorem (https://en.wikipedia.org/wiki/Pythagorean_theorem),\n
    \       // all right triangles with integral length sides satisfy a^2 + b^2 =
    c^2.\n        long x = a*a;\n        long y = b*b;\n        long z = c*c;\n        return
    (x + y == z) || (x + z == y) || (y + z == x);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a < b) {\n            long t = a;\n            a = b;\n            b
    = t;\n        }\n        if (a < c) {\n            long t = a;\n            a
    = c;\n            c = t;\n        }\n        if (b < c) {\n            long t
    = b;\n            b = c;\n            c = t;\n        }\n        return (a * a)
    == (b * b + c * c);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Your code here\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) ==
    (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5316d57ff44d45ca95afc413ad77641e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5316d57ff44d45ca95afc413ad77641e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       bool result = false;\n        long side1 = Math.Max(a, b);\n        long
    side2 = Math.Max(side1, c);\n        long side3 = Math.Min(a, b);\n        long
    side4 = Math.Min(side3, c);\n        long side5 = a + b + c - side2 - side4;\n
    \       long hypo = side2;\n        long base1 = side4;\n        long height =
    side5;\n        if (hypo*hypo == base1*base1 + height*height) {\n            result
    = true;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Fun fact: if a^2 + b^2 = c^2, then c is the hypotenuse.\n        var
    maxValue = Math.Max(a, Math.Max(b, c));\n        var hypotenuse = (long)Math.Pow(maxValue,
    2);\n        var catet = (long)Math.Pow(a, 2) + (long)Math.Pow(b, 2) + (long)Math.Pow(c,
    2) - hypotenuse;\n        return catet == hypotenuse;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] l = new long[] { a, b, c };\n        Array.Sort(l);\n        if(l[0]
    <= 0) return false;\n        if(l[0] * l[0] + l[1] * l[1] == l[2] * l[2]) return
    true;\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return a * a + b * b == c * c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adf79e92e44546fbae6da120c6fa3397>:0
    \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var a2 = Math.Pow(a, 2);\n        var b2 = Math.Pow(b, 2);\n        var
    c2 = Math.Pow(c, 2);\n        return a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2
    == a2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long x = (a * a) + (b * b);\n        long y = c * c;\n        if (x ==
    y) {\n            return true;\n        }\n        else {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92380f39de014a839b2057de584de284>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // A right-angled triangle can be spotted if one of its sides is the\n
    \       // hypotenuse, i.e., the longest side of the triangle. We can conclude\n
    \       // that the the third side is the shortest. We can check if a^2 + b^2
    = c^2\n        // where c is the hypotenuse. This can be verified by multiplying
    two\n        // bigIntegers since the square of a bigInteger is also a bigInteger.\n
    \       return ((a * a) + (b * b) == (c * c));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) ==
    (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23136da005bb43309fc48da0d430ef0d>:0
    \n"
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // 1. Sort the sides\n        // 2. Check if largest side is square of
    sum of other two sides\n        // 3. If yes, return true, else false\n        long[]
    sides = new long[] {a, b, c};\n        Array.Sort(sides);\n        return (sides[2]
    * sides[2]) == (sides[0] * sides[0] + sides[1] * sides[1]);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return ((a*a + b*b) == c*c) || ((b*b + c*c) == a*a) || ((c*c + a*a) ==
    b*b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long x = Math.Max(a, Math.Max(b, c));\n        if (x == a) {\n            return
    (b * b + c * c == a * a);\n        } else if (x == b) {\n            return (a
    * a + c * c == b * b);\n        } else {\n            return (a * a + b * b ==
    c * c);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // TODO\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fdcc0de70204eb3bb40b19a2dd1d848>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fdcc0de70204eb3bb40b19a2dd1d848>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var sides = new List<long> { a, b, c };\n        sides.Sort();\n        var
    pythagoreanTriple = sides[0] * sides[0] + sides[1] * sides[1];\n        return
    sides[2] * sides[2] == pythagoreanTriple;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015945
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // If a2 + b2 = c2 then it is a right angled triangle\n        return
    a * a + b * b == c * c;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <971e373914a84fdbbf7a4b4f0c045e2f>:0
    \n"
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // return (long)Math.Pow(a, 2) + (long)Math.Pow(b, 2) == (long)Math.Pow(c,
    2);\n        return a * a + b * b == c * c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee479295a44442e08c7ff3d2a3885caf>:0
    \n"
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // need a*a + b*b = c*c\n        // so, given a and b, we want to know
    if c*c - a*a - b*b = 0\n        // let's check that\n        return c*c - a*a
    - b*b == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ab21306216f409e865b2876609d7e77>:0
    \n"
  stdout: ''
  timestamp: 1660015946
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <b3aa7555cf374b9d9bcf9d409d37900a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <b3aa7555cf374b9d9bcf9d409d37900a>:0 \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] points = new long[] { a, b, c };\n        long max = points.Max();\n
    \       long hyp = points.Sum() - max;\n        return (max * max) == (hyp * hyp);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4291e5a707f482e95694d6d4006f1bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4291e5a707f482e95694d6d4006f1bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // TODO: write your solution to this problem here!\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19fc01eb1f424d5791e68d6b40093a30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19fc01eb1f424d5791e68d6b40093a30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a > b && a > c)\n            return Math.Pow(b, 2) + Math.Pow(c, 2)
    == Math.Pow(a, 2);\n        else if (b > a && b > c)\n            return Math.Pow(a,
    2) + Math.Pow(c, 2) == Math.Pow(b, 2);\n        else if (c > a && c > b)\n            return
    Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2);\n        else\n            return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // TODO: Implement RightAngleTriangle\n        return ((a * a + b * b
    == c * c) || (b * b + c * c == a * a) || (c * c + a * a == b * b));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] array = new long[] { a, b, c };\n        long aa = a * a;\n        long
    bb = b * b;\n        long cc = c * c;\n        long s = aa + bb;\n        long
    d = aa + cc;\n        long f = bb + cc;\n        return s == cc || d == bb ||
    f == aa;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] abc = new long[] { a, b, c };\n        Array.Sort(abc);\n        return
    abc[0] * abc[0] + abc[1] * abc[1] == abc[2] * abc[2];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return a * a + b * b == c * c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adf79e92e44546fbae6da120c6fa3397>:0
    \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n
    \       long[] list = new long[] {a, b, c};\n        Array.Sort(list);\n        return
    list[0]*list[0] + list[1]*list[1] == list[2]*list[2];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var arr = new[] { a, b, c };\n        Array.Sort(arr);\n        return
    arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if(a > b && a > c)\n            return a * a == b * b + c * c;\n        if(b
    > a && b > c)\n            return b * b == a * a + c * c;\n        return c *
    c == a * a + b * b;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Verify that the sum of the squares of any two sides is equal to the\n
    \       // square of the third.\n        return a*a + b*b == c*c || a*a + c*c
    == b*b || b*b + c*c == a*a;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var sides = new List<long> { a, b, c };\n        sides.Sort();\n        return
    sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] sides = new long[] { a, b, c };\n        long hypotenuse = sides.Max();\n
    \       long leg1 = sides.Min();\n        long leg2 = sides.Where(x => x != hypotenuse
    && x != leg1).First();\n        long sumOfSquares = leg1 * leg1 + leg2 * leg2;\n
    \       long squareOfHypotenuse = hypotenuse * hypotenuse;\n        return sumOfSquares
    == squareOfHypotenuse;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RightAngleTriangle
    (System.Int64 a, System.Int64 b, System.Int64 c) [0x00044] in <532b8c39335a4edb8966f4d0a048cc07>:0
    \n  at Problem.Main (System.String[] args) [0x00038] in <532b8c39335a4edb8966f4d0a048cc07>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RightAngleTriangle
    (System.Int64 a, System.Int64 b, System.Int64 c) [0x00044] in <532b8c39335a4edb8966f4d0a048cc07>:0
    \n  at Problem.Main (System.String[] args) [0x00038] in <532b8c39335a4edb8966f4d0a048cc07>:0
    \n"
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return (a * a + b * b == c * c);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ada4295d251c4082b87efbe9dc6bf928>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Fill in the code here\n        bool flag = false;\n        if(a*a+b*b==c*c
    || a*a+c*c==b*b || b*b+c*c==a*a)\n            flag = true;\n        return flag;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // The sum of the squares of the two smaller sides must equal the square
    of\n        // the longest side.\n        return (a * a + b * b == c * c) || (a
    * a + c * c == b * b) || (b * b + c * c == a * a);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) ==
    (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a > b && a > c) {\n            // a is largest side, c is the hypotenuse\n
    \           return a * a == b * b + c * c;\n        } else if (b > a && b > c)
    {\n            // b is largest side, c is the hypotenuse\n            return b
    * b == a * a + c * c;\n        } else {\n            // c is largest side, b is
    the hypotenuse\n            return c * c == a * a + b * b;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // TODO: Implement your solution here\n        if( a*a + b*b == c*c )\n
    \       {\n            return true;\n        }\n        else\n        {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b46b783da054280b50c5ba7302e7590>:0
    \n"
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] sides = new long[] { a, b, c };\n        Array.Sort(sides);\n        return
    sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a > b && a > c) {\n            return a * a == b * b + c * c;\n        }
    else if (b > a && b > c) {\n            return b * b == a * a + c * c;\n        }
    else {\n            return c * c == a * a + b * b;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b
    + c * c == a * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // put your code here\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e71885a97cd24c3184b15aa126edf24f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e71885a97cd24c3184b15aa126edf24f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015946
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] sides = new long[] { a, b, c };\n        long hypotenuse = sides.Max();\n
    \       long leg1 = sides.Min();\n        long leg2 = sides.Where(x => x != hypotenuse
    && x != leg1).Single();\n        return (leg1 * leg1 + leg2 * leg2 == hypotenuse
    * hypotenuse);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Single[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x0004a] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RightAngleTriangle
    (System.Int64 a, System.Int64 b, System.Int64 c) [0x00044] in <d4a1c95131db48bab8658eac67303ae7>:0
    \n  at Problem.Main (System.String[] args) [0x00038] in <d4a1c95131db48bab8658eac67303ae7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Single[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x0004a] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RightAngleTriangle
    (System.Int64 a, System.Int64 b, System.Int64 c) [0x00044] in <d4a1c95131db48bab8658eac67303ae7>:0
    \n  at Problem.Main (System.String[] args) [0x00038] in <d4a1c95131db48bab8658eac67303ae7>:0
    \n"
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // NOTE: Solutions should not use trigonometric functions, such as\n        //
    Math.Cos() or Math.Sin().\n        // BEGIN SOLUTION\n        var x = new[] {
    a, b, c };\n        Array.Sort(x);\n        return x[0] * x[0] + x[1] * x[1] ==
    x[2] * x[2];\n        // END SOLUTION\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var sides = new List<long> { a, b, c };\n        sides.Sort();\n        return
    sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       //return (a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a);\n        var
    list = new List<long>{a,b,c};\n        list.Sort();\n        return (list[0]*list[0]+list[1]*list[1]==list[2]*list[2]);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       double x = (double)a;\n        double y = (double)b;\n        double z
    = (double)c;\n        return Math.Pow(x, 2) + Math.Pow(y, 2) == Math.Pow(z, 2);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f55ea41a054c48beb4f97cec2f17581a>:0
    \n"
  stdout: ''
  timestamp: 1660015946
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var sides = new List<long>() { a, b, c };\n        var max = sides.Max();\n
    \       var other = sides.Except(new List<long>() { max }).ToList();\n        return
    Math.Pow(max, 2) == Math.Pow(other[0], 2) + Math.Pow(other[1], 2);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RightAngleTriangle
    (System.Int64 a, System.Int64 b, System.Int64 c) [0x0004f] in <590f3d67288741e0baf0b9bd0693c66b>:0
    \n  at Problem.Main (System.String[] args) [0x00038] in <590f3d67288741e0baf0b9bd0693c66b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RightAngleTriangle
    (System.Int64 a, System.Int64 b, System.Int64 c) [0x0004f] in <590f3d67288741e0baf0b9bd0693c66b>:0
    \n  at Problem.Main (System.String[] args) [0x00038] in <590f3d67288741e0baf0b9bd0693c66b>:0
    \n"
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // return (a * a) + (b * b) == (c * c);\n        return Math.Pow(a, 2)
    + Math.Pow(b, 2) == Math.Pow(c, 2);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9da93d2ca124d06817511a6bc0b54a2>:0
    \n"
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return (Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08691df5ea3444fe97c546615adcbdc9>:0
    \n"
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return ((a * a) + (b * b) == (c * c)) || ((a * a) + (c * c) == (b * b))
    || ((b * b) + (c * c) == (a * a));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // You can use Geometry.cs, a .cs file available in the coding area\n
    \       // which contains classes and methods to help you solve this\n        //
    problem. \n        \n        // You are not allowed to use any other external
    .cs or .dll files.\n        // You are not allowed to create any new classes.\n
    \       // You are not allowed to use any methods for string manipulation.\n\n
    \       // Solve this problem by implementing the RightAngleTriangle function\n
    \       // below.\n        // You can use the GetLength method of the LineSegment
    class to get\n        // the length of a LineSegment.\n        // Return true
    if the three LineSegments form a right-angled triangle,\n        // false otherwise.\n
    \       // Remember, you are not allowed to use any other external .cs or .dll\n
    \       // files.\n\n        // SOLUTION STARTS HERE //\n        throw new NotImplementedException();\n
    \       // SOLUTION ENDS HERE //\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <b17584fa19244e93a165193193b46ed1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <b17584fa19244e93a165193193b46ed1>:0 \n"
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // first, take the square root of a,b,c\n        // second, sum these
    three numbers\n        // third, see if it is equal to the third number squared\n
    \       // if it is, then it is a right angle triangle\n        long[] sides =
    new long[] {a, b, c};\n        long largestSide = a;\n        if (b > largestSide)
    {\n            largestSide = b;\n        }\n        if (c > largestSide) {\n            largestSide
    = c;\n        }\n        if (largestSide == a) {\n            return Math.Pow(a,
    2) == Math.Pow(b, 2) + Math.Pow(c, 2);\n        } else if (largestSide == b) {\n
    \           return Math.Pow(b, 2) == Math.Pow(a, 2) + Math.Pow(c, 2);\n        }
    else {\n            return Math.Pow(c, 2) == Math.Pow(a, 2) + Math.Pow(b, 2);\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return (a*a + b*b == c*c) || (b*b + c*c == a*a) || (c*c + a*a == b*b);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var sides = new long[] { a, b, c };\n        Array.Sort(sides);\n        var
    a2 = sides[0] * sides[0];\n        var b2 = sides[1] * sides[1];\n        var
    c2 = sides[2] * sides[2];\n        if (a2 + b2 == c2) return true;\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return a*a + b*b == c*c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47ff73740a714f2cb6753d93a12b9670>:0
    \n"
  stdout: ''
  timestamp: 1660015942
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // n^2 + n^2 = n^2\n        // n^2 = n^2 + n^2\n        // x^2 + y^2 =
    z^2\n        return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b
    * b + c * c == a * a);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return (Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08691df5ea3444fe97c546615adcbdc9>:0
    \n"
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // code goes here\n        long sum_of_squares = (a * a) + (b * b);\n
    \       long c_squared = c * c;\n        if (sum_of_squares == c_squared)\n        {\n
    \           return true;\n        }\n        else\n        {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e32a6cb8317843918ec2bb5a09b176d2>:0
    \n"
  stdout: ''
  timestamp: 1660015947
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // your code goes here\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <34e8ff680776419fbe838995eb4f300b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <34e8ff680776419fbe838995eb4f300b>:0 \n"
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a > b && a > c)\n            return Math.Pow(a, 2) == Math.Pow(b,
    2) + Math.Pow(c, 2);\n        else if (b > a && b > c)\n            return Math.Pow(b,
    2) == Math.Pow(a, 2) + Math.Pow(c, 2);\n        else\n            return Math.Pow(c,
    2) == Math.Pow(a, 2) + Math.Pow(b, 2);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Fill in this part.\n        // Go to http://www.mathsisfun.com/triangle.html
    if you forgot how to \n        // find out if a triangle is right-angled\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bed52e91108c447a8b01a39dcb260c3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bed52e91108c447a8b01a39dcb260c3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015947
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Insert your code here.\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <8769f56f98aa46afac88fd4f9886e03e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <8769f56f98aa46afac88fd4f9886e03e>:0 \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return a * a + b * b == c * c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adf79e92e44546fbae6da120c6fa3397>:0
    \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // TODO: implement me\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <faaece750056476d9fcca7e727b03371>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <faaece750056476d9fcca7e727b03371>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // PUT YOUR CODE HERE\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1902ebc3f954cbda4743e670e3ec6f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1902ebc3f954cbda4743e670e3ec6f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // TODO\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fdcc0de70204eb3bb40b19a2dd1d848>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fdcc0de70204eb3bb40b19a2dd1d848>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015943
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var s = new long[] { a, b, c };\n        Array.Sort(s);\n        return
    s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] sides = new long[] { a, b, c };\n        Array.Sort(sides);\n        return
    (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Compute the maximum of the three sides.\n        long max = a;\n        if
    (b > max) {\n            max = b;\n        }\n        if (c > max) {\n            max
    = c;\n        }\n        // The largest side is opposite to the right angle, so
    it must be \n        // squared.\n        long max2 = max * max;\n        // The
    other two sides must be squared and summed, but don't forget that \n        //
    this sum is not yet squared (because it is not a side).\n        long sum2 = a
    * a + b * b + c * c - max2;\n        // If the maximum side squared is equal to
    the sum of the squares of the \n        // other two sides then we have a right-angled
    triangle.\n        return max2 == sum2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // the side with the largest length can never be the hypotenuse of a\n
    \       // right-angled triangle, because the hypotenuse is the longest side of\n
    \       // the triangle.\n        if (a < b && b < c) return false;\n        if
    (a < c && c < b) return false;\n        if (b < a && a < c) return false;\n        if
    (b < c && c < a) return false;\n        if (c < a && a < b) return false;\n        if
    (c < b && b < a) return false;\n        // the side with the largest length can
    never be the hypotenuse of a\n        // right-angled triangle, because the hypotenuse
    is the longest side of\n        // the triangle.\n\n        // a^2 + b^2 = c^2\n
    \       return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b
    + c * c == a * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa32eacccafc4aad873d1d7a022c7edb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa32eacccafc4aad873d1d7a022c7edb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long max = Math.Max(a, Math.Max(b, c));\n        // max is the hypotenuse\n
    \       long pythagoras = (a * a) + (b * b) + (c * c) - (max * max);\n        //
    square of the sum of the other two sides\n        return pythagoras == 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08b6f6bf947c422a98139cc2b6c1fb15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08b6f6bf947c422a98139cc2b6c1fb15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Implement me!\n        if (a * a + b * b == c * c) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0c39b01aa3b4d4aa5cd2241674e05f6>:0
    \n"
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Your code here\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) ==
    (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44dc0cd2fcf8471faa80e17086be9084>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44dc0cd2fcf8471faa80e17086be9084>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       var a2 = Math.Pow(a, 2);\n        var b2 = Math.Pow(b, 2);\n        var
    c2 = Math.Pow(c, 2);\n        var cB = b2 + c2;\n        var cA = a2 + c2;\n        var
    cC = a2 + b2;\n        var c1 = Math.Round(Math.Sqrt(cA), 0);\n        var c2B
    = Math.Round(Math.Sqrt(cB), 0);\n        var c2C = Math.Round(Math.Sqrt(cC), 0);\n
    \       if (c == c1 || c == c2B || c == c2C) {\n            return true;\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a63c97623c7476e814b7d96bc1a4613>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a63c97623c7476e814b7d96bc1a4613>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] ar = new long[] { a, b, c };\n        Array.Sort(ar);\n        return
    ar[0] * ar[0] + ar[1] * ar[1] == ar[2] * ar[2];\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) ==
    (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       //Implement me!\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) ==
    (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2bbe16b935ef4d63aca1fd4c878ecad5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2bbe16b935ef4d63aca1fd4c878ecad5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] sides = new long[] { a, b, c };\n        Array.Sort(sides);\n        return
    sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a <= 0 || b <= 0 || c <= 0)\n            return false;\n        //
    Pythagorean theorem\n        if (a > b && a > c) {\n            if (a * a == b
    * b + c * c)\n                return true;\n        } else if (b > a && b > c)
    {\n            if (b * b == a * a + c * c)\n                return true;\n        }
    else if (c > a && c > b) {\n            if (c * c == a * a + b * b)\n                return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Let's sort the sides by size. We need to know which sides are the\n
    \       // longest and shortest.\n        long[] x = new long[] { a, b, c };\n
    \       Array.Sort(x);\n        long hypotenuse = x[2];\n        long shortside
    = x[0];\n        long longside = x[1];\n        // Now it's easy to determine
    whether the triangle is right-angled:\n        if (shortside*shortside + longside*longside
    == hypotenuse*hypotenuse) {\n            return true;\n        } else {\n            return
    false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Given the lengths of the three sides of a triangle. Return true if
    the three\n        // sides form a right-angled triangle, false otherwise.\n        //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \       // 90 degree.\n        // Example:\n        // >>> RightAngleTriangle((3L),
    (4L), (5L))\n        // (true)\n        // >>> RightAngleTriangle((1L), (2L),
    (3L))\n        // (false)\n        var baseSqrd = a * a;\n        var heightSqrd
    = b * b;\n        var hypotenuseSqrd = c * c;\n        if (baseSqrd + heightSqrd
    == hypotenuseSqrd) {\n            return true;\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec85043cbdf94626996d30ebcfdaf45b>:0
    \n"
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // 1. Compare sides\n        if(a > b && a > c) {\n            return
    (a * a == b * b + c * c);\n        } else if(b > a && b > c) {\n            return
    (b * b == a * a + c * c);\n        } else {\n            return (c * c == a *
    a + b * b);\n        }\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Your code goes here.\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <5a9e272eea364a4dba3dd8936986db9a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <5a9e272eea364a4dba3dd8936986db9a>:0 \n"
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       double[] sides = new double[] { a, b, c };\n        Array.Sort(sides);\n
    \       double hyp = sides[2];\n        double side1 = sides[0];\n        double
    side2 = sides[1];\n        return (hyp * hyp) == (side1 * side1) + (side2 * side2);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a < b) {\n            var t = a;\n            a = b;\n            b
    = t;\n        }\n        if (a < c) {\n            var t = a;\n            a =
    c;\n            c = t;\n        }\n        return c * c + b * b == a * a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       if (a > b && a > c) {\n            return a * a == b * b + c * c;\n        }
    else if (b > a && b > c) {\n            return b * b == a * a + c * c;\n        }
    else {\n            return c * c == a * a + b * b;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015946
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Implement me!\n        long[] sides = new long[] { a, b, c };\n        Array.Sort(sides);\n
    \       long hypo = sides[2];\n        long adj = sides[1];\n        long opp
    = sides[0];\n        if (hypo * hypo == adj * adj + opp * opp)\n            return
    true;\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015948
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] sides = new long[] { a, b, c };\n        Array.Sort(sides);\n        return
    sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Solve the problem yourself.\n        // return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy116hoip.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1660015947
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] l = new long[] { a, b, c };\n        Array.Sort(l);\n        return
    l[0] * l[0] + l[1] * l[1] == l[2] * l[2];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015948
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long[] sides = new long[] { a, b, c };\n        Array.Sort(sides);\n        return
    sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Write code here\n        long[] num = {a, b, c};\n        Array.Sort(num);\n
    \       if (num[0] * num[0] + num[1] * num[1] == num[2] * num[2]) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015948
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Insert your code here.\n        return (a*a + b*b == c*c);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54a26b69fb1b466fbba6071fc732da03>:0
    \n"
  stdout: ''
  timestamp: 1660015948
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       throw new NotImplementedException();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <b3aa7555cf374b9d9bcf9d409d37900a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <b3aa7555cf374b9d9bcf9d409d37900a>:0 \n"
  stdout: ''
  timestamp: 1660015944
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Using pythagoras theorem\n        return a * a + b * b == c * c ||
    a * a + c * c == b * b || c * c + b * b == a * a;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) ==
    (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015948
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Check if a, b and c are integers\n        // Check if a, b and c are
    positive\n        // Check if a is less than b plus c and so on\n        if (a
    > 0 && b > 0 && c > 0) {\n            if (a < b + c && b < a + c && c < a + b)
    {\n                if (a * a + b * b == c * c || a * a + c * c == b * b || b *
    b + c * c == a * a) {\n                    return true;\n                }\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015948
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // Your code here\n        return (a*a + b*b == c*c);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27bd34b97ce74d8dab627c0c44d737c3>:0
    \n"
  stdout: ''
  timestamp: 1660015948
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       // sqrt(a^2 + b^2) == c?\n        return Math.Pow(a, 2) + Math.Pow(b,
    2) == Math.Pow(c, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e9c4f6749dd44c79078db252b649d89>:0
    \n"
  stdout: ''
  timestamp: 1660015948
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return true
    if the three\n    // sides form a right-angled triangle, false otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),
    (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //
    (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n
    \       long max = Math.Max(a, b);\n        max = Math.Max(max, c);\n        long
    sum = a + b + c;\n        if (max * max == sum - max) {\n            return true;\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73d298a42e904d96892c7fb61ad31ad8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73d298a42e904d96892c7fb61ad31ad8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015948
