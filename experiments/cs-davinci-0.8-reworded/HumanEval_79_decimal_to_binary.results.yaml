language: cs
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var binaryNum
    = new StringBuilder(\"db\");\n        for (var i = 0; i < 64; i++) {\n            if
    ((decimalNum & (1L << i)) != 0) {\n                binaryNum.Append(\"1\");\n
    \           } else {\n                binaryNum.Append(\"0\");\n            }\n
    \       }\n        binaryNum.Append(\"db\");\n        return binaryNum.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9d29c18bc6748d0a4edb43eb8873580>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9d29c18bc6748d0a4edb43eb8873580>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Convert
    long to a binary string representation with no leading zeros.\n        return
    decimalNum.ToString(\"X16\");\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59c8f4dcb93b402eb62c10103289de18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59c8f4dcb93b402eb62c10103289de18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return $\"db{Convert.ToString(decimalNum,
    2)}db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // your code
    goes here\n        ////////////////////////////\n        var binaryNum = new StringBuilder();\n
    \       binaryNum.Append(\"db\");\n        for (var i = 0; i < 64; i++) {\n            binaryNum.Append((decimalNum
    & 0x8000000000000000) != 0 ? \"1\" : \"0\");\n            decimalNum <<= 1;\n
    \       }\n        binaryNum.Append(\"db\");\n        return binaryNum.ToString();\n
    \       ////////////////////////////\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb1x56hrz.cs(25,31): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''ulong''

    '
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var bitLen
    = (int)Math.Floor(Math.Log(decimalNum, 2)) + 1;\n        var binary = new StringBuilder();\n
    \       for (int i = bitLen - 1; i >= 0; i--) {\n            if ((decimalNum &
    (1 << i)) != 0) {\n                binary.Append('1');\n            } else {\n
    \               binary.Append('0');\n            }\n        }\n        return
    string.Format(\"db{0}db\", binary.ToString());\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d60e9c5df9941d6a29617909030c2f3>:0
    \n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var binaryNum
    = new StringBuilder();\n        if (decimalNum == 0) {\n            return \"db0db\";\n
    \       }\n        while (decimalNum > 0) {\n            if (decimalNum % 2 ==
    0) {\n                binaryNum.Append('0');\n            } else {\n                binaryNum.Append('1');\n
    \           }\n            decimalNum /= 2;\n        }\n        return \"db\"
    + new string(binaryNum.ToString().Reverse().ToArray()) + \"db\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Your code
    goes here\n        if (decimalNum == 0) {\n            return \"db0db\";\n        }\n\n
    \       var bin = new StringBuilder();\n        bin.Append(\"db\");\n        while
    (decimalNum > 0) {\n            bin.Append(decimalNum % 2);\n            decimalNum
    /= 2;\n        }\n        bin.Append(\"db\");\n        bin.Reverse();\n        return
    bin.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi105w2in.cs(32,13): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binaryFormat
    = Convert.ToString(decimalNum, 2);\n        binaryFormat = \"db\" + binaryFormat
    + \"db\";\n        return binaryFormat;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string ans
    = \"db\";\n        while (decimalNum != 0) {\n            if (decimalNum % 2 ==
    0)\n                ans = '0' + ans;\n            else\n                ans =
    '1' + ans;\n            decimalNum /= 2;\n        }\n        return ans + \"db\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74f5df8771924981b9b770a7be2ffeb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74f5df8771924981b9b770a7be2ffeb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string res
    = \"db\";\n        while (decimalNum > 0) {\n            res += (decimalNum %
    2).ToString();\n            decimalNum /= 2;\n        }\n        res += \"db\";\n
    \       return new string(res.Reverse().ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f3848825f37b4cd999f469c2e82252e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f3848825f37b4cd999f469c2e82252e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var binary
    = Convert.ToString(decimalNum, 2);\n        return $\"db{binary}db\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Convert.ToString(decimalNum,
    2);\n        string result = \"db\";\n        while (decimalNum > 0) {\n            result
    += (decimalNum % 2).ToString();\n            decimalNum /= 2;\n        }\n        result
    += \"db\";\n        return new string(result.Reverse().ToArray());\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9daa67e9c2324f38b6e840e44e342826>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9daa67e9c2324f38b6e840e44e342826>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string result
    = \"db\";\n        while (decimalNum > 0) {\n            result += (decimalNum
    % 2).ToString();\n            decimalNum /= 2;\n        }\n        result += \"db\";\n
    \       return Reverse(result);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppr2hbj0o.cs(26,16): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659976212
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return Binary(decimalNum);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_qsafdp_.cs(20,16): error CS0103: The name ''Binary'' does not exist in
    the current context

    '
  timestamp: 1659976212
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // TODO:
    Implement the algorithm\n        string result = \"db\";\n        while (decimalNum
    != 0) {\n            result += (decimalNum % 2).ToString();\n            decimalNum
    /= 2;\n        }\n        result += \"db\";\n        return Reverse(result);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6jpbgu_j.cs(27,16): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string db
    = \"db\";\n        return db + Convert.ToString(decimalNum, 2) + db;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // return
    Convert.ToString(decimalNum, 2);\n        return \"db\" + Convert.ToString(decimalNum,
    2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binaryNum
    = \"\";\n        while (decimalNum > 0) {\n            binaryNum = (decimalNum
    % 2) + binaryNum;\n            decimalNum /= 2;\n        }\n        return \"db\"
    + binaryNum + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d915897cb7964fb1be3ba2b18fd2b9d7>:0
    \n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string num
    = \"\";\n        bool flag = false;\n        while (decimalNum != 0) {\n            if
    (decimalNum % 2 == 1) {\n                num = \"1\" + num;\n                flag
    = true;\n            } else if (flag) {\n                num = \"0\" + num;\n
    \           }\n            decimalNum /= 2;\n        }\n        if (flag)\n            return
    \"db\" + num + \"db\";\n        else\n            return \"db0db\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1541777d4e774bc784f00872022047ea>:0
    \n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        StringBuilder
    sb = new StringBuilder(\"db\");\n        while (decimalNum > 0) {\n            sb.Append(decimalNum
    % 2);\n            decimalNum /= 2;\n        }\n        sb.Append(\"db\");\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <979dca563d1845eeacadffe3de3b6646>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <979dca563d1845eeacadffe3de3b6646>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binaryNum
    = \"\";\n        while (decimalNum > 0) {\n            binaryNum = decimalNum
    % 2 + binaryNum;\n            decimalNum /= 2;\n        }\n        return \"db\"
    + binaryNum + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43d5ea18a35d4b7db51c54d829efcdde>:0
    \n"
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        List<long>
    binary = new List<long>();\n        string output = \"db\";\n        for (int
    i = 0; i < 64; i++) {\n            if (decimalNum > 0) {\n                binary.Add(decimalNum
    % 2);\n                decimalNum /= 2;\n            } else {\n                binary.Add(0);\n
    \           }\n        }\n        for (int i = 63; i >= 0; i--) {\n            output
    += binary[i];\n        }\n        output += \"db\";\n        return output;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff627a4dced74ff7bd5f8f5aba2a1a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff627a4dced74ff7bd5f8f5aba2a1a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Your code
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00008] in <edb9ce8f39974097b5fb8634fe955b51>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00008] in <edb9ce8f39974097b5fb8634fe955b51>:0
    \n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binString
    = \"\";\n        while (decimalNum > 0) {\n            if (decimalNum % 2 == 0)
    {\n                binString = '0' + binString;\n            } else {\n                binString
    = '1' + binString;\n            }\n            decimalNum /= 2;\n        }\n        return
    \"db\" + binString + \"db\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da8f53e452f843179f63cc30f7360e7c>:0
    \n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // convert
    to Binary\n        return Convert.ToString(decimalNum, 2);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73bec2d280264e93b525736b53f3df87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73bec2d280264e93b525736b53f3df87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Convert.ToString(15,
    2)\n        return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string result
    = \"db\";\n        while (decimalNum > 0) {\n            result += (decimalNum
    % 2).ToString();\n            decimalNum /= 2;\n        }\n        result += \"db\";\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0741847bc033416191f326cbc000e49e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0741847bc033416191f326cbc000e49e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum %
    2).ToString() + binary;\n            decimalNum /= 2;\n        }\n        return
    \"db\" + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c645848e3b74b27b4b5ae3be1adccfe>:0
    \n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string str
    = \"\";\n        while (decimalNum > 0) {\n            str = (decimalNum % 2)
    + str;\n            decimalNum /= 2;\n        }\n        return \"db\" + str +
    \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f45d963f8d1e48db83c12750efaaba28>:0
    \n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // TODO:
    Implement DecimalToBinary\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fec9058cb71c4abfb8a6888ec3ab5e36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fec9058cb71c4abfb8a6888ec3ab5e36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return Convert.ToString(decimalNum,
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f44379504149d8baf819e695ab4e38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f44379504149d8baf819e695ab4e38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binString
    = \"\";\n        while (decimalNum > 0) {\n            long remainder = decimalNum
    % 2;\n            decimalNum /= 2;\n            binString = remainder.ToString()
    + binString;\n        }\n        binString = \"db\" + binString + \"db\";\n        return
    binString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <006ee630071845fd991aa7573178a5b9>:0
    \n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        StringBuilder
    builder = new StringBuilder();\n        builder.Append(\"db\");\n        string
    binary = Convert.ToString(decimalNum, 2);\n        builder.Append(binary);\n        builder.Append(\"db\");\n
    \       return builder.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string bin
    = \"\";\n        for (int i = 0; i < decimalNum; i++) {\n            bin = decimalNum
    % 2 + bin;\n            decimalNum = decimalNum / 2;\n        }\n        return
    \"db\" + bin + \"db\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e36e331f504477b8173e7a655b4ea0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82e36e331f504477b8173e7a655b4ea0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = \"\";\n        while (decimalNum > 0) {\n            int rem = (int)(decimalNum
    % 2);\n            binary = rem + binary;\n            decimalNum /= 2;\n        }\n
    \       return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43367b9188cd4526964c0494ca14bde8>:0
    \n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string result
    = \"db\";\n        while (decimalNum > 0) {\n            result += (decimalNum
    % 2).ToString();\n            decimalNum /= 2;\n        }\n        result += \"db\";\n
    \       char[] finalResult = result.ToCharArray();\n        Array.Reverse(finalResult);\n
    \       return new string(finalResult);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4516b6d5cc2e420b97f33ae1207718c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4516b6d5cc2e420b97f33ae1207718c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // =============================================================\n
    \       // Your code here.\n        // 1. If number is negative, first bit is
    1, else 0.\n        // 2. Convert absolute value to binary.\n        // 3. Add
    'db' to beginning and end.\n        // =============================================================\n
    \       if (decimalNum == 0) {\n            return \"db0db\";\n        }\n        var
    negative = decimalNum < 0;\n        if (negative) {\n            decimalNum =
    -decimalNum;\n        }\n        var sb = new StringBuilder(\"db\");\n        while
    (decimalNum > 0) {\n            sb.Append(decimalNum % 2);\n            decimalNum
    /= 2;\n        }\n        if (negative) {\n            sb.Append('1');\n        }
    else {\n            sb.Append('0');\n        }\n        sb.Append(\"db\");\n        return
    string.Join(\"\", sb.ToString().Reverse());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1466c4afdfd04727a424427d82dfc52c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1466c4afdfd04727a424427d82dfc52c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return (decimalNum
    > 0) ? \"db\" + Convert.ToString(decimalNum, 2) + \"db\" : \"db0db\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string result
    = \"db\";\n        if (decimalNum == 0) {\n            result += \"0\";\n        }\n
    \       while (decimalNum > 0) {\n            if (decimalNum % 2 == 0) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \           decimalNum /= 2;\n        }\n        result += \"db\";\n        return
    new string(result.Reverse().ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <76ce6350d52f4ad489e5f17e997146db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <76ce6350d52f4ad489e5f17e997146db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Convert
    decimal to binary\n        string binary = Convert.ToString(decimalNum, 2);\n
    \       // Add \"db\" at the beginning and end of the string\n        binary =
    \"db\" + binary + \"db\";\n        return binary;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        StringBuilder
    sb = new StringBuilder();\n        sb.Append(\"db\");\n        while (decimalNum
    > 0) {\n            sb.Append(decimalNum % 2);\n            decimalNum /= 2;\n
    \       }\n        sb.Append(\"db\");\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42f43815fd5b4c01a83e091dfe7ec142>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42f43815fd5b4c01a83e091dfe7ec142>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = \"\";\n        if (decimalNum == 0) {\n            return \"db0db\";\n        }\n
    \       while (decimalNum > 0) {\n            if (decimalNum % 2 == 0) {\n                binary
    = \"0\" + binary;\n            } else {\n                binary = \"1\" + binary;\n
    \           }\n            decimalNum /= 2;\n        }\n        return \"db\"
    + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string res
    = \"db\";\n        while (decimalNum > 0) {\n            if (decimalNum % 2 ==
    0) {\n                res = \"0\" + res;\n            } else {\n                res
    = \"1\" + res;\n            }\n            decimalNum /= 2;\n        }\n        return
    res + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3b78c2ce8a84af48e33f46ff2d624b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3b78c2ce8a84af48e33f46ff2d624b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = \"\";\n        while (decimalNum != 0) {\n            if (decimalNum % 2 ==
    0) {\n                binary = \"0\" + binary;\n            } else {\n                binary
    = \"1\" + binary;\n            }\n            decimalNum /= 2;\n        }\n        return
    \"db\" + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7738afac29194c9b9f04984591b46d2f>:0
    \n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Always
    use .Net Library functions\n        return \"db\" + Convert.ToString(decimalNum,
    2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        if (decimalNum
    == 0) return \"db0db\";\n        StringBuilder binaryNum = new StringBuilder(\"db\");\n
    \       while (decimalNum > 0) {\n            binaryNum.Append(decimalNum % 2);\n
    \           decimalNum = decimalNum / 2;\n        }\n        return binaryNum.Append(\"db\").ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0fe8418d5744a04a0cb65d8d1f0e6a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0fe8418d5744a04a0cb65d8d1f0e6a4>:0
    \n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var result
    = string.Empty;\n        var current = decimalNum;\n        while (current > 0)
    {\n            result = (current % 2).ToString() + result;\n            current
    /= 2;\n        }\n        return \"db\" + result + \"db\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a16a564c5d84123952c8e513b0e6645>:0
    \n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binaryNum
    = \"\";\n        do {\n            binaryNum = (decimalNum % 2) + binaryNum;\n
    \           decimalNum /= 2;\n        } while (decimalNum > 0);\n        return
    (\"db\" + binaryNum + \"db\");\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        char[] value
    = Convert.ToString(decimalNum, 2).ToCharArray();\n        return \"db\" + new
    string(value) + \"db\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binaryNum
    = Convert.ToString(decimalNum, 2);\n        return \"db\" + binaryNum + \"db\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Insert
    your code here\n        string binary = \"\";\n        while (decimalNum != 0)
    {\n            binary = (decimalNum % 2).ToString() + binary;\n            decimalNum
    /= 2;\n        }\n        while (binary.Length < 7) {\n            binary = \"0\"
    + binary;\n        }\n        return \"db\" + binary + \"db\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5121dd93401d406496ad4d02d19bbdfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5121dd93401d406496ad4d02d19bbdfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binString
    = \"\";\n        long remainder = 0;\n        // get binary from decimal \n        while
    (decimalNum > 0) {\n            remainder = decimalNum % 2;\n            decimalNum
    /= 2;\n            binString = remainder.ToString() + binString;\n        }\n
    \       // add \"db\" to binary string\n        binString = \"db\" + binString
    + \"db\";\n        return binString;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21830bceff274fcd85303d9dcafa6808>:0
    \n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string res
    = \"db\";\n        while (decimalNum != 0) {\n            long tmp = decimalNum
    / 2;\n            long remain = decimalNum - tmp * 2;\n            res += remain.ToString();\n
    \           decimalNum = tmp;\n        }\n        string reverse = \"\";\n        for
    (int i = res.Length - 1; i >= 0; i--) {\n            reverse += res[i];\n        }\n
    \       return reverse + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2678ce9d9c0b47f6ac254268df6f7be2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2678ce9d9c0b47f6ac254268df6f7be2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string bin
    = \"\";\n        while (decimalNum > 0) {\n            if (decimalNum % 2 == 0)
    {\n                bin = \"0\" + bin;\n            } else {\n                bin
    = \"1\" + bin;\n            }\n            decimalNum /= 2;\n        }\n        bin
    = \"db\" + bin + \"db\";\n        return bin;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <511cd0fa86bc4c8482abbbd3599094d3>:0
    \n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return (\"db\"
    + Convert.ToString(decimalNum, 2) + \"db\");\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string result
    = \"db\";\n        result += Convert.ToString(decimalNum, 2);\n        result
    += \"db\";\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        StringBuilder
    b = new StringBuilder();\n        b.Append(\"db\");\n        for (long p = decimalNum;
    p > 0; p >>= 1) {\n            b.Append((p & 1) == 1 ? '1' : '0');\n        }\n
    \       b.Append(\"db\");\n        return b.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d992f4d623a946a0a03cf37e76a7d7a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d992f4d623a946a0a03cf37e76a7d7a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        char[] db
    = new char[] { 'd', 'b' };\n        return new string(db) + Convert.ToString(decimalNum,
    2) + new string(db);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // We can
    implement this in 3 lines.\n        // First, convert the decimal number to binary.\n
    \       string binary = Convert.ToString(decimalNum, 2);\n        // Second, pad
    the binary string to 8 bits.\n        binary = binary.PadLeft(8, '0');\n        //
    Finally, put the 'db' prefix and suffix.\n        binary = \"db\" + binary + \"db\";\n
    \       return binary;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cda6c327e61d456e90d4d5bd6d4a0d97>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cda6c327e61d456e90d4d5bd6d4a0d97>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // You need
    to implement this function.\n        // This is just an example of how it will
    look.\n        char[] bits = new char[65];\n        int i = 64;\n        do {\n
    \           bits[i--] = (decimalNum & 1) == 1 ? '1' : '0';\n            decimalNum
    >>= 1;\n        } while (decimalNum != 0);\n        return \"db\" + new string(bits,
    i + 1, 64 - i) + \"db\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string bits
    = \"\";\n        while (decimalNum > 0) {\n            if (decimalNum % 2 == 0)\n
    \               bits = \"0\" + bits;\n            else\n                bits =
    \"1\" + bits;\n            decimalNum = decimalNum / 2;\n        }\n        bits
    = \"db\" + bits + \"db\";\n        return bits;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d51138dc85b469b9abd7def1818064d>:0
    \n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        StringBuilder
    sb = new StringBuilder();\n        sb.Append(\"db\");\n        for (int i = 0;
    i < 32; i++) {\n            sb.Append((decimalNum & (1 << i)) != 0 ? \"1\" : \"0\");\n
    \       }\n        sb.Append(\"db\");\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eee53bad6bc445da973605de907254e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eee53bad6bc445da973605de907254e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var result
    = \"db\";\n        for (long l = decimalNum; l > 0; l /= 2) {\n            result
    = ((l % 2) == 0 ? \"0\" : \"1\") + result;\n        }\n        return result +
    \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c14dcc87567488388a522beba7f03df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c14dcc87567488388a522beba7f03df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = \"\";\n        string db = \"db\";\n        while (decimalNum != 0) {\n            long
    r = decimalNum % 2;\n            binary = binary + r;\n            decimalNum
    = decimalNum / 2;\n        }\n        return db + binary + db;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9a63f80db594e49b7381e35ebac40e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9a63f80db594e49b7381e35ebac40e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var sb =
    new StringBuilder();\n        sb.Append(\"db\");\n        while (decimalNum >
    0) {\n            sb.Append(decimalNum % 2);\n            decimalNum /= 2;\n        }\n
    \       sb.Append(\"db\");\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0850ebf0ac147c9b613820f5d3fe150>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0850ebf0ac147c9b613820f5d3fe150>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        long mod;\n
    \       string str = \"db\";\n        while (decimalNum > 0) {\n            mod
    = decimalNum % 2;\n            decimalNum = decimalNum / 2;\n            str =
    mod.ToString() + str;\n        }\n        str += \"db\";\n        return str;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c505ddfec07f4b8e882e48f03b83de70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c505ddfec07f4b8e882e48f03b83de70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return String.Format(\"db{0}db\",
    Convert.ToString(decimalNum, 2));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string bin
    = \"\";\n        bin += \"db\";\n        if (decimalNum == 0)\n            bin
    += \"0\";\n        while (decimalNum > 0) {\n            if (decimalNum % 2 ==
    0)\n                bin += \"0\";\n            else\n                bin += \"1\";\n
    \           decimalNum /= 2;\n        }\n        bin += \"db\";\n        char[]
    charArray = bin.ToCharArray();\n        Array.Reverse(charArray);\n        bin
    = new string(charArray);\n        return bin;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91e90c227dfd45c8a478c202a3399429>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91e90c227dfd45c8a478c202a3399429>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string result
    = \"db\";\n        while (decimalNum > 0) {\n            result += decimalNum
    % 2;\n            decimalNum /= 2;\n        }\n        return result.PadLeft(13,
    '0') + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca5a9537d2024103bc09e5cdb1c9ae48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca5a9537d2024103bc09e5cdb1c9ae48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return string.Format(\"db{0}db\",
    Convert.ToString(decimalNum, 2));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string res
    = Convert.ToString(decimalNum, 2);\n        res = \"db\" + res + \"db\";\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00008] in <641eb0c3154640a08738a1deef4b9923>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00008] in <641eb0c3154640a08738a1deef4b9923>:0
    \n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string r
    = \"db\";\n        for (int i = 0; i < 32; i++) {\n            r += ((decimalNum
    >> i) & 1).ToString();\n        }\n        return r + \"db\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d6ed672f14e415e8153800de62299c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d6ed672f14e415e8153800de62299c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // This function
    is provided for you\n        // You may edit it but be sure to keep the same general
    functionality\n        string binary_form = Convert.ToString(decimalNum, 2);\n
    \       StringBuilder sb = new StringBuilder();\n        sb.Append('d');\n        sb.Append('b');\n
    \       sb.Append(binary_form);\n        sb.Append('d');\n        sb.Append('b');\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return string.Format(\"db{0}db\",
    Convert.ToString(decimalNum, 2));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Your code
    here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0b1edafbbba4e1d9206ffe4bf4be902>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0b1edafbbba4e1d9206ffe4bf4be902>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string tmp
    = \"\";\n        while (decimalNum != 0) {\n            tmp = (decimalNum % 2).ToString()
    + tmp;\n            decimalNum /= 2;\n        }\n        tmp = \"db\" + tmp +
    \"db\";\n        return tmp;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6673b811fd7e46069280a069b5c017c1>:0
    \n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string bin
    = \"\";\n        while (decimalNum > 0) {\n            bin = (decimalNum % 2).ToString()
    + bin;\n            decimalNum /= 2;\n        }\n        bin = \"db\" + bin +
    \"db\";\n        return bin;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d984a489f5ad4c6b80f62650416430c7>:0
    \n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        if (decimalNum
    < 0)\n            throw new ArgumentOutOfRangeException(\"decimalNum\", \"decimalNum
    must be positive\");\n        if (decimalNum == 0)\n            return \"db0db\";\n
    \       return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var sb =
    new StringBuilder();\n        // add the prefix & suffix\n        sb.Append(\"db\");\n
    \       while (decimalNum > 0) {\n            // work from the least significant
    bit first\n            sb.Append(decimalNum % 2);\n            decimalNum /= 2;\n
    \       }\n        // add the suffix\n        sb.Append(\"db\");\n        // reverse
    the string\n        return new string(sb.ToString().Reverse().ToArray());\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b014a009f18746e1b70f1902c42128e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b014a009f18746e1b70f1902c42128e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string result
    = \"db\";\n        while (decimalNum > 0) {\n            if (decimalNum % 2 ==
    0) {\n                result = \"0\" + result;\n            } else {\n                result
    = \"1\" + result;\n            }\n            decimalNum /= 2;\n        }\n        return
    result + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7937199789e74e61a388f772674973fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7937199789e74e61a388f772674973fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string str
    = Convert.ToString(decimalNum, 2);\n        return \"db\" + str + \"db\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binString
    = \"\";\n        while (decimalNum > 0) {\n            binString = (decimalNum
    % 2).ToString() + binString;\n            decimalNum /= 2;\n        }\n        return
    \"db\" + binString + \"db\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a36ef11c2064c26be5177fdcec80589>:0
    \n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // make a
    list of binary digits, with leading and trailing \"db\"\n        List<string>
    digits = new List<string> { \"db\" };\n        // keep dividing by 2 until we
    reach zero\n        while (decimalNum > 0) {\n            // get remainder and
    convert to string\n            digits.Add(decimalNum % 2L + \"\");\n            //
    divide by 2 and carry on\n            decimalNum /= 2L;\n        }\n        //
    reverse the list and add trailing \"db\"\n        digits.Reverse();\n        digits.Add(\"db\");\n
    \       // return the list as a single string\n        return string.Join(\"\",
    digits);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0adad8ba5434bf29565a7e762063690>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0adad8ba5434bf29565a7e762063690>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // convert
    decimal number to binary, then \n        // reverse the string and replace the
    leading 1's with zeros\n        string binary = Convert.ToString(decimalNum, 2);\n
    \       char[] charArray = binary.ToCharArray();\n        Array.Reverse(charArray);\n
    \       int firstOneIndex = Array.IndexOf(charArray, '1');\n        for (int i
    = 0; i < firstOneIndex; i++) {\n            charArray[i] = '0';\n        }\n        Array.Reverse(charArray);\n
    \       binary = new string(charArray);\n        return \"db\" + binary + \"db\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var binaryString
    = Convert.ToString(decimalNum, 2);\n        return \"db\" + binaryString + \"db\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var sb =
    new StringBuilder();\n        sb.Append(\"db\");\n        sb.Append(Convert.ToString(decimalNum,
    2));\n        sb.Append(\"db\");\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var data
    = new byte[sizeof(long)];\n        long store = decimalNum;\n        int i = 0;\n
    \       string result = \"db\";\n        while (decimalNum > 0) {\n            data[i]
    = (byte)(decimalNum % 2);\n            decimalNum /= 2;\n            i++;\n        }\n
    \       for (i = data.Length - 1; i >= 0; i--) {\n            result += (char)(data[i]
    + 48);\n        }\n        result += \"db\";\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0eb48998648f450885febba6e41c7486>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0eb48998648f450885febba6e41c7486>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var output
    = Convert.ToString(decimalNum, 2);\n        output = \"db\" + output + \"db\";\n
    \       return output;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string db
    = \"db\";\n        string binaryNum = \"\";\n        long exp = 0;\n        //
    Calculate next highest power of 2. This will be used to determine the\n        //
    highest exp from which we can start converting to binary.\n        // (e.g. if
    decimalNum is 63, then the highest exp is 5. If the decimalNum is 64,\n        //
    then the highest exp is 6)\n        long powerOf2 = 1;\n        while (powerOf2
    <= decimalNum) {\n            powerOf2 = powerOf2 << 1;\n            exp += 1;\n
    \       }\n        // We have to add 2 since we have 2 extra characters in the
    beginning and end.\n        binaryNum = db.PadRight((int)exp + 2, '0');\n        int
    index = 1;\n        while (decimalNum > 0) {\n            // See if the decimalNum
    is divisible by 2 to the power of the exp.\n            if (decimalNum >= Math.Pow(2,
    exp)) {\n                // If it is, then the binary number is 1.\n                binaryNum
    = binaryNum.Remove(index, 1).Insert(index, \"1\");\n                decimalNum
    -= (long)Math.Pow(2, exp);\n            }\n            index += 1;\n            exp
    -= 1;\n        }\n        return binaryNum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1082e7481383466cb7ca5cf5dcb339f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1082e7481383466cb7ca5cf5dcb339f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var builder
    = new StringBuilder();\n        builder.Append(\"db\");\n        for (int i =
    0; i < 64; i++) {\n            builder.Append((decimalNum & 1) == 1 ? \"1\" :
    \"0\");\n            decimalNum >>= 1;\n        }\n        builder.Append(\"db\");\n
    \       return builder.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fec2260e3c704dceb990207529aea4c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fec2260e3c704dceb990207529aea4c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = \"\";\n        bool isNegative = decimalNum < 0;\n        decimalNum = Math.Abs(decimalNum);\n
    \       if (decimalNum == 0) return \"db0db\";\n        while (decimalNum > 0)
    {\n            binary = ((decimalNum % 2) == 0 ? \"0\" : \"1\") + binary;\n            decimalNum
    /= 2;\n        }\n        return \"db\" + (isNegative ? \"1\" : \"0\") + binary
    + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20954adc67b041e2b0de2d25aa1d2b0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20954adc67b041e2b0de2d25aa1d2b0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var ret =
    \"db\";\n        while (decimalNum > 0) {\n            ret += decimalNum % 2;\n
    \           decimalNum /= 2;\n        }\n        return string.Join(\"\", ret.Reverse())
    + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ede5a7f14a844f3d8be88968058f35b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ede5a7f14a844f3d8be88968058f35b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return Convert.ToString(decimalNum,
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f44379504149d8baf819e695ab4e38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f44379504149d8baf819e695ab4e38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return Convert.ToString(decimalNum,
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f44379504149d8baf819e695ab4e38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f44379504149d8baf819e695ab4e38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binaryString
    = \"\";\n        while (decimalNum != 0) {\n            binaryString = (decimalNum
    % 2).ToString() + binaryString;\n            decimalNum /= 2;\n        }\n        return
    binaryString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42eb4c5c7aa44738b8dbd7a6a7aee6a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42eb4c5c7aa44738b8dbd7a6a7aee6a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        StringBuilder
    output = new StringBuilder();\n        output.Append(\"db\");\n        while (decimalNum
    > 0) {\n            output.Append(decimalNum % 2);\n            decimalNum /=
    2;\n        }\n        output.Append(\"db\");\n        return Reverse(output.ToString());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvn_0modh.cs(27,16): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        StringBuilder
    result = new StringBuilder();\n        result.Append(\"db\");\n        long temp
    = decimalNum;\n        long remainder;\n        while (temp > 0) {\n            remainder
    = temp % 2;\n            temp /= 2;\n            result.Append(remainder);\n        }\n
    \       result.Append(\"db\");\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92d7adb39e804ef59cbc496210d326e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92d7adb39e804ef59cbc496210d326e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Put your
    code here\n        return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum %
    2).ToString() + binary;\n            decimalNum /= 2;\n        }\n        return
    \"db\" + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c645848e3b74b27b4b5ae3be1adccfe>:0
    \n"
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = \"\";\n        while (decimalNum > 0) {\n            binary = ((int)(decimalNum
    % 2)).ToString() + binary;\n            decimalNum /= 2;\n        }\n        binary
    = \"db\" + binary + \"db\";\n        return binary;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43ca075f40c740819bca5b727c396992>:0
    \n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string bin
    = \"\";\n        while (decimalNum > 0) {\n            bin = (decimalNum % 2).ToString()
    + bin;\n            decimalNum /= 2;\n        }\n        // Left pad zeros\n        if
    (bin.Length % 4 != 0)\n            bin = bin.PadLeft(bin.Length + (4 - bin.Length
    % 4), '0');\n        return \"db\" + bin + \"db\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca38afce284e4b2c9f32ef694eda23bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca38afce284e4b2c9f32ef694eda23bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binaryNum
    = Convert.ToString(decimalNum, 2);\n        return \"db\" + binaryNum + \"db\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Return
    the correct value.\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c78b211c38d04362a8ef850d6d65be1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c78b211c38d04362a8ef850d6d65be1f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // I'm gonna
    assume that we're working with 64 bit numbers\n        string ret = \"db\";\n
    \       for (int i = 0; i < 64; i++) {\n            long q = decimalNum >> i;\n
    \           if (q % 2 == 1)\n                ret += \"1\";\n            else\n
    \               ret += \"0\";\n        }\n        ret += \"db\";\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <423c38ffd34e4eb49f6de7fc4f9e1837>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <423c38ffd34e4eb49f6de7fc4f9e1837>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var binaryString
    = \"\";\n        binaryString += \"db\";\n        while (decimalNum != 0) {\n
    \           if (decimalNum % 2 == 0) {\n                binaryString += \"0\";\n
    \           } else {\n                binaryString += \"1\";\n            }\n
    \           decimalNum /= 2;\n        }\n        binaryString += \"db\";\n        return
    binaryString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8dca5827b874d93b3d55063d16810c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8dca5827b874d93b3d55063d16810c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string result
    = \"db\";\n        while (decimalNum > 0) {\n            result += (decimalNum
    % 2).ToString();\n            decimalNum /= 2;\n        }\n        result += \"db\";\n
    \       return new string(result.Reverse().ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bf0604c4afe48f9b56b47dc7e810c38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6bf0604c4afe48f9b56b47dc7e810c38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Convert
    the decimal number to a string in base 2\n        string binaryNum = Convert.ToString(decimalNum,
    2);\n        // add extra characters and return result\n        return \"db\"
    + binaryNum + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string str
    = \"\";\n        while (decimalNum > 0) {\n            int num = (int)(decimalNum
    % 2);\n            decimalNum /= 2;\n            str = num + str;\n        }\n
    \       return \"db\" + str + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96929179ae534f6da5acf2d3ad09853b>:0
    \n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = Convert.ToString(decimalNum, 2);\n        string result = \"db\" + binary +
    \"db\";\n        return result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // define
    db string for the binary string\n        var db = \"db\";\n        // define the
    string builder for the binary string\n        var binaryString = new StringBuilder();\n
    \       // iterate from number, dividing by 2 and adding a character to the string\n
    \       // builder until it reaches 0\n        for (var number = decimalNum; number
    > 0; number /= 2) {\n            binaryString.Insert(0, (number % 2).ToString());\n
    \       }\n        // if the length of the binary string is 0, add the first character
    to\n        // the string builder\n        if (binaryString.Length == 0) {\n            binaryString.Append(0);\n
    \       }\n        // return the string builder with the db strings at the beginning
    and the end\n        return db + binaryString.ToString() + db;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var binaryNum
    = Convert.ToString(decimalNum, 2);\n        return String.Format(\"db{0}db\",
    binaryNum);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binaryNum
    = \"\";\n        while (decimalNum > 0) {\n            binaryNum = Convert.ToString(decimalNum
    % 2) + binaryNum;\n            decimalNum /= 2;\n        }\n        return \"db\"
    + binaryNum + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22b9bc39c6094acd82fb94723e99af08>:0
    \n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        if (decimalNum
    == 0) return \"db0db\";\n        string binaryStr = \"\";\n        for (long i
    = 1L << 62; i > 0; i >>= 1)\n            binaryStr += (decimalNum & i) != 0 ?
    \"1\" : \"0\";\n        return \"db\" + binaryStr.Trim('0') + \"db\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d280434621142239058a8ecef04434e>:0
    \n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return Convert.ToString(decimalNum,
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f44379504149d8baf819e695ab4e38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f44379504149d8baf819e695ab4e38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var db =
    \"db\";\n        var binary = \"\";\n        while (decimalNum > 0) {\n            if
    (decimalNum % 2 == 0) {\n                binary = \"0\" + binary;\n            }
    else {\n                binary = \"1\" + binary;\n            }\n            decimalNum
    /= 2;\n        }\n        return db + binary + db;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f3ef5e1613824535a00b1911ab54692f>:0
    \n"
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // You have
    to finish the implementation below.\n        // You may assume (or use) the following:\n
    \       //     * The input number is always a non-negative integer.\n        //
    \    * The output is never an empty string.\n        //     * The output is guaranteed
    to be binary representation of the input number.\n        // (You may ignore the
    following tests in your implementation:\n        //   negative, zero, unit tests
    for the second sample)\n        // You can use \"return \"db\" + \"010101\" +
    \"db\";\" as a sample implementation that passes\n        // most of the tests.\n
    \       // You may add your own helper functions or classes if you wish.\n        return
    \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Converts
    a decimal number to binary format.\n        // \"db\" are included at the beginning
    and end of the string.\n        // Example:\n        // >>> DecimalToBinary((15L))\n
    \       // \"db1111db\"\n        // >>> DecimalToBinary((32L))\n        // \"db100000db\"\n
    \       string binaryString = \"db\";\n        while (decimalNum > 0) {\n            if
    (decimalNum % 2 == 0) {\n                binaryString += \"0\";\n            }
    else {\n                binaryString += \"1\";\n            }\n            decimalNum
    /= 2;\n        }\n        string result = \"\";\n        for (int i = binaryString.Length
    - 1; i >= 0; i--) {\n            result += binaryString[i];\n        }\n        result
    += \"db\";\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8770bd1775ad46ea841233aa1dd82108>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8770bd1775ad46ea841233aa1dd82108>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00008] in <641eb0c3154640a08738a1deef4b9923>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00008] in <641eb0c3154640a08738a1deef4b9923>:0
    \n"
  stdout: ''
  timestamp: 1659976214
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = Convert.ToString(decimalNum, 2);\n        // Add those 'db' characters.\n        return
    \"db\" + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976215
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binaryNum
    = \"\";\n        while (decimalNum != 0) {\n            binaryNum = (decimalNum
    % 2) + binaryNum;\n            decimalNum /= 2;\n        }\n        return \"db\"
    + binaryNum + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89828c6a68364d0e8519f5afa00602eb>:0
    \n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Convert
    your decimal number to binary format.\n        // Each character of the string
    will be either a '0' or a '1'.\n        // Your function should include characters
    'db' at the beginning and end of the string.\n        // Examples:\n        //
    >>> DecimalToBinary((15L))\n        // (\"db1111db\")\n        // >>> DecimalToBinary((32L))\n
    \       // (\"db100000db\")\n        // HINT: Consider the algorithm for binary
    conversion, the method BitCount,\n        // and the property BitLength of the
    BigInteger class.\n        BigInteger bi = new BigInteger(decimalNum);\n        int
    length = bi.BitLength;\n        string res = \"db\";\n        while (length--
    > 0) {\n            res += bi % 2;\n            bi /= 2;\n        }\n        return
    res + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ggq_md_.cs(31,25): error CS1061: ''BigInteger'' does not contain a definition
    for ''BitLength'' and no accessible extension method ''BitLength'' accepting a
    first argument of type ''BigInteger'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string output
    = \"db\";\n        var number = Convert.ToString(decimalNum, 2);\n        output
    += number;\n        output += \"db\";\n        return output;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = Convert.ToString(decimalNum, 2);\n        return \"db\" + binary + \"db\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Your code
    here.\n        return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string db
    = \"db\";\n        string bin = Convert.ToString(decimalNum, 2);\n        return
    db + bin + db;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string Binary
    = string.Empty;\n        while (decimalNum > 0) {\n            long remainder
    = decimalNum % 2;\n            decimalNum /= 2;\n            Binary = remainder.ToString()
    + Binary;\n        }\n        return \"db\" + Binary + \"db\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd019695e2d9493dac2b875d2c47fa17>:0
    \n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var r = \"\";\n
    \       var m = decimalNum;\n        while (m > 0) {\n            r = (m & 1).ToString()
    + r;\n            m >>= 1;\n        }\n        r = (\"db\" + r + \"db\");\n        return
    r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <932d042b37294b1798b97f81ed1aef20>:0
    \n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // long to
    binary\n        string binaryNum = Convert.ToString(decimalNum, 2);\n        //
    binary to string\n        string s = \"db\" + binaryNum + \"db\";\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Grab the
    binary representation and trim the \"0b\" off the front.\n        string binary
    = Convert.ToString(decimalNum, 2);\n        binary = binary.Substring(2);\n        //
    Create a new string that has the extra \"db\" on the front and back.\n        string
    result = \"db\" + binary + \"db\";\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: startIndex
    cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.DecimalToBinary (System.Int64 decimalNum) [0x00009] in <031b38335194403fbbcd60df41e35f45>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <031b38335194403fbbcd60df41e35f45>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: startIndex
    cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.DecimalToBinary (System.Int64 decimalNum) [0x00009] in <031b38335194403fbbcd60df41e35f45>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <031b38335194403fbbcd60df41e35f45>:0
    \n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = \"\";\n        // (1L << 0) = 0001, (1L << 1) = 0010, ..., (1L << 62) = 1 <<
    63 = Long.MinValue\n        // 1L << 63 = Long.MinValue\n        // so 64 bits
    total\n        for (int i = 63; i >= 0; i--) {\n            long mask = 1L <<
    i;\n            if ((decimalNum & mask) == mask) {\n                binary +=
    \"1\";\n            } else {\n                binary += \"0\";\n            }\n
    \       }\n        return \"db\" + binary + \"db\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5bf97b99ebe244a598b7f1477bbb1c96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5bf97b99ebe244a598b7f1477bbb1c96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        StringBuilder
    binaryStr = new StringBuilder();\n        binaryStr.Append(\"db\");\n        while
    (decimalNum > 0) {\n            long digit = decimalNum % 2;\n            binaryStr.Append(digit);\n
    \           decimalNum /= 2;\n        }\n        binaryStr.Append(\"db\");\n        binaryStr.Reverse();\n
    \       return binaryStr.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpau87c4xu.cs(28,19): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Your code
    here\n        string b = \"\";\n        while (decimalNum > 0) {\n            if
    (decimalNum % 2 == 0) {\n                b = \"0\" + b;\n            } else {\n
    \               b = \"1\" + b;\n            }\n            decimalNum /= 2;\n
    \       }\n        return \"db\" + b + \"db\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1574b2e55583416f90c0215d1edcd03b>:0
    \n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return string.Concat(\"db\",
    Convert.ToString(decimalNum, 2), \"db\");\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Try to
    solve the problem by yourself!\n        // Read about binary numbers!\n        var
    binary = new StringBuilder();\n        var number = decimalNum;\n        binary.Append(\"db\");\n
    \       while (number > 0) {\n            var remainder = number % 2;\n            number
    /= 2;\n            binary.Append(remainder);\n        }\n        binary.Append(\"db\");\n
    \       return new string(binary.ToString().Reverse().ToArray());\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a2f288cb632481eb9e5a6f26d9cb75b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a2f288cb632481eb9e5a6f26d9cb75b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = \"\";\n        for (int i = 5; i >= 0; i--) {\n            long temp = (long)Math.Pow(2,
    i);\n            if (decimalNum - temp >= 0) {\n                binary += \"1\";\n
    \               decimalNum -= temp;\n            } else {\n                binary
    += \"0\";\n            }\n        }\n        return \"db\" + binary + \"db\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <faf2603d35d044c79e9891d9934cf760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <faf2603d35d044c79e9891d9934cf760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var base2
    = \"\";\n        base2 += \"db\";\n        while (decimalNum != 0) {\n            base2
    += decimalNum % 2;\n            decimalNum /= 2;\n        }\n        if (base2.Length
    == 2)\n            base2 += \"0\";\n        base2 += \"db\";\n        return new
    string(base2.Reverse().ToArray());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <050ec46099f8481a9ba3fd0e682fbe79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <050ec46099f8481a9ba3fd0e682fbe79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Your code
    goes here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21e2dd3802dc46bc9711e916ed7814b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21e2dd3802dc46bc9711e916ed7814b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return $\"db{Convert.ToString(decimalNum,
    2)}db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return Convert.ToString(decimalNum,
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f44379504149d8baf819e695ab4e38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f44379504149d8baf819e695ab4e38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976213
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var binaryNum
    = string.Empty;\n        while (decimalNum > 0) {\n            var remainder =
    decimalNum % 2;\n            decimalNum /= 2;\n            binaryNum = remainder
    + binaryNum;\n        }\n        return \"db\" + binaryNum + \"db\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7bec4098c544af981494c014b171a42>:0
    \n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // your code
    here\n        char[] binary = new char[64];\n        int i = 0;\n        while
    (decimalNum > 0) {\n            binary[i] = ((decimalNum & 1) == 1) ? '1' : '0';\n
    \           decimalNum >>= 1;\n            i++;\n        }\n        string result
    = new string(binary);\n        return \"db\" + result.TrimEnd('0') + \"db\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2a9b5c048cc40d4b86aad5d03b6effd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2a9b5c048cc40d4b86aad5d03b6effd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binary
    = \"\";\n        string digits = \"01\";\n        while (decimalNum > 0) {\n            int
    rem = (int)(decimalNum % 2);\n            binary = digits[rem] + binary;\n            decimalNum
    /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43e47204ef3e429492ef6e0e21526b08>:0
    \n"
  stdout: ''
  timestamp: 1659976216
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binaryNum
    = \"\";\n        // get the number of bits\n        int bits = GetNumberOfBits(decimalNum);\n
    \       // loop through the bits\n        for (int i = bits - 1; i >= 0; i--)
    {\n            // get the value of the bit at position i\n            // the right
    bit shift operator shifts the bits of an integer value to the right\n            //
    by the specified number of positions\n            // the & operator takes bits
    that are both 1 from each of the numbers\n            // the binary equivalent
    of i = 3 is 11, which is also the binary equivalent of 7, which is 111\n            //
    if we shift that number by 3, it will still be the same (11), then the & operator
    will yield a 1\n            // but if we shift the number by 5, it will become
    110, the & operator will yield a 0\n            // 1111 & 0001 = 0001\n            //
    1111 & 0010 = 0010\n            // 1111 & 0100 = 0100\n            // 1111 & 1000
    = 1000\n            // long bitValue = decimalNum & (long)Math.Pow(2, i);\n            long
    bitValue = decimalNum & (long)1 << i;\n            // if bitValue is greater than
    0, it means the value at position i is 1, so add 1 to the string\n            //
    if bitValue is 0, the value at position i is 0, so add 0 to the string\n            binaryNum
    += bitValue > 0 ? \"1\" : \"0\";\n        }\n        // append the db at the beginning
    and at the end\n        return \"db\" + binaryNum + \"db\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp21hllc8f.cs(22,20): error CS0103: The name ''GetNumberOfBits'' does not
    exist in the current context

    '
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // convert
    the integer to a binary string\n        string binaryString = Convert.ToString(decimalNum,
    2);\n        // return the string with 'db' surrounding it\n        return \"db\"
    + binaryString + \"db\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976216
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Convert
    the given decimal number to a string in binary format\n        var binary = Convert.ToString(decimalNum,
    2);\n        // Add the extra characters at the beginning and at the end\n        var
    binary2 = string.Format(\"db{0}db\", binary);\n        return binary2;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string bin
    = Convert.ToString(decimalNum, 2);\n        return \"db\" + bin + \"db\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        ////////////////////////////////////////////////////////////////////\n
    \       /////////////// DO NOT MODIFY THIS FUNCTION ///////////////////////\n
    \       ////////////////////////////////////////////////////////////////////\n
    \       string binaryStr = \"\";\n        while (decimalNum > 0) {\n            binaryStr
    = ((decimalNum % 2 == 0) ? \"0\" : \"1\") + binaryStr;\n            decimalNum
    /= 2;\n        }\n        return \"db\" + binaryStr + \"db\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <658268aca1d84f479ab5f162d7d9e9f7>:0
    \n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Not my
    code... but I'm keeping it for future reference\n        // Also, I'm not happy
    that the extra characters are hardcoded\n        return \"db\" + Convert.ToString(decimalNum,
    2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string binaryNum
    = \"\";\n        while (decimalNum > 0) {\n            binaryNum = Convert.ToString(decimalNum
    % 2) + binaryNum;\n            decimalNum /= 2;\n        }\n        return (\"db\"
    + binaryNum + \"db\");\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9f5a2d709714b27a6251f2d0272afd4>:0
    \n"
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // Find the
    largest power of 2 which is smaller than decimalNum\n        // and subtract from
    decimalNum, until decimalNum reaches 0.\n        // Each time, the power of 2
    will be added to the binary representation.\n        var binaryRep = new StringBuilder();\n
    \       var maxPower = 1L;\n        var num = decimalNum;\n        while (num
    > 0) {\n            // Find the largest power of 2 which is smaller than num\n
    \           while (maxPower <= num) {\n                maxPower <<= 1;\n            }\n
    \           // Add the maximum power to the binary representation\n            binaryRep.Append('1');\n
    \           // Subtract the maximum power from the number\n            num -=
    maxPower >> 1;\n            // Decrease the maximum power by half, so that it
    is less than num.\n            maxPower >>= 1;\n            // Add a 0 if the
    maximum power is greater than 0\n            if (maxPower > 0) {\n                binaryRep.Append('0');\n
    \           }\n        }\n        // Pad the binary representation with zeros
    to 8 characters\n        while (binaryRep.Length < 8) {\n            binaryRep.Append('0');\n
    \       }\n        return \"db\" + binaryRep.ToString() + \"db\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb02a4c8d52b4638999a52118b35f151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb02a4c8d52b4638999a52118b35f151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        if (decimalNum
    == 0) {\n            return \"db0db\";\n        }\n        string binaryNum =
    \"\";\n        for (long i = decimalNum; i > 0; i = i / 2) {\n            long
    remainder = i % 2;\n            binaryNum = remainder.ToString() + binaryNum;\n
    \       }\n        return \"db\" + binaryNum + \"db\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        int bitLength
    = (int)Math.Log(decimalNum, 2) + 1;\n        string binaryNum = \"db\";\n        for
    (int i = 0; i < bitLength; i++) {\n            binaryNum += ((decimalNum >> i)
    & 1);\n        }\n        binaryNum += \"db\";\n        return binaryNum;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d60dab3e6284038bcf410c2218aa7b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d60dab3e6284038bcf410c2218aa7b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var binString
    = Convert.ToString(decimalNum, 2);\n        return \"db\" + binString + \"db\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // your code
    here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b418badecd2f489d8006eb3de8b69d76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b418badecd2f489d8006eb3de8b69d76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        // fill in\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <048ed81850d644598f880c4b6f779ecb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <048ed81850d644598f880c4b6f779ecb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string ret
    = \"db\";\n        while (decimalNum > 0) {\n            ret = (decimalNum % 2).ToString()
    + ret;\n            decimalNum /= 2;\n        }\n        return ret + \"db\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <753287a6097f4cc483a2d19b7fd6e6e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <753287a6097f4cc483a2d19b7fd6e6e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        var result
    = Convert.ToString(decimalNum, 2);\n        return (\"db\" + result + \"db\");\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <140e1c65d7be48e2a652d3a19cf987ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return new
    string('1', 1) + Convert.ToString(decimalNum, 2) + new string('0', 1);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b8c0895ff984f0e923e63397c8b6dce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b8c0895ff984f0e923e63397c8b6dce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976217
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        return \"db\"
    + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n
    \   Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976212
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given a number in decimal form and your task is
    to convert it to\n    // binary format. The function should return a string, with
    each character representing a binary\n    // number. Each character in the string
    will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at
    the beginning and at the end of the string.\n    // The extra characters are there
    to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n
    \   // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n
    \   public static string DecimalToBinary(long decimalNum) {\n        string result
    = \"db\";\n        while (decimalNum > 0) {\n            long remainder = decimalNum
    % 2;\n            result = remainder.ToString() + result;\n            decimalNum
    /= 2;\n        }\n        result += \"db\";\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n
    \   Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n
    \   Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08e103a86d0d4637ad96dcc5b8e6999f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08e103a86d0d4637ad96dcc5b8e6999f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976217
