language: cs
name: HumanEval_48_is_palindrome
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.Equals(String.Join(\"\",
    text.Reverse()));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int p1 = 0;\n        int p2 =
    text.Length - 1;\n        while (p1 < p2) {\n            if (text[p1] != text[p2])
    {\n                return false;\n            }\n            p1++;\n            p2--;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) return
    true;\n        int half = text.Length / 2;\n        for (int i = 0; i < half;
    i++) {\n            if (text[i] != text[text.Length - i - 1]) return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int len = text.Length;\n        for
    (int i = 0; i < len/2; i++) {\n            if (text[i] != text[len-i-1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int L = text.Length;\n        int
    middle = L / 2;\n        for (int i = 0; i < middle; i++) {\n            if (text[i]
    != text[L - i - 1]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length;
    i++) {\n            if (text[i] != text[text.Length - 1 - i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int lo = 0;\n        int hi =
    text.Length - 1;\n        while (lo < hi) {\n            if (text[lo] != text[hi])
    {\n                return false;\n            }\n            lo++;\n            hi--;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int mid = text.Length / 2;\n
    \       for (int i = 0; i < mid; i++) {\n            if (text[i] != text[text.Length
    - i - 1])\n                return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        if
    (length == 0) return true;\n        for (int i = 0; i < length / 2; i++) {\n            if
    (text[i] != text[length - i - 1]) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.Equals(new string(text.Reverse().ToArray()));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        for
    (int i = 0; i < length / 2; i++) {\n            if (text[i] != text[length - i
    - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.Equals(new string(text.Reverse().ToArray()));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        // If a given string is of length
    1 or 0 then it is palindrome\n        if (text.Length == 1 || text.Length == 0)
    {\n            return true;\n        }\n        // If a given string is of length
    2 then it is palindrome if first\n        // character is equal to the second
    character\n        if (text.Length == 2) {\n            return text[0] == text[1];\n
    \       }\n        // If the first and the last character in the string are equal
    then\n        // check if the string with first and last character removed is\n
    \       // palindrome\n        if (text[0] == text[text.Length - 1]) {\n            return
    IsPalindrome(text.Substring(1, text.Length - 2));\n        }\n        // If the
    first and the last character in the string are not equal then\n        // the
    string cannot be palindrome\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) {\n            return
    true;\n        } else {\n            return text[0] == text[text.Length - 1] &&
    IsPalindrome(text.Substring(1, text.Length - 2));\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot
    be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.IsPalindrome (System.String text) [0x00033] in <af28d5c2acc840ad8b05faf70fbc57f9>:0
    \n  at Problem.IsPalindrome (System.String text) [0x0003a] in <af28d5c2acc840ad8b05faf70fbc57f9>:0
    \n  at Problem.Main (System.String[] args) [0x00011] in <af28d5c2acc840ad8b05faf70fbc57f9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length
    cannot be less than zero.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.IsPalindrome (System.String text) [0x00033] in <af28d5c2acc840ad8b05faf70fbc57f9>:0
    \n  at Problem.IsPalindrome (System.String text) [0x0003a] in <af28d5c2acc840ad8b05faf70fbc57f9>:0
    \n  at Problem.Main (System.String[] args) [0x00011] in <af28d5c2acc840ad8b05faf70fbc57f9>:0
    \n"
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int j = text.Length - 1;\n        for
    (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[j - i])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length < 2) {\n            return
    true;\n        }\n        if (text[0] != text[text.Length - 1]) {\n            return
    false;\n        }\n        return IsPalindrome(text.Substring(1, text.Length -
    2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var len = text.Length;\n        if
    (len <= 1) return true;\n        var middle = (len / 2) - 1;\n        for (int
    i = 0; i <= middle; i++) {\n            if (text[i] != text[len - 1 - i]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        //TODO: Implement function that
    checks if given string is a palindrome.\n        if (text.Length <= 1)\n            return
    true;\n        if (text[0] == text[text.Length - 1])\n            return IsPalindrome(text.Substring(1,
    text.Length - 2));\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int start = 0;\n        int end
    = text.Length - 1;\n        while (start < end) {\n            if (text[start]
    != text[end]) {\n                return false;\n            }\n            start++;\n
    \           end--;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int i = 0;\n        int j = text.Length
    - 1;\n        for (; i < j; i++, j--) {\n            if (text[i] != text[j]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length < 2) return true;\n
    \       return text[0] == text[text.Length - 1] && IsPalindrome(text.Substring(1,
    text.Length - 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int textLength = text.Length;\n
    \       if (textLength == 0) {\n            return true;\n        }\n        for
    (int i = 0; i < textLength; i++) {\n            if (text[i] != text[textLength
    - i - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var n = text.Length;\n        if
    (n == 0) {\n            return true;\n        }\n        for (int i = 0; i < n;
    i++) {\n            if (text[i] != text[n - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        for
    (int i = 0; i < length; i++) {\n            if (text[i] != text[length - i - 1])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        int
    midIndex = length / 2;\n        int j = length - 1;\n        for (int i = 0; i
    < midIndex; i++) {\n            if (text[i] != text[j - i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int half = text.Length / 2;\n
    \       for (int i = 0; i < half; i++) {\n            if (text[i] != text[text.Length
    - i - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return String.Concat(text.Reverse())
    == text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length <= 1) {\n            return
    true;\n        }\n        return (text[0] == text[text.Length - 1]) && IsPalindrome(text.Substring(1,
    text.Length - 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length < 2) {\n            return
    true;\n        }\n        return (text[0] == text[text.Length - 1]) && IsPalindrome(text.Substring(1,
    text.Length - 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int middle = text.Length / 2;\n
    \       int charsToCompare = text.Length % 2 == 0 ? middle : middle + 1;\n        for
    (int i = 0; i < charsToCompare; i++) {\n            if (text[i] != text[text.Length
    - 1 - i]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) {\n            return
    true;\n        } else {\n            var half = text.Length / 2;\n            for
    (int i = 0; i < half; i++) {\n                if (text[i] != text[text.Length
    - i - 1]) {\n                    return false;\n                }\n            }\n
    \           return true;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) {\n            return
    true;\n        }\n        var reverse = Reverse(text);\n        return string.Equals(text,
    reverse);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpye9cwi0o.cs(22,23): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var n = text.Length;\n        for
    (int i = 0; i < n/2; i++) {\n            if (text[i] != text[n-i-1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        // Implement the IsPalindrome
    method here.\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5b4830c71eb446ba2f99d14f615b37e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5b4830c71eb446ba2f99d14f615b37e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        for
    (int i = 0; i < length / 2; i++) {\n            if (text[i] != text[length - i
    - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        for
    (int i = 0; i < length / 2; i++) {\n            if (text[i] != text[length - i
    - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        for
    (int i = 0; i < length; i++) {\n            if (text[i] != text[length - i - 1])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return Enumerable.Range(0, text.Length
    / 2).All(i => text[i] == text[text.Length - i - 1]);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length;
    i++) {\n            if (text[i] != text[text.Length - 1 - i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) {\n            return
    true;\n        }\n        for (int i = 0; i < text.Length / 2; i++) {\n            if
    (text[i] != text[text.Length - i - 1]) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length;
    i++) {\n            if (text[i] != text[text.Length - 1 - i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int len = text.Length;\n        for
    (int i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        // TODO:\n        int l = text.Length;\n
    \       for (int i = 0; i < l / 2; i++) {\n            if (text[i] != text[l -
    i - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length <= 1) return
    true;\n        int i = 0;\n        int j = text.Length - 1;\n        while (i
    < j) {\n            if (text[i] != text[j]) return false;\n            i++;\n
    \           j--;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.Reverse().SequenceEqual(text);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length;
    i++) {\n            if (text[i] != text[text.Length - 1 - i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int len = text.Length;\n        for
    (int i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var size = text.Length;\n        var
    mid = size / 2;\n        for (int i = 0; i < mid; i++) {\n            if (text[i]
    != text[size - i - 1]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        // Loop through every character\n
    \       for (int i = 0; i < text.Length / 2; i++) {\n            // Check if character
    at the beginning and end of string are the same\n            if (text[i] != text[text.Length
    - i - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int len = text.Length;\n        for
    (int i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int left = 0;\n        int right
    = text.Length - 1;\n        while (left < right) {\n            if (text[left]
    != text[right]) {\n                return false;\n            }\n            left++;\n
    \           right--;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length;
    i++) {\n            if (text[i] != text[text.Length - 1 - i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.Reverse().SequenceEqual(text);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.Equals(new string(text.Reverse().ToArray()));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int left = 0, right = text.Length
    - 1; left < right; left++, right--) {\n            if (text[left] != text[right])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.Equals(new string(text.Reverse().ToArray()));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int len = text.Length;\n        for
    (int i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var mid = text.Length / 2;\n
    \       return text.Take(mid).SequenceEqual(text.Reverse().Take(mid));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        for
    (int i = 0; i < length / 2; i++) {\n            if (text[i] != text[length - i
    - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        string str = text.ToLower();\n
    \       for (int i = 0; i < str.Length / 2; i++) {\n            if (str[i] !=
    str[str.Length - i - 1]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var i = 0;\n        var j = text.Length
    - 1;\n        while (i < j) {\n            if (text[i] != text[j]) {\n                return
    false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int halfLength = text.Length
    / 2;\n        for (int i = 0; i < halfLength; i++) {\n            if (text[i]
    != text[text.Length - i - 1]) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length <= 1) {\n            return
    true;\n        }\n        return text[0] == text[text.Length - 1] && IsPalindrome(text.Substring(1,
    text.Length - 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var mirror = text.ToCharArray().Reverse().ToArray();\n
    \       return text == new string(mirror);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) {\n            return
    true;\n        }\n        int i = 0;\n        int j = text.Length - 1;\n        while
    (true) {\n            if (text[i] != text[j]) {\n                return false;\n
    \           }\n            if (i == j || i == j + 1) {\n                return
    true;\n            }\n            i++;\n            j--;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int len = text.Length;\n        for
    (int i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length;
    i++) {\n            if (text[i] != text[text.Length - 1 - i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int size = text.Length;\n        for
    (int i = 0; i < size / 2; i++) {\n            if (text[i] != text[size - i - 1])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.Equals(new string(text.Reverse().ToArray()));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        // Iterate through the text in
    reverse\n        for (int i = 0; i < text.Length / 2; i++) {\n            // If
    the characters at the current index and the reverse index do not match, then the
    text is not a palindrome\n            if (text[i] != text[text.Length - 1 - i])
    {\n                return false;\n            }\n        }\n        // The text
    is a palindrome\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        for
    (int i = 0; i < length / 2; i++) {\n            if (text[i] != text[length - i
    - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int left = 0;\n        int right
    = text.Length - 1;\n        for (int i = 0; i < text.Length / 2; i++) {\n            if
    (text[left] != text[right]) {\n                return false;\n            }\n
    \           left++;\n            right--;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int i1 = 0;\n        int i2 =
    text.Length - 1;\n        while (i2 > i1) {\n            if (text[i1] != text[i2])
    {\n                return false;\n            }\n            ++i1;\n            --i2;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        string s = text.ToLower();\n
    \       int n = s.Length;\n        for (int i = 0; i < n / 2; i++) {\n            if
    (s[i] != s[n - i - 1])\n                return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.SequenceEqual(text.Reverse());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) return
    true;\n        for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i]
    != text[text.Length - i - 1]) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length;
    i++) {\n            if (text[i] != text[text.Length - 1 - i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length <= 1) return
    true;\n        return text[0] == text[text.Length - 1] && IsPalindrome(text.Substring(1,
    text.Length - 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) {\n            return
    true;\n        }\n        int length = text.Length - 1;\n        int counter =
    0;\n        while (counter <= length / 2) {\n            if (text[counter] !=
    text[length - counter]) {\n                return false;\n            }\n            counter++;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.All(x => text[0]
    == x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <decffd3a54e842f68db4ee1ad86ef4ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <decffd3a54e842f68db4ee1ad86ef4ba>:0
    \n"
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length;
    i++) {\n            if (text[i] != text[text.Length - 1 - i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) {\n            return
    true;\n        }\n        int i = 0;\n        int j = text.Length - 1;\n        while
    (i < j) {\n            if (text[i] != text[j]) {\n                return false;\n
    \           }\n            i += 1;\n            j -= 1;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        if
    (length == 0) {\n            return true;\n        }\n        for (int i = 0;
    i < length / 2; i++) {\n            if (text[i] != text[length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int len = text.Length;\n        for
    (int i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1])\n
    \               return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int len = text.Length;\n        for
    (int i = 0; i < len/2; i++) {\n            if (text[i] != text[len-i-1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int i = 0;\n        int j = text.Length
    - 1;\n        while (i < j) {\n            if (text[i] != text[j]) {\n                return
    false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int middle = text.Length / 2;\n
    \       for (int i = 0; i < middle; i++) {\n            if (text[i] != text[text.Length
    - i - 1])\n                return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return new string(text.Reverse().ToArray())
    == text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n/2; i++) {\n            if (text[i] != text[n-i-1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        for
    (int i = 0; i < length / 2; i++) {\n            if (text[i] != text[length - i
    - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int len = text.Length;\n        for
    (int i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        for
    (int i = 0; i < length / 2; i++) {\n            if (text[i] != text[length - i
    - 1])\n                return false;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        if
    (n == 0) return true;\n        int forward = 0;\n        int backward = n - 1;\n
    \       while (true) {\n            if (text[forward] != text[backward]) {\n                return
    false;\n            }\n            forward += 1;\n            backward -= 1;\n
    \           if (forward >= backward) {\n                return true;\n            }\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int left = 0;\n        int right
    = text.Length - 1;\n        for (int c = 0; c < text.Length / 2; c++) {\n            if
    (text[left] != text[right]) {\n                return false;\n            }\n
    \           left++;\n            right--;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var textLength = text.Length;\n
    \       var halfLength = textLength / 2;\n        for (int i = 0; i < halfLength;
    i++) {\n            if (text[i] != text[textLength - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int len = text.Length;\n        for
    (int i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1])\n
    \               return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        //Set a flag to true, if a single
    wrong character is found, it will be set to false\n        bool ispalindrome =
    true;\n        //Loop through the string\n        for (int i = 0; i < text.Length;
    i++) {\n            //Check for a mismatch between the first and last letter\n
    \           if (text[i] != text[text.Length - 1 - i]) {\n                //If
    a mismatch is found, break out of the loop and return false\n                ispalindrome
    = false;\n                break;\n            }\n        }\n        //Return the
    flag after the loop has been completed\n        return ispalindrome;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        for
    (int i = 0; i < length / 2; i++) {\n            if (text[i] != text[length - i
    - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) {\n            return
    true;\n        }\n        int length = text.Length;\n        for (int i = 0; i
    < length / 2; i++) {\n            if (text[i] != text[length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        return text.Reverse().SequenceEqual(text);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var asEnum = text.AsEnumerable();\n
    \       return asEnum.SequenceEqual(asEnum.Reverse());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int half_len = text.Length /
    2;\n        string first_half = text.Substring(0, half_len);\n        string second_half
    = text.Substring(text.Length - half_len);\n        return first_half == new string(second_half.Reverse().ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) {\n            return
    true;\n        }\n        for (int i = 0; i < text.Length / 2; i++) {\n            if
    (text[i] != text[text.Length - i - 1]) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length;
    i++) {\n            if (text[i] != text[text.Length - 1 - i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int n = text.Length;\n        for
    (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int left = 0;\n        int right
    = text.Length - 1;\n        while (left < right) {\n            if (text[left]
    != text[right]) {\n                return false;\n            }\n            left
    += 1;\n            right -= 1;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int half = text.Length / 2;\n
    \       for (int i = 0; i < half; i++) {\n            if (text[i] != text[text.Length
    - i - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008779
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length <= 1) return
    true;\n        return text[0] == text[text.Length - 1] && IsPalindrome(text.Substring(1,
    text.Length - 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int length = text.Length;\n        if
    (length == 0) {\n            return true;\n        }\n        int halfLength =
    length / 2;\n        for (int i = 0; i < halfLength; i++) {\n            if (text[i]
    != text[length - i - 1]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int i = 0;\n        int j = text.Length
    - 1;\n        while (i < j) {\n            if (text[i] != text[j]) {\n                return
    false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int l = text.Length;\n        for
    (int i = 0; i < l / 2; i++) {\n            if (text[i] != text[l - i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        // Get length of string\n        int
    len = text.Length;\n        // If length is not zero, check first and last letter\n
    \       // If they are not the same, return false\n        if (len != 0) {\n            if
    (text[0] != text[len - 1]) {\n                return false;\n            }\n        }\n
    \       // If length is less than or equal to 2, return true\n        if (len
    <= 2) {\n            return true;\n        }\n        // Split string in half
    and remove first and last letter\n        // Check if these two halves are the
    same string\n        return IsPalindrome(text.Substring(1, len - 2));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        string s = text.ToLower();\n
    \       int i = 0;\n        int j = s.Length - 1;\n        while (i < j) {\n            if
    (s[i] != s[j])\n                return false;\n            i++;\n            j--;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int min = 0;\n        int max
    = text.Length - 1;\n        while (true) {\n            if (min > max) {\n                return
    true;\n            }\n            char a = text[min];\n            char b = text[max];\n
    \           if (char.ToLower(a) != char.ToLower(b)) {\n                return
    false;\n            }\n            min++;\n            max--;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var i = 0;\n        var j = text.Length
    - 1;\n        while (i < j) {\n            if (text[i] != text[j]) {\n                return
    false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int i = 0;\n        int j = text.Length
    - 1;\n        while (i < j) {\n            if (text[i] != text[j]) {\n                return
    false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int i, len = text.Length;\n        for
    (i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008781
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1])\n                return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var len = text.Length;\n        for
    (int i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        if (text.Length == 0) return
    true;\n        for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i]
    != text[text.Length - i - 1]) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008780
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        for (int i = 0; i < text.Length
    / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008778
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        int max = text.Length / 2;\n
    \       for (int i = 0; i < max; i++) {\n            if (text[i] != text[text.Length
    - i - 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\"))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660008781
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n
    \   // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public
    static bool IsPalindrome(string text) {\n        var str1 = text.Substring(0,
    text.Length / 2);\n        var str2 = text.Substring(text.Length / 2);\n        return
    str1 == Reverse(str2);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\"))
    == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\"))
    == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1cd6jfpr.cs(21,24): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1660008780
