name: HumanEval_87_get_row
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n   \
  \ // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2)\
  \ ...] such that\n    // each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also,\
  \ sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    // >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)1L})})), (1L))\n    // (new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L,\
  \ 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,\
  \ 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))\n    // >>> GetRow((new List<List<long>>()),\
  \ (1L))\n    // (new List<Tuple<long, long>>())\n    // >>> GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L))\n\
  \    // (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L,\
  \ 2L)}))\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst,\
  \ long x) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),\
  \ (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,\
  \ long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,\
  \ long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),\
  \ (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),\
  \ (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new\
  \ List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
completions: ["        List<Tuple<long, long>> ans = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        ans.Add(Tuple.Create(i, j));\n                }\n            }\n    \
    \    }\n        ans.Sort((a, b) => (a.Item1 == b.Item1 ? b.Item2 - a.Item2 : a.Item1\
    \ - b.Item1));\n        return ans;", "        var res = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0L; i < lst.Count; i++) {\n            for\
    \ (long j = 0L; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    res.Add(Tuple.Create(i, j));\n                }\n\
    \            }\n        }\n        return res.OrderBy(o => o.Item1).ThenByDescending(o\
    \ => o.Item2).ToList();", "        List<Tuple<long, long>> output = new List<Tuple<long,\
    \ long>>();\n        int y = 0;\n        foreach (List<long> row in lst) {\n \
    \           int x0 = 0;\n            foreach (long col in row) {\n           \
    \     if (col == x) {\n                    output.Add(Tuple.Create((long)y, (long)x0));\n\
    \                }\n                x0++;\n            }\n            y++;\n \
    \       }\n        output.Sort((a, b) => (a.Item1 != b.Item1) ? a.Item1.CompareTo(b.Item1)\
    \ : -a.Item2.CompareTo(b.Item2));\n        return output;", "        if (lst ==\
    \ null)\n            return new List<Tuple<long, long>>();\n        return lst.SelectMany((row,\
    \ y) => row.Select((e, z) => Tuple.Create(y, z)).Where(t => t.Item2 == x)).OrderBy(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        long position = 0;\n\
    \        foreach (List<long> l in lst) {\n            int index = 0;\n       \
    \     foreach (long i in l) {\n                if (i == x) {\n               \
    \     result.Add(Tuple.Create(position, (long)index));\n                }\n  \
    \              index++;\n            }\n            position++;\n        }\n \
    \       result.Sort((a, b) => {\n            long a1 = a.Item1;\n            long\
    \ b1 = b.Item1;\n            if (a1 != b1) {\n                return a1.CompareTo(b1);\n\
    \            }\n            long a2 = a.Item2;\n            long b2 = b.Item2;\n\
    \            return -1 * a2.CompareTo(b2);\n        });\n        return result;",
  "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        foreach\
    \ (var row in lst) {\n            int i = 0;\n            foreach (var item in\
    \ row) {\n                if (item == x) {\n                    res.Add(Tuple.Create(lst.IndexOf(row),\
    \ i));\n                }\n                i++;\n            }\n        }\n  \
    \      return res.OrderBy(tuple => tuple.Item1).ThenByDescending(tuple => tuple.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   long row = 0;\n        foreach (List<long> list in lst) {\n            long\
    \ col = 0;\n            foreach (long longg in list) {\n                if (longg\
    \ == x) {\n                    result.Add(Tuple.Create(row, col));\n         \
    \       }\n                col++;\n            }\n            row++;\n       \
    \ }\n        result.Sort((a, b) =>\n        {\n            int rowDiff = a.Item1.CompareTo(b.Item1);\n\
    \            if (rowDiff != 0) {\n                return rowDiff;\n          \
    \  }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n\
    \        for (long i = 0; i < lst.Count; i++) {\n            for (long j = 0;\
    \ j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j] == x)\
    \ {\n                    res.Add(Tuple.Create(i, j));\n                }\n   \
    \         }\n        }\n        var list = res.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();\n        return list;", '        throw new NotImplementedException();',
  '        return new List<Tuple<long, long>>();', "        List<Tuple<long, long>>\
    \ r = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            List<long> row = lst[i];\n            for (int j = 0; j < row.Count;\
    \ j++) {\n                if (row[j] == x) {\n                    r.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        r.Sort((a, b) =>\
    \ {\n            var x1 = a.Item1;\n            var y1 = a.Item2;\n          \
    \  var x2 = b.Item1;\n            var y2 = b.Item2;\n            if (x1 < x2)\
    \ {\n                return -1;\n            } else if (x1 > x2) {\n         \
    \       return 1;\n            } else {\n                if (y1 < y2) {\n    \
    \                return 1;\n                } else if (y1 > y2) {\n          \
    \          return -1;\n                } else {\n                    return 0;\n\
    \                }\n            }\n        });\n        return r;", "        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count;\
    \ i++) {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n       \
    \         if (lst[(int)i][(int)j] == x) {\n                    res.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        return res.OrderBy(p\
    \ => p.Item1).ThenByDescending(p => p.Item2).ToList();", "        List<Tuple<long,\
    \ long>> tuples = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ _ in lst) {\n            long i = 0;\n            foreach (long __ in _) {\n\
    \                if (__ == x) {\n                    tuples.Add(Tuple.Create(lst.IndexOf(_),\
    \ i));\n                }\n                i++;\n            }\n        }\n  \
    \      tuples.Sort((x1, y1) => {\n            int cmp = x1.Item1.CompareTo(y1.Item1);\n\
    \            if (cmp != 0) {\n                return cmp;\n            }\n   \
    \         return -x1.Item2.CompareTo(y1.Item2);\n        });\n        return tuples;",
  "        var result = new List<Tuple<long, long>>();\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n\
    \                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ => {\n            if (a.Item1 == b.Item1) {\n                return (int)(a.Item2\
    \ - b.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n \
    \       });\n        return result;", "        // initialize solution set\n  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   // process the data\n        for (int i = 0; i < lst.Count; i++) {\n     \
    \       // get current row\n            List<long> row = lst[i];\n           \
    \ // process the row\n            for (int j = 0; j < row.Count; j++) {\n    \
    \            // get current value\n                long value = row[j];\n    \
    \            // compare current value to target value\n                if (value\
    \ == x) {\n                    // add solution to the result set\n           \
    \         result.Add(Tuple.Create((long)i, (long)j));\n                }\n   \
    \         }\n        }\n        // sort solution set\n        result.Sort(delegate(Tuple<long,\
    \ long> x1, Tuple<long, long> y1) {\n            if (x1.Item1 != y1.Item1) {\n\
    \                return x1.Item1.CompareTo(y1.Item1);\n            } else {\n\
    \                return y1.Item2.CompareTo(x1.Item2);\n            }\n       \
    \ });\n        // return solution set\n        return result;", "        var result\
    \ = new List<Tuple<long, long>>();\n        for (var i = 0; i < lst.Count; i++)\
    \ {\n            var row = lst[i];\n            for (var j = 0; j < row.Count;\
    \ j++) {\n                if (row[j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((x1,\
    \ x2) => {\n            var c = x1.Item1.CompareTo(x2.Item1);\n            if\
    \ (c != 0) return c;\n            return -x1.Item2.CompareTo(x2.Item2);\n    \
    \    });\n        return result;", "        long row = 0;\n        long col =\
    \ 0;\n        List<Tuple<long, long>> rez = new List<Tuple<long, long>>();\n \
    \       foreach (List<long> row_row in lst) {\n            col = 0;\n        \
    \    foreach (long cell in row_row) {\n                if (cell == x) {\n    \
    \                rez.Add(Tuple.Create(row, col));\n                }\n       \
    \         col += 1;\n            }\n            row += 1;\n        }\n       \
    \ rez.Sort((a, b) => {\n            int cmp = a.Item1.CompareTo(b.Item1);\n  \
    \          if (cmp != 0) {\n                return cmp;\n            }\n     \
    \       cmp = b.Item2.CompareTo(a.Item2);\n            return cmp;\n        });\n\
    \        return rez;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        int indexRow = 0;\n        foreach (List<long> row in lst)\
    \ {\n            int indexCol = 0;\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(Tuple.Create(indexRow,\
    \ indexCol));\n                }\n                indexCol++;\n            }\n\
    \            indexRow++;\n        }\n        result.Sort((a, b) => {\n       \
    \     if (a.Item1 == b.Item1) {\n                return (int)(b.Item2 - a.Item2);\n\
    \            }\n            return (int)(a.Item1 - b.Item1);\n        });\n  \
    \      return result;", "        // first, select rows that contain x, then select\
    \ coordinate of x.\n        // return coordinate in tuples.\n        var result\
    \ = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)\
    \ {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n            \
    \    if (lst[(int)i][(int)j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        return result;",
  "        // Fill in your code here.\n        return null;", "        var row = lst.Select((xs,\
    \ y) => xs.Select((v, x) => Tuple.Create(y, x)).Where(xy => v == x)).SelectMany(z\
    \ => z).ToList();\n        return row.OrderBy(xy => xy.Item1).ThenByDescending(xy\
    \ => xy.Item2).ToList();", "        // Write your code here\n        var result\
    \ = new List<Tuple<long, long>>();\n        var rl = lst.Count;\n        var cl\
    \ = 0;\n        var y = 0;\n        var xl = 0;\n        foreach (var row in lst)\
    \ {\n            cl = row.Count;\n            xl = 0;\n            y = 0;\n  \
    \          foreach (var item in row) {\n                if (item == x) {\n   \
    \                 result.Add(Tuple.Create(rl, cl));\n                }\n     \
    \           y++;\n                xl++;\n            }\n            rl--;\n  \
    \      }\n        var ro1 = result.OrderBy(t => t.Item1).ThenByDescending(t =>\
    \ t.Item2).ToList();\n        return ro1;", '        return null;', "        //\
    \ Enter your code here.\n        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((x1, y1) => x1.Item1.CompareTo(y1.Item1));\n\
    \        for (int i = 0; i < result.Count; i++) {\n            result.Sort((x1,\
    \ y1) => x1.Item2.CompareTo(y1.Item2));\n        }\n        return result;", " \
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n    \
    \    for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        var res = result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();\n        return res;",
  "        List<Tuple<long, long>> lst2 = new List<Tuple<long, long>>();\n       \
    \ for (int i = 0; i < lst.Count; i++) {\n            if (lst[i].Contains(x)) {\n\
    \                for (int j = 0; j < lst[i].Count; j++) {\n                  \
    \  if (lst[i][j] == x) {\n                        lst2.Add(Tuple.Create((long)i,\
    \ (long)j));\n                    }\n                }\n            }\n      \
    \  }\n        return lst2;", "        // good luck\n        var result = new List<Tuple<long,\
    \ long>>();\n        for (var i = 0; i < lst.Count; i++) {\n            for (var\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        var result2 = new List<Tuple<long, long>>();\n\
    \        var tmp = result.GroupBy(p => p.Item1).OrderBy(p => p.Key);\n       \
    \ foreach (var item in tmp) {\n            var sorted = item.OrderByDescending(p\
    \ => p.Item2);\n            foreach (var item2 in sorted) {\n                result2.Add(item2);\n\
    \            }\n        }\n        return result2;", "        var result = new\
    \ List<Tuple<long, long>>();\n        for (var i = 0; i < lst.Count; i++) {\n\
    \            var row = lst[i];\n            for (var j = 0; j < row.Count; j++)\
    \ {\n                if (row[j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    res.Add(Tuple.Create(i, j));\n                }\n\
    \            }\n        }\n        return res.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        // +\n        var result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((t1, t2) => {\n          \
    \  var compare = t1.Item1.CompareTo(t2.Item1);\n            if (compare == 0)\
    \ {\n                compare = t2.Item2.CompareTo(t1.Item2);\n            }\n\
    \            return compare;\n        });\n        return result;", "        long\
    \ maxRow = -1;\n        List<Tuple<long, long>> arr = new List<Tuple<long, long>>();\n\
    \        for (long i = 0; i < lst.Count; i++) {\n            if (lst[(int)i].Count\
    \ > maxRow) {\n                maxRow = lst[(int)i].Count;\n            }\n  \
    \      }\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < maxRow; j++) {\n                if (j >= lst[(int)i].Count) {\n \
    \                   break;\n                }\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    arr.Add(Tuple.Create(i, j));\n                }\n\
    \            }\n        }\n        return arr;", "        List<Tuple<long, long>>\
    \ res = new List<Tuple<long, long>>();\n        int row = 0;\n        foreach\
    \ (List<long> r in lst) {\n            int col = 0;\n            foreach (long\
    \ c in r) {\n                if (c == x) {\n                    res.Add(Tuple.Create((long)row,\
    \ (long)col));\n                }\n                col++;\n            }\n   \
    \         row++;\n        }\n        return res.OrderBy(e => e.Item1).ThenByDescending(e\
    \ => e.Item2).ToList();", "        List<Tuple<long, long>> ret = new List<Tuple<long,\
    \ long>>();\n        long row = 0;\n        foreach (List<long> a in lst) {\n\
    \            for (long col = 0; col < a.Count; col++) {\n                if (a[(int)col]\
    \ == x) {\n                    ret.Add(Tuple.Create(row, col));\n            \
    \    }\n            }\n            row++;\n        }\n        ret.Sort(delegate(Tuple<long,\
    \ long> t1, Tuple<long, long> t2) {\n            if (t1.Item1 < t2.Item1) {\n\
    \                return -1;\n            } else if (t1.Item1 > t2.Item1) {\n \
    \               return 1;\n            } else {\n                if (t1.Item2\
    \ > t2.Item2) {\n                    return -1;\n                } else if (t1.Item2\
    \ < t2.Item2) {\n                    return 1;\n                } else {\n   \
    \                 return 0;\n                }\n            }\n        });\n \
    \       return ret;", "        // Implement your algorithm here\n        throw\
    \ new NotImplementedException();", "        var result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((Tuple<long, long> t1, Tuple<long,\
    \ long> t2) => {\n            if (t1.Item1 == t2.Item1) {\n                return\
    \ t2.Item2.CompareTo(t1.Item2);\n            }\n            return t1.Item1.CompareTo(t2.Item1);\n\
    \        });\n        return result;", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)\
    \ {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n            \
    \    if (lst[(int)i][(int)j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ => a.Item1 < b.Item1 ? -1 : a.Item1 > b.Item1 ? 1 : a.Item2 > b.Item2 ? -1 :\
    \ a.Item2 < b.Item2 ? 1 : 0);\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n  \
    \              if (lst[i][j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        var rowAscendingSort\
    \ = result.OrderBy(tuple => tuple.Item1).ToList();\n        var rowDescendingSort\
    \ = rowAscendingSort.OrderByDescending(tuple => tuple.Item2).ToList();\n     \
    \   return rowDescendingSort;", "        List<Tuple<long, long>> result = new\
    \ List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++) {\n\
    \            for (long j = 0; j < lst[(int)i].Count; j++) {\n                if\
    \ (lst[(int)i][(int)j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ => {\n            var res = a.Item1.CompareTo(b.Item1);\n            if (res\
    \ == 0) {\n                res = -a.Item2.CompareTo(b.Item2);\n            }\n\
    \            return res;\n        });\n        return result;", "        var result\
    \ = new List<Tuple<long, long>>();\n        long row = 0;\n        for (;row <\
    \ lst.Count; ++row) {\n            var curRow = lst[(int)row];\n            long\
    \ col = 0;\n            for (;col < curRow.Count; ++col) {\n                if\
    \ (curRow[(int)col] == x) {\n                    result.Add(Tuple.Create(row,\
    \ col));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            var diff = a.Item1 - b.Item1;\n            if (diff ==\
    \ 0) {\n                return b.Item2 - a.Item2;\n            }\n           \
    \ return (int)diff;\n        });\n        return result;", "        var res =\
    \ new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)\
    \ {\n            var xs = lst[(int)i];\n            for (long j = 0; j < xs.Count;\
    \ j++) {\n                if (xs[(int)j] == x) {\n                    res.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        return res.OrderBy(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).ToList();", "        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count;\
    \ i++) {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n       \
    \         if (lst[(int)i][(int)j] == x) {\n                    res.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        res.Sort((a, b) =>\
    \ {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return res;", "        return (from row in Enumerable.Range(0, lst.Count)\n\
    \                from col in Enumerable.Range(0, lst[row].Count)\n           \
    \     where lst[row][col] == x\n                select Tuple.Create(row, col))\n\
    \            .OrderBy(t => t.Item1)\n            .ThenByDescending(t => t.Item2)\n\
    \            .ToList();", "        var ret = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x)\n              \
    \      ret.Add(Tuple.Create((long)i, (long)j));\n            }\n        }\n  \
    \      ret.Sort((a, b) => {\n            if (a.Item1 < b.Item1)\n            \
    \    return -1;\n            if (a.Item1 > b.Item1)\n                return 1;\n\
    \            return b.Item2.CompareTo(a.Item2);\n        });\n        return ret;",
  "        // note that there are two ways to return this list\n        // of tuples:\n\
    \        // 1) using a list of tuples, which is what I did\n        // initially.\n\
    \        // 2) using a list of List<long>, and the returned\n        // list is\
    \ a list of lists, where each list would\n        // contain one element of type\
    \ long, with the first\n        // element being the row, and the second element\
    \ being\n        // the column.\n        // i'm not sure if either is better -\
    \ probably is\n        // just preference.\n        List<Tuple<long, long>> lstRet\
    \ = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)\
    \ {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n            \
    \    if (lst[(int)i][(int)j] == x) {\n                    lstRet.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        // sort the list\
    \ of tuples - two different orders.\n        // first by row, then by column.\n\
    \        lstRet.Sort((a, b) => {\n            // a and b are tuples.\n       \
    \     // a is first.\n            // b is second.\n            // so a[0] is the\
    \ row of a.\n            // b[0] is the row of b.\n            // a[1] is the\
    \ column of a.\n            // b[1] is the column of b.\n            // if a[0]\
    \ is less than b[0], return -1.\n            // if a[0] is greater than b[0],\
    \ return 1.\n            // if a[0] is equal to b[0], then look at\n         \
    \   // a[1] and b[1]\n            // if a[1] is less than b[1], return 1.\n  \
    \          // if a[1] is greater than b[1], return -1.\n            // if they\
    \ are equal, return 0.\n            // first compare by row.\n            // ascending\
    \ order.\n            if (a.Item1 < b.Item1) {\n                return -1;\n \
    \           }\n            if", "        var locations = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    locations.Add(Tuple.Create(i, j));\n          \
    \      }\n            }\n        }\n        locations.Sort((t1, t2) => {\n   \
    \         if (t1.Item1 != t2.Item1) {\n                return t1.Item1.CompareTo(t2.Item1);\n\
    \            }\n            return t2.Item2.CompareTo(t1.Item2);\n        });\n\
    \        return locations;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        long counter = 0;\n        foreach (List<long> l in lst)\
    \ {\n            for (long i = 0; i < l.Count; i++) {\n                if (l[(int)i]\
    \ == x) {\n                    res.Add(Tuple.Create(counter, i));\n          \
    \      }\n            }\n            counter++;\n        }\n        res.Sort((Tuple<long,\
    \ long> a, Tuple<long, long> b) => {\n            if (a.Item1 == b.Item1) {\n\
    \                return -a.Item2.CompareTo(b.Item2);\n            }\n        \
    \    return a.Item1.CompareTo(b.Item1);\n        });\n        return res;", " \
    \       List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n       \
    \ long cnt = 0;\n        foreach (List<long> row in lst) {\n            for (long\
    \ i = 0; i < row.Count; i++) {\n                if (row[(int)i] == x) {\n    \
    \                ret.Add(Tuple.Create(cnt, i));\n                }\n         \
    \   }\n            cnt++;\n        }\n        ret.Sort((a, b) => a.Item1.CompareTo(b.Item1));\n\
    \        ret.Sort((a, b) => -a.Item2.CompareTo(b.Item2));\n        return ret;",
  "        // Your code goes here.\n        return null;", "        var results =\
    \ new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if\
    \ (lst[i][j] == x) {\n                    results.Add(Tuple.Create((long)i, (long)j));\n\
    \                }\n            }\n        }\n        results.Sort((pair1, pair2)\
    \ => {\n            if (pair1.Item1 == pair2.Item1) {\n                return\
    \ -pair1.Item2.CompareTo(pair2.Item2);\n            }\n            return pair1.Item1.CompareTo(pair2.Item1);\n\
    \        });\n        return results;", "        // put your code here...\n  \
    \      return lst\n            .Select((row, i) => (\n                row.Select((e,\
    \ j) => (\n                    e == x ? Tuple.Create((long)i, (long)j) : null))\n\
    \                .Where(e => e != null)\n                .Select(e => (Tuple<long,\
    \ long>)e)))\n            .SelectMany(e => e)\n            .OrderBy(e => e.Item1)\n\
    \            .ThenByDescending(e => e.Item2)\n            .ToList();", "     \
    \   var result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var res = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        res.Add(Tuple.Create((long)i, (long)j));\n                }\n       \
    \     }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1 < b.Item1)\
    \ {\n                return -1;\n            } else if (a.Item1 > b.Item1) {\n\
    \                return 1;\n            } else {\n                if (a.Item2\
    \ > b.Item2) {\n                    return -1;\n                } else if (a.Item2\
    \ < b.Item2) {\n                    return 1;\n                } else {\n    \
    \                return 0;\n                }\n            }\n        });\n  \
    \      return res;", "        List<Tuple<long, long>> r = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 r.Add(Tuple.Create((long)i, (long)j));\n                }\n\
    \            }\n        }\n        // sort by row, then by column descending\n\
    \        r.Sort((a, b) => {\n            if (a.Item1 == b.Item1) {\n         \
    \       return (int)(b.Item2 - a.Item2);\n            }\n            return (int)(a.Item1\
    \ - b.Item1);\n        });\n        return r;", "        // Implemenent GetRow\
    \ here.\n        throw new NotImplementedException();", "        List<Tuple<long,\
    \ long>> lst2 = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    lst2.Add(Tuple.Create(i, j));\n\
    \                }\n            }\n        }\n        lst2.Sort((a, b) => {\n\
    \            if (a.Item1 != b.Item1)\n                return a.Item1.CompareTo(b.Item1);\n\
    \            else\n                return b.Item2.CompareTo(a.Item2);\n      \
    \  });\n        return lst2;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 res.Add(Tuple.Create((long)i, (long)j));\n                }\n\
    \            }\n        }\n        // sort each row in res in descending order\n\
    \        return res.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();",
  '        throw new NotImplementedException();', "        var result = new List<Tuple<long,\
    \ long>>();\n        var numRows = lst.Count;\n        for (var row = 0; row <\
    \ numRows; row++) {\n            var numCols = lst[row].Count;\n            for\
    \ (var col = 0; col < numCols; col++) {\n                if (lst[row][col] ==\
    \ x) {\n                    result.Add(Tuple.Create(row, col));\n            \
    \    }\n            }\n        }\n        result.Sort((a, b) => a.Item1 == b.Item1\
    \ ? a.Item2.CompareTo(b.Item2) : a.Item1.CompareTo(b.Item1));\n        return\
    \ result;", "        // Your code goes here.\n        List<Tuple<long, long>>\
    \ ret = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    ret.Add(Tuple.Create((long)i, (long)j));\n\
    \                }\n            }\n        }\n        return ret;", "        List<Tuple<long,\
    \ long>> ans = new List<Tuple<long, long>>();\n        int row = -1;\n       \
    \ foreach (List<long> list in lst) {\n            row++;\n            int col\
    \ = -1;\n            foreach (long number in list) {\n                col++;\n\
    \                if (number == x) {\n                    ans.Add(Tuple.Create(row,\
    \ col));\n                }\n            }\n        }\n        ans.Sort(delegate(Tuple<long,\
    \ long> x1, Tuple<long, long> y1) {\n            return x1.Item1 == y1.Item1 ?\
    \ y1.Item2.CompareTo(x1.Item2) : x1.Item1.CompareTo(y1.Item1);\n        });\n\
    \        return ans;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int r = 0; r < lst.Count; r++) {\n            List<long>\
    \ row = lst[r];\n            for (int c = 0; c < row.Count; c++) {\n         \
    \       if (row[c] == x) {\n                    result.Add(Tuple.Create((long)r,\
    \ (long)c));\n                }\n            }\n        }\n        result.Sort((t1,\
    \ t2) => {\n            if (t1.Item1 != t2.Item1)\n                return t1.Item1.CompareTo(t2.Item1);\n\
    \            return -t1.Item2.CompareTo(t2.Item2);\n        });\n        return\
    \ result;", '        return null;', "        List<Tuple<long, long>> res = new\
    \ List<Tuple<long, long>>();\n        if(lst.Count > 0) {\n            for(int\
    \ i = 0; i < lst.Count; i++) {\n                if(lst[i].Count > 0) {\n     \
    \               for(int j = 0; j < lst[i].Count; j++) {\n                    \
    \    if(lst[i][j] == x) {\n                            res.Add(Tuple.Create((long)i,\
    \ (long)j));\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        res.Sort((a, b) => {\n            if(a.Item1\
    \ < b.Item1) {\n                return -1;\n            } else if(a.Item1 > b.Item1)\
    \ {\n                return 1;\n            } else {\n                if(a.Item2\
    \ > b.Item2) {\n                    return -1;\n                } else if(a.Item2\
    \ < b.Item2) {\n                    return 1;\n                } else {\n    \
    \                return 0;\n                }\n            }\n        });\n  \
    \      return res;", "        long i = 0;\n        long j = 0;\n        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        foreach (List<long> row\
    \ in lst) {\n            j = 0;\n            foreach (long element in row) {\n\
    \                if (element == x) {\n                    res.Add(Tuple.Create(i,\
    \ j));\n                }\n                j++;\n            }\n            i++;\n\
    \        }\n        return res;", "        List<Tuple<long, long>> tuples = new\
    \ List<Tuple<long, long>>();\n        if (lst == null) {\n            return tuples;\n\
    \        }\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    tuples.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        tuples.Sort((tuple, t) => {\n       \
    \     if (tuple.Item1 == t.Item1) {\n                return t.Item2.CompareTo(tuple.Item2);\n\
    \            }\n            return tuple.Item1.CompareTo(t.Item1);\n        });\n\
    \        return tuples;", "        // Your code goes here.\n        throw new\
    \ NotImplementedException();", "        // Initialize list\n        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        // Iterate each row\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            // Iterate each column\
    \ of the row\n            for (int j = 0; j < lst[i].Count; j++) {\n         \
    \       // Check if x is found\n                if (lst[i][j] == x) {\n      \
    \              // Add tuple to the result list\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        // Sort the\
    \ list by rows in ascending order\n        result.Sort((t1, t2) => t1.Item1.CompareTo(t2.Item1));\n\
    \        // Sort the list by columns in descending order\n        for (int i =\
    \ 0; i < result.Count; i++) {\n            // Find the list of all tuples of the\
    \ same row\n            List<Tuple<long, long>> currentRow = result.FindAll(t\
    \ => t.Item1 == result[i].Item1);\n            // Sort the list by columns in\
    \ descending order\n            currentRow.Sort((t1, t2) => t2.Item2.CompareTo(t1.Item2));\n\
    \            // Add the list back to the original list\n            result.InsertRange(i,\
    \ currentRow);\n            // Remove the list of all tuples of the same row\n\
    \            result.RemoveAll(t => t.Item1 == result[i].Item1);\n        }\n \
    \       // Return the result\n        return result;", "        // find x, then\
    \ return lists of tuples\n        var result = new List<Tuple<long, long>>();\n\
    \        for (long i = 0; i < lst.Count; i++) {\n            for (long j = 0;\
    \ j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j] == x)\
    \ {\n                    result.Add(Tuple.Create(i, j));\n                }\n\
    \            }\n        }\n        result.Sort((x0, y0) => {\n            var\
    \ v = x0.Item1.CompareTo(y0.Item1);\n            if (v == 0) {\n             \
    \   v = y0.Item2.CompareTo(x0.Item2);\n            }\n            return v;\n\
    \        });\n        return result;", "        List<Tuple<long, long>> arr =\
    \ new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if\
    \ (lst[i][j] == x) {\n                    arr.Add(Tuple.Create(i, j));\n     \
    \           }\n            }\n        }\n        arr.Sort((a, b) => {\n      \
    \      var cmp = a.Item1.CompareTo(b.Item1);\n            if (cmp != 0) {\n  \
    \              return cmp;\n            }\n            return -a.Item2.CompareTo(b.Item2);\n\
    \        });\n        return arr;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        for (long r = 0; r < lst.Count; r++)\
    \ {\n            for (long c = 0; c < lst[(int)r].Count; c++) {\n            \
    \    if (lst[(int)r][(int)c] == x) {\n                    result.Add(Tuple.Create(r,\
    \ c));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ => (int)(a.Item1 - b.Item1));\n        result.Sort((a, b) => (int)(b.Item2 -\
    \ a.Item2));\n        return result;", '        // Your code is here ... enjoy!!!',
  "        // your code goes here\n        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 ==\
    \ b.Item1) {\n                return -a.Item2.CompareTo(b.Item2);\n          \
    \  }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", '        // Your code goes here', "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (lst[i].Contains(x)) {\n                for (int j =\
    \ 0; j < lst[i].Count; j++) {\n                    if (lst[i][j] == x) {\n   \
    \                     result.Add(Tuple.Create((long)i, (long)j));\n          \
    \          }\n                }\n            }\n        }\n        var sorted\
    \ = result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();\n  \
    \      return sorted;", "        // Create new list with tuples (row, column)\n\
    \        var result = new List<Tuple<long, long>>();\n        // Iterate through\
    \ rows\n        for (long i = 0; i < lst.Count; i++) {\n            // Iterate\
    \ through columns\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n\
    \                // If the element x is found\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    // Create a tuple (row, column) and add it to the\
    \ list\n                    result.Add(Tuple.Create(i, j));\n                }\n\
    \            }\n        }\n        // Sort the list in ascending order by rows\n\
    \        result.Sort((a, b) => {\n            if (a.Item1 != b.Item1) {\n    \
    \            return a.Item1.CompareTo(b.Item1);\n            }\n            //\
    \ and in descending order by columns in the same row\n            return b.Item2.CompareTo(a.Item2);\n\
    \        });\n        // Return the sorted list\n        return result;", "  \
    \      var result = new List<Tuple<long, long>>();\n        foreach (var i in\
    \ Enumerable.Range(0, lst.Count)) {\n            foreach (var j in Enumerable.Range(0,\
    \ lst[i].Count)) {\n                if (lst[i][j] == x) {\n                  \
    \  result.Add(Tuple.Create((long)i, (long)j));\n                }\n          \
    \  }\n        }\n        result.Sort((a, b) => (a.Item1 == b.Item1) ? (b.Item2\
    \ - a.Item2) : (a.Item1 - b.Item1));\n        return result;", "        var list\
    \ = new List<Tuple<long, long>>();\n        long i = 0;\n        foreach (var\
    \ row in lst) {\n            long j = 0;\n            foreach (var col in row)\
    \ {\n                if (col == x) {\n                    list.Add(Tuple.Create(i,\
    \ j));\n                }\n                j += 1;\n            }\n          \
    \  i += 1;\n        }\n        list.Sort((a, b) => a.Item1 == b.Item1 ? b.Item2.CompareTo(a.Item2)\
    \ : a.Item1.CompareTo(b.Item1));\n        return list;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        // your code here\n\
    \        long row = 0L;\n        foreach (List<long> list in lst) {\n        \
    \    long col = 0L;\n            foreach (long item in list) {\n             \
    \   if (item == x) {\n                    result.Add(Tuple.Create(row, col));\n\
    \                }\n                col += 1L;\n            }\n            row\
    \ += 1L;\n        }\n        result.Sort(Compare);\n        return result;", '        return
    lst.SelectMany((v, i) => v.Select((y, j) => Tuple.Create(i, j)).Where(z => z.Item2
    == x)).ToList();', "        var ret = new List<Tuple<long, long>>();\n       \
    \ for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    ret.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        return ret.OrderBy(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).ToList();", '        return lst.Select((row,
    i) => Tuple.Create(i, row.IndexOf(x))).Where(t => t.Item2 != -1).OrderBy(t =>
    t.Item1).ThenByDescending(t => t.Item2).ToList();', "        List<Tuple<long,\
    \ long>> ret = new List<Tuple<long, long>>();\n        long i = 0;\n        foreach\
    \ (List<long> row in lst) {\n            long j = 0;\n            foreach (long\
    \ k in row) {\n                if (k == x) {\n                    ret.Add(Tuple.Create(i,\
    \ j));\n                }\n                j++;\n            }\n            i++;\n\
    \        }\n        return ret;", "        var res = new List<Tuple<long, long>>();\n\
    \        var rows = lst.Count;\n        for (var i = 0; i < rows; i++) {\n   \
    \         for (var j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]\
    \ == x) {\n                    res.Add(Tuple.Create((long)i, (long)j));\n    \
    \            }\n            }\n        }\n        return res.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            int cmp =\
    \ a.Item1.CompareTo(b.Item1);\n            if (cmp != 0) return cmp;\n       \
    \     return -a.Item2.CompareTo(b.Item2);\n        });\n        return result;",
  "        List<Tuple<long, long>> rc = new List<Tuple<long, long>>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    rc.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        return rc.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> _return = new List<Tuple<long, long>>();\n        int n = lst.Count();\n\
    \        int i = 0;\n        while (i < n) {\n            int m = lst[i].Count();\n\
    \            int j = 0;\n            while (j < m) {\n                if (lst[i][j]\
    \ == x) {\n                    _return.Add(Tuple.Create(i, j));\n            \
    \    }\n                j = j + 1;\n            }\n            i = i + 1;\n  \
    \      }\n        return _return;", "        // Replace with your code\n     \
    \   return null;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        // You can add more local variables\n        foreach (var\
    \ row in lst) {\n            for (int j = 0; j < row.Count; j++) {\n         \
    \       if (row[j] == x) {\n                    result.Add(Tuple.Create(lst.IndexOf(row),\
    \ j));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ =>\n            (int)(a.Item1 < b.Item1 ? -1 :\n                  a.Item1 >\
    \ b.Item1 ?  1 :\n                  a.Item2 > b.Item2 ? -1 :\n               \
    \   a.Item2 < b.Item2 ?  1 : 0));\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (long rowIndex =\
    \ 0; rowIndex < lst.Count; rowIndex++) {\n            for (long columnIndex =\
    \ 0; columnIndex < lst[(int)rowIndex].Count; columnIndex++) {\n              \
    \  if (lst[(int)rowIndex][(int)columnIndex] == x) {\n                    result.Add(Tuple.Create(rowIndex,\
    \ columnIndex));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => (a.Item1 < b.Item1) ? -1 : ((a.Item1 > b.Item1) ? 1 : ((a.Item2 > b.Item2)\
    \ ? -1 : ((a.Item2 < b.Item2) ? 1 : 0))));\n        return result;", "       \
    \ List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        // res[0]\
    \ = (0, 0);\n        int count = 0;\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            List<long> row = lst[i];\n            for (int j = 0; j < row.Count;\
    \ j++) {\n                if (row[j] == x) {\n                    res.Add(Tuple.Create((long)i,\
    \ (long)j));\n                    count++;\n                }\n            }\n\
    \        }\n        res.Sort(((x1, y1) => {\n            if (x1.Item1 == y1.Item1)\
    \ {\n                return (int)(x1.Item2 - y1.Item2);\n            }\n     \
    \       return (int)(x1.Item1 - y1.Item1);\n        }));\n        return res;",
  "        // This problem will be graded manually,\n        // as we didn't have\
    \ time to figure out a good approach for testing it.\n        //\n        // We\
    \ encourage you to think about this problem, and try solving it on your own.\n\
    \        // Then, check solution, or ask us in the discussion forum.\n       \
    \ //\n        // The problem is not designed to be easy. We'll reveal the best\
    \ approach\n        // after the competition.\n        //\n        // Good luck!\n\
    \        List<Tuple<long, long>> toReturn = new List<Tuple<long, long>>();\n \
    \       long currRow = 0;\n        foreach (List<long> row in lst) {\n       \
    \     long currCol = 0;\n            foreach (long col in row) {\n           \
    \     if (col == x) {\n                    toReturn.Add(Tuple.Create(currRow,\
    \ currCol));\n                }\n                currCol++;\n            }\n \
    \           currRow++;\n        }\n        toReturn.Sort((a, b) => a.Item1 ==\
    \ b.Item1 ? -a.Item2.CompareTo(b.Item2) : a.Item1.CompareTo(b.Item1));\n     \
    \   return toReturn;", "        List<Tuple<long, long>> output = new List<Tuple<long,\
    \ long>>();\n        if (lst.Count > 0) {\n            int i = 0;\n          \
    \  foreach (List<long> l in lst) {\n                int j = 0;\n             \
    \   foreach (long n in l) {\n                    if (n == x) {\n             \
    \           output.Add(Tuple.Create(i, j));\n                    }\n         \
    \           j++;\n                }\n                i++;\n            }\n   \
    \     }\n        output.Sort((x1, y1) => {\n            if (x1.Item1 != y1.Item1)\
    \ {\n                return x1.Item1 < y1.Item1 ? -1 : 1;\n            } else\
    \ {\n                return x1.Item2 > y1.Item2 ? -1 : 1;\n            }\n   \
    \     });\n        return output;", "        // your code here\n        if (lst.Count\
    \ == 0) {\n            return new List<Tuple<long, long>>();\n        }\n    \
    \    List<Tuple<long, long>> indexlist = new List<Tuple<long, long>>();\n    \
    \    for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    indexlist.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        indexlist.Sort((x1,\
    \ y1) => x1.Item1.CompareTo(y1.Item1));\n        indexlist.Sort((x1, y1) => y1.Item2.CompareTo(x1.Item2));\n\
    \        return indexlist;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        var sorted = lst.Select((v, i) => new { Value = v, Row =\
    \ i })\n                        .Where(t => t.Value.Contains(x))\n           \
    \             .SelectMany(t => t.Value.Select((v, j) => new { Value = v, Row =\
    \ t.Row, Col = j }))\n                        .Where(t => t.Value == x)\n    \
    \                    .OrderBy(t => t.Row)\n                        .ThenByDescending(t\
    \ => t.Col)\n                        .Select(t => Tuple.Create(t.Row, t.Col))\n\
    \                        .ToList();\n        foreach (var e in sorted) {\n   \
    \         result.Add(e);\n        }\n        return result;", "        // Insert\
    \ your code here\n        return new List<Tuple<long, long>>();", "        //\
    \ Write your code here\n        return null;", '        // Write your code here',
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   int i = 0;\n        foreach (List<long> row in lst) {\n            int j =\
    \ 0;\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    result.Add(Tuple.Create((long)i, (long)j));\n           \
    \     }\n                j++;\n            }\n            i++;\n        }\n  \
    \      var res = result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();\n\
    \        return res;", "        // Place your code here\n        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        int n = lst.Count;\n\
    \        int m = 0;\n        for (int i = 0; i < n; i++) {\n            m = Math.Max(m,\
    \ lst[i].Count);\n        }\n        for (int i = 0; i < n; i++) {\n         \
    \   for (int j = 0; j < m; j++) {\n                if (lst[i].Count > j && lst[i][j]\
    \ == x) {\n                    result.Add(Tuple.Create((long)i, (long)j));\n \
    \               }\n            }\n        }\n        result.Sort((a, b) => (a.Item1\
    \ != b.Item1) ? a.Item1.CompareTo(b.Item1) : b.Item2.CompareTo(a.Item2));\n  \
    \      return result;", "        var row = 0;\n        var idx = 0;\n        var\
    \ result = new List<Tuple<long, long>>();\n        foreach (var list in lst) {\n\
    \            var index = list.FindIndex(p => p == x);\n            if (index !=\
    \ -1)\n                result.Add(Tuple.Create(row, index));\n            row++;\n\
    \        }\n        return result;", "        // Your code goes here\n       \
    \ return new List<Tuple<long, long>>();", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        long row = 0;\n        long col =\
    \ 0;\n        foreach (List<long> i in lst) {\n            foreach (long j in\
    \ i) {\n                if (j == x) {\n                    result.Add(Tuple.Create(row,\
    \ col));\n                }\n                col += 1;\n            }\n      \
    \      col = 0;\n            row += 1;\n        }\n        result.Sort(delegate(Tuple<long,\
    \ long> x1, Tuple<long, long> y1) {\n            return x1.Item1 < y1.Item1 ?\
    \ -1 : x1.Item1 > y1.Item1 ? 1 : x1.Item2 > y1.Item2 ? -1 : x1.Item2 < y1.Item2\
    \ ? 1 : 0;\n        });\n        return result;", "        if (lst == null) return\
    \ null;\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n\
    \            if (row == null) continue;\n            for (int j = 0; j < row.Count;\
    \ j++) {\n                if (row[j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((lhs,\
    \ rhs) => {\n            if (lhs.Item1 == rhs.Item1) return rhs.Item2.CompareTo(lhs.Item2);\n\
    \            return lhs.Item1.CompareTo(rhs.Item1);\n        });\n        return\
    \ result;", '        return null;', "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)\
    \ {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n            \
    \    if (lst[(int)i][(int)j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((Tuple<long,\
    \ long> a, Tuple<long, long> b) => {\n            if (a.Item1 == b.Item1) {\n\
    \                return b.Item2.CompareTo(a.Item2);\n            }\n         \
    \   return a.Item1.CompareTo(b.Item1);\n        });\n        return result;",
  "        List<Tuple<long, long>> lstTuple = new List<Tuple<long, long>>();\n   \
    \     for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    lstTuple.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        lstTuple.Sort((a,\
    \ b) => a.Item1 != b.Item1 ? a.Item1.CompareTo(b.Item1) : b.Item2.CompareTo(a.Item2));\n\
    \        return lstTuple;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        long counter = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    result.Add(Tuple.Create(counter,\
    \ j));\n                }\n            }\n            counter++;\n        }\n\
    \        result.Sort(Comparer<Tuple<long, long>>.Create((x1, x2) => {\n      \
    \      if (x1.Item1 == x2.Item1) {\n                return x2.Item2.CompareTo(x1.Item2);\n\
    \            }\n            return x1.Item1.CompareTo(x2.Item1);\n        }));\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => (a.Item1 < b.Item1)\
    \ ? -1 : (a.Item1 > b.Item1) ? 1 : (a.Item2 > b.Item2) ? -1 : (a.Item2 < b.Item2)\
    \ ? 1 : 0);\n        return result;", "        return (from el in\n          \
    \      (from inner in\n                 (from inner in\n                  (from\
    \ inner in\n                   (from inner in\n                    (from inner\
    \ in\n                     (from inner in\n                      (from inner in\n\
    \                       (from inner in\n                        (from inner in\n\
    \                         (from inner in\n                          (from inner\
    \ in\n                           (from inner in\n                            (from\
    \ inner in\n                             (from inner in\n                    \
    \          (from inner in\n                               (from inner in\n   \
    \                             (from inner in\n                               \
    \  (from inner in\n                                  (from inner in\n        \
    \                           (from inner in\n                                 \
    \   (from inner in\n                                     (from inner in\n    \
    \                                  (from inner in\n                          \
    \             (from inner in\n                                        (from inner\
    \ in\n                                         (from inner in\n              \
    \                            (from inner in\n                                \
    \           (from inner in\n                                            (from\
    \ inner in\n                                             (from inner in\n    \
    \                                          (from inner in\n                  \
    \                             (from inner in\n                               \
    \                 (from inner in\n                                           \
    \      (from inner in\n                                                  (from\
    \ inner in\n                                                   (from inner in\n\
    \                                                    (from inner in\n        \
    \                                             (from inner in\n               \
    \                                       (from inner in\n                     \
    \                                  (from inner in\n                          \
    \                              (from inner in\n                              \
    \                           (from inner in\n                                 \
    \                         (from inner in\n                                   \
    \                        (from inner in\n                                    \
    \                        (from inner in\n                                    \
    \                         (from inner in\n                                   \
    \                           (from inner in\n                                 \
    \                              (from inner in\n                              \
    \                                  (from inner in\n                          \
    \                                       (from inner in\n                     \
    \                                             (from inner in\n               \
    \                                                    (from inner in\n        \
    \                                                            (from inner in\n\
    \                                                                     (from inner\
    \ in\n                                                                      (from\
    \ inner in\n                                                                 \
    \      (from inner in\n                                                      \
    \                  (from inner in\n                                          \
    \                               (from inner in\n                             \
    \                                             (from inner in\n               \
    \                                                            (from inner in\n\
    \                                                                            (from\
    \ inner in\n                                                                 \
    \            (from inner in\n                                                \
    \                              (from inner in\n                              \
    \                                                 (from inner in\n", "       \
    \ var res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            var row = lst[i];\n            for (int j = 0; j < row.Count;\
    \ j++) {\n                if (row[j] == x) {\n                    res.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        return res.OrderBy(tup\
    \ => tup.Item1).ThenByDescending(tup => tup.Item2).ToList();", "        int i\
    \ = 0;\n        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n\
    \        while (i < lst.Count) {\n            long j = 0;\n            while (j\
    \ < lst[i].Count) {\n                if (lst[i][(int)j] == x) {\n            \
    \        res.Add(Tuple.Create((long)i, j));\n                }\n             \
    \   j = j + 1;\n            }\n            i = i + 1;\n        }\n        res.Sort((left,\
    \ right) => {\n            if (left.Item1 == right.Item1) {\n                return\
    \ -left.Item2.CompareTo(right.Item2);\n            }\n            return left.Item1.CompareTo(right.Item1);\n\
    \        });\n        return res;", '        return lst.SelectMany((List<long>
    a, int r) => a.Select((long b, int c) => Tuple.Create(r, c)).Where(t => b == x)).OrderBy(t
    => t.Item1).ThenByDescending(t => t.Item2).ToList();', "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            List<long> row = lst[i];\n            for (int\
    \ j = 0; j < row.Count; j++) {\n                if (row[j] == x) {\n         \
    \           result.Add(Tuple.Create(i, j));\n                }\n            }\n\
    \        }\n        var sorted = from item in result\n                     orderby\
    \ item.Item1 ascending, item.Item2 descending\n                     select item;\n\
    \        return sorted.ToList();", "        // Your code goes here.\n        var\
    \ res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    res.Add(Tuple.Create((long)i, (long)j));\n\
    \                }\n            }\n        }\n        res.Sort((a, b) => {\n \
    \           if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return res;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    res.Add(Tuple.Create(i, j));\n                }\n\
    \            }\n        }\n        return res.OrderBy(o => o.Item1).ThenByDescending(o\
    \ => o.Item2).ToList();", "        var coords = new List<Tuple<long, long>>();\n\
    \        var coordsDict = new Dictionary<long, List<long>>();\n        for (var\
    \ i = 0; i < lst.Count; i++) {\n            var current = lst[i];\n          \
    \  for (var j = 0; j < current.Count; j++) {\n                if (current[j] ==\
    \ x) {\n                    if (!coordsDict.ContainsKey(i)) {\n              \
    \          coordsDict[i] = new List<long>();\n                    }\n        \
    \            coordsDict[i].Add(j);\n                }\n            }\n       \
    \ }\n        foreach (var kv in coordsDict) {\n            var row = kv.Key;\n\
    \            var cols = kv.Value;\n            foreach (var col in cols) {\n \
    \               coords.Add(Tuple.Create(row, col));\n            }\n        }\n\
    \        coords.Sort((t1, t2) => {\n            if (t1.Item1 < t2.Item1) {\n \
    \               return -1;\n            } else if (t1.Item1 > t2.Item1) {\n  \
    \              return 1;\n            } else {\n                if (t1.Item2 >\
    \ t2.Item2) {\n                    return -1;\n                } else if (t1.Item2\
    \ < t2.Item2) {\n                    return 1;\n                } else {\n   \
    \                 return 0;\n                }\n            }\n        });\n \
    \       return coords;", "        List<Tuple<long, long>> l = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 l.Add(Tuple.Create((long)i, (long)j));\n                }\n\
    \            }\n        }\n        l.Sort((t1, t2) => {\n            if (t1.Item1\
    \ == t2.Item1) {\n                return t2.Item2.CompareTo(t1.Item2);\n     \
    \       }\n            return t1.Item1.CompareTo(t2.Item1);\n        });\n   \
    \     return l;", "        var tuples = new List<Tuple<long, long>>();\n     \
    \   var rows = lst.Count;\n        var columns = lst.Select(row => row.Count).ToList();\n\
    \        var rowIndex = 0;\n        var columnIndex = 0;\n        foreach (var\
    \ row in lst) {\n            columnIndex = 0;\n            foreach (var column\
    \ in row) {\n                if (column == x) {\n                    tuples.Add(Tuple.Create(rowIndex,\
    \ columnIndex));\n                }\n                columnIndex++;\n        \
    \    }\n            rowIndex++;\n        }\n        tuples.Sort((t1, t2) => {\n\
    \            if (t1.Item1 < t2.Item1) return -1;\n            if (t1.Item1 > t2.Item1)\
    \ return 1;\n            if (t1.Item2 > t2.Item2) return -1;\n            if (t1.Item2\
    \ < t2.Item2) return 1;\n            return 0;\n        });\n        return tuples;",
  "        return Enumerable.Range(0, lst.Count)\n            .SelectMany(i => Enumerable.Range(0,\
    \ lst[i].Count)\n                .Where(j => lst[i][j] == x)\n               \
    \ .Select(j => Tuple.Create((long)i, (long)j)))\n            .OrderBy(t => t.Item1)\n\
    \            .ThenByDescending(t => t.Item2)\n            .ToList();", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        for\
    \ (long i = 0; i < lst.Count; i++) {\n            for (long j = 0; j < lst[(int)i].Count;\
    \ j++) {\n                if (lst[(int)i][(int)j] == x) {\n                  \
    \  result.Add(Tuple.Create(i, j));\n                }\n            }\n       \
    \ }\n        result.Sort((x1, y1) => x1.Item1 < y1.Item1 ? -1 : x1.Item1 > y1.Item1\
    \ ? 1 : 0);\n        result.Sort((x1, y1) => x1.Item2 > y1.Item2 ? -1 : x1.Item2\
    \ < y1.Item2 ? 1 : 0);\n        return result;", "        List<Tuple<long, long>>\
    \ res = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count;\
    \ i++) {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n       \
    \         if (lst[(int)i][(int)j] == x) {\n                    res.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        res.Sort((a, b) =>\
    \ {\n            int cmp = a.Item1.CompareTo(b.Item1);\n            if (cmp !=\
    \ 0) {\n                return cmp;\n            }\n            cmp = b.Item2.CompareTo(a.Item2);\n\
    \            return cmp;\n        });\n        return res;", "        var result\
    \ = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            var r = lst[i];\n            for (int j = 0; j < r.Count; j++)\
    \ {\n                if (r[j] == x)\n                    result.Add(Tuple.Create(i,\
    \ j));\n            }\n        }\n        result.Sort((y, z) => {\n          \
    \  if (y.Item1 == z.Item1)\n                return z.Item2.CompareTo(y.Item2);\n\
    \            return y.Item1.CompareTo(z.Item1);\n        });\n        return result;",
  '        return new List<Tuple<long, long>>();', "        var res = new List<Tuple<long,\
    \ long>>();\n        for (long row = 0; row < lst.Count; row++) {\n          \
    \  for (long col = 0; col < lst[(int)row].Count; col++) {\n                if\
    \ (lst[(int)row][(int)col] == x) {\n                    res.Add(Tuple.Create(row,\
    \ col));\n                }\n            }\n        }\n        res.Sort((t1, t2)\
    \ => {\n            if (t1.Item1 == t2.Item1) {\n                return t2.Item2.CompareTo(t1.Item2);\n\
    \            }\n            return t1.Item1.CompareTo(t2.Item1);\n        });\n\
    \        return res;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((t1, t2) => (t1.Item1 == t2.Item1)\
    \ ? t2.Item2.CompareTo(t1.Item2) : t1.Item1.CompareTo(t2.Item1));\n        return\
    \ result;", "        var result = new List<Tuple<long, long>>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((t1,\
    \ t2) => {\n            if (t1.Item1 == t2.Item1) {\n                return t2.Item2.CompareTo(t1.Item2);\n\
    \            }\n            return t1.Item1.CompareTo(t2.Item1);\n        });\n\
    \        return result;", "        // Your code is here.\n        return null;",
  "        List<Tuple<long, long>> ans = new List<Tuple<long, long>>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    ans.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        ans.Sort((a, b) =>\
    \ {\n            if (a.Item1 != b.Item1) {\n                return (int)(a.Item1\
    \ - b.Item1);\n            }\n            return (int)(b.Item2 - a.Item2);\n \
    \       });\n        return ans;", "        return lst.SelectMany((long row, int\
    \ r) => {\n            return row.Select((long col, int c) => {\n            \
    \    return Tuple.Create(r, c);\n            }).Where(Tuple.Create(x));\n    \
    \    }).OrderBy(Tuple.Create((a, b) => a < b)).ThenBy(Tuple.Create((a, b) => b\
    \ > a));", "        // your code goes here\n        return null;", "        //\
    \ e.g. x = 3, lst = {{1,2,3}, {1,2,3}, {1,2,3}}\n        // e.g. x = 1, lst =\
    \ {{1,2,3}, {1,2,3}, {1,2,3}}\n        var res = new List<Tuple<long, long>>();\n\
    \        for (long i = 0; i < lst.Count; i++) {\n            for (long j = 0;\
    \ j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j] == x)\
    \ {\n                    res.Add(Tuple.Create(i, j));\n                }\n   \
    \         }\n        }\n        res.Sort((a, b) => a.Item1.CompareTo(b.Item1));\n\
    \        foreach (var item in res) {\n            Console.WriteLine(item);\n \
    \       }\n        return res;", '        return new List<Tuple<long, long>>();',
  "        // Your code goes here...\n        return new List<Tuple<long, long>>();",
  "        return lst.Select((__arg1, __arg2) => (Tuple.Create(__arg2, __arg1.IndexOf(x))))\n\
    \            .Where((__arg3) => (__arg3.Item2 >= 0L))\n            .OrderBy((__arg4)\
    \ => (__arg4.Item1))\n            .ThenByDescending((__arg5) => (__arg5.Item2))\n\
    \            .ToList();", "        var my_lst = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        my_lst.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        my_lst.Sort((left, right) => {\n            var\
    \ res = left.Item1.CompareTo(right.Item1);\n            if (res == 0) {\n    \
    \            res = right.Item2.CompareTo(left.Item2);\n            }\n       \
    \     return res;\n        });\n        return my_lst;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            var element = lst[i];\n            for (int j\
    \ = 0; j < element.Count; j++) {\n                if (element[j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((Tuple<long, long> a, Tuple<long, long>\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        // Solution from: http://codereview.stackexchange.com/questions/37025/finding-all-occurrences-of-a-number-in-a-list-of-lists\n\
    \        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n   \
    \     long row = 0;\n        foreach (List<long> list in lst) {\n            long\
    \ col = 0;\n            foreach (long y in list) {\n                if (y == x)\
    \ {\n                    result.Add(Tuple.Create(row, col));\n               \
    \ }\n                col++;\n            }\n            row++;\n        }\n  \
    \      return result;", "        var res = new List<Tuple<long, long>>();\n  \
    \      for (long row = 0; row < lst.Count; row++) {\n            for (long col\
    \ = 0; col < lst[(int)row].Count; col++) {\n                if (lst[(int)row][(int)col]\
    \ == x) {\n                    res.Add(Tuple.Create(row, col));\n            \
    \    }\n            }\n        }\n        res.Sort((a, b) => a.Item1 < b.Item1\
    \ ? -1 : a.Item1 > b.Item1 ? 1 : a.Item2 > b.Item2 ? -1 : a.Item2 < b.Item2 ?\
    \ 1 : 0);\n        return res;", "        List<Tuple<long, long>> ret = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x)\n     \
    \               ret.Add(Tuple.Create((long)i, (long)j));\n            }\n    \
    \    }\n        ret.Sort((a, b) => {\n            if (a.Item1 != b.Item1)\n  \
    \              return a.Item1.CompareTo(b.Item1);\n            return b.Item2.CompareTo(a.Item2);\n\
    \        });\n        return ret;", "        var result = new List<Tuple<long,\
    \ long>>();\n        for (var i = 0; i < lst.Count; i++) {\n            for (var\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 <\
    \ b.Item1) {\n                return -1;\n            }\n            if (a.Item1\
    \ > b.Item1) {\n                return 1;\n            }\n            if (a.Item2\
    \ > b.Item2) {\n                return -1;\n            }\n            if (a.Item2\
    \ < b.Item2) {\n                return 1;\n            }\n            return 0;\n\
    \        });\n        return result;", "        var answer = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    answer.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        answer.Sort((a, b) => {\n           \
    \ var compare1 = a.Item1.CompareTo(b.Item1);\n            if (compare1 != 0) {\n\
    \                return compare1;\n            }\n            var compare2 = -a.Item2.CompareTo(b.Item2);\n\
    \            if (compare2 != 0) {\n                return compare2;\n        \
    \    }\n            return 0;\n        });\n        return answer;", "       \
    \ // using System;\n        // using System.Linq;\n        return lst.Select((List<long>\
    \ row, long rowIndex) => new {\n            row,\n            rowIndex\n     \
    \   }).SelectMany((arg) => arg.row.Select((val, colIndex) => new {\n         \
    \   val,\n            colIndex,\n            arg.rowIndex\n        })).Where((arg)\
    \ => arg.val == x).Select((arg) => Tuple.Create(arg.rowIndex, arg.colIndex)).OrderBy((t)\
    \ => t.Item1).ThenByDescending((t) => t.Item2).ToList();", "        // Write your\
    \ code here\n        var tupleList = new List<Tuple<long, long>>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    tupleList.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        tupleList.Sort((x1,\
    \ y1) => {\n            var row = x1.Item1.CompareTo(y1.Item1);\n            if\
    \ (row == 0) {\n                return y1.Item2.CompareTo(x1.Item2);\n       \
    \     }\n            return row;\n        });\n        return tupleList;", " \
    \       List<Tuple<long, long>> ans = new List<Tuple<long, long>>();\n       \
    \ for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    ans.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        ans.Sort((a, b) =>\
    \ a.Item1 == b.Item1 ? b.Item2 - a.Item2 : a.Item1 - b.Item1);\n        return\
    \ ans;", "        List<Tuple<long, long>> t = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n\
    \            for (int j = 0; j < row.Count; j++) {\n                if (row[j]\
    \ == x) {\n                    t.Add(Tuple.Create(i, j));\n                }\n\
    \            }\n        }\n        return t;", "        // Your code goes here.\n\
    \        return new List<Tuple<long, long>>();", "        var res = new List<Tuple<long,\
    \ long>>();\n        foreach (var item in lst) {\n            for (int i = 0;\
    \ i < item.Count; i++) {\n                if (item[i] == x)\n                \
    \    res.Add(Tuple.Create(lst.IndexOf(item), i));\n            }\n        }\n\
    \        return res;", "        var dict = new Dictionary<long, List<Tuple<long,\
    \ long>>>();\n        for (long i = 0; i < lst.Count; i++) {\n            var\
    \ row = lst[(int)i];\n            for (long j = 0; j < row.Count; j++) {\n   \
    \             var r = row[(int)j];\n                if (r == x) {\n          \
    \          if (!dict.ContainsKey(i))\n                        dict[i] = new List<Tuple<long,\
    \ long>>();\n                    dict[i].Add(Tuple.Create(i, j));\n          \
    \      }\n            }\n        }\n        return dict.SelectMany(row => row.Value).OrderBy(tup\
    \ => tup.Item1).ThenByDescending(tup => tup.Item2).ToList();", "        var result\
    \ = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if\
    \ (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i, (long)j));\n\
    \                }\n            }\n        }\n        result.Sort((x, y) => {\n\
    \            if (x.Item1 == y.Item1) {\n                return y.Item2.CompareTo(x.Item2);\n\
    \            }\n            return x.Item1.CompareTo(y.Item1);\n        });\n\
    \        return result;", "        // Your code here\n        var res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            var c\
    \ = lst[i];\n            for (int j = 0; j < c.Count; j++) {\n               \
    \ if (c[j] == x) {\n                    res.Add(Tuple.Create((long)i, (long)j));\n\
    \                }\n            }\n        }\n        res.Sort((a, b) => a.Item1\
    \ < b.Item1 ? -1 : a.Item1 > b.Item1 ? 1 : b.Item2 < a.Item2 ? -1 : b.Item2 >\
    \ a.Item2 ? 1 : 0);\n        return res;", "        var result = new List<Tuple<long,\
    \ long>>();\n        long row = 0;\n        foreach (var rowLst in lst) {\n  \
    \          long col = 0;\n            foreach (var element in rowLst) {\n    \
    \            if (element == x) {\n                    result.Add(Tuple.Create(row,\
    \ col));\n                }\n                col++;\n            }\n         \
    \   row++;\n        }\n        result.Sort((lhs, rhs) => {\n            if (lhs.Item1\
    \ < rhs.Item1) {\n                return -1;\n            } else if (lhs.Item1\
    \ > rhs.Item1) {\n                return 1;\n            } else {\n          \
    \      if (lhs.Item2 > rhs.Item2) {\n                    return -1;\n        \
    \        } else if (lhs.Item2 < rhs.Item2) {\n                    return 1;\n\
    \                } else {\n                    return 0;\n                }\n\
    \            }\n        });\n        return result;", "        // TODO: add your\
    \ code here\n        return null;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        for (long row = 0; row < lst.Count;\
    \ row++) {\n            for (long col = 0; col < lst[(int)row].Count; col++) {\n\
    \                if (lst[(int)row][(int)col] == x) {\n                    result.Add(Tuple.Create(row,\
    \ col));\n                }\n            }\n        }\n        result.Sort((Tuple<long,\
    \ long> t1, Tuple<long, long> t2) => {\n            long t1Row = t1.Item1;\n \
    \           long t2Row = t2.Item1;\n            long t1Col = t1.Item2;\n     \
    \       long t2Col = t2.Item2;\n            if (t1Row < t2Row) {\n           \
    \     return -1;\n            } else if (t1Row > t2Row) {\n                return\
    \ 1;\n            } else {\n                if (t1Col > t2Col) {\n           \
    \         return -1;\n                } else if (t1Col < t2Col) {\n          \
    \          return 1;\n                } else {\n                    return 0;\n\
    \                }\n            }\n        });\n        return result;", "   \
    \     var result = new List<Tuple<long, long>>();\n        for (int row = 0; row\
    \ < lst.Count; row++) {\n            for (int col = 0; col < lst[row].Count; col++)\
    \ {\n                if (lst[row][col] == x) {\n                    result.Add(Tuple.Create((long)row,\
    \ (long)col));\n                }\n            }\n        }\n        result.Sort((Tuple<long,\
    \ long> x1, Tuple<long, long> x2) => {\n            if (x1.Item1 < x2.Item1) {\n\
    \                return -1;\n            } else if (x1.Item1 > x2.Item1) {\n \
    \               return 1;\n            } else {\n                if (x1.Item2\
    \ > x2.Item2) {\n                    return -1;\n                } else if (x1.Item2\
    \ < x2.Item2) {\n                    return 1;\n                } else {\n   \
    \                 return 0;\n                }\n            }\n        });\n \
    \       return result;", "        // Your code goes here\n        return null;",
  '        return GetRowImpl(lst, x);', "        var res = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        res.Add(Tuple.Create(i, j));\n                }\n            }\n    \
    \    }\n        res.Sort((a, b) => {\n            if (a.Item1 == b.Item1) {\n\
    \                return b.Item2.CompareTo(a.Item2);\n            }\n         \
    \   return a.Item1.CompareTo(b.Item1);\n        });\n        return res;", " \
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n    \
    \    for (long i = 0; i < lst.Count; i++) {\n            for (long j = 0; j <\
    \ lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j] == x) {\n\
    \                    result.Add(Tuple.Create(i, j));\n                }\n    \
    \        }\n        }\n        List<Tuple<long, long>> temp = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < result.Count; i++) {\n            temp.Add(result[(int)i]);\n\
    \        }\n        bool flag = true;\n        while (flag) {\n            flag\
    \ = false;\n            for (long i = 0; i < temp.Count - 1; i++) {\n        \
    \        if (temp[(int)i].Item1 > temp[(int)i + 1].Item1) {\n                \
    \    var t = temp[(int)i];\n                    temp[(int)i] = temp[(int)i + 1];\n\
    \                    temp[(int)i + 1] = t;\n                    flag = true;\n\
    \                }\n            }\n        }\n        bool flag2 = true;\n   \
    \     while (flag2) {\n            flag2 = false;\n            for (long i = 0;\
    \ i < temp.Count - 1; i++) {\n                if (temp[(int)i].Item1 == temp[(int)i\
    \ + 1].Item1 && temp[(int)i].Item2 < temp[(int)i + 1].Item2) {\n             \
    \       var t = temp[(int)i];\n                    temp[(int)i] = temp[(int)i\
    \ + 1];\n                    temp[(int)i + 1] = t;\n                    flag2\
    \ = true;\n                }\n            }\n        }\n        return temp;",
  "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        long\
    \ rowNum = 0;\n        foreach (List<long> subList in lst) {\n            long\
    \ columnNum = 0;\n            foreach (long num in subList) {\n              \
    \  if (num == x) {\n                    res.Add(Tuple.Create(rowNum, columnNum));\n\
    \                }\n                columnNum += 1;\n            }\n         \
    \   rowNum += 1;\n        }\n        res.Sort((a, b) => {\n            long diff\
    \ = a.Item1 - b.Item1;\n            if (diff != 0) {\n                return diff\
    \ > 0 ? 1 : -1;\n            }\n            diff = b.Item2 - a.Item2;\n      \
    \      if (diff != 0) {\n                return diff > 0 ? 1 : -1;\n         \
    \   }\n            return 0;\n        });\n        return res;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n  \
    \              if (lst[i][j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", '        return lst.Select((l,i) => Tuple.Create(i,
    l.Select((e,j) => Tuple.Create(j, e)).Where(t => t.Item2 == x).Select(t => t.Item1))).Where(t
    => t.Item2.Any()).SelectMany(t => t.Item2.Select(t2 => Tuple.Create(t.Item1, t2))).OrderBy(t
    => t.Item1).ThenByDescending(t => t.Item2).ToList();', "        var result = new\
    \ List<Tuple<long, long>>();\n        for (var r = 0; r < lst.Count; r++) {\n\
    \            for (var c = 0; c < lst[r].Count; c++) {\n                if (lst[r][c]\
    \ == x) {\n                    result.Add(Tuple.Create(r, c));\n             \
    \   }\n            }\n        }\n        result.Sort((Tuple<long, long> lhs, Tuple<long,\
    \ long> rhs) => {\n            if (lhs.Item1 < rhs.Item1) {\n                return\
    \ -1;\n            } else if (lhs.Item1 > rhs.Item1) {\n                return\
    \ 1;\n            } else {\n                if (lhs.Item2 > rhs.Item2) {\n   \
    \                 return -1;\n                } else if (lhs.Item2 < rhs.Item2)\
    \ {\n                    return 1;\n                } else {\n               \
    \     return 0;\n                }\n            }\n        });\n        return\
    \ result;", "        var ret = new List<Tuple<long, long>>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    ret.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        ret.Sort((a,\
    \ b) => {\n            int x1 = a.Item1.CompareTo(b.Item1);\n            if (x1\
    \ != 0) {\n                return x1;\n            }\n            return -a.Item2.CompareTo(b.Item2);\n\
    \        });\n        return ret;", "        List<Tuple<long, long>> lst_result\
    \ = new List<Tuple<long, long>>();\n        long index_row = 0;\n        foreach\
    \ (List<long> list in lst) {\n            long index_column = 0;\n           \
    \ foreach (long item in list) {\n                if (item == x) {\n          \
    \          lst_result.Add(Tuple.Create(index_row, index_column));\n          \
    \      }\n                index_column++;\n            }\n            index_row++;\n\
    \        }\n        lst_result.Sort((Tuple<long, long> x_item, Tuple<long, long>\
    \ y_item) => {\n            if (x_item.Item1 == y_item.Item1) {\n            \
    \    return y_item.Item2.CompareTo(x_item.Item2);\n            }\n           \
    \ return x_item.Item1.CompareTo(y_item.Item1);\n        });\n        return lst_result;",
  '        return Enumerable.Range(0, lst.Count).SelectMany(idx => Enumerable.Range(0,
    lst[idx].Count).Where(idx2 => lst[idx][idx2] == x).Select(idx2 => Tuple.Create((long)idx,
    (long)idx2))).OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();',
  "        var rowCol = new List<Tuple<long, long>>();\n        for (long i = 0; i\
    \ < lst.Count; i++) {\n            var col = lst[(int)i].FindIndex(a => a == x);\n\
    \            if (col != -1) {\n                rowCol.Add(Tuple.Create(i, col));\n\
    \            }\n        }\n        rowCol.Sort((a, b) => (a.Item1 != b.Item1)\
    \ ? a.Item1.CompareTo(b.Item1) : a.Item2.CompareTo(b.Item2));\n        return\
    \ rowCol;", "        List<Tuple<long, long>> ans = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        ans.Add(Tuple.Create((long)i, (long)j));\n                }\n       \
    \     }\n        }\n        return ans;", "        List<Tuple<long, long>> ans\
    \ = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if\
    \ (lst[i][j] == x) {\n                    ans.Add(Tuple.Create(i, j));\n     \
    \           }\n            }\n        }\n        ans.Sort((x1, y1) => {\n    \
    \        int cmp = x1.Item1.CompareTo(y1.Item1);\n            if (cmp != 0) {\n\
    \                return cmp;\n            }\n            return -x1.Item2.CompareTo(y1.Item2);\n\
    \        });\n        return ans;", '        return null;', "        List<Tuple<long,\
    \ long>> ret = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    ret.Add(Tuple.Create(i, j));\n\
    \                }\n            }\n        }\n        var tmp = ret.OrderBy(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).ToList();\n        return tmp;",
  "        var outList = new List<Tuple<long, long>>();\n        for (var i = 0; i\
    \ < lst.Count; i++) {\n            for (var j = 0; j < lst[i].Count; j++) {\n\
    \                if (lst[i][j] == x) {\n                    outList.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        return outList.OrderBy(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).ToList();", "        var arr = lst\n\
    \            .Select((row, rowIndex) => row\n                .Select((element,\
    \ columnIndex) => Tuple.Create(rowIndex, columnIndex))\n                .Where(coordinate\
    \ => lst[coordinate.Item1][coordinate.Item2] == x)\n            )\n          \
    \  .SelectMany(i => i)\n            .OrderBy(i => i.Item1)\n            .ThenByDescending(i\
    \ => i.Item2)\n            .ToList();\n        return arr;", "        var r =\
    \ new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            var row = lst[i];\n            for (int j = 0; j < row.Count;\
    \ j++) {\n                if (row[j] == x) {\n                    r.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        return r.OrderBy(y\
    \ => y.Item1).ThenByDescending(y => y.Item2).ToList();", "        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    res.Add(Tuple.Create(i, j));\n\
    \                }\n            }\n        }\n        return res.OrderBy(t =>\
    \ t.Item1).ThenByDescending(t => t.Item2).ToList();", "        // replace the\
    \ code below\n        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            int j = 0;\n     \
    \       foreach (var item in lst[i]) {\n                if (item == x) {\n   \
    \                 ret.Add(Tuple.Create(i, j));\n                }\n          \
    \      j++;\n            }\n        }\n        return ret;", "        // Your\
    \ code is here\n        // lst is nested lists of numbers (longs)\n        //\
    \ x is the number you are looking for\n        // Return list of tuples, [(x1,\
    \ y1), (x2, y2) ...]\n        // Initialy sort tuples by rows in ascending order.\n\
    \        // Also, sort tuples of the row by columns in descending order.\n   \
    \     // REMOVE LINES BELOW ONCE YOU HAVE IMPLEMENTED\n        throw new Exception(\"\
    IMPLEMENT ME\");", "        // your code goes here\n        return new List<Tuple<long,\
    \ long>>();", "        if (lst == null) { return null; }\n        if (lst.Count\
    \ == 0) { return new List<Tuple<long, long>>(); }\n        var r = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            var a\
    \ = lst[(int)i];\n            if (a == null) { continue; }\n            for (long\
    \ j = 0; j < a.Count; j++) {\n                if (a[(int)j] == x) {\n        \
    \            r.Add(Tuple.Create(i, j));\n                }\n            }\n  \
    \      }\n        r.Sort((a, b) =>\n        {\n            var k = (a.Item1 <\
    \ b.Item1) ? -1 : (a.Item1 > b.Item1) ? 1 : 0;\n            if (k != 0) { return\
    \ k; }\n            return -(a.Item2.CompareTo(b.Item2));\n        });\n     \
    \   return r;", "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n\
    \        for (long i = 0; i < lst.Count; i++) {\n            var row = lst[(int)i];\n\
    \            for (long j = 0; j < row.Count; j++) {\n                if (row[(int)j]\
    \ == x) {\n                    res.Add(Tuple.Create(i, j));\n                }\n\
    \            }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1\
    \ < b.Item1) {\n                return -1;\n            } else if (a.Item1 > b.Item1)\
    \ {\n                return 1;\n            } else {\n                if (a.Item2\
    \ > b.Item2) {\n                    return -1;\n                } else if (a.Item2\
    \ < b.Item2) {\n                    return 1;\n                } else {\n    \
    \                return 0;\n                }\n            }\n        });\n  \
    \      return res;", "        List<Tuple<long, long>> data = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x)\n     \
    \               data.Add(Tuple.Create(i, j));\n            }\n        }\n    \
    \    data.Sort((x1, y1) => {\n            if (x1.Item1 == y1.Item1) {\n      \
    \          return (int)(y1.Item2 - x1.Item2);\n            }\n            return\
    \ (int)(x1.Item1 - y1.Item1);\n        });\n        return data;", "        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count;\
    \ i++) {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n       \
    \         if (lst[(int)i][(int)j] == x) {\n                    res.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        res.Sort((t1, t2)\
    \ => {\n            if (t1.Item1 != t2.Item1) {\n                return t1.Item1.CompareTo(t2.Item1);\n\
    \            }\n            return t2.Item2.CompareTo(t1.Item2);\n        });\n\
    \        return res;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((Tuple<long, long> t1, Tuple<long,\
    \ long> t2) => {\n            if (t1.Item1 < t2.Item1) return -1;\n          \
    \  if (t1.Item1 > t2.Item1) return 1;\n            if (t1.Item2 > t2.Item2) return\
    \ -1;\n            if (t1.Item2 < t2.Item2) return 1;\n            return 0;\n\
    \        });\n        return result;", "        var output = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            var col\
    \ = lst[i].FindLastIndex(y => y == x);\n            if (col != -1) {\n       \
    \         output.Add(Tuple.Create((long)i, (long)col));\n            }\n     \
    \   }\n        output.Sort((a, b) => a.Item1 == b.Item1 ? a.Item2.CompareTo(b.Item2)\
    \ : a.Item1.CompareTo(b.Item1));\n        return output;", "        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        if (lst.Count == 0) {\n\
    \            return res;\n        }\n        int cnt = 0;\n        for (int i\
    \ = 0; i < lst.Count; i++) {\n            if (lst[i].Count == 0) {\n         \
    \       continue;\n            }\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    res.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        res.Sort((a, b) =>\n\
    \        {\n            if (a.Item1 == b.Item1) {\n                return (int)(b.Item2\
    \ - a.Item2);\n            }\n            return (int)(a.Item1 - b.Item1);\n \
    \       });\n        return res;", "        // Put your code here.\n        return\
    \ new List<Tuple<long, long>>();", "        // write code here\n        return\
    \ null;", "        // Write your code here\n        List<Tuple<long, long>> coords\
    \ = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if\
    \ (lst[i][j] == x) {\n                    coords.Add(Tuple.Create((long)i, (long)j));\n\
    \                }\n            }\n        }\n        coords.Sort((a, b) => {\n\
    \            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return coords;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        int row = 0;\n        foreach (List<long> l in lst) {\n \
    \           int col = 0;\n            foreach (long elem in l) {\n           \
    \     if (elem == x)\n                    res.Add(Tuple.Create((long)row, (long)col));\n\
    \                col++;\n            }\n            row++;\n        }\n      \
    \  List<Tuple<long, long>> res2 = res.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();\n        return res2;", "        List<Tuple<long, long>>\
    \ res = new List<Tuple<long, long>>();\n        long row = 0;\n        long col\
    \ = 0;\n        foreach (List<long> r in lst) {\n            col = 0;\n      \
    \      foreach (long c in r) {\n                if (c == x)\n                \
    \    res.Add(Tuple.Create(row, col));\n                col++;\n            }\n\
    \            row++;\n        }\n        res.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1)\n                return (int)(a.Item1 - b.Item1);\n            return\
    \ (int)(b.Item2 - a.Item2);\n        });\n        return res;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            var row = lst[i];\n            for (int j = 0;\
    \ j < row.Count; j++) {\n                if (row[j] == x) {\n                \
    \    result.Add(Tuple.Create((long)i, (long)j));\n                }\n        \
    \    }\n        }\n        result.Sort((a, b) => {\n            int c = a.Item1.CompareTo(b.Item1);\n\
    \            if (c != 0) {\n                return c;\n            }\n       \
    \     return b.Item2.CompareTo(a.Item2);\n        });\n        return result;",
  "        var result = new List<Tuple<long, long>>();\n        for (var i = 0; i\
    \ < lst.Count; i++) {\n            for (var j = 0; j < lst[i].Count; j++) {\n\
    \                if (lst[i][j] == x)\n                    result.Add(Tuple.Create(i,\
    \ j));\n            }\n        }\n        result.Sort((a, b) => {\n          \
    \  if (a.Item1 == b.Item1)\n                return b.Item2.CompareTo(a.Item2);\n\
    \            return a.Item1.CompareTo(b.Item1);\n        });\n        return result;",
  "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> curr = new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count;\
    \ i++) {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n       \
    \         if (lst[(int)i][(int)j] == x) {\n                    curr.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        if (curr.Count >\
    \ 0) {\n            res = curr.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();\n\
    \        }\n        return res;", "        var list = new List<Tuple<long, long>>();\n\
    \        for (int row = 0; row < lst.Count; row++) {\n            for (int col\
    \ = 0; col < lst[row].Count; col++) {\n                if (lst[row][col] == x)\n\
    \                    list.Add(Tuple.Create(row, col));\n            }\n      \
    \  }\n        list.Sort((a, b) => {\n            if (a.Item1 != b.Item1)\n   \
    \             return a.Item1.CompareTo(b.Item1);\n            return b.Item2.CompareTo(a.Item2);\n\
    \        });\n        return list;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        for (long i = 0; i < lst.Count; i++)\
    \ {\n            for (long j = 0; j < lst[(int)i].Count; j++) {\n            \
    \    if (lst[(int)i][(int)j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((t1,\
    \ t2) => {\n            if (t1.Item1 == t2.Item1) {\n                return t2.Item2.CompareTo(t1.Item2);\n\
    \            }\n            return t1.Item1.CompareTo(t2.Item1);\n        });\n\
    \        return result;", "        var res = new List<Tuple<long, long>>();\n\
    \        for (long i = 0; i < lst.Count; i++) {\n            for (long j = 0;\
    \ j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j] == x)\
    \ {\n                    res.Add(Tuple.Create(i, j));\n                }\n   \
    \         }\n        }\n        return res.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    res.Add(Tuple.Create(i, j));\n                }\n\
    \            }\n        }\n        res.Sort((Tuple<long, long> a, Tuple<long,\
    \ long> b) => ((a.Item1 < b.Item1) ? -1 : (a.Item1 > b.Item1) ? 1 : ((a.Item2\
    \ > b.Item2) ? -1 : (a.Item2 < b.Item2) ? 1 : 0)));\n        return res;", " \
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n    \
    \    for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ => {\n            int cmp1 = a.Item1.CompareTo(b.Item1);\n            if (cmp1\
    \ != 0) {\n                return cmp1;\n            }\n            int cmp2 =\
    \ -a.Item2.CompareTo(b.Item2);\n            if (cmp2 != 0) {\n               \
    \ return cmp2;\n            }\n            return 0;\n        });\n        return\
    \ result;", "        // your code here\n        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if\
    \ (lst[i][j] == x) {\n                    result.Add(Tuple.Create(i, j));\n  \
    \              }\n            }\n        }\n        result.Sort((a, b) => {\n\
    \            var v1 = a.Item1;\n            var v2 = b.Item1;\n            if\
    \ (v1 == v2) {\n                v1 = a.Item2;\n                v2 = b.Item2;\n\
    \                return -v1.CompareTo(v2);\n            }\n            return\
    \ v1.CompareTo(v2);\n        });\n        return result;", '        // Your code
    goes here.', '        return null;']
stop_tokens:
- "\n    }\n"
