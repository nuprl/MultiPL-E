name: HumanEval_155_even_odd_count
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given an integer. return a tuple that has the number of even\
  \ and odd digits respectively.\n    // Example:\n    // >>> EvenOddCount((-12L))\n\
  \    // (Tuple.Create(1L, 1L))\n    // >>> EvenOddCount((123L))\n    // (Tuple.Create(1L,\
  \ 2L))\n    public static Tuple<long, long> EvenOddCount(long num) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenOddCount((7L)).Equals((Tuple.Create(0L,\
  \ 1L))));\n    Debug.Assert(EvenOddCount((-78L)).Equals((Tuple.Create(1L, 1L))));\n\
  \    Debug.Assert(EvenOddCount((3452L)).Equals((Tuple.Create(2L, 2L))));\n    Debug.Assert(EvenOddCount((346211L)).Equals((Tuple.Create(3L,\
  \ 3L))));\n    Debug.Assert(EvenOddCount((-345821L)).Equals((Tuple.Create(3L, 3L))));\n\
  \    Debug.Assert(EvenOddCount((-2L)).Equals((Tuple.Create(1L, 0L))));\n    Debug.Assert(EvenOddCount((-45347L)).Equals((Tuple.Create(2L,\
  \ 3L))));\n    Debug.Assert(EvenOddCount((0L)).Equals((Tuple.Create(1L, 0L))));\n\
  \    }\n\n}\n"
completions: ["        var list = new List<int>();\n        var evens = 0;\n     \
    \   var odds = 0;\n        while (num != 0) {\n            list.Add((int)num %\
    \ 10);\n            num /= 10;\n        }\n        foreach (var n in list) {\n\
    \            if (n % 2 == 0) {\n                evens++;\n            } else {\n\
    \                odds++;\n            }\n        }\n        return Tuple.Create((long)evens,\
    \ (long)odds);", "        var count = (even: 0L, odd: 0L);\n        while (num\
    \ != 0) {\n            var digit = num % 10;\n            count.even += digit\
    \ % 2 == 0 ? 1 : 0;\n            count.odd += digit % 2 == 1 ? 1 : 0;\n      \
    \      num /= 10;\n        }\n        return Tuple.Create(count.even, count.odd);",
  "        // Fill in the code here\n        if (num < 0)\n            num = -num;\n\
    \        int even = 0;\n        int odd = 0;\n        while (num > 0)\n      \
    \  {\n            if (num % 2 == 0)\n                even++;\n            else\n\
    \                odd++;\n            num /= 10;\n        }\n        return Tuple.Create((long)even,\
    \ (long)odd);", "        long even = 0;\n        long odd = 0;\n        foreach\
    \ (char digit in num.ToString()) {\n            if (digit % 2 == 0)\n        \
    \        even++;\n            else\n                odd++;\n        }\n      \
    \  return Tuple.Create(even, odd);", "        long even = 0, odd = 0;\n      \
    \  foreach (char c in num.ToString()) {\n            int digit = c - '0';\n  \
    \          if (digit % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        // Fill in your code here\n        int[] evenCount = new int[2];\n\
    \        int[] oddCount = new int[2];\n        if (num > 0)\n        {\n     \
    \       evenCount[0] = (int)num;\n            oddCount[0] = (int)num;\n      \
    \  }\n        else if (num < 0)\n        {\n            evenCount[1] = (int)num;\n\
    \            oddCount[1] = (int)num;\n        }\n        while (evenCount[0] !=\
    \ 0 || evenCount[1] != 0)\n        {\n            if (evenCount[0] % 2 == 0 ||\
    \ evenCount[1] % 2 == 0)\n            {\n                evenCount[0] = evenCount[0]\
    \ / 10;\n                evenCount[1] = evenCount[1] / 10;\n            }\n  \
    \          else\n            {\n                evenCount[0] = evenCount[0] /\
    \ 10;\n                evenCount[1] = evenCount[1] / 10;\n                break;\n\
    \            }\n        }\n        while (oddCount[0] != 0 || oddCount[1] != 0)\n\
    \        {\n            if (oddCount[0] % 2 != 0 || oddCount[1] % 2 != 0)\n  \
    \          {\n                oddCount[0] = oddCount[0] / 10;\n              \
    \  oddCount[1] = oddCount[1] / 10;\n            }\n            else\n        \
    \    {\n                oddCount[0] = oddCount[0] / 10;\n                oddCount[1]\
    \ = oddCount[1] / 10;\n                break;\n            }\n        }\n    \
    \    Tuple<long, long> tuple = new Tuple<long, long>(evenCount[0] + evenCount[1],\
    \ oddCount[0] + oddCount[1]);\n        return tuple;", "        var numString\
    \ = num.ToString();\n        int evenCount = 0;\n        int oddCount = 0;\n \
    \       foreach (var c in numString) {\n            if (c % 2 == 0) {\n      \
    \          evenCount++;\n            } else {\n                oddCount++;\n \
    \           }\n        }\n        return Tuple.Create((long)evenCount, (long)oddCount);",
  '        throw new NotImplementedException();', "        // your code here\n   \
    \     long a = 0;\n        long b = 0;\n        if (num < 0)\n        {\n    \
    \        num = -num;\n        }\n        while (num != 0)\n        {\n       \
    \     if (num % 2 == 0)\n            {\n                a++;\n            }\n\
    \            else\n            {\n                b++;\n            }\n      \
    \      num /= 10;\n        }\n        Tuple<long, long> count = Tuple.Create(a,\
    \ b);\n        return count;", "        long even = 0;\n        long odd = 0;\n\
    \        num = Math.Abs(num);\n        while (num > 0) {\n            if (num\
    \ % 2 == 0)\n                even++;\n            else\n                odd++;\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long odd_count = 0L;\n        long even_count = 0L;\n        long a = Math.Abs(num);\n\
    \        while (a > 0) {\n            long digit = a % 10;\n            if (digit\
    \ % 2 == 0) {\n                even_count += 1;\n            } else {\n      \
    \          odd_count += 1;\n            }\n            a /= 10;\n        }\n \
    \       return Tuple.Create(even_count, odd_count);", '        return Tuple.Create(1L,
    1L);', "        long evenCount = 0, oddCount = 0;\n        if (num < 0) num =\
    \ -num;\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) evenCount++;\n\
    \            else oddCount++;\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(evenCount, oddCount);", "        return Enumerable.Range(0, (int)Math.Ceiling(Math.Log10(num\
    \ + 1)))\n                         .Aggregate(Tuple.Create(0L, 0L), (acc, next)\
    \ => {\n                             return Tuple.Create(acc.Item1 + (Math.Abs(num\
    \ % 10) % 2 == 0 ? 1 : 0),\n                                                 acc.Item2\
    \ + (Math.Abs(num % 10) % 2 == 1 ? 1 : 0));\n                         });", " \
    \       var stringRep = num.ToString();\n        var evenCount = 0;\n        var\
    \ oddCount = 0;\n        for (var i = 0; i < stringRep.Length; i++) {\n      \
    \      if (stringRep[i] % 2 == 0) {\n                evenCount++;\n          \
    \  } else {\n                oddCount++;\n            }\n        }\n        return\
    \ Tuple.Create(evenCount, oddCount);", "        var s = num.ToString();\n    \
    \    long evenCount = 0;\n        long oddCount = 0;\n        foreach (var c in\
    \ s) {\n            if (Char.IsDigit(c)) {\n                var d = Convert.ToInt32(c.ToString());\n\
    \                if (d % 2 == 0) {\n                    evenCount++;\n       \
    \         } else {\n                    oddCount++;\n                }\n     \
    \       }\n        }\n        return Tuple.Create(evenCount, oddCount);", "  \
    \      long even = 0;\n        long odd = 0;\n        foreach (char item in Math.Abs(num).ToString())\
    \ {\n            if (item % 2 == 0) {\n                even++;\n            }\
    \ else {\n                odd++;\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        // EDIT\n\n        return Tuple.Create(0L, 0L);", "       \
    \ int evens = 0;\n        int odds = 0;\n        var num_str = Math.Abs(num).ToString();\n\
    \        for (int i = 0; i < num_str.Length; i++) {\n            int digit = int.Parse(num_str[i].ToString());\n\
    \            if (digit % 2 == 0) {\n                evens++;\n            } else\
    \ {\n                odds++;\n            }\n        }\n        return Tuple.Create(evens,\
    \ odds);", '        return Tuple.Create(DigitCount(num, 2, 0), DigitCount(num,
    2, 1));', "        var even_count = 0L;\n        var odd_count = 0L;\n       \
    \ var is_negative = num < 0;\n        var n = Math.Abs(num);\n        while (n\
    \ > 0) {\n            var digit = n % 10;\n            if (digit % 2 == 0) {\n\
    \                even_count += 1;\n            } else {\n                odd_count\
    \ += 1;\n            }\n            n /= 10;\n        }\n        return Tuple.Create(even_count,\
    \ odd_count);", "        Tuple<long, long> result = Tuple.Create(0L, 0L);\n  \
    \      num = Math.Abs(num);\n        while (num > 0) {\n            var digit\
    \ = num % 10;\n            if (digit % 2 == 0) {\n                result = Tuple.Create(result.Item1\
    \ + 1, result.Item2);\n            } else {\n                result = Tuple.Create(result.Item1,\
    \ result.Item2 + 1);\n            }\n            num /= 10;\n        }\n     \
    \   return result;", "        var e = 0L;\n        var o = 0L;\n        var n\
    \ = Math.Abs(num);\n        while (n > 0) {\n            if ((n % 10) % 2 == 0)\
    \ {\n                e += 1;\n            } else {\n                o += 1;\n\
    \            }\n            n /= 10;\n        }\n        return Tuple.Create(e,\
    \ o);", "        bool isNegative = num < 0;\n        long even = 0;\n        long\
    \ odd = 0;\n        num = Math.Abs(num);\n        while (num > 0) {\n        \
    \    long x = num % 10;\n            if (x % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(even, odd);", "        var s\
    \ = num.ToString();\n        var even = 0;\n        var odd = 0;\n        for\
    \ (var i = 0; i < s.Length; i++) {\n            if (s[i] % 2 == 0) even++;\n \
    \           else odd++;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        long digit = 0;\n      \
    \  bool neg = false;\n        if (num < 0) {\n            neg = true;\n      \
    \      num = -num;\n        }\n        while (num > 0) {\n            digit =\
    \ num % 10;\n            if (digit % 2 == 0) {\n                even += 1;\n \
    \           } else {\n                odd += 1;\n            }\n            num\
    \ /= 10;\n        }\n        if (neg) {\n            odd += 1;\n        }\n  \
    \      return Tuple.Create(even, odd);", '        return Tuple.Create(0L, 0L);',
  "        long count_even = 0;\n        long count_odd = 0;\n        var abs_num\
    \ = (long)Math.Abs(num);\n        do {\n            var d = abs_num % 10;\n  \
    \          if (d % 2 == 0) {\n                count_even += 1;\n            }\
    \ else {\n                count_odd += 1;\n            }\n            abs_num\
    \ /= 10;\n        } while (abs_num > 0);\n        return Tuple.Create(count_even,\
    \ count_odd);", "        // this is a smarter way to solve the problem\n     \
    \   // just one traversal of the number\n        // we simply stop when number\
    \ is 0\n        // if a number is even, we increase even by 1\n        // if a\
    \ number is odd, we increase odd by 1\n        // we return the values at the\
    \ end\n\n        long e = 0, o = 0;\n        while (num != 0) {\n            if\
    \ ((num % 10) % 2 == 0) {\n                e++;\n            } else {\n      \
    \          o++;\n            }\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(e, o);", "        var ecount = 0L;\n        var ocount = 0L;\n\
    \        var sign = num < 0 ? -1 : 1;\n        while (num != 0) {\n          \
    \  var dig = num % 10;\n            if (dig % 2 == 0) {\n                ecount++;\n\
    \            } else {\n                ocount++;\n            }\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(ecount, ocount);", "        //\
    \ Your code goes here.\n        return null;", "        long Even = 0;\n     \
    \   long Odd = 0;\n        while (num != 0) {\n            long digit = num %\
    \ 10;\n            if (digit % 2 == 0)\n                Even++;\n            else\n\
    \                Odd++;\n            num /= 10;\n        }\n        return Tuple.Create(Even,\
    \ Odd);", "        var even = 0L;\n        var odd = 0L;\n        var abs = Math.Abs(num);\n\
    \        do {\n            var r = abs % 10;\n            if (r % 2 == 0)\n  \
    \              even++;\n            else\n                odd++;\n           \
    \ abs /= 10;\n        } while (abs > 0);\n        return Tuple.Create(even, odd);",
  "        // write your code here\n        long evenCount = 0, oddCount = 0;\n  \
    \      if (num < 0) {\n            num = -num;\n        }\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                evenCount++;\n    \
    \        } else {\n                oddCount++;\n            }\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(evenCount, oddCount);", "   \
    \     var digitCount = 0;\n        var evenCount = 0;\n        var oddCount =\
    \ 0;\n        while (num != 0) {\n            digitCount++;\n            num /=\
    \ 10;\n        }\n        return Tuple.Create(evenCount, oddCount);", "      \
    \  //return Tuple.Create(0L, 0L);\n        var str = Math.Abs(num).ToString();\n\
    \        long even = 0, odd = 0;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            if (int.Parse(str[i].ToString()) % 2 == 0)\n                even++;\n\
    \            else\n                odd++;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        if (num < 0)\
    \ {\n            num = -num;\n        }\n        while (num > 0) {\n         \
    \   if (num % 2 == 0) {\n                even++;\n            } else {\n     \
    \           odd++;\n            }\n            num /= 10;\n        }\n       \
    \ return Tuple.Create(even, odd);", '        return null;', "        var even\
    \ = 0L;\n        var odd = 0L;\n        do {\n            var digit = num % 10;\n\
    \            if (digit % 2 == 0) {\n                even += 1;\n            }\
    \ else {\n                odd += 1;\n            }\n            num /= 10;\n \
    \       } while (num != 0);\n        return Tuple.Create(even, odd);", "     \
    \   long even = 0;\n        long odd = 0;\n        bool lt0 = num < 0;\n     \
    \   if (lt0) {\n            num = -num;\n        }\n        if (num == 0) {\n\
    \            return Tuple.Create(1L, 0L);\n        }\n        while (num > 0)\
    \ {\n            int n = (int)(num % 10);\n            if (n % 2 == 0) {\n   \
    \             even++;\n            } else {\n                odd++;\n        \
    \    }\n            num /= 10;\n        }\n        if (lt0) {\n            return\
    \ Tuple.Create(odd, even);\n        } else {\n            return Tuple.Create(even,\
    \ odd);\n        }", "        long neg = num < 0 ? 1 : 0;\n        long even =\
    \ 0;\n        long odd = 0;\n        foreach (var d in Math.Abs(num).ToString())\
    \ {\n            if (d % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n        return Tuple.Create(even\
    \ - neg, odd);", "        int even = 0;\n        int odd = 0;\n        foreach\
    \ (char c in num.ToString()) {\n            if (c % 2 == 0) {\n              \
    \  even++;\n            } else {\n                odd++;\n            }\n    \
    \    }\n        return Tuple.Create(even, odd);", "        long even = 0;\n  \
    \      long odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0)\n\
    \                even++;\n            else\n                odd++;\n         \
    \   num /= 10;\n        }\n        return Tuple.Create(even, odd);", "       \
    \ // Write your code here\n        string numstr = num.ToString();\n        long\
    \ oddcount = 0;\n        long evencount = 0;\n        for (int i = 0; i < numstr.Length;\
    \ i++) {\n            if (int.Parse(numstr[i].ToString()) % 2 == 0) {\n      \
    \          evencount++;\n            } else {\n                oddcount++;\n \
    \           }\n        }\n        return Tuple.Create(evencount, oddcount);",
  "        long evens = 0, odds = 0;\n        bool negate = false;\n        if (num\
    \ < 0) {\n            negate = true;\n            num = -num;\n        }\n   \
    \     while (num > 0) {\n            if ((num % 10) % 2 == 0)\n              \
    \  evens++;\n            else\n                odds++;\n            num /= 10;\n\
    \        }\n        if (negate)\n            evens++;\n        return Tuple.Create(evens,\
    \ odds);", "        if (num == 0) return Tuple.Create(1L, 0L);\n        long evens\
    \ = 0;\n        long odds = 0;\n        foreach (var d in Math.Abs(num).ToString())\
    \ {\n            if (int.Parse(d.ToString()) % 2 == 0) evens++;\n            else\
    \ odds++;\n        }\n        return Tuple.Create(evens, odds);", '        return
    new Tuple<long, long>(0, 0);', "        num = Math.Abs(num);\n        long even\
    \ = 0;\n        long odd = 0;\n        while (num > 0) {\n            if ((num\
    \ % 10) % 2 == 0) {\n                even += 1;\n            } else {\n      \
    \          odd += 1;\n            }\n            num /= 10;\n        }\n     \
    \   return Tuple.Create(even, odd);", "        long even_count = 0;\n        long\
    \ odd_count = 0;\n        while (num != 0) {\n            long digit = num % 10;\n\
    \            if (digit % 2 == 0) {\n                even_count++;\n          \
    \  } else {\n                odd_count++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even_count, odd_count);", "        int\
    \ even = 0;\n        int odd = 0;\n        while (num != 0) {\n            long\
    \ x = num % 10;\n            if (x % 2 == 0) {\n                even++;\n    \
    \        } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long evenCount\
    \ = 0;\n        long oddCount = 0;\n        while (num != 0) {\n            int\
    \ lastDigit = (int)(num % 10);\n            if (lastDigit % 2 == 0) {\n      \
    \          evenCount++;\n            } else {\n                oddCount++;\n \
    \           }\n            num /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long evenCount = 0;\n        long oddCount = 0;\n    \
    \    while (num != 0) {\n            long x = num % 10;\n            if (x % 2\
    \ == 0) {\n                evenCount++;\n            } else {\n              \
    \  oddCount++;\n            }\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(evenCount, oddCount);", "        string numstr = num.ToString();\n\
    \        long even = 0, odd = 0;\n        for (int i = 0; i < numstr.Length; i++)\
    \ {\n            if (numstr[i] % 2 == 0) even++;\n            else odd++;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        var even = 0L;\n\
    \        var odd = 0L;\n        foreach (var x in num.ToString()) {\n        \
    \    if (x == '-') continue;\n            if (x % 2 == 0) even++;\n          \
    \  else odd++;\n        }\n        return Tuple.Create(even, odd);", "       \
    \ long evenCount = 0;\n        long oddCount = 0;\n        while (num != 0) {\n\
    \            long digit = num % 10;\n            if (digit % 2 == 0) {\n     \
    \           evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        // Write your code here\n        return null;", "    \
    \    var evenCount = 0L;\n        var oddCount = 0L;\n        var isEven = false;\n\
    \        var isOdd = false;\n        var n = Math.Abs(num);\n        while (n\
    \ > 0) {\n            if (n % 2 == 0) {\n                evenCount += 1;\n   \
    \             isEven = true;\n            } else {\n                oddCount +=\
    \ 1;\n                isOdd = true;\n            }\n            n /= 10;\n   \
    \     }\n        return Tuple.Create(evenCount, oddCount);", "        Tuple<long,\
    \ long> r = new Tuple<long, long>(0, 0);\n        for (; num != 0; num /= 10)\
    \ {\n            if ((num % 10) % 2 == 0) {\n                r = new Tuple<long,\
    \ long>(r.Item1 + 1, r.Item2);\n            } else {\n                r = new\
    \ Tuple<long, long>(r.Item1, r.Item2 + 1);\n            }\n        }\n       \
    \ return r;", '        throw new NotImplementedException();', "        long oddCount\
    \ = 0;\n        long evenCount = 0;\n        while (num != 0) {\n            if\
    \ (num % 2 == 0)\n                evenCount++;\n            else\n           \
    \     oddCount++;\n            num /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        if (num == 0) {\n            return Tuple.Create(1L, 0L);\n\
    \        }\n        long even = 0;\n        long odd = 0;\n        if (num < 0)\
    \ {\n            num = -num;\n        }\n        while (num > 0) {\n         \
    \   if ((num % 10) % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        var even = 0L;\n        var\
    \ odd = 0L;\n        var str = num.ToString();\n        foreach (var c in str)\
    \ {\n            var n = c - '0';\n            if (n % 2 == 0)\n             \
    \   even++;\n            else\n                odd++;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        if (num < 0)\n            num = -num;\n\
    \        var even = 0L;\n        var odd = 0L;\n        while (num > 0) {\n  \
    \          var d = num % 10;\n            if (d % 2 == 0)\n                even++;\n\
    \            else\n                odd++;\n            num /= 10;\n        }\n\
    \        return Tuple.Create(even, odd);", "        var s = num.ToString();\n\
    \        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (s[i] % 2 == 0)\n                even++;\n          \
    \  else\n                odd++;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        var count = new Tuple<long, long>(0, 0);\n        foreach (var\
    \ digit in num.ToString()) {\n            if (digit % 2 == 0)\n              \
    \  count = new Tuple<long, long>(count.Item1 + 1, count.Item2);\n            else\n\
    \                count = new Tuple<long, long>(count.Item1, count.Item2 + 1);\n\
    \        }\n        return count;", "        long countodd = 0;\n        long\
    \ counteven = 0;\n        string s = num.ToString();\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            if (i % 2 == 0)\n                counteven++;\n\
    \            else\n                countodd++;\n        }\n        return Tuple.Create(counteven,\
    \ countodd);", "        int evencount = 0;\n        int oddcount = 0;\n      \
    \  while (num > 0) {\n            int digit = (int)(num % 10);\n            if\
    \ (digit % 2 == 0) {\n                evencount++;\n            } else {\n   \
    \             oddcount++;\n            }\n            num /= 10;\n        }\n\
    \        return Tuple.Create(evencount, oddcount);", "        long even = 0;\n\
    \        long odd = 0;\n        foreach (char c in num.ToString()) {\n       \
    \     if (int.Parse(c.ToString()) % 2 == 0) {\n                even++;\n     \
    \       } else {\n                odd++;\n            }\n        }\n        return\
    \ Tuple.Create(even, odd);", "        var evencount = 0L;\n        var oddcount\
    \ = 0L;\n        if (num < 0) {\n            num = -num;\n        }\n        while\
    \ (num > 0) {\n            var digit = num % 10;\n            if (digit % 2 ==\
    \ 0) {\n                evencount += 1;\n            } else {\n              \
    \  oddcount += 1;\n            }\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(evencount, oddcount);", "        var n = Math.Abs(num);\n     \
    \   var even = 0L;\n        var odd = 0L;\n        while (n > 0) {\n         \
    \   var d = n % 10;\n            if (d % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            n /=\
    \ 10;\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0, odd = 0;\n        while (num != 0) {\n            if ((num % 10) % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        int odd_count = 0;\n        int even_count = 0;\n        for\
    \ (int i = 0; i < num.ToString().Length; i++) {\n            if (int.Parse(num.ToString()[i].ToString())\
    \ % 2 == 0) {\n                even_count++;\n            } else {\n         \
    \       odd_count++;\n            }\n        }\n        return Tuple.Create(even_count,\
    \ odd_count);", "        long evenCount = 0, oddCount = 0;\n        while (num\
    \ != 0) {\n            var digit = num % 10;\n            if (digit % 2 == 0)\
    \ {\n                evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long even = 0;\n        long odd = 0;\n        var neg\
    \ = num < 0;\n        var numBytes = BitConverter.GetBytes(num);\n        var\
    \ start = neg ? 1 : 0;\n        for (int i = start; i < numBytes.Length; i++)\
    \ {\n            var byteVal = numBytes[i];\n            if (byteVal % 2 == 0)\
    \ {\n                even++;\n            } else {\n                odd++;\n \
    \           }\n        }\n        return Tuple.Create(even, odd);", "        //\
    \ Empty variable\n        int even = 0;\n        int odd = 0;\n        // Placeholder\
    \ variable for the iterated number.\n        long num2 = 0;\n        // Iterate\
    \ until num == 0\n        for (; num != 0;) {\n            // Append the last\
    \ digit of num.\n            num2 = num % 10;\n            // If it's divisible\
    \ by 2 then it's even.\n            if (num2 % 2 == 0) {\n                even++;\n\
    \            }\n            // Else it's odd.\n            else {\n          \
    \      odd++;\n            }\n            // Divide num by 10.\n            num\
    \ /= 10;\n        }\n        // return the answer\n        return Tuple.Create(even,\
    \ odd);", "        // >>> Write your code here <<<\n        return Tuple.Create(0L,\
    \ 0L);", "        long evenCount = 0, oddCount = 0;\n        foreach (char c in\
    \ num.ToString()) {\n            if (Int32.Parse(c.ToString()) % 2 == 0) {\n \
    \               evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n        }\n        return Tuple.Create(evenCount, oddCount);",
  "        long evenCount = 0, oddCount = 0;\n        if (num == 0) {\n          \
    \  return Tuple.Create(evenCount, oddCount);\n        }\n        if (num < 0)\
    \ {\n            num = Math.Abs(num);\n        }\n        do {\n            if\
    \ (num % 2 == 0) {\n                evenCount++;\n            } else {\n     \
    \           oddCount++;\n            }\n            num /= 10;\n        } while\
    \ (num != 0);\n        return Tuple.Create(evenCount, oddCount);", "        var\
    \ s = num < 0 ? -num : num;\n        long odds = 0;\n        long evens = 0;\n\
    \        while (s > 0) {\n            var d = s % 10;\n            if (d % 2 ==\
    \ 0) {\n                evens++;\n            } else {\n                odds++;\n\
    \            }\n            s /= 10;\n        }\n        return Tuple.Create(evens,\
    \ odds);", "        // your code goes here\n        return Tuple.Create(1L, 1L);",
  "        // convert -123L to \"123\"\n        var s = num.ToString();\n        if\
    \ (s[0] == '-') {\n            s = s.Substring(1);\n        }\n        var evenCount\
    \ = 0L;\n        var oddCount = 0L;\n        foreach (var c in s) {\n        \
    \    if (c % 2 == 0) {\n                evenCount++;\n            } else {\n \
    \               oddCount++;\n            }\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long neg = 1;\n        if (num < 0) {\n            neg\
    \ = -1;\n            num = -num;\n        }\n        long even = 0;\n        long\
    \ odd = 0;\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                even += 1;\n            } else {\n                odd += 1;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even\
    \ * neg, odd * neg);", "        string s = num.ToString();\n        int even =\
    \ 0;\n        int odd = 0;\n        for (int i = 0; i < s.Length; i++) {\n   \
    \         int digit = s[i] - '0';\n            if (digit % 2 == 0) {\n       \
    \         even++;\n            } else {\n                odd++;\n            }\n\
    \        }\n        return Tuple.Create((long)even, (long)odd);", "        long\
    \ even, odd;\n        even = odd = 0;\n        while (num != 0) {\n          \
    \  int digit = (int)(num % 10);\n            if (digit % 2 == 0) {\n         \
    \       even++;\n            } else {\n                odd++;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        // Your code goes here\n        var x = 0;\n        var y = 0;\n      \
    \  if (num == 0) {\n            x++;\n        }\n        if (num < 0) {\n    \
    \        num = num * -1;\n        }\n        while (num > 0) {\n            var\
    \ mod = num % 10;\n            if (mod % 2 == 0) {\n                x++;\n   \
    \         } else {\n                y++;\n            }\n            num = num\
    \ / 10;\n        }\n        return Tuple.Create(x, y);", "        long even =\
    \ 0;\n        long odd = 0;\n        bool isNegative = false;\n        if (num\
    \ < 0) {\n            isNegative = true;\n            num = Math.Abs(num);\n \
    \       }\n        while (num > 0) {\n            int digit = (int)(num % 10);\n\
    \            if (digit % 2 == 0)\n                even++;\n            else\n\
    \                odd++;\n            num /= 10;\n        }\n        if (isNegative)\n\
    \            odd++;\n        return Tuple.Create(even, odd);", "        int nume\
    \ = 0;\n        int numo = 0;\n        int numz = 0;\n        if (num == 0) {\n\
    \            numz = 1;\n        }\n        num = Math.Abs(num);\n        while\
    \ (num > 0) {\n            if (num % 2 == 0) {\n                nume++;\n    \
    \        } else {\n                numo++;\n            }\n            num /=\
    \ 10;\n        }\n        return Tuple.Create(nume + numz, numo);", "        var\
    \ num_str = num.ToString();\n        var even_count = 0;\n        var odd_count\
    \ = 0;\n        for (var i = 0; i < num_str.Length; i++) {\n            if (num_str[i]\
    \ % 2 == 0) {\n                even_count++;\n            } else {\n         \
    \       odd_count++;\n            }\n        }\n        return Tuple.Create(even_count,\
    \ odd_count);", "        // your code here\n        int even = 0;\n        int\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0)\n      \
    \          even++;\n            else\n                odd++;\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(even, odd);", "        long evens\
    \ = 0;\n        long odds = 0;\n        if (num == 0) {\n            evens++;\n\
    \        }\n        else {\n            num = Math.Abs(num);\n            while\
    \ (num > 0) {\n                if (num % 2 == 0) {\n                    evens++;\n\
    \                }\n                else {\n                    odds++;\n    \
    \            }\n                num /= 10;\n            }\n        }\n       \
    \ return Tuple.Create(evens, odds);", "        long even = 0;\n        long odd\
    \ = 0;\n        while (num != 0) {\n            long digit = num % 10;\n     \
    \       if (digit % 2 == 0) {\n                even += 1;\n            } else\
    \ {\n                odd += 1;\n            }\n            num /= 10;\n      \
    \  }\n        return Tuple.Create(even, odd);", "        var evenCount = 0L;\n\
    \        var oddCount = 0L;\n        if (num == 0) {\n            evenCount++;\n\
    \        }\n        else {\n            var neg = false;\n            if (num\
    \ < 0) {\n                neg = true;\n                num = -num;\n         \
    \   }\n            while (num > 0) {\n                var digit = num % 10;\n\
    \                if (digit % 2 == 0) {\n                    evenCount++;\n   \
    \             }\n                else {\n                    oddCount++;\n   \
    \             }\n                num /= 10;\n            }\n            if (neg)\
    \ {\n                if (evenCount > 0) {\n                    evenCount--;\n\
    \                }\n                else {\n                    oddCount--;\n\
    \                }\n            }\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long evenCount = 0;\n        long oddCount = 0;\n    \
    \    long numAbs = Math.Abs(num);\n        long remainder = 0;\n        while\
    \ (numAbs > 0) {\n            remainder = numAbs % 10;\n            if (remainder\
    \ % 2 == 0) {\n                evenCount++;\n            } else {\n          \
    \      oddCount++;\n            }\n            numAbs /= 10;\n        }\n    \
    \    return Tuple.Create(evenCount, oddCount);", "        // 1. Copy num into\
    \ another variable and make it positive.\n        long localNum = Math.Abs(num);\n\
    \        long evenCount = 0, oddCount = 0;\n        while (localNum > 0) {\n \
    \           // 2. Check if the last digit is even.\n            long lastDigit\
    \ = localNum % 10;\n            if (lastDigit % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n          \
    \  // 3. Remove the last digit\n            localNum /= 10;\n        }\n     \
    \   return Tuple.Create(evenCount, oddCount);", "        long even = 0;\n    \
    \    long odd = 0;\n        num = Math.Abs(num);\n        while (num > 0) {\n\
    \            if (num % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n            num /= 10;\n        }\n\
    \        return Tuple.Create(even, odd);", "        long even_count = 0;\n   \
    \     long odd_count = 0;\n        while (num != 0) {\n            long digit\
    \ = num % 10;\n            if (digit % 2 == 0)\n                even_count++;\n\
    \            else\n                odd_count++;\n            num /= 10;\n    \
    \    }\n        return Tuple.Create(even_count, odd_count);", "        // Implement\
    \ me!\n        long even = 0, odd = 0;\n        if (num < 0) num *= -1;\n    \
    \    for (; num > 0; num /= 10) {\n            if ((num % 10) % 2 == 0) even++;\n\
    \            else odd++;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        int even = 0;\n        int odd\
    \ = 0;\n        string digits = num.ToString();\n        for (int i = 0; i < digits.Length;\
    \ i++) {\n            if (digits[i] == '0' || digits[i] == '2' || digits[i] ==\
    \ '4' || digits[i] == '6' || digits[i] == '8')\n                even++;\n    \
    \        else\n                odd++;\n        }\n        return Tuple.Create((long)even,\
    \ (long)odd);", "        long evenCount = 0;\n        long oddCount = 0;\n   \
    \     if (num < 0) {\n            num = -num;\n        }\n        while (num >\
    \ 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                evenCount += 1;\n            } else {\n                oddCount\
    \ += 1;\n            }\n            num /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", '        return new Tuple<long, long>(0, 0);', "        // TODO:\
    \ Write your code here.\n        long even = 0;\n        long odd = 0;\n     \
    \   bool neg = false;\n        if (num < 0) {\n            neg = true;\n     \
    \       num = -num;\n        }\n        while (num > 0) {\n            int dig\
    \ = (int)(num % 10);\n            if (dig % 2 == 0)\n                even++;\n\
    \            else\n                odd++;\n            num /= 10;\n        }\n\
    \        if (neg)\n            odd++;\n        return Tuple.Create(even, odd);",
  "        // Implement here\n        return null;", "        var evenCount = 0L;\n\
    \        var oddCount = 0L;\n        while (num != 0) {\n            if ((num\
    \ % 10) % 2 == 0)\n                evenCount++;\n            else\n          \
    \      oddCount++;\n            num /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        Tuple<long, long> oddEven = new Tuple<long, long>(0, 0);\n\
    \        String numStr = num.ToString();\n        if (num < 0) {\n           \
    \ numStr = numStr.Substring(1);\n        }\n        for (int i = 0; i < numStr.Length;\
    \ i++) {\n            if (int.Parse(numStr[i].ToString()) % 2 == 0) {\n      \
    \          oddEven = new Tuple<long, long>(oddEven.Item1 + 1, oddEven.Item2);\n\
    \            } else {\n                oddEven = new Tuple<long, long>(oddEven.Item1,\
    \ oddEven.Item2 + 1);\n            }\n        }\n        return oddEven;", " \
    \       num = Math.Abs(num);\n        if (num < 10) {\n            return Tuple.Create((num\
    \ % 2 == 0) ? 1L : 0L, (num % 2 == 0) ? 0L : 1L);\n        } else {\n        \
    \    var result = EvenOddCount(num / 10);\n            if (num % 2 == 0) {\n \
    \               return Tuple.Create(result.Item1 + 1, result.Item2);\n       \
    \     } else {\n                return Tuple.Create(result.Item1, result.Item2\
    \ + 1);\n            }\n        }", "        string s = num.ToString();\n    \
    \    int o=0, e=0;\n        for (int i = 0; i < s.Length; i++) {\n           \
    \ if (s[i] == '-') continue;\n            if (s[i] % 2 == 0) e++;\n          \
    \  else o++;\n        }\n        return Tuple.Create(e, o);", "        long e\
    \ = 0;\n        long o = 0;\n        while (num != 0) {\n            long n =\
    \ num % 10;\n            if (n % 2 == 0) {\n                e += 1;\n        \
    \    } else {\n                o += 1;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(e, o);", "        // num = -12\n     \
    \   // num = |-12| = 12\n        // num = 12\n\n        int odd = 0;\n       \
    \ int even = 0;\n\n        while (num > 0) {\n            int lastDigit = (int)(num\
    \ % 10);\n            if (lastDigit % 2 == 0) {\n                even += 1;\n\
    \            } else {\n                odd += 1;\n            }\n            num\
    \ /= 10;\n        }\n\n        return Tuple.Create((long)even, (long)odd);", " \
    \       var evenCount = 0L;\n        var oddCount = 0L;\n        var numDigits\
    \ = (int)Math.Floor(Math.Log10(Math.Abs(num)) + 1);\n        for (var i = 0; i\
    \ < numDigits; i++) {\n            var digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                evenCount++;\n            } else {\n          \
    \      oddCount++;\n            }\n            num /= 10;\n        }\n       \
    \ return Tuple.Create(evenCount, oddCount);", "        long even = 0;\n      \
    \  long odd = 0;\n        string s = num.ToString();\n        foreach (char c\
    \ in s) {\n            int n = (int)char.GetNumericValue(c);\n            if (n\
    \ % 2 == 0) {\n                even++;\n            } else {\n               \
    \ odd++;\n            }\n        }\n        return Tuple.Create(even, odd);",
  "        // put your code here\n        return null;", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long n = num %\
    \ 10;\n            if (n % 2 == 0) {\n                even += 1;\n           \
    \ } else {\n                odd += 1;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        var digits = CountDigits(num);\n\
    \        var even = 0L;\n        var odd = 0L;\n        for (int i = 0; i < digits.Length;\
    \ i++) {\n            if (digits[i] % 2 == 0) {\n                even += 1;\n\
    \            } else {\n                odd += 1;\n            }\n        }\n \
    \       return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        string number = Convert.ToString(num);\n        foreach (char\
    \ c in number) {\n            int i = c - '0';\n            if (i % 2 == 0) {\n\
    \                even++;\n            } else {\n                odd++;\n     \
    \       }\n        }\n        return Tuple.Create(even, odd);", "        // Initalize\
    \ variables.\n        long even_count = 0;\n        long odd_count = 0;\n    \
    \    // If positive, use the positive version of number.\n        if (num > 0)\
    \ {\n            while (num > 0) {\n                if (num % 2 == 0) {\n    \
    \                even_count++;\n                } else {\n                   \
    \ odd_count++;\n                }\n                num /= 10;\n            }\n\
    \        } else {\n            // Otherwise use the negative version of number.\n\
    \            num = Math.Abs(num);\n            while (num > 0) {\n           \
    \     if (num % 2 == 0) {\n                    even_count++;\n               \
    \ } else {\n                    odd_count++;\n                }\n            \
    \    num /= 10;\n            }\n        }\n        // Return the number of even\
    \ and odd digits respectively.\n        return Tuple.Create(even_count, odd_count);",
  "        long evens = 0;\n        long odds = 0;\n        foreach (var digit in\
    \ num.ToString()) {\n            if (digit == '-') {\n                continue;\n\
    \            }\n            if (digit % 2 == 0) {\n                evens++;\n\
    \            } else {\n                odds++;\n            }\n        }\n   \
    \     return Tuple.Create(evens, odds);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            int x = (int)(num % 10);\n\
    \            if (x % 2 == 0) {\n                even += 1;\n            } else\
    \ {\n                odd += 1;\n            }\n            num /= 10;\n      \
    \  }\n        return Tuple.Create(even, odd);", "        long oddCount = 0;\n\
    \        long evenCount = 0;\n        var s = Math.Abs(num).ToString();\n    \
    \    for (var i = 0; i < s.Length; i++) {\n            var digit = s[i];\n   \
    \         if (char.IsDigit(digit)) {\n                var n = int.Parse(digit.ToString());\n\
    \                if (n % 2 == 0) {\n                    evenCount += 1;\n    \
    \            } else {\n                    oddCount += 1;\n                }\n\
    \            }\n        }\n        return Tuple.Create(evenCount, oddCount);",
  "        // Your code goes here.\n        // Hint: Use %2 to check if a number is\
    \ even or odd.\n        // Hint: If you are stuck, you can use the provided unit\
    \ tests to guide you.\n        // Hint: Feel free to use helper functions to keep\
    \ your code clean.\n        long even_count = 0;\n        long odd_count = 0;\n\
    \        while (num != 0) {\n            if (num % 2 == 0) {\n               \
    \ even_count++;\n            } else {\n                odd_count++;\n        \
    \    }\n            num /= 10;\n        }\n        return Tuple.Create(even_count,\
    \ odd_count);", "        var ch = num.ToString().ToCharArray();\n        long\
    \ odd = 0;\n        long even = 0;\n        for (int i = 0; i < ch.Length; i++)\
    \ {\n            if (ch[i] % 2 == 0) {\n                even++;\n            }\
    \ else {\n                odd++;\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long evenCount = 0;\n        long oddCount = 0;\n        long\
    \ number = Math.Abs(num);\n        while (number != 0) {\n            long lastDigit\
    \ = number % 10;\n            if (lastDigit % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n          \
    \  number /= 10;\n        }\n        return Tuple.Create(evenCount, oddCount);",
  "        var countEven = 0L;\n        var countOdd = 0L;\n        var n = Math.Abs(num);\n\
    \        while (n > 0) {\n            var lastDigit = n % 10;\n            if\
    \ (lastDigit % 2 == 0) {\n                countEven++;\n            } else {\n\
    \                countOdd++;\n            }\n            n /= 10;\n        }\n\
    \        return Tuple.Create(countEven, countOdd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long t = num %\
    \ 10;\n            if (t % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n            num /= 10;\n        }\n\
    \        return Tuple.Create(even, odd);", "        var res = new Tuple<long,\
    \ long>(0, 0);\n        foreach (var _ in Enumerable.Range(0, (int)num.Magnitude()))\
    \ {\n            if (num.is_even()) {\n                res = new Tuple<long, long>(res.Item1\
    \ + 1, res.Item2);\n            } else {\n                res = new Tuple<long,\
    \ long>(res.Item1, res.Item2 + 1);\n            }\n            num /= 10;\n  \
    \      }\n        return res;", "        var evenCount = 0L;\n        var oddCount\
    \ = 0L;\n        var absNum = Math.Abs(num);\n        while (absNum > 0) {\n \
    \           var digit = absNum % 10;\n            if (digit % 2 == 0) {\n    \
    \            evenCount += 1;\n            } else {\n                oddCount +=\
    \ 1;\n            }\n            absNum /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long even = 0, odd = 0;\n        while (num != 0) {\n\
    \            long n = num % 10;\n            if (n % 2 == 0)\n               \
    \ even++;\n            else\n                odd++;\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", '        return null;',
  "        long even = 0;\n        long odd = 0;\n        if (num < 0) num = -num;\n\
    \        while (num > 0) {\n            if ((num % 10) % 2 == 0) even++;\n   \
    \         else odd++;\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", '        throw new NotImplementedException();', "        long even =\
    \ 0;\n        long odd = 0;\n        while (num != 0) {\n            int digit\
    \ = (int)(num % 10);\n            if (digit % 2 == 0)\n                even++;\n\
    \            else\n                odd++;\n            num /= 10;\n        }\n\
    \        return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            var num2 = num % 10;\n   \
    \         if (num2 % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0, odd = 0;\n  \
    \      if (num < 0) num = -num;\n        while (num > 0) {\n            if ((num\
    \ % 10) % 2 == 0)\n                even++;\n            else\n               \
    \ odd++;\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        // fast, but uses a lot of memory.\n        // return Tuple.Create(Convert.ToString(num).Count(c\
    \ => (c - '0') % 2 == 0), Convert.ToString(num).Count(c => (c - '0') % 2 == 1));\n\
    \        if (num == 0) return Tuple.Create(1L, 0L);\n        long even = 0, odd\
    \ = 0;\n        if (num < 0) num = -num;\n        while (num > 0) {\n        \
    \    if ((num % 10) % 2 == 0) even++;\n            else odd++;\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(even, odd);", "        long evenCount\
    \ = 0, oddCount = 0;\n        if (num < 0) num = -num;\n        while (num > 0)\
    \ {\n            long digit = num % 10;\n            if (digit % 2 == 0) evenCount++;\n\
    \            else oddCount++;\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(evenCount, oddCount);", "        long odd = 0;\n        long even\
    \ = 0;\n        foreach (char c in num.ToString()) {\n            int digit =\
    \ int.Parse(c.ToString());\n            if (digit % 2 == 0) {\n              \
    \  even++;\n            } else {\n                odd++;\n            }\n    \
    \    }\n        return Tuple.Create(even, odd);", "        var evenCount = 0L;\n\
    \        var oddCount = 0L;\n        var originalNum = num;\n        if (num <\
    \ 0) {\n            num = -num;\n        }\n        do {\n            var digit\
    \ = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n          \
    \  num /= 10;\n        } while (num > 0);\n        if (originalNum < 0) {\n  \
    \          oddCount++;\n        }\n        return Tuple.Create(evenCount, oddCount);",
  "        var even = 0L;\n        var odd = 0L;\n        var n = Math.Abs(num);\n\
    \        while (n > 0) {\n            var d = n % 10;\n            if (d % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            n /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long evens = 0;\n        long odds = 0;\n        if (num ==\
    \ 0)\n            evens++;\n        if (num < 0)\n            num = -num;\n  \
    \      while (num > 0) {\n            if ((num % 10) % 2 == 0)\n             \
    \   evens++;\n            else\n                odds++;\n            num /= 10;\n\
    \        }\n        return Tuple.Create(evens, odds);", "        var even = 0L;\n\
    \        var odd = 0L;\n        while (num != 0) {\n            if ((num % 10)\
    \ % 2 == 0) {\n                even++;\n            } else {\n               \
    \ odd++;\n            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even_count = 0;\n        long odd_count = 0;\n       \
    \ // Find the number of even and odd digits in num. \n        // This is left\
    \ to the student.\n        return Tuple.Create(even_count, odd_count);", "   \
    \     long even = 0;\n        long odd = 0;\n        if (num < 0) num = -num;\n\
    \        for (int i = 0; i < 64; i++) {\n            if ((num & (1L << i)) !=\
    \ 0) {\n                if ((i & 1) == 0) even++;\n                else odd++;\n\
    \            }\n        }\n        return Tuple.Create(even, odd);", "       \
    \ int even = 0;\n        int odd = 0;\n        string numStr = num.ToString();\n\
    \        if (num < 0) {\n            numStr = numStr.Substring(1);\n        }\n\
    \        foreach (char digit in numStr) {\n            if (digit % 2 == 0) {\n\
    \                even++;\n            } else {\n                odd++;\n     \
    \       }\n        }\n        return Tuple.Create((long)even, (long)odd);", " \
    \       var e = 0L;\n        var o = 0L;\n        while (num != 0) {\n       \
    \     var d = num % 10;\n            if (d % 2 == 0) {\n                e++;\n\
    \            } else {\n                o++;\n            }\n            num /=\
    \ 10;\n        }\n        return Tuple.Create(e, o);", "        var odds = 0L;\n\
    \        var evens = 0L;\n        while (num != 0) {\n            if (num % 2\
    \ == 0)\n                evens++;\n            else\n                odds++;\n\
    \            num /= 10;\n        }\n        return Tuple.Create(evens, odds);",
  "        if (num < 0) {\n            num = -num;\n        }\n        var even =\
    \ 0L;\n        var odd = 0L;\n        while (num > 0) {\n            var d = num\
    \ % 10;\n            if (d % 2 == 0) {\n                even++;\n            }\
    \ else {\n                odd++;\n            }\n            num /= 10;\n    \
    \    }\n        return Tuple.Create(even, odd);", "        long even = 0;\n  \
    \      long odd = 0;\n        if (num == 0) {\n            return Tuple.Create(1L,\
    \ 0L);\n        }\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            long digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                even++;\n            } else {\n        \
    \        odd++;\n            }\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        // TODO: Implement.\n        return null;",
  '        return Tuple.Create((num + 1) / 2, num / 2);', "        if (num < 0) {\n\
    \            return EvenOddCount(-num);\n        }\n\n        long even = 0;\n\
    \        long odd = 0;\n        while (num > 0) {\n            if ((num % 10)\
    \ % 2 == 0) {\n                even++;\n            } else {\n               \
    \ odd++;\n            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        bool sign =\
    \ num < 0;\n        num = Math.Abs(num);\n        while (num > 0) {\n        \
    \    int d = (int)(num % 10);\n            if (d % 2 == 0)\n                even++;\n\
    \            else\n                odd++;\n            num /= 10;\n        }\n\
    \        return Tuple.Create(even, odd);", "        var Even = 0L;\n        var\
    \ Odd = 0L;\n        var val = num;\n        while (val != 0) {\n            val\
    \ /= 10;\n            if (val % 2 == 0) {\n                Even++;\n         \
    \   } else {\n                Odd++;\n            }\n        }\n        return\
    \ Tuple.Create(Even, Odd);", "        var even = num.ToString().Count(x => x %\
    \ 2 == 0);\n        var odd = num.ToString().Count(x => x % 2 == 1);\n       \
    \ return Tuple.Create(even, odd);", "        int e = 0;\n        int o = 0;\n\
    \        foreach (char c in num.ToString()) {\n            if (int.Parse(c.ToString())\
    \ % 2 == 0) {\n                e++;\n            } else {\n                o++;\n\
    \            }\n        }\n        return Tuple.Create(e, o);", "        long\
    \ even_count = 0;\n        long odd_count = 0;\n        while (num != 0) {\n \
    \           if (num % 2 == 0) {\n                even_count += 1;\n          \
    \  } else {\n                odd_count += 1;\n            }\n            num /=\
    \ 10;\n        }\n        return Tuple.Create(even_count, odd_count);", "    \
    \    int e = 0;\n        int o = 0;\n        long x = Math.Abs(num);\n       \
    \ do {\n            if ((x % 2) == 0) {\n                e++;\n            } else\
    \ {\n                o++;\n            }\n            x /= 10;\n        } while\
    \ (x != 0);\n        return Tuple.Create(e, o);", "        // >>> EvenOddCount((-12L))\n\
    \        // (Tuple.Create(1L, 1L))\n        // >>> EvenOddCount((123L))\n    \
    \    // (Tuple.Create(1L, 2L))\n        int even = 0;\n        int odd = 0;\n\
    \        long n = num;\n        while (n != 0) {\n            long d = n % 10;\n\
    \            if (d % 2 == 0)\n                even++;\n            else\n    \
    \            odd++;\n            n /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        // --> O(N)\n        //\n        // In each iteration, we extract\
    \ the last digit, and update the even/odd\n        // counters accordingly. We\
    \ then shift the number to the right. The\n        // remainder of the division\
    \ by 10 is the last digit.\n        //\n        // We are taking the absolute\
    \ value of the input, to make sure that negative\n        // numbers work.\n \
    \       //\n        // Note that we can use an integer for the counters, because\
    \ the number of\n        // odd/even digits is at most the number of digits in\
    \ the integer.\n\n        long countEven = 0;\n        long countOdd = 0;\n  \
    \      long numAbs = Math.Abs(num);\n        while (numAbs > 0) {\n          \
    \  int lastDigit = (int)(numAbs % 10);\n            if (lastDigit % 2 == 0) {\n\
    \                countEven += 1;\n            } else {\n                countOdd\
    \ += 1;\n            }\n            numAbs /= 10;\n        }\n        return Tuple.Create(countEven,\
    \ countOdd);", '        return Tuple.Create(0L, 0L);', "        long even = 0;\n\
    \        long odd = 0;\n        long x = num;\n        if (x < 0) {\n        \
    \    x = -x;\n        }\n        while (x > 0) {\n            if (x % 2 == 0)\
    \ {\n                even++;\n            } else {\n                odd++;\n \
    \           }\n            x /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        string number = num.ToString();\n        long odd = 0;\n  \
    \      long even = 0;\n        for (int i = 0; i < number.Length; i++) {\n   \
    \         if (Convert.ToInt32(number[i]) % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n        }\n    \
    \    return Tuple.Create(even, odd);", "        long numEven = 0, numOdd = 0;\n\
    \        if (num < 0) {\n            num = -num;\n        }\n        while (num\
    \ > 0) {\n            if ((num % 10) % 2 == 0) {\n                numEven += 1;\n\
    \            } else {\n                numOdd += 1;\n            }\n         \
    \   num /= 10;\n        }\n        return Tuple.Create(numEven, numOdd);", " \
    \       // Fill in the code for this method.\n        //\n        // Hint: The\
    \ modulo operator gives you the remainder (9 % 2 == 1).\n        return Tuple.Create(0L,\
    \ 0L);", '        return Tuple.Create(1L, 2L);', "        // Your code goes here.\n\
    \        return Tuple.Create(0L, 0L);", "        string numStr = num.ToString();\n\
    \        long evenCount = 0;\n        long oddCount = 0;\n        foreach (char\
    \ c in numStr) {\n            if (c == '-') {\n                continue;\n   \
    \         }\n            int digit = c - '0';\n            if (digit % 2 == 0)\
    \ {\n                evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n        }\n        return Tuple.Create(evenCount, oddCount);",
  "        long oddCount = 0;\n        long evenCount = 0;\n        long digit;\n\
    \        if (num < 0) {\n            num = -num;\n        }\n        while (num\
    \ > 0) {\n            digit = num % 10;\n            if (digit % 2 == 0) {\n \
    \               evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", '        return Tuple.Create(1L, 1L);', "        long evenCount\
    \ = 0;\n        long oddCount = 0;\n        if (num < 0) {\n            evenCount++;\n\
    \            num = -num;\n        }\n        if (num == 0) {\n            evenCount++;\n\
    \        }\n        while (num > 0) {\n            int digit = (int)(num % 10);\n\
    \            if (digit % 2 == 0) {\n                evenCount++;\n           \
    \ } else {\n                oddCount++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(evenCount, oddCount);", "        var even\
    \ = 0L;\n        var odd = 0L;\n        var abs = Math.Abs(num);\n        while\
    \ (abs > 0) {\n            var digit = abs % 10;\n            if (digit % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            abs /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        // Given a number, use modulo to determine if a digit is even\
    \ or odd.\n        // Convert the number to a string and iterate through each\
    \ character.\n        // For each character, convert it to a number and check\
    \ if it is even or odd.\n        // When finding the length of the string, subtract\
    \ one to get the last index.\n        int length = num.ToString().Length - 1;\n\
    \        long[] evensAndOdds = new long[2];\n        for (int i = 0; i <= length;\
    \ i++) {\n            int number = int.Parse(num.ToString()[i].ToString());\n\
    \            if (number % 2 == 0) {\n                evensAndOdds[0]++;\n    \
    \        } else {\n                evensAndOdds[1]++;\n            }\n       \
    \ }\n        return Tuple.Create(evensAndOdds[0], evensAndOdds[1]);", "      \
    \  long even = 0;\n        long odd = 0;\n        while (num != 0) {\n       \
    \     if (num % 2 == 0) {\n                even += 1;\n            } else {\n\
    \                odd += 1;\n            }\n            num /= 10;\n        }\n\
    \        return Tuple.Create(even, odd);", "        var counter = new long[2];\n\
    \        while (num != 0) {\n            ++counter[num % 2];\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(counter[0], counter[1]);", " \
    \       long even = 0;\n        long odd = 0;\n        foreach (var digit in num.ToString())\
    \ {\n            if (digit == '-') {\n                continue;\n            }\n\
    \            if (digit % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        var count = new Tuple<long, long>(0, 0);\n        var n = num;\n\
    \        if (n < 0) {\n            n = -n;\n        }\n        while (n > 0) {\n\
    \            var digit = n % 10;\n            if (digit % 2 == 0) {\n        \
    \        count = new Tuple<long, long>(count.Item1 + 1, count.Item2);\n      \
    \      } else {\n                count = new Tuple<long, long>(count.Item1, count.Item2\
    \ + 1);\n            }\n            n /= 10;\n        }\n        return count;",
  '        return Tuple.Create(EvenOddCount(num, 0, 0), EvenOddCount(num, 0, 1));',
  "        // Return a Tuple.\n        return Tuple.Create(0L, 0L);", '        return
    Tuple.Create(0L, 0L);', "        long even = 0, odd = 0;\n        do {\n     \
    \       if (num % 2 == 0) even++;\n            else odd++;\n            num /=\
    \ 10;\n        } while (num != 0);\n        return Tuple.Create(even, odd);",
  "        long evenCount = 0;\n        long oddCount = 0;\n        for (; num !=\
    \ 0; num /= 10) {\n            long digit = num % 10;\n            if (digit %\
    \ 2 == 0) {\n                evenCount++;\n            } else {\n            \
    \    oddCount++;\n            }\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long evenCount = 0;\n        long oddCount = 0;\n    \
    \    var str = num.ToString();\n        foreach (var c in str) {\n           \
    \ if (c == '-') {\n                continue;\n            }\n            var v\
    \ = int.Parse(c.ToString());\n            if (v % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n        }\n\
    \        return Tuple.Create(evenCount, oddCount);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        // Convert to the absolute value of num to a string.\n    \
    \    string numStr = ((long)num.Pow(0)).ToString();\n        // Initialize a list\
    \ to keep track of even and odd digits.\n        List<int> evens = new List<int>();\n\
    \        List<int> odds = new List<int>();\n        // Iterate through the digits\
    \ of the string.\n        for (int i = 0; i < numStr.Length; i++) {\n        \
    \    // Convert the current character to an integer.\n            int digit =\
    \ int.Parse(numStr[i].ToString());\n            // If the digit is even, add it\
    \ to the evens list.\n            if (digit % 2 == 0) {\n                evens.Add(digit);\n\
    \            }\n            // If the digit is odd, add it to the odds list.\n\
    \            else {\n                odds.Add(digit);\n            }\n       \
    \ }\n        // Return a tuple that has the number of even and odd digits respectively.\n\
    \        return Tuple.Create((long)evens.Count, (long)odds.Count);", '        return
    null;', "        long odd = 0;\n        long even = 0;\n        int i = 0;\n \
    \       long tens = 1;\n        if (num < 0) {\n            num = -num;\n    \
    \    }\n        while (num != 0) {\n            long digit = num % 10;\n     \
    \       if (digit % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n            i++;\n\
    \        }\n        return Tuple.Create(even, odd);", "        Tuple<long, long>\
    \ r = Tuple.Create(0L, 0L);\n        for (int i = 1; i <= num; i++) {\n      \
    \      if (i % 2 == 0)\n                r = Tuple.Create(r.Item1 + 1, r.Item2);\n\
    \            else\n                r = Tuple.Create(r.Item1, r.Item2 + 1);\n \
    \       }\n        return r;", "        // Put your code here\n        long even\
    \ = 0;\n        long odd = 0;\n        if (num < 0) {\n            num = -num;\n\
    \        }\n        while (num > 0) {\n            if (num % 2 == 0) {\n     \
    \           even++;\n            } else {\n                odd++;\n          \
    \  }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        var s = Math.Abs(num).ToString();\n        var e = 0L;\n        var o =\
    \ 0L;\n        foreach (var i in s) {\n            var d = long.Parse(i.ToString());\n\
    \            if (d % 2 == 0) e++;\n            else o++;\n        }\n        return\
    \ Tuple.Create(e, o);", "        int even = 0;\n        int odd = 0;\n       \
    \ num = Math.Abs(num);\n        do {\n            if ((num % 10) % 2 == 0) {\n\
    \                even++;\n            } else {\n                odd++;\n     \
    \       }\n            num /= 10;\n        } while (num > 0);\n        return\
    \ Tuple.Create(even, odd);", "        var digits = Math.Abs(num).ToString().Select(e\
    \ => int.Parse(e.ToString()));\n        var even = digits.Where(e => e % 2 ==\
    \ 0).Count();\n        var odd = digits.Where(e => e % 2 == 1).Count();\n    \
    \    return Tuple.Create(even, odd);", "        long numEven = 0;\n        long\
    \ numOdd = 0;\n        if (num == 0) {\n            numEven = 1;\n        }\n\
    \        else {\n            if (num < 0) {\n                num = -num;\n   \
    \         }\n            while (num > 0) {\n                if ((num % 10) % 2\
    \ == 0) {\n                    numEven += 1;\n                }\n            \
    \    else {\n                    numOdd += 1;\n                }\n           \
    \     num /= 10;\n            }\n        }\n        return Tuple.Create(numEven,\
    \ numOdd);", "        Tuple<long, long> res = new Tuple<long, long>(0, 0);\n \
    \       if (num < 0) num = -num;\n        while (num > 0) {\n            if ((num\
    \ % 10) % 2 == 0) res = new Tuple<long, long>(res.Item1 + 1, res.Item2);\n   \
    \         else res = new Tuple<long, long>(res.Item1, res.Item2 + 1);\n      \
    \      num /= 10;\n        }\n        return res;", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0)\n                even++;\n          \
    \  else\n                odd++;\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        // Extract the sign of the number.\n   \
    \     bool isNegative = false;\n        if (num < 0) {\n            isNegative\
    \ = true;\n            num = -num;\n        }\n        // Count the number of\
    \ even and odd digits.\n        long evenCount = 0;\n        long oddCount = 0;\n\
    \        for (long rem = num; rem > 0; rem /= 10) {\n            long d = rem\
    \ % 10;\n            if (d % 2 == 0) {\n                evenCount += 1;\n    \
    \        } else {\n                oddCount += 1;\n            }\n        }\n\
    \        return Tuple.Create(evenCount, oddCount);", "        long odd = 0;\n\
    \        long even = 0;\n        while (num != 0) {\n            int digit = (int)(num\
    \ % 10);\n            if (digit % 2 == 0)\n                even++;\n         \
    \   else\n                odd++;\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        var evenCount = 0L;\n        var oddCount\
    \ = 0L;\n        foreach (var d in num.ToString()) {\n            if (d == '-')\
    \ {\n                continue;\n            }\n            if (long.Parse(d.ToString())\
    \ % 2 == 0) {\n                evenCount++;\n            } else {\n          \
    \      oddCount++;\n            }\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long even = 0;\n        long odd = 0;\n        if (num\
    \ < 0) {\n            num = -num;\n        }\n        while (num > 0) {\n    \
    \        long digit = num % 10;\n            if (digit % 2 == 0) {\n         \
    \       even++;\n            } else {\n                odd++;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        int numLength = num.ToString().Length;\n        int[] numbers = new int[numLength];\n\
    \        int numEven = 0;\n        int numOdd = 0;\n        for (int i = 0; i\
    \ < numLength; i++) {\n            numbers[i] = Convert.ToInt32(num.ToString().Substring(i,\
    \ 1));\n            if (numbers[i] % 2 == 0) {\n                numEven++;\n \
    \           } else {\n                numOdd++;\n            }\n        }\n  \
    \      return Tuple.Create(numEven, numOdd);", "        long numEven = 0;\n  \
    \      long numOdd = 0;\n        for (var i = 0; i < num.ToString().Length; i++)\
    \ {\n            if (num.ToString()[i] % 2 == 0)\n                numEven++;\n\
    \            else\n                numOdd++;\n        }\n        return Tuple.Create(numEven,\
    \ numOdd);", "        long evenCount = 0;\n        long oddCount = 0;\n      \
    \  long numAbs = Math.Abs(num);\n        while (numAbs > 0) {\n            long\
    \ digit = numAbs % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n          \
    \  numAbs /= 10;\n        }\n        return Tuple.Create(evenCount, oddCount);"]
stop_tokens:
- "\n    }\n"
