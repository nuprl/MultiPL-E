language: cs
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Write your code here\n        return Tuple.Create(1L, 1L);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3ab93fcb2d04f4f9d058c8f8ff11e68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3ab93fcb2d04f4f9d058c8f8ff11e68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long s = 0;\n        long p = 1;\n        foreach (var i in numbers)\
    \ {\n            s += i;\n            p *= i;\n        }\n        return Tuple.Create(s,\
    \ p);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return Tuple.Create(0L, 1L);\n \
    \       long sum = 0L;\n        long prod = 1L;\n        foreach (long num in\
    \ numbers) {\n            sum += num;\n            prod *= num;\n        }\n \
    \       return Tuple.Create(sum, prod);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate((long)1,\
    \ (acc, x) => acc * x));\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        Tuple<long, long> sumproduct = Tuple.Create((long)0, (long)1);\n    \
    \    if (numbers.Count > 0) {\n            sumproduct = Tuple.Create(numbers.Sum(),\
    \ numbers.Aggregate((long)1, (acc, x) => acc * x));\n        }\n        return\
    \ sumproduct;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0c02da2590f245c2be80c51f48488881>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]\
    \ in <0c02da2590f245c2be80c51f48488881>:0 \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate((x, y)\
    \ => x * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return Tuple.Create(0L, 1L);\n \
    \       long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate((x, y)\
    \ => x * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0, product = 1;\n        foreach (long n in numbers) {\n \
    \           sum += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // return Tuple.Create(numbers.Sum(), numbers.Aggregate((x, y) => x *\
    \ y));\n        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (x, y)\
    \ => x * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        //return Tuple.Create(0L, 1L);\n        var sum = numbers.Sum();\n  \
    \      var prod = numbers.Aggregate(1L, (result, current) => result * current);\n\
    \        return Tuple.Create(sum, prod);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // return Tuple.Create(numbers.Sum(), numbers.Aggregate((long)1, (a,\
    \ b) => a * b));\n        return Tuple.Create(numbers.Sum(), numbers.Aggregate((long)1,\
    \ (a, b) => a * b));\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long l in\
    \ numbers) {\n            sum += l;\n            product *= l;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Should return a tuple of two integers\n        // The first integer\
    \ should be the sum of all the integers in the list\n        // The second integer\
    \ should be the product of all the integers in the list\n        return Tuple.Create((long)0L,\
    \ (long)1L);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ecfea6a0d06450491bffb9c8922ec3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ecfea6a0d06450491bffb9c8922ec3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long num in\
    \ numbers) {\n            sum += num;\n            product *= num;\n        }\n\
    \        return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Write your code here\n        return Tuple.Create(\n            numbers.Sum(),\n\
    \            numbers.Aggregate(1L, (acc, x) => acc * x)\n        );\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long total_sum = 0;\n        long total_product = 1;\n        foreach\
    \ (long number in numbers) {\n            total_sum += number;\n            total_product\
    \ *= number;\n        }\n        return new Tuple<long, long>(total_sum, total_product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // YOUR CODE GOES HERE\n        return new Tuple<long, long>(0, 1);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1dd3bb2feb8745bb9fdc706d819d0fe6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1dd3bb2feb8745bb9fdc706d819d0fe6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return Tuple.Create(0L, 1L);\n \
    \       return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (total, next)\
    \ => total * next));\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0c02da2590f245c2be80c51f48488881>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]\
    \ in <0c02da2590f245c2be80c51f48488881>:0 \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count() == 0) {\n            return Tuple.Create(0L, 1L);\n\
    \        } else {\n            var tup = Tuple.Create(numbers.Sum(), numbers.Aggregate((a,\
    \ b) => a * b));\n            return tup;\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var sum = 0L;\n        var prod = 1L;\n        foreach (var e in numbers)\
    \ {\n            sum += e;\n            prod *= e;\n        }\n        return\
    \ Tuple.Create(sum, prod);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return Tuple.Create(0L, 1L);\n \
    \       return Tuple.Create(numbers.Sum(), numbers.Aggregate((a, b) => a * b));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (a, b) => a\
    \ * b));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((p, c) => p * c));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <6d7f6e5a776d4a0ebe026f2efaacb805>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <6d7f6e5a776d4a0ebe026f2efaacb805>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <6d7f6e5a776d4a0ebe026f2efaacb805>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <6d7f6e5a776d4a0ebe026f2efaacb805>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        if (numbers.Count()\
    \ == 0) {\n            return Tuple.Create(sum, product);\n        }\n       \
    \ else {\n            foreach (long number in numbers) {\n                sum\
    \ += number;\n                product *= number;\n            }\n            return\
    \ Tuple.Create(sum, product);\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long total = 0;\n        long prod = 1;\n        foreach (long num in\
    \ numbers) {\n            total += num;\n            prod *= num;\n        }\n\
    \        Tuple<long, long> result = Tuple.Create(total, prod);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return (Tuple.Create(numbers.Sum(), numbers.Aggregate((x, y) => x * y)));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <49c16e24dcbc4dd484ad1e02c2d97ef6>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <49c16e24dcbc4dd484ad1e02c2d97ef6>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <49c16e24dcbc4dd484ad1e02c2d97ef6>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <49c16e24dcbc4dd484ad1e02c2d97ef6>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (x, y) => x\
    \ * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // return Tuple.Create(numbers.Sum(), numbers.Aggregate((long)1, (a,\
    \ b) => a * b));\n        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L,\
    \ (a, b) => a * b));\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long x in\
    \ numbers) {\n            sum += x;\n            product *= x;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0c02da2590f245c2be80c51f48488881>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]\
    \ in <0c02da2590f245c2be80c51f48488881>:0 \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // return Tuple.Create(0L, 1L);\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var num in numbers) {\n            sum += num;\n\
    \            product *= num;\n        }\n        return Tuple.Create(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        if (numbers.Count ==\
    \ 0)\n            return Tuple.Create(sum, product);\n        for (long i = 0;\
    \ i < numbers.Count; i++) {\n            sum += numbers[(int)i];\n           \
    \ product *= numbers[(int)i];\n        }\n        return Tuple.Create(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return Tuple.Create(0L, 1L);\n\
    \        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return Tuple.Create(sum, product);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // TODO: Return a tuple with sum and product of all the integers in a\
    \ list.\n        long sum = 0;\n        long product = 1;\n        for (int i\
    \ = 0; i < numbers.Count; i++) {\n            sum += numbers[i];\n           \
    \ product *= numbers[i];\n        }\n        return Tuple.Create(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long l in\
    \ numbers) {\n            sum += l;\n            product *= l;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return Tuple.Create(0L, 1L);\n\
    \        }\n        long sum = 0;\n        long product = 1;\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            sum += numbers[i];\n         \
    \   product *= numbers[i];\n        }\n        return Tuple.Create(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long num in\
    \ numbers) {\n            sum += num;\n            product *= num;\n        }\n\
    \        return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // TODO\n        long sum = 0;\n        long product = 1;\n        for\
    \ (int i = 0; i < numbers.Count; i++) {\n            sum += numbers[i];\n    \
    \        product *= numbers[i];\n        }\n        return Tuple.Create(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (a, b) => a\
    \ * b));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // your code here\n        return Tuple.Create(numbers.Sum(), numbers.Aggregate((long)1,\
    \ (item, aggr) => item * aggr));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long x in\
    \ numbers) {\n            sum += x;\n            product *= x;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long x in\
    \ numbers) {\n            sum += x;\n            product *= x;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00014] in <a97095c03da64e4dbe7472a8aa4c4ac9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00014] in <a97095c03da64e4dbe7472a8aa4c4ac9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate(1L, (prod,\
    \ x) => prod * x));\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return Tuple.Create(0L, 1L);\n\
    \        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long i in numbers) {\n            sum += i;\n            product *= i;\n  \
    \      }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (a, b) => a\
    \ * b));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var sum = 0L;\n        var product = 1L;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // <CODE>\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate(1L,\
    \ (a, b) => a * b);\n        return Tuple.Create(sum, product);\n        // </CODE>\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((x, y) => x * y));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((long)1, (acc, val)\
    \ => acc * val));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long total = 0;\n        long prod = 1;\n        foreach (long num in\
    \ numbers) {\n            total += num;\n            prod *= num;\n        }\n\
    \        return Tuple.Create(total, prod);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0c02da2590f245c2be80c51f48488881>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]\
    \ in <0c02da2590f245c2be80c51f48488881>:0 \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(Sum(numbers), Product(numbers));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7lgw_3mp.cs(16,29): error CS0103: The name ''Sum'' does not exist in the
    current context

    /tmp/tmp7lgw_3mp.cs(16,43): error CS0103: The name ''Product'' does not exist
    in the current context

    '
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Use the built in aggregates\n\n        long s = numbers.Sum();\n \
    \       long p = numbers.Aggregate((a, b) => a * b);\n\n        return Tuple.Create(s,\
    \ p);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00008]\
    \ in <dc002c8996f64b6189d7d0c664a853dc>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <dc002c8996f64b6189d7d0c664a853dc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00008]\
    \ in <dc002c8996f64b6189d7d0c664a853dc>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <dc002c8996f64b6189d7d0c664a853dc>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Your implementation goes here\n        // return null;\n        return\
    \ Tuple.Create(numbers.Sum(), numbers.Aggregate((x, y) => x * y));\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <c202761201de43f9a47d5959c05fb0fa>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <c202761201de43f9a47d5959c05fb0fa>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <c202761201de43f9a47d5959c05fb0fa>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <c202761201de43f9a47d5959c05fb0fa>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // your code goes here\n        return (Tuple.Create(numbers.Sum(), numbers.Aggregate((x,\
    \ y) => x * y)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <96ee68d60a174c14b99dce7654a63270>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <96ee68d60a174c14b99dce7654a63270>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <96ee68d60a174c14b99dce7654a63270>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <96ee68d60a174c14b99dce7654a63270>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long p = 1;\n        long s = 0;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            p *= numbers[i];\n            s += numbers[i];\n       \
    \ }\n        return Tuple.Create(s, p);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (x,y) => x *\
    \ y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long num in\
    \ numbers) {\n            sum += num;\n            product *= num;\n        }\n\
    \        return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate((long)1,\
    \ (a, b) => a * b));\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Your solution here.\n        long sum = 0;\n        long product =\
    \ 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return Tuple.Create(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((long)1, (x, y)\
    \ => x * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0c02da2590f245c2be80c51f48488881>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]\
    \ in <0c02da2590f245c2be80c51f48488881>:0 \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var n in numbers)\
    \ {\n            sum += n;\n            product *= n;\n        }\n        return\
    \ Tuple.Create(sum, product);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((x, y) => x * y));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0, prod = 1;\n        foreach (long n in numbers) {\n    \
    \        sum += n;\n            prod *= n;\n        }\n        return Tuple.Create(sum,\
    \ prod);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // TODO: Add your code here\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long l in numbers) {\n            sum += l;\n       \
    \     product *= l;\n        }\n        return Tuple.Create(sum, product);\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // start coding here\n        long Sum = 0;\n        long Product = 1;\n\
    \        foreach (long i in numbers) {\n            Sum += i;\n            Product\
    \ *= i;\n        }\n        return (Tuple.Create(Sum, Product));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var result = (Tuple.Create((long)0L, (long)1L));\n        if (numbers.Count\
    \ != 0) {\n            foreach (var number in numbers) {\n                result\
    \ = (Tuple.Create((result.Item1 + number), (result.Item2 * number)));\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (x, y) => x\
    \ * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0, product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (acc, x) =>\
    \ acc * x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // TODO: return sum and product of all numbers in the list\n        var\
    \ sum = 0L;\n        var product = 1L;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            sum += numbers[i];\n            product *= numbers[i];\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return Tuple.Create((long)0, (long)1);\n\
    \        }\n        return Tuple.Create(numbers.Sum(), numbers.Aggregate((x, y)\
    \ => x * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Write your code here.\n        return Tuple.Create(numbers.Sum(),\
    \ numbers.Aggregate((long)1, (a, b) => a * b));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long e in numbers)\
    \ {\n            prod *= e;\n            sum += e;\n        }\n        return\
    \ Tuple.Create(sum, prod);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (a, b) => a\
    \ * b));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0, prod = 1;\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            sum += numbers[i];\n            prod *= numbers[i];\n       \
    \ }\n        return Tuple.Create(sum, prod);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return (Tuple.Create((long)numbers.Sum(), (long)numbers.Aggregate((long)1,\
    \ (x, y) => x * y)));\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count() == 0)\n            return Tuple.Create((long)0, (long)1);\n\
    \        long sum = numbers.Aggregate((a, b) => a + b);\n        long product\
    \ = numbers.Aggregate((a, b) => a * b);\n        return Tuple.Create(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var result = (Tuple.Create(0L, 1L));\n        if (numbers.Count == 0)\
    \ {\n            return result;\n        }\n        result = (Tuple.Create(numbers.Sum(),\
    \ numbers.Aggregate(((long)1L), (((Func<long, long, long>)(((long a, long b) =>\
    \ (a * b))))))));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // your solution here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00014] in <77a7256b314b4deca0def07d5ae4b998>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00014] in <77a7256b314b4deca0def07d5ae4b998>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate((a, b)\
    \ => a * b));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <d44e8905917c49f9bc714f87168346dd>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <d44e8905917c49f9bc714f87168346dd>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <d44e8905917c49f9bc714f87168346dd>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <d44e8905917c49f9bc714f87168346dd>:0 \n"
  stdout: ''
  timestamp: 1659977027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Your solution goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00014] in <d377c6361b034f4397da5b1c34d4d15f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00014] in <d377c6361b034f4397da5b1c34d4d15f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (acc, x) =>\
    \ acc * x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long i in\
    \ numbers) {\n            sum += i;\n            product *= i;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0, prod = 1;\n        foreach (long num in numbers) {\n  \
    \          sum += num;\n            prod *= num;\n        }\n        return Tuple.Create(sum,\
    \ prod);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return new Tuple<long, long>(\n            numbers.Sum(),\n         \
    \   numbers.Aggregate(1L, (a, b) => a * b)\n        );\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        if (numbers.Count()\
    \ > 0) {\n            foreach (var num in numbers) {\n                sum += num;\n\
    \                product *= num;\n            }\n        }\n        return Tuple.Create(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0, prod = 1;\n        foreach (long num in numbers) {\n  \
    \          sum += num;\n            prod *= num;\n        }\n        return Tuple.Create(sum,\
    \ prod);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0, product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Implementing the function with help of linq\n        return Tuple.Create(numbers.Sum(),\
    \ numbers.Aggregate(1L, (x, y) => x * y));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var n in numbers)\
    \ {\n            sum += n;\n            product *= n;\n        }\n        return\
    \ Tuple.Create(sum, product);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((long)1, (x, y)\
    \ => x * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long num in\
    \ numbers) {\n            sum += num;\n            product *= num;\n        }\n\
    \        return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((x, y) => x * y));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var sum = 0L;\n        var product = 1L;\n        for (var i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long num in\
    \ numbers) {\n            sum += num;\n            product *= num;\n        }\n\
    \        return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (total, next)\
    \ => total * next));\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0c02da2590f245c2be80c51f48488881>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]\
    \ in <0c02da2590f245c2be80c51f48488881>:0 \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long l in\
    \ numbers) {\n            sum += l;\n            product *= l;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long value\
    \ in numbers) {\n            sum += value;\n            product *= value;\n  \
    \      }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (x, y) => x\
    \ * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long l in\
    \ numbers) {\n            sum += l;\n            product *= l;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var res = Tuple.Create(0L, 1L);\n        if (numbers.Count() == 0) return\
    \ res;\n        res = Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (a, b)\
    \ => a * b));\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (x, y) => x\
    \ * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Write your code here\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return Tuple.Create(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (p, i) => p\
    \ * i));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (n, p) => n\
    \ * p));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0) {\n            return new Tuple<long, long>(0,\
    \ 1);\n        }\n        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return new Tuple<long, long>(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var mySum = 0L;\n        var myProduct = 1L;\n        if (numbers.Count\
    \ == 0)\n            return Tuple.Create(mySum, myProduct);\n        foreach (var\
    \ item in numbers) {\n            mySum += item;\n            myProduct *= item;\n\
    \        }\n        return Tuple.Create(mySum, myProduct);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var sum = 0L;\n        var prod = 1L;\n        foreach (var number in\
    \ numbers) {\n            sum += number;\n            prod *= number;\n      \
    \  }\n        return Tuple.Create(sum, prod);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Your code goes here.\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00014] in <c99b8fa3b5f546b18030261593114b9f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00014] in <c99b8fa3b5f546b18030261593114b9f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977028
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((acc, x) => acc\
    \ * x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <bdda27c88d2d49d9ab434cc09a3bf8d2>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <bdda27c88d2d49d9ab434cc09a3bf8d2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <bdda27c88d2d49d9ab434cc09a3bf8d2>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <bdda27c88d2d49d9ab434cc09a3bf8d2>:0 \n"
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(\n            numbers.Aggregate(0L, (x, y) => x +\
    \ y),\n            numbers.Aggregate(1L, (x, y) => x * y)\n        );\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((x, y) => x * y));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // write code here\n        return new Tuple<long, long>(numbers.Sum(),\
    \ numbers.Aggregate((x, y) => x * y));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <743b4ee619f2408899b0d29488a09139>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <743b4ee619f2408899b0d29488a09139>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <743b4ee619f2408899b0d29488a09139>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <743b4ee619f2408899b0d29488a09139>:0 \n"
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var num in\
    \ numbers) {\n            sum += num;\n            product *= num;\n        }\n\
    \        return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var s = numbers.Sum();\n        var p = numbers.Aggregate(1L, (current,\
    \ n) => current * n);\n        return Tuple.Create(s, p);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var sum = numbers.Sum();\n        var prod = numbers.Aggregate((x, y)\
    \ => x * y);\n        return Tuple.Create(sum, prod);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00008]\
    \ in <3875bdf5ff1048288a7d98907fc71261>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <3875bdf5ff1048288a7d98907fc71261>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00008]\
    \ in <3875bdf5ff1048288a7d98907fc71261>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <3875bdf5ff1048288a7d98907fc71261>:0 \n"
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0, prod = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            prod *= number;\n        }\n        return\
    \ Tuple.Create(sum, prod);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var sum = 0L;\n        var prod = 1L;\n        foreach (var number in\
    \ numbers) {\n            sum += number;\n            prod *= number;\n      \
    \  }\n        return Tuple.Create(sum, prod);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0, prod = 1;\n        foreach (long n in numbers) {\n    \
    \        sum += n;\n            prod *= n;\n        }\n        return Tuple.Create(sum,\
    \ prod);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var n in numbers)\
    \ {\n            sum += n;\n            product *= n;\n        }\n        return\
    \ Tuple.Create(sum, product);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        if (numbers.Count == 0)\n            return Tuple.Create(0L, 1L);\n \
    \       long sum = 0L;\n        long prod = 1L;\n        foreach (var x in numbers)\
    \ {\n            sum += x;\n            prod *= x;\n        }\n        return\
    \ Tuple.Create(sum, prod);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((x, y) => x * y));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long i in\
    \ numbers) {\n            sum += i;\n            product *= i;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977027
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var n in numbers)\
    \ {\n            sum += n;\n            product *= n;\n        }\n        return\
    \ Tuple.Create(sum, product);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Write your code here\n        long sum = 0;\n        long prod = 1;\n\
    \        foreach (long l in numbers) {\n            sum += l;\n            prod\
    \ *= l;\n        }\n        return Tuple.Create(sum, prod);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00006] in <0c02da2590f245c2be80c51f48488881>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00006]\
    \ in <0c02da2590f245c2be80c51f48488881>:0 \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((long)1, (x, y)\
    \ => x * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long x in\
    \ numbers) {\n            sum += x;\n            product *= x;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long a = 0;\n        long b = 1;\n        foreach (long n in numbers)\
    \ {\n            a += n;\n            b *= n;\n        }\n        return Tuple.Create(a,\
    \ b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return (Tuple.Create(numbers.Sum(), numbers.Aggregate((x, y) => x * y)));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <49c16e24dcbc4dd484ad1e02c2d97ef6>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <49c16e24dcbc4dd484ad1e02c2d97ef6>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <49c16e24dcbc4dd484ad1e02c2d97ef6>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <49c16e24dcbc4dd484ad1e02c2d97ef6>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long l in\
    \ numbers) {\n            sum += l;\n            product *= l;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0,\n             product = 1;\n        if (numbers.Count()\
    \ != 0) {\n            for (int i = 0; i < numbers.Count(); i++) {\n         \
    \       sum += numbers[i];\n                product *= numbers[i];\n         \
    \   }\n        }\n        return Tuple.Create(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (a, b) => a\
    \ * b));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Original:\n        // return new Tuple<long, long>(numbers.Sum(),\
    \ numbers.Aggregate((long)1, (a, b) => a * b));\n        long sum = 0;\n     \
    \   long product = 1;\n        foreach (var n in numbers) {\n            sum +=\
    \ n;\n            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long s = 0;\n        long p = 1;\n        foreach (long i in numbers)\
    \ {\n            s += i;\n            p *= i;\n        }\n        return new Tuple<long,\
    \ long>(s, p);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(),numbers.Aggregate(1L,(acc,x) => acc\
    \ * x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long s = 0;\n        long p = 1;\n        foreach (long i in numbers)\
    \ {\n            s += i;\n            p *= i;\n        }\n        return Tuple.Create(s,\
    \ p);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // numbers: 1, 2, 3, 4\n        // sum: 10\n        // prod: 24\n   \
    \     long a = 0;\n        long b = 1;\n        if (numbers.Count == 0) {\n  \
    \          return Tuple.Create(a, b);\n        }\n        foreach (long x in numbers)\
    \ {\n            a += x;\n            b *= x;\n        }\n        return Tuple.Create(a,\
    \ b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate((long)1,\
    \ (a, b) => a * b));\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return Tuple.Create(numbers.Sum(), numbers.Aggregate((x, y) => x * y));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <0b09cc6860b9473abe06ffccb07052c8>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <0b09cc6860b9473abe06ffccb07052c8>:0 \n"
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Your code goes here.\n        return Tuple.Create((long)0L, (long)1L);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e21a82dae3e44beb8b02fdd6c4e57ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e21a82dae3e44beb8b02fdd6c4e57ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long s = 0;\n        long p = 1;\n        foreach (long number in numbers)\
    \ {\n            s += number;\n            p *= number;\n        }\n        return\
    \ Tuple.Create(s, p);\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long total_sum = 0;\n        long total_product = 1;\n        foreach\
    \ (long number in numbers) {\n            total_sum += number;\n            total_product\
    \ *= number;\n        }\n        return Tuple.Create(total_sum, total_product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0, product = 1;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            sum += numbers[i];\n            product *= numbers[i];\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // Your code goes here\n        if (numbers.Count == 0) {\n         \
    \   return new Tuple<long, long>(0, 1);\n        } else {\n            long sum\
    \ = 0;\n            long product = 1;\n            foreach (long n in numbers)\
    \ {\n                sum += n;\n                product *= n;\n            }\n\
    \            return new Tuple<long, long>(sum, product);\n        }\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var n in numbers)\
    \ {\n            sum += n;\n            product *= n;\n        }\n        return\
    \ Tuple.Create(sum, product);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        var sum = (long)0;\n        var product = (long)1;\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            sum += numbers[i];\n         \
    \   product *= numbers[i];\n        }\n        return Tuple.Create(sum, product);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977028
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (var number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long s = 0;\n        long p = 1;\n        foreach (long n in numbers)\
    \ {\n            s += n;\n            p *= n;\n        }\n        return Tuple.Create(s,\
    \ p);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        // STUDENT\n        // \n\n        long sum = 0;\n        long prod =\
    \ 1;\n        foreach (long i in numbers)\n        {\n            sum += i;\n\
    \            prod *= i;\n        }\n        return Tuple.Create(sum, prod);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977029
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate((x, y)\
    \ => x * y));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]\
    \ in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00006] in <82ca0ee4419444379a2e5fc545c21d4f>:0 \n"
  stdout: ''
  timestamp: 1659977025
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate(1L, (a,\
    \ b) => a * b));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        if (numbers.Count !=\
    \ 0) {\n            foreach (long elem in numbers) {\n                sum += elem;\n\
    \                product *= elem;\n            }\n        }\n        return Tuple.Create(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return Tuple.Create(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977026
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        return new Tuple<long, long>(numbers.Sum(), numbers.Aggregate((long)1,\
    \ (acc, i) => acc * i));\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977029
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new\
    \ List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L,\
    \ 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return Tuple.Create(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977025
