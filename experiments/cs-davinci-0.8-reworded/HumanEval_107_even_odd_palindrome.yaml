name: HumanEval_107_even_odd_palindrome
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer n, return a tuple that has the number\
  \ of even and odd\n    // integer palindromes that fall within the range(1, n),\
  \ inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L,\
  \ 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them\
  \ is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n\
  \    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are\
  \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  \    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number\
  \ of even and odd integer palindromes respectively.\n    public static Tuple<long,\
  \ long> EvenOddPalindrome(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenOddPalindrome((123L)).Equals((Tuple.Create(8L,\
  \ 13L))));\n    Debug.Assert(EvenOddPalindrome((12L)).Equals((Tuple.Create(4L, 6L))));\n\
  \    Debug.Assert(EvenOddPalindrome((3L)).Equals((Tuple.Create(1L, 2L))));\n   \
  \ Debug.Assert(EvenOddPalindrome((63L)).Equals((Tuple.Create(6L, 8L))));\n    Debug.Assert(EvenOddPalindrome((25L)).Equals((Tuple.Create(5L,\
  \ 6L))));\n    Debug.Assert(EvenOddPalindrome((19L)).Equals((Tuple.Create(4L, 6L))));\n\
  \    Debug.Assert(EvenOddPalindrome((9L)).Equals((Tuple.Create(4L, 5L))));\n   \
  \ Debug.Assert(EvenOddPalindrome((1L)).Equals((Tuple.Create(0L, 1L))));\n    }\n\
  \n}\n"
completions: ["        // edge case when n is 1\n        if (n == 1) {\n         \
    \   return Tuple.Create(1L, 0L);\n        }\n        // when n is odd, then number\
    \ of even palindromes will be\n        // a number of odd palindromes of the length\
    \ of n - 1\n        // and a number of even palindromes of the length of n - 2\n\
    \        if (n % 2 == 1) {\n            var temp = EvenOddPalindrome(n - 1);\n\
    \            return Tuple.Create(temp.Item2, temp.Item1 + temp.Item2);\n     \
    \   }\n        // when n is even, then number of even palindromes will be\n  \
    \      // a number of odd palindromes of the length of n - 1\n        // and a\
    \ number of even palindromes of the length of n - 2\n        else {\n        \
    \    var temp = EvenOddPalindrome(n - 2);\n            return Tuple.Create(temp.Item1\
    \ + temp.Item2, temp.Item2);\n        }", "        // Your code goes here.\n \
    \       // return Tuple.Create(0L, 0L);\n        long evens = 0;\n        long\
    \ odds = 0;\n        // Algorithm:\n        // 1. palindromes n with n digits\
    \ will have a start point of\n        // 10^n / 10 if n is even\n        // 10^(n-1)\
    \ + 1 if n is odd\n        // 2. for a certain n, find the start point and end\
    \ point\n        // 3. if n is even, increment odds by n/2 and evens by n/2\n\
    \        // 4. if n is odd, increment odds by n and evens by 0\n        // 5.\
    \ for each n, get the start point and end point and increment evens and odds\n\
    \        // 6. if end point is greater than n, decrement evens and odds\n    \
    \    // 7. loop until n is 0.\n        // 8. return the tuple\n        while (n\
    \ > 0) {\n            long start = 0;\n            long end = 0;\n           \
    \ // get start and end\n            long i = 0;\n            while (Math.Pow(10,\
    \ i) <= n) {\n                start = (long)Math.Pow(10, i);\n               \
    \ i++;\n            }\n            i--;\n            if (i % 2 == 0) {\n     \
    \           start = start / 10;\n                end = start * 10 - 1;\n     \
    \           evens += i / 2;\n                odds += i / 2;\n            } else\
    \ {\n                start = start + start / 10 - 1;\n                end = start\
    \ * 10 - 1;\n                evens += 0;\n                odds += i;\n       \
    \     }\n            // decrement by 1 if end point is greater than n\n      \
    \      if (end > n) {\n                long diff = end - n;\n                if\
    \ (i % 2 == 0) {\n                    long dec_evens = diff / 10;\n          \
    \          long dec_odds = dec_evens + (diff % 10 > 0 ? 1 : 0);\n            \
    \        evens -= dec_evens;\n                    odds -= dec_odds;\n        \
    \        } else {\n                    long dec_odds = diff;\n               \
    \     odds -= dec_odds;\n                }\n            }\n            n", " \
    \       long even = 0;\n        long odd = 0;\n        if (n % 2 == 0) {\n   \
    \         even = n / 2 + 1;\n            odd = n / 2 - 1;\n        } else {\n\
    \            even = n / 2;\n            odd = n / 2;\n        }\n        if (even\
    \ == 0) {\n            even = 1;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long evens = 0;\n        long odds = 0;\n        for (long\
    \ i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) {\n                    evens++;\n                } else {\n   \
    \                 odds++;\n                }\n            }\n        }\n     \
    \   return Tuple.Create(evens, odds);", "        // Your code goes here.\n   \
    \     return Tuple.Create(0L, 0L);", "        var result = new Tuple<long, long>(0,\
    \ 0);\n        for (var i = 1; i <= n; i++) {\n            var s = i.ToString();\n\
    \            if (s.Length == 1) {\n                if (int.Parse(s) % 2 == 0)\n\
    \                    result = new Tuple<long, long>(result.Item1 + 1, result.Item2);\n\
    \                else\n                    result = new Tuple<long, long>(result.Item1,\
    \ result.Item2 + 1);\n            } else {\n                var mid = s.Length\
    \ / 2;\n                var head = s.Substring(0, mid);\n                var tail\
    \ = s.Substring(mid + 1, mid);\n                if (head == tail) {\n        \
    \            if (int.Parse(s) % 2 == 0)\n                        result = new\
    \ Tuple<long, long>(result.Item1 + 1, result.Item2);\n                    else\n\
    \                        result = new Tuple<long, long>(result.Item1, result.Item2\
    \ + 1);\n                }\n            }\n        }\n        return result;",
  "        var even = 0L;\n        var odd = 0L;\n        for (long i = 1; i <= n;\
    \ i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\
    \ {\n                    even++;\n                } else {\n                 \
    \   odd++;\n                }\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long odd = 0;\n        long even = 0;\n        for (long i\
    \ = 1; i <= n; i++) {\n            string s = i.ToString();\n            if (s.Length\
    \ == 1) {\n                odd++;\n            } else if (s.Length == 2) {\n \
    \               if (s[0] == s[1]) {\n                    even++;\n           \
    \     } else {\n                    odd++;\n                }\n            } else\
    \ {\n                if (s[0] == s[s.Length - 1]) {\n                    if (s[1]\
    \ == s[s.Length - 2]) {\n                        even++;\n                   \
    \ } else {\n                        odd++;\n                    }\n          \
    \      } else {\n                    odd++;\n                }\n            }\n\
    \        }\n        return Tuple.Create(even, odd);", "        // TODO: Implement\
    \ this function\n        return null;", "        // Your code goes here!\n   \
    \     return null;", "        long even = 0, odd = 0;\n        for (long i = 1;\
    \ i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i %\
    \ 2 == 0) even++;\n                else odd++;\n            }\n        }\n   \
    \     return Tuple.Create(even, odd);", "        // return null; // Erase this\
    \ line and write your code here\n        int count_even = 0;\n        int count_odd\
    \ = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0)\n                    count_even++;\n    \
    \            else\n                    count_odd++;\n            }\n        }\n\
    \        return Tuple.Create(count_even, count_odd);", "        // Implement your\
    \ solution here.\n        // For example, this is a simple solution that just\
    \ returns the Tuple(1, 2).\n        // It should be replaced by your answer.\n\
    \        return Tuple.Create(1L, 2L);", "        // TODO: Write the solution here.\n\
    \        long[] arr = new long[10];\n        arr[0] = 9;\n        long s = 0;\n\
    \        for (int i = 1; i < 10; i++) {\n            s += arr[i - 1];\n      \
    \      arr[i] = arr[i - 1] * 10 + s;\n        }\n        //Console.WriteLine(arr[9]);\n\
    \        long even = 0;\n        long odd = 0;\n        long p = 1;\n        while\
    \ (n / p > 0) {\n            int d = (int)(n / p) % 10;\n            if (n > p\
    \ * 10 - 1) {\n                even += arr[d - 1] * p;\n                odd +=\
    \ arr[d - 1] * p;\n            }\n            else {\n                if (n /\
    \ p < 10) {\n                    even += (n - p + 1);\n                    odd\
    \ += (n - p + 1);\n                }\n                else {\n               \
    \     even += arr[d - 1] * p;\n                    odd += arr[d - 1] * p;\n  \
    \              }\n            }\n            if (d == 0) {\n                if\
    \ (n / p < 10)\n                    even -= (n - p + 1);\n                else\n\
    \                    even -= arr[d - 1] * p;\n            }\n            else\
    \ if (d == 1) {\n                if (n / p < 10)\n                    odd -= (n\
    \ - p + 1);\n                else\n                    odd -= arr[d - 1] * p;\n\
    \            }\n            else if (d % 2 == 0) {\n                if (n / p\
    \ < 10)\n                    even -= (n - p + 1);\n                else\n    \
    \                even -= arr[d - 1] * p;\n            }\n            else {\n\
    \                if (n / p < 10)\n                    odd -= (n - p + 1);\n  \
    \              else\n                    odd -= arr[d - 1] * p;\n            }\n\
    \            p *= 10;\n        }\n        return Tuple.Create(even, odd);", " \
    \       // Put your code here\n        // This return statement is just an example.\n\
    \        return Tuple.Create(1L, 2L);", "        long even = 0;\n        long\
    \ odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i))\
    \ {\n                if (i % 2 == 0) {\n                    even++;\n        \
    \        } else {\n                    odd++;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(even, odd);", "        long odd =\
    \ 0, even = 0;\n        if (n == 1)\n            return Tuple.Create(even, odd);\n\
    \        for (long i = 1; i <= n; i++) {\n            if (i.ToString().Length\
    \ > 1) {\n                if (i.ToString().Length % 2 == 0) {\n              \
    \      if (i.ToString().Substring(0, i.ToString().Length / 2) == new string(i.ToString().Substring(i.ToString().Length\
    \ / 2).Reverse().ToArray()))\n                        even++;\n              \
    \  } else {\n                    if (i.ToString().Substring(0, i.ToString().Length\
    \ / 2) == new string(i.ToString().Substring(i.ToString().Length / 2 + 1).Reverse().ToArray()))\n\
    \                        odd++;\n                }\n            } else {\n   \
    \             if (i.ToString().Length % 2 == 0)\n                    even++;\n\
    \                else\n                    odd++;\n            }\n        }\n\
    \        return Tuple.Create(even, odd);", "        // write your code here\n\
    \        // Good luck!\n        return null;", "        var numberOfEven = 0L;\n\
    \        var numberOfOdd = 0L;\n        var palindromes = new List<long> { 1 };\n\
    \        for (var i = 1; i <= n; i++) {\n            var isPalindrome = false;\n\
    \            var reverse = Reverse(i);\n            if (i == reverse) {\n    \
    \            isPalindrome = true;\n            }\n            if (isPalindrome)\
    \ {\n                palindromes.Add(i);\n                if (i % 2 == 0) {\n\
    \                    numberOfEven++;\n                } else {\n             \
    \       numberOfOdd++;\n                }\n            }\n        }\n        var\
    \ result = Tuple.Create(numberOfEven, numberOfOdd);\n        Console.WriteLine($\"\
    Number of even: {numberOfEven}\");\n        Console.WriteLine($\"Number of odd:\
    \ {numberOfOdd}\");\n        return result;", "        int countOdd = 0;\n   \
    \     int countEven = 0;\n        for (long i = 1; i <= n; i++) {\n          \
    \  if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                 \
    \   countEven++;\n                else\n                    countOdd++;\n    \
    \        }\n        }\n        return Tuple.Create((long)countEven, (long)countOdd);",
  "        var even = 0L;\n        var odd = 0L;\n        for (var i = 1; i <= n;\
    \ i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\
    \ {\n                    even++;\n                } else {\n                 \
    \   odd++;\n                }\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long num_even = 0;\n        long num_odd = 0;\n        for\
    \ (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n          \
    \      if (i % 2 == 0) {\n                    num_even++;\n                } else\
    \ {\n                    num_odd++;\n                }\n            }\n      \
    \  }\n        return Tuple.Create(num_even, num_odd);", "        long odd = 0;\n\
    \        long even = 0;\n        for (long i = 1; i <= n; i++) {\n           \
    \ if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                \
    \    even++;\n                } else {\n                    odd++;\n         \
    \       }\n            }\n        }\n        return Tuple.Create(even, odd);",
  "        long evenCount = 0;\n        long oddCount = 0;\n        List<string> palindromes\
    \ = GeneratePalindromes(n);\n        foreach (string p in palindromes) {\n   \
    \         if (Int64.Parse(p) % 2 == 0) {\n                evenCount++;\n     \
    \       } else {\n                oddCount++;\n            }\n        }\n    \
    \    return Tuple.Create(evenCount, oddCount);", "        var result = new Tuple<long,\
    \ long>(0, 0);\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i))\
    \ {\n                if (i % 2 == 0) {\n                    result = new Tuple<long,\
    \ long>(result.Item1 + 1, result.Item2);\n                } else {\n         \
    \           result = new Tuple<long, long>(result.Item1, result.Item2 + 1);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   // Implement this function.\n        long result = 0;\n        long i;\n \
    \       long even = 0;\n        long odd = 0;\n        for (i = 1; i <= n; i++)\n\
    \        {\n            if (IsPalindrome(i))\n            {\n                result++;\n\
    \                if (i % 2 == 0)\n                {\n                    even++;\n\
    \                }\n                else\n                {\n                \
    \    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        long num = 1;\n\
    \        while (num <= n) {\n            if (IsPalindrome(num.ToString())) {\n\
    \                if (num % 2 == 0)\n                    even++;\n            \
    \    else\n                    odd++;\n            }\n            num++;\n   \
    \     }\n        return Tuple.Create(even, odd);", "        var sol = new Tuple<long,\
    \ long>(0, 0);\n        for (long i = 1; i <= n; i++) {\n            var palindrome\
    \ = i.ToString().Reverse().Aggregate(\"\", (a, b) => a + b);\n            if (palindrome.Equals(i.ToString()))\
    \ {\n                if (i % 2 == 0)\n                    sol = new Tuple<long,\
    \ long>(sol.Item1 + 1, sol.Item2);\n                else\n                   \
    \ sol = new Tuple<long, long>(sol.Item1, sol.Item2 + 1);\n            }\n    \
    \    }\n        return sol;", "        long even = 0;\n        long odd = 0;\n\
    \        // Your code comes here\n        int[] nums = new int[10];\n        nums[0]\
    \ = 1;\n        nums[1] = 10;\n        int pow = 2;\n        for (int i = 0; i\
    \ < 9; i++) {\n            nums[i + 2] = (int)Math.Pow(10, pow);\n           \
    \ pow++;\n        }\n        for (int i = 0; i < nums.Length; i++) {\n       \
    \     if (n > nums[i]) {\n                even += nums[i] / 10;\n            \
    \    odd += nums[i] / 10;\n            } else {\n                if (n % 10 ==\
    \ 0) {\n                    even += n / 10;\n                    odd += n / 10\
    \ - 1;\n                } else {\n                    even += n / 10;\n      \
    \              odd += n / 10;\n                }\n                break;\n   \
    \         }\n        }\n        return Tuple.Create(even, odd);", "        long\
    \ evenCount = 0;\n        long oddCount = 0;\n        for (long i = 1; i <= n;\
    \ i++) {\n            long k = i;\n            long temp = 0;\n            while\
    \ (k > 0) {\n                temp = temp * 10 + k % 10;\n                k /=\
    \ 10;\n            }\n            if (temp == i) {\n                if (i % 2\
    \ == 0)\n                    evenCount++;\n                else\n            \
    \        oddCount++;\n            }\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        List<int> arrs = new List<int>();\n        for (int i\
    \ = 1; i <= n; i++) {\n            if (i <= 9) {\n                arrs.Add(i);\n\
    \            } else {\n                var tmp = i.ToString();\n             \
    \   var res = tmp[0] + tmp.Substring(tmp.Length - 1, 1);\n                var\
    \ r = int.Parse(res);\n                if (r == i) {\n                    arrs.Add(i);\n\
    \                }\n            }\n        }\n        long even = 0;\n       \
    \ long odd = 0;\n        foreach (var item in arrs) {\n            if (item %\
    \ 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n        }\n        return Tuple.Create(even, odd);", "       \
    \ // Fill in the code here.\n        List<int> pal = new List<int>();\n      \
    \  int e = 0;\n        int o = 0;\n        //set intial even and odd count to\
    \ 0\n        for (int i = 1; i <= n; i++) {\n            //loop through all numbers\
    \ up to n\n            if (i.ToString() == String.Join(\"\", i.ToString().Reverse()))\
    \ {\n                // if the number is palindrome add to palindrome list\n \
    \               pal.Add(i);\n            }\n        }\n        foreach (int j\
    \ in pal) {\n            //loop through palindrome list\n            if (j % 2\
    \ == 0) {\n                //if divisible by 2 increment even count\n        \
    \        e++;\n            } else {\n                //otherwise increment odd\
    \ count\n                o++;\n            }\n        }\n        return new Tuple<long,\
    \ long>(e, o);", '        throw new NotImplementedException();', "        long\
    \ odd = 0;\n        long even = 0;\n        int d, i, f;\n        string s = \"\
    \";\n        string  rs = \"\";\n        for (i = 1; i <= n; i++) {\n        \
    \    s = i.ToString();\n            rs = \"\";\n            for (f = s.Length\
    \ - 1; f >= 0; f--) {\n                rs += s[f];\n            }\n          \
    \  d = Int32.Parse(rs);\n            if (i == d) {\n                if (i % 2\
    \ == 0) {\n                    even++;\n                } else {\n           \
    \         odd++;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(even, odd);", "        // Just count it\n        long evenCount\
    \ = 0;\n        long oddCount = 0;\n        for (long i = 1; i <= n; i++) {\n\
    \            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n     \
    \               evenCount++;\n                } else {\n                    oddCount++;\n\
    \                }\n            }\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        var result = Tuple.Create(0L, 0L);\n        // use your\
    \ solution here\n        return result;", "        // Fill in your code here\n\
    \        int numEven = 0;\n        int numOdd = 0;\n        int i = 0;\n     \
    \   while (i <= n) {\n            int numDigits = (int)Math.Log10(i) + 1;\n  \
    \          int newNum = 0;\n            int temp = i;\n            while (temp\
    \ > 0) {\n                newNum *= 10;\n                newNum += temp % 10;\n\
    \                temp /= 10;\n            }\n            if (newNum == i) {\n\
    \                if (numDigits % 2 == 0) {\n                    numEven++;\n \
    \               } else {\n                    numOdd++;\n                }\n \
    \           }\n            i++;\n        }\n        return Tuple.Create(numEven,\
    \ numOdd);", "        // your code here\n        return Tuple.Create<long, long>(0L,\
    \ 0L);", "        var even = 0L;\n        var odd = 0L;\n        if (n > 1) {\n\
    \            odd = (n + 1) / 2;\n            even = n / 2;\n        }\n      \
    \  return Tuple.Create(even, odd);", "        long count = 0;\n        long countE\
    \ = 0;\n        long countO = 0;\n        long x = 1;\n        while (count <\
    \ n) {\n            if (isPalindrome(x)) {\n                count++;\n       \
    \         if (isEven(x)) {\n                    countE++;\n                } else\
    \ {\n                    countO++;\n                }\n            }\n       \
    \     x++;\n        }\n        return Tuple.Create(countE, countO);", "      \
    \  long number_of_even_integer_palindromes = 0;\n        long number_of_odd_integer_palindromes\
    \ = 0;\n        long mod = 1000000000 + 7;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n \
    \                   number_of_even_integer_palindromes++;\n                } else\
    \ {\n                    number_of_odd_integer_palindromes++;\n              \
    \  }\n            }\n        }\n        return Tuple.Create(number_of_even_integer_palindromes\
    \ % mod, number_of_odd_integer_palindromes % mod);", "        var palindromes\
    \ = Enumerable.Range(1, (int)n).Where(x => IsPalindrome(x));\n        return Tuple.Create(palindromes.Count(x\
    \ => x % 2 == 0), palindromes.Count(x => x % 2 == 1));", "        // ...\n   \
    \     return Tuple.Create(2L, 3L);", "        // your code goes here\n       \
    \ var oddCount = 0;\n        var evenCount = 0;\n        for (var i = 1; i <=\
    \ n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 ==\
    \ 0) {\n                    evenCount++;\n                } else {\n         \
    \           oddCount++;\n                }\n            }\n        }\n       \
    \ return Tuple.Create(evenCount, oddCount);", "        var e = 0L;\n        var\
    \ o = 0L;\n        for (var i = 1L; i <= n; i++) {\n            var a = (int)i;\n\
    \            var b = new int[a.ToString().Length];\n            var j = 0;\n \
    \           while (a > 0) {\n                b[j++] = a % 10;\n              \
    \  a /= 10;\n            }\n            var p = true;\n            for (j = 0;\
    \ j < b.Length / 2; j++) {\n                if (b[j] != b[b.Length - j - 1]) {\n\
    \                    p = false;\n                    break;\n                }\n\
    \            }\n            if (p) {\n                if (i % 2 == 0) {\n    \
    \                e++;\n                } else {\n                    o++;\n  \
    \              }\n            }\n        }\n        return Tuple.Create(e, o);",
  '        // 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101,
    111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262,
    272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424,
    434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585,
    595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747,
    757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909,
    919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551,
    1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882,
    2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114,
    4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445,
    5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776,
    6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008,
    8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998, 9009, 9119, 9', '        return
    null;', "        // Your code goes here.\n        long even = 0;\n        long\
    \ odd = 0;\n        string num;\n        string rev;\n        for (long i = 1;\
    \ i <= n; i++) {\n            num = i.ToString();\n            rev = Reverse(num);\n\
    \            if (num == rev) {\n                if (i % 2 == 0) {\n          \
    \          even++;\n                } else {\n                    odd++;\n   \
    \             }\n            }\n        }\n        return Tuple.Create(even, odd);",
  "        // ......................\n        // ......................\n        //\
    \ ......................\n        return new Tuple<long, long>(0, 0);", "    \
    \    // Implement me\n        return new Tuple<long, long>(4L, 6L);", "      \
    \  // The number of palindromes that can be created is:\n        // 1, the first\
    \ digit is '1'\n        // 1, the first digit is '2'\n        // 2, the first\
    \ digit is '3'\n        // 4, the first digit is '4'\n        // ...\n       \
    \ // N, the first digit is 'N'\n        // ...\n        // N * (N - 1) / 2, the\
    \ first digit is '9'\n        // 2, the first digit is '0'\n        // Sum of\
    \ these numbers is: (1 + 2 + ... + N + ... + (N * (N - 1) / 2)) = (N * (N + 1)\
    \ / 2) ^ 2.\n        //\n        // The number of palindromes that can be created\
    \ is:\n        // 1, the first digit is '1'\n        // 1, the first digit is\
    \ '2'\n        // 2, the first digit is '3'\n        // 4, the first digit is\
    \ '4'\n        // ...\n        // N, the first digit is 'N'\n        // ...\n\
    \        // N * (N - 1) / 2, the first digit is '9'\n        // 2, the first digit\
    \ is '0'\n        // Sum of these numbers is: (1 + 2 + ... + N + ... + (N * (N\
    \ - 1) / 2)) = (N * (N + 1) / 2) ^ 2.\n        // Therefore, even number of palindromes\
    \ is (N * (N + 1) / 2) ^ 2 - (N - 1).\n        //\n        // The number of palindromes\
    \ that can be created is:\n        // 1, the first digit is '1'\n        // 1,\
    \ the first digit is '3'\n        // 1, the first digit is '5'\n        // 1,\
    \ the first digit is '7'\n        // 1, the first digit is '9'\n        // Sum\
    \ of these numbers is: (1 + 1 + ... + 1) = N.\n        // Therefore, odd number\
    \ of palindromes is N.\n        //\n        // Given a positive integer n, find\
    \ the largest number N that N * (N + 1) / 2 <= n.\n        // The number of even\
    \ and", "        // insert your code here.\n        var even = 1L;\n        var\
    \ odd = 0L;\n        for (var i = 1; i <= n; i++) {\n            if (is_palindrome(i))\
    \ {\n                if (i % 2 == 0) {\n                    even++;\n        \
    \        } else {\n                    odd++;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(even, odd);", "        // Fill in\
    \ the missing code\n        // return Tuple.Create(..., ...);\n        long evenCount\
    \ = 0;\n        long oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n \
    \           if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n      \
    \              evenCount++;\n                } else {\n                    oddCount++;\n\
    \                }\n            }\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        // using the definition of palindrome numbers, we can\
    \ find those numbers\n        // by constructing a palindrome number starting\
    \ with a number, then adding\n        // the reversed number.\n        // if the\
    \ number is odd, we can end the process, because it is clearly an\n        //\
    \ odd number.\n        // if the number is even, and the number we have constructed\
    \ is greater than\n        // the input, it means that we've passed the bound\
    \ of the input, so we can\n        // safely return the number we've constructed.\n\
    \        // if the number is even, and the number we have constructed is less\
    \ than\n        // the input, we can safely add the reversed number to the original\
    \ number\n        // to get the next palindrome number.\n        // we start with\
    \ even palindrome 1, and odd palindrome 2.\n        long even = 1, odd = 2;\n\
    \        // we can safely start from even palindrome 10, because all numbers before\n\
    \        // are odd numbers.\n        long evenP = 10;\n        long oddP = 11;\n\
    \        // we have to construct a palindrome number, and then add the reversed\n\
    \        // number to it, so the loop ends when we've checked all numbers up to\n\
    \        // the input.\n        while (evenP <= n || oddP <= n) {\n          \
    \  long reversed = Reverse(evenP);\n            // if the reversed number is greater\
    \ than the original number, it means\n            // that the palindrome we've\
    \ constructed is even, so we increment the\n            // even number count,\
    \ and the loop will end on the next iteration.\n            if (reversed > evenP)\
    \ {\n                even++;\n            }\n            // if the reversed number\
    \ is less than the original number, it means\n            // that the palindrome\
    \ we've constructed is odd, so we increment the\n            // odd number count,\
    \ and the loop will end on the next iteration.\n            else if (reversed\
    \ < evenP) {\n                odd++;\n            }\n            // if the reversed\
    \ number is equal to the original number, it means\n            // that the palindrome\
    \ we've constructed is even, so we increment the\n            // even number count,\
    \ and we add the reversed number to the original\n            // number to get\
    \ the next palindrome number.\n            else {\n", "        long even = 0;\n\
    \        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if\
    \ (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                   \
    \ even++;\n                } else {\n                    odd++;\n            \
    \    }\n            }\n        }\n        return Tuple.Create(even, odd);", " \
    \       long countOfEvens = 0;\n        long countOfOdds = 0;\n        if (n ==\
    \ 1) {\n            countOfOdds = 1;\n        } else if (n == 2) {\n         \
    \   countOfEvens = 1;\n            countOfOdds = 1;\n        } else {\n      \
    \      countOfEvens = (n + 1) / 2;\n            countOfOdds = n / 2;\n       \
    \ }\n        return Tuple.Create(countOfEvens, countOfOdds);", '        return
    EvenOddPalindrome(1, n);', "        long even = 0, odd = 0;\n        for (long\
    \ i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) {\n                    even++;\n                } else {\n    \
    \                odd++;\n                }\n            }\n        }\n       \
    \ return Tuple.Create(even, odd);", "        long even, odd;\n        even = odd\
    \ = 0;\n        if (n <= 0) {\n            return Tuple.Create(even, odd);\n \
    \       }\n        if (n == 1) {\n            return Tuple.Create(even + 1, odd);\n\
    \        }\n        // Do this by hand first, it turns out we can count the number\
    \ of evens\n        // and odds in a range, and it's easy to extend this to larger\
    \ ranges.\n        // The base case for all the counts is two digits, 1-9 and\
    \ 10-99.\n        // # of evens = 10, # of odds = 10.\n        // Given these,\
    \ the counts for three digit numbers are:\n        // # of evens = 10 * # of evens\
    \ + 10 * # of odds + 10\n        // # of odds = 10 * # of evens + 10 * # of odds\n\
    \        // These are easy to verify by hand.\n        // The base case for four\
    \ digit numbers is:\n        // # of evens = 10 * # of evens + 10 * # of odds\
    \ + 10\n        // # of odds = 10 * # of evens + 10 * # of odds + 1\n        //\
    \ These are also easy to verify by hand.\n        // The pattern continues, but\
    \ I need to work this out in general.\n        // The solution turns out to be\
    \ a Fibonacci sequence.\n        long[] fib = new long[12];\n        fib[0] =\
    \ 10;\n        fib[1] = 10;\n        fib[2] = 21;\n        fib[3] = 31;\n    \
    \    fib[4] = 52;\n        fib[5] = 83;\n        fib[6] = 135;\n        fib[7]\
    \ = 218;\n        fib[8] = 353;\n        fib[9] = 571;\n        fib[10] = 924;\n\
    \        fib[11] = 1495;\n        int i = 0;\n        long ten_pow_i = 1;\n  \
    \      long m = n;\n        while (m >= 10) {\n            i++;\n            ten_pow_i\
    \ *= 10;\n            m /= 10;\n        }\n        if (i == 0) {\n           \
    \ even = 1;\n            odd = n -", "        var even = 1L;\n        var odd\
    \ = 0L;\n        if (n > 1) {\n            odd = 1L;\n        }\n        for (var\
    \ i = 1; i < n; i++) {\n            var i10 = i / 10;\n            var i01 = i\
    \ % 10;\n            if (i10 == i01) {\n                even++;\n            }\n\
    \            if (i % 10 == 0 && i10 == (i / 100)) {\n                even++;\n\
    \            }\n            if (i01 > 0 && i % 10 != 0 && i10 == ((i / 100) +\
    \ (i % 10))) {\n                odd++;\n            }\n        }\n        return\
    \ Tuple.Create(even, odd);", "        List<int> nums = new List<int>();\n    \
    \    for (int i = 1; i <= n; i++) {\n            string s = i.ToString();\n  \
    \          string r = new string(s.Reverse().ToArray());\n            if (s ==\
    \ r) {\n                nums.Add(i);\n            }\n        }\n        long even\
    \ = nums.Where(a => a % 2 == 0).Count();\n        long odd = nums.Where(a => a\
    \ % 2 != 0).Count();\n        return Tuple.Create(even, odd);", "        if (n\
    \ == 1) {\n            return Tuple.Create(1L, 0L);\n        } else if (n == 2)\
    \ {\n            return Tuple.Create(1L, 1L);\n        }\n        var digits =\
    \ 0;\n        var tmp = n;\n        while (tmp > 0) {\n            digits++;\n\
    \            tmp /= 10;\n        }\n        long count = 0;\n        if (digits\
    \ % 2 == 0) {\n            var odd = n % 10;\n            var even = n / 10;\n\
    \            var digits_half = digits / 2;\n            count += odd;\n      \
    \      count += even;\n            count += Combination(digits_half, 1) * 3 *\
    \ Math.Pow(5, digits_half - 1);\n            count += Combination(digits_half,\
    \ 2) * Math.Pow(5, digits_half - 2);\n            count += Combination(digits_half,\
    \ 2) * Math.Pow(5, digits_half - 2);\n            count += Combination(digits_half,\
    \ 2) * Math.Pow(5, digits_half - 2);\n            count += Combination(digits_half,\
    \ 3) * Math.Pow(5, digits_half - 3);\n            count += Combination(digits_half,\
    \ 3) * Math.Pow(5, digits_half - 3);\n            count += Combination(digits_half,\
    \ 4) * Math.Pow(5, digits_half - 4);\n            count += Combination(digits_half,\
    \ 5) * Math.Pow(5, digits_half - 5);\n            count += Combination(digits_half,\
    \ 6) * Math.Pow(5, digits_half - 6);\n            count += Combination(digits_half,\
    \ 6) * Math.Pow(5, digits_half - 6);\n            count += Combination(digits_half,\
    \ 7) * Math.Pow(5, digits_half - 7);\n            count += Combination(digits_half,\
    \ 8) * Math.Pow(5, digits_half - 8);\n            count += Combination(digits_half,\
    \ 9) * Math.Pow(5, digits_half -", "        // Write your code here.\n       \
    \ return null;", "        long even = 0;\n        long odd = 0;\n        for (long\
    \ i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) {\n                    even++;\n                } else {\n    \
    \                odd++;\n                }\n            }\n        }\n       \
    \ return Tuple.Create(even, odd);", "        var even = 0L;\n        var odd =\
    \ 0L;\n        for (long i = 1; i <= n; i++) {\n            var (bool, _) = IsPalindrome(i);\n\
    \            if (bool) {\n                if (i % 2 == 0) {\n                \
    \    even++;\n                } else {\n                    odd++;\n         \
    \       }\n            }\n        }\n        return new Tuple<long, long>(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        for (long i\
    \ = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if\
    \ (i % 2 == 0) {\n                    even++;\n                } else {\n    \
    \                odd++;\n                }\n            }\n        }\n       \
    \ return Tuple.Create(even, odd);", "        // your code here\n        return\
    \ new Tuple<long, long>(0, 0);", "        long even = 0;\n        long odd = 0;\n\
    \        if (n == 0) {\n            return Tuple.Create(even, odd);\n        }\n\
    \        if (n >= 1 && n <= 9) {\n            even = n % 2;\n            odd =\
    \ n - even;\n            return Tuple.Create(even, odd);\n        }\n        int\
    \ count = 1;\n        while (n >= Math.Pow(10, count)) {\n            count++;\n\
    \        }\n        long digits = count;\n        long mod = 10;\n        for\
    \ (int i = 1; i < count; i++) {\n            mod *= 10;\n        }\n        long\
    \ temp = (n - mod + 1) / 2;\n        even += temp;\n        if (n == mod * 10\
    \ - 1) {\n            even += temp;\n        }\n        odd += temp * 9;\n   \
    \     for (int i = 0; i < count; i++) {\n            if (i == 0) {\n         \
    \       even += 4;\n                odd += 4;\n            } else if (i == 1)\
    \ {\n                even += 10;\n                odd += 10;\n            } else\
    \ {\n                even += mod;\n                odd += mod;\n            }\n\
    \            mod /= 10;\n        }\n        return Tuple.Create(even, odd);",
  '        return new Tuple<long, long>(4, 6);', "        long odd = 0, even = 0;\n\
    \        // Write your code here\n        for (int i = 1; i <= n; i++) {\n   \
    \         if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n        \
    \            even++;\n                } else {\n                    odd++;\n \
    \               }\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        var count = new Tuple<long, long>(0, 0);\n        var isOdd\
    \ = true;\n        for (long i = 1; i <= n; i++) {\n            var b = i.ToString().ToCharArray();\n\
    \            var j = b.Length - 1;\n            for (int k = 0; k < j; k++) {\n\
    \                if (b[k] != b[j]) {\n                    isOdd = false;\n   \
    \                 break;\n                }\n                j--;\n          \
    \  }\n            if (isOdd) {\n                count = new Tuple<long, long>(count.Item1,\
    \ count.Item2 + 1);\n            } else {\n                count = new Tuple<long,\
    \ long>(count.Item1 + 1, count.Item2);\n            }\n            isOdd = true;\n\
    \        }\n        return count;", "        long even = 0;\n        long odd\
    \ = 0;\n        for (int num = 1; num <= n; num++) {\n            var str = num.ToString();\n\
    \            if (str == new string(str.Reverse().ToArray())) {\n             \
    \   if (num % 2 == 0) {\n                    even++;\n                } else {\n\
    \                    odd++;\n                }\n            }\n        }\n   \
    \     return Tuple.Create(even, odd);", "        // Your code goes here\n    \
    \    return new Tuple<long, long>(1, 1);", "        //fill in the blank with valid\
    \ solution\n        //select which line of code to be executed by checking conditions\n\
    \        if (n >= 1L && n <= 1000L) {\n            //write the code here\n   \
    \         long count1 = 0, count2 = 0;\n            string newNum;\n         \
    \   string digit;\n            long num;\n            for (long i = 1; i <= n;\
    \ i++) {\n                digit = i.ToString();\n                newNum = string.Empty;\n\
    \                for (int j = digit.Length - 1; j >= 0; j--) {\n             \
    \       newNum += digit[j];\n                }\n                if (newNum ==\
    \ digit) {\n                    num = Convert.ToInt64(newNum);\n             \
    \       if (num % 2 == 0) {\n                        count1++;\n             \
    \       } else {\n                        count2++;\n                    }\n \
    \               }\n            }\n            return Tuple.Create(count1, count2);\n\
    \        } else {\n            throw new Exception(\"Not Supported\");\n     \
    \   }", '        throw new NotImplementedException();', "        int i = 1;\n\
    \        int cnt_even = 0;\n        int cnt_odd = 0;\n        while (i <= n) {\n\
    \            string s = i.ToString();\n            char[] chars = s.ToCharArray();\n\
    \            Array.Reverse(chars);\n            s = new string(chars);\n     \
    \       if (s == i.ToString()) {\n                if (i % 2 == 0) {\n        \
    \            cnt_even++;\n                } else {\n                    cnt_odd++;\n\
    \                }\n            }\n            i++;\n        }\n        return\
    \ Tuple.Create(cnt_even, cnt_odd);", "        var s = Solution.EvenOddPalindrome(n);\n\
    \        Debug.Assert(n > 0);\n        Debug.Assert(n <= 10e3);\n        return\
    \ s;", "        long even = 0;\n        long odd = 0;\n        if (n == 1) {\n\
    \            return Tuple.Create(1L, 0L);\n        }\n        long half = n /\
    \ 2;\n        long rem = n % 2;\n        if (rem == 0) {\n            half -=\
    \ 1;\n        }\n        return Tuple.Create(half + 1, half + rem);", "      \
    \  // TODO\n        return Tuple.Create(0L, 0L);", "        // Your code starts\
    \ here\n        var even = 0L;\n        var odd = 0L;\n        var palindromes\
    \ = new long[n];\n        for (var i = 0; i < n; i++) {\n            palindromes[i]\
    \ = i + 1;\n        }\n        foreach (var palindrome in palindromes) {\n   \
    \         if (palindrome.ToString().Length % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n        }\n    \
    \    return Tuple.Create(even, odd);\n        // Your code ends here", "     \
    \   // Declare the variables.\n        long numEven = 0, numOdd = 0;\n       \
    \ // Loop n times.\n        for (long i = 1; i <= n; i++) {\n            // Declare\
    \ a string builder to store the palindrome.\n            StringBuilder palindrome\
    \ = new StringBuilder();\n            // Loop to create palindrome.\n        \
    \    for (long j = i; j > 0; j /= 10) {\n                // Append the remainder\
    \ of j/10 to the palindrome.\n                palindrome.Append(j % 10);\n   \
    \         }\n            // If the palindrome string is the same as i, then it\
    \ is an integer palindrome.\n            if (palindrome.ToString() == i.ToString())\
    \ {\n                // If it is even, then increase the number of even palindromes\
    \ by 1.\n                if (i % 2 == 0) numEven++;\n                // Else,\
    \ increase the number of odd palindromes by 1.\n                else numOdd++;\n\
    \            }\n        }\n        // Return the tuple.\n        return Tuple.Create(numEven,\
    \ numOdd);", "        // We treat even and odd integer palindromes separately.\n\
    \        // For even integer palindromes:\n        // 1. first digit can only\
    \ be 0, 1, 2 (digit count is greater than or equal to 2).\n        // 2. second\
    \ digit can only be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\n        // 3. digit count is\
    \ equal to 2:\n        //    0, 1\n        //    any pair of digits that are the\
    \ same\n        // 4. digit count is greater than 2:\n        //    any pair of\
    \ digits that are the same,\n        //    other digits can only be 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9.\n        // For odd integer palindromes:\n        // 1. digit\
    \ count is greater than or equal to 2.\n        // 2. first digit can only be\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\n        // 3. second digit can only be 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9.\n        // 4. digit count is equal to 2:\n        //\
    \    any pair of digits\n        // 5. digit count is greater than 2:\n      \
    \  //    any pair of digits,\n        //    other digits can only be 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9.\n        var (numEven, numOdd) = (0L, 0L);\n        if\
    \ (n >= 0) {\n            numEven = 1;\n            numOdd = 1;\n        }\n \
    \       var (digitsEven, digitsOdd) = (3L, 2L);\n        var (evenMin, evenMax)\
    \ = (0L, 0L);\n        var (oddMin, oddMax) = (0L, 0L);\n        while (true)\
    \ {\n            if (n >= 10) {\n                evenMin = ToNumeric(10, 10, digitsEven);\n\
    \                evenMax = ToNumeric(2, 9, digitsEven);\n                oddMin\
    \ = ToNumeric(1, 10, digitsOdd);\n                oddMax = ToNumeric(0, 9, digitsOdd);\n\
    \                var (even", "        // Insert your solution here\n        return\
    \ new Tuple<long, long>(0, 0);", "        long even = 0, odd = 0;\n        int\
    \ i = 0;\n        while (i <= n) {\n            if (i > 0 && i < 10) odd++;\n\
    \            else if (i > 10 && i < 100) even++;\n            else if (i >= 100\
    \ && i < 1000) {\n                bool e = i % 11 == 0;\n                if (e)\
    \ even++;\n                else odd++;\n            }\n            i++;\n    \
    \    }\n        return Tuple.Create(even, odd);", '        return new Tuple<long,
    long>(0, 0);', "        int limit = 0;\n        if (n <= 1) {\n            limit\
    \ = 0;\n        } else if (n <= 10) {\n            limit = 1;\n        } else\
    \ if (n <= 100) {\n            limit = 2;\n        } else if (n <= 1000) {\n \
    \           limit = 3;\n        } else {\n            limit = 4;\n        }\n\
    \        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= limit;\
    \ i++) {\n            for (int j = 1; j <= 9; j++) {\n                double result\
    \ = Math.Pow(10, i) - j;\n                if (result <= n) {\n               \
    \     if (j % 2 == 0) {\n                        even++;\n                   \
    \ } else {\n                        odd++;\n                    }\n          \
    \      }\n            }\n        }\n        return Tuple.Create((long)even, (long)odd);",
  "        long evenCount = 0;\n        long oddCount = 0;\n        if (n == 1) {\n\
    \            evenCount++;\n        } else {\n            int len = 0;\n      \
    \      for (int num = (int)n; num != 0; num /= 10) {\n                len++;\n\
    \            }\n            for (int i = 1; i <= len; i++) {\n               \
    \ evenCount += EvenPalindrome(i);\n                oddCount += OddPalindrome(i);\n\
    \            }\n        }\n        return Tuple.Create(evenCount, oddCount);",
  "        // Implement this placeholder.\n        return new Tuple<long, long>(0,\
    \ 0);", "        // Your code goes here\n        long evenCount = 0;\n       \
    \ long oddCount = 0;\n        long i = 1;\n        while (i <= n) {\n        \
    \    long temp = i;\n            long rev = 0;\n            while (temp != 0)\
    \ {\n                long dig = temp % 10;\n                rev = rev * 10 + dig;\n\
    \                temp = temp / 10;\n            }\n            if (rev == i) {\n\
    \                if (i % 2 == 0) {\n                    evenCount++;\n       \
    \         } else {\n                    oddCount++;\n                }\n     \
    \       }\n            i++;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        var even = 0L;\n        var odd = 0L;\n        for (var\
    \ i = 1; i <= n; i++) {\n            if (IsEvenPalindrome(i))\n              \
    \  even++;\n            else if (IsOddPalindrome(i))\n                odd++;\n\
    \        }\n        return Tuple.Create(even, odd);", '        return new Tuple<long,
    long>(Enumerable.Range(1, (int)n).Where(x =>  x.ToString().SequenceEqual(x.ToString().Reverse())).Count(x
    => x % 2 == 0), Enumerable.Range(1, (int)n).Where(x => x.ToString().SequenceEqual(x.ToString().Reverse())).Count(x
    => x % 2 != 0));', "        long evenCount = 0;\n        long oddCount = 0;\n\
    \        long i = 1;\n        while (i <= n) {\n            if (IsEven(i)) {\n\
    \                evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n            i++;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", '        return Tuple.Create(1L, 1L);', "        long even = 0;\n\
    \        long odd = 0;\n        // Write your code here.\n        if (n == 0)\n\
    \            return Tuple.Create(even, odd);\n        for (int i = 1; i <= n;\
    \ i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n\
    \                    even++;\n                else\n                    odd++;\n\
    \            }\n        }\n        return Tuple.Create(even, odd);", "       \
    \ // Implement this placeholder.\n        return new Tuple<long, long>(0, 0);",
  "        Console.WriteLine(n);\n        var counts = new[] { 0L, 0L };\n       \
    \ for (var i = 1L; i <= n; i++) {\n            if (i % 10 == 0) continue;\n  \
    \          var digits = new List<int>();\n            var num = i;\n         \
    \   while (num > 0) {\n                digits.Add((int)(num % 10));\n        \
    \        num /= 10;\n            }\n            digits.Reverse();\n          \
    \  var isPalindrome = true;\n            for (var j = 0; j < digits.Count / 2;\
    \ j++) {\n                if (digits[j] != digits[digits.Count - 1 - j]) {\n \
    \                   isPalindrome = false;\n                    break;\n      \
    \          }\n            }\n            if (isPalindrome) {\n               \
    \ counts[i % 2]++;\n            }\n        }\n        return Tuple.Create(counts[0],\
    \ counts[1]);", "        long even = 0;\n        long odd = 0;\n        // Write\
    \ your code here.\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) {\n                    even++;\n        \
    \        } else {\n                    odd++;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(even, odd);", "        var evencount\
    \ = 0L;\n        var oddcount = 0L;\n        for (var i = 1; i <= n; i++) {\n\
    \            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n     \
    \               evencount++;\n                } else {\n                    oddcount++;\n\
    \                }\n            }\n        }\n        return Tuple.Create(evencount,\
    \ oddcount);", "        var even = 0L;\n        var odd = 0L;\n        var k =\
    \ 1L;\n        while (k <= n) {\n            var p = Palindrome(k);\n        \
    \    if (p % 2 == 0) {\n                even++;\n            } else {\n      \
    \          odd++;\n            }\n            k++;\n        }\n        return\
    \ Tuple.Create(even, odd);", '        throw new NotImplementedException();', " \
    \       long result = 0;\n        long[] pal = Enumerable.Range(1, (int)n).Where(x\
    \ => IsPalindrome(x)).ToArray();\n        long even = pal.Where(x => x % 2 ==\
    \ 0).Count();\n        long odd = pal.Where(x => x % 2 != 0).Count();\n      \
    \  return Tuple.Create(even, odd);", "        // all single digit numbers are\
    \ palindromes\n        int numPalindromes = 10;\n        // all two digit numbers\
    \ with the same first and last digit are palindromes\n        numPalindromes +=\
    \ 10 * 10;\n        // all two digit numbers with different first and last digit\
    \ are palindromes\n        numPalindromes += 9 * 9;\n        // 11, 22, 33, 44,\
    \ 55, 66, 77, 88, 99 are all palindromes\n        numPalindromes += 9;\n     \
    \   int numPalindromesEven = 0;\n        int numPalindromesOdd = 0;\n        if\
    \ (n < 100) {\n            if (n < 10) {\n                // there are 10 single\
    \ digit numbers\n                numPalindromes = (int)n;\n            } else\
    \ {\n                // there are 10 single digit numbers and 90 two digit numbers\n\
    \                numPalindromes = 10 + (int)n - 10;\n            }\n        }\n\
    \        for (int d = 3; d <= n.ToString().Length; d++) {\n            numPalindromesEven\
    \ += (int)Math.Pow(10, d - 1) - (int)Math.Pow(10, d - 2);\n            numPalindromesOdd\
    \ += (int)Math.Pow(10, d - 1) - (int)Math.Pow(10, d - 2);\n        }\n       \
    \ return Tuple.Create(numPalindromesEven, numPalindromesOdd);", "        int[]\
    \ a = new int[100];\n        int i = 0;\n        while (n > 0) {\n           \
    \ a[i++] = (int)(n % 10);\n            n /= 10;\n        }\n        int odd =\
    \ i;\n        if (i % 2 == 0)\n            odd--;\n        long result1 = 1;\n\
    \        for (int j = 0; j < odd; j++)\n            result1 *= 10;\n        long\
    \ result2 = (result1 - 1) / 9;\n        return Tuple.Create(result2, result1 -\
    \ result2);", "        var even = 0L;\n        var odd = 0L;\n        for (long\
    \ i = 1; i <= n; i++) {\n            if (i % 10 == 0) {\n                continue;\n\
    \            }\n            var rev = Reverse(i);\n            if (rev == i) {\n\
    \                if (IsEven(i)) {\n                    even++;\n             \
    \   } else {\n                    odd++;\n                }\n            }\n \
    \       }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if\
    \ (isPalindrome(i.ToString())) {\n                if (i % 2 == 0) {\n        \
    \            even++;\n                } else {\n                    odd++;\n \
    \               }\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) even++;\n\
    \                else odd++;\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        // Implement your code here\n        throw new NotImplementedException();",
  "        long countE = 0;\n        long countO = 0;\n        for (int i = 1; i <=\
    \ n; i++) {\n            int count = 0;\n            int current = i;\n      \
    \      while (current > 0) {\n                current /= 10;\n               \
    \ count++;\n            }\n            int mid = count / 2;\n            int j\
    \ = 1;\n            int part1 = i;\n            while (j <= mid) {\n         \
    \       int rem = part1 % 10;\n                part1 /= 10;\n                j++;\n\
    \            }\n            int part2 = 0;\n            int k = 0;\n         \
    \   while (k < mid) {\n                int rem = part1 % 10;\n               \
    \ part2 = part2 * 10 + rem;\n                part1 /= 10;\n                k++;\n\
    \            }\n            if (part1 == part2) {\n                if (i % 2 ==\
    \ 0) {\n                    countE++;\n                } else {\n            \
    \        countO++;\n                }\n            }\n        }\n        Tuple<long,\
    \ long> toReturn = Tuple.Create(countE, countO);\n        return toReturn;", '        return
    Tuple.Create(0L, 0L);', "        int count1 = 0;\n        int count2 = 0;\n  \
    \      for (int i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n  \
    \              if (i % 2 == 0) {\n                    count1++;\n            \
    \    } else {\n                    count2++;\n                }\n            }\n\
    \        }\n        return Tuple.Create(count1, count2);", '        return Tuple.Create(1L,
    2L);', "        long even = 0;\n        long odd = 0;\n        for (long i = 1;\
    \ i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i %\
    \ 2 == 0) {\n                    even++;\n                } else {\n         \
    \           odd++;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(even, odd);", "        var evenPalindromes = new List<long> { 2\
    \ };\n        var oddPalindromes = new List<long> { 1, 3 };\n        var current\
    \ = 3;\n        while (current < n) {\n            var next = current + 2;\n \
    \           evenPalindromes.Add(next);\n            if (next < n) {\n        \
    \        oddPalindromes.Add(next + 1);\n            }\n            current = next\
    \ + 2;\n        }\n        return Tuple.Create(evenPalindromes.Count, oddPalindromes.Count);",
  '        return new Tuple<long, long>(Enumerable.Range(1, (int)n).Count(x => x.ToString().Reverse().SequenceEqual(x.ToString())
    && x % 2 == 0), Enumerable.Range(1, (int)n).Count(x => x.ToString().Reverse().SequenceEqual(x.ToString())
    && x % 2 != 0));', "        var even = 1L;\n        var odd = 2L;\n        for\
    \ (long i = 2; i <= n; i++) {\n            // If n is even, add to even\n    \
    \        if (i % 2 == 0) {\n                if (i % 10 == 0) {\n             \
    \       even++;\n                }\n            }\n            // If n is odd,\
    \ add to odd\n            else {\n                // If n is 11 or 1111 (base\
    \ 10) etc., add to even\n                if (i % 11 == 0) {\n                \
    \    even++;\n                }\n                // All other odd numbers are\
    \ palindromes\n                else {\n                    odd++;\n          \
    \      }\n            }\n        }\n        return Tuple.Create(even, odd);",
  "        var even_count = 0L;\n        var odd_count = 0L;\n        var digits =\
    \ 0L;\n        var dig = n;\n        while (dig > 0) {\n            ++digits;\n\
    \            dig /= 10;\n        }\n        for (long i = 1; i <= digits; ++i)\
    \ {\n            if (i % 2 == 0) {\n                even_count += (n - Math.Pow(10,\
    \ i - 1) + 1);\n            } else {\n                odd_count += (n - Math.Pow(10,\
    \ i - 1) + 1);\n            }\n        }\n        return Tuple.Create(even_count,\
    \ odd_count);", '        throw new NotImplementedException();', "        long\
    \ e = 0;\n        long o = 0;\n        for (long i = 1; i <= n; i++) {\n     \
    \       if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n          \
    \          e++;\n                } else {\n                    o++;\n        \
    \        }\n            }\n        }\n        return Tuple.Create(e, o);", '        return
    Tuple.Create(1L, 2L);', "        int even = 0;\n        int odd = 0;\n       \
    \ for (int i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n       \
    \         if (i % 2 == 0) {\n                    even++;\n                } else\
    \ {\n                    odd++;\n                }\n            }\n        }\n\
    \        return Tuple.Create(even, odd);", "        long e = 0;\n        long\
    \ o = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) {\n                    e++;\n           \
    \     } else {\n                    o++;\n                }\n            }\n \
    \       }\n        return Tuple.Create(e, o);", "        // IMPLEMENTATION GOES\
    \ HERE\n        var stopwatch = new Stopwatch();\n        stopwatch.Start();\n\
    \        long even = 0;\n        long odd = 0;\n        for (int i = 1; i <= n;\
    \ i++) {\n            string rStr = string.Empty;\n            string sStr = i.ToString();\n\
    \            for (int j = sStr.Length - 1; j >= 0; j--) {\n                rStr\
    \ += sStr[j];\n            }\n            if (sStr == rStr) {\n              \
    \  if (i % 2 == 0)\n                    even++;\n                else\n      \
    \              odd++;\n            }\n        }\n        stopwatch.Stop();\n \
    \       Console.WriteLine(stopwatch.ElapsedMilliseconds);\n        return Tuple.Create(even,\
    \ odd);", "        long countEven = 0;\n        long countOdd = 0;\n        long\
    \ i = 1;\n        while (i <= n) {\n            long rev = 0;\n            long\
    \ number = i;\n            while (number > 0) {\n                rev = rev * 10\
    \ + number % 10;\n                number /= 10;\n            }\n            if\
    \ (rev == i) {\n                if (i % 2 == 0) {\n                    countEven++;\n\
    \                } else {\n                    countOdd++;\n                }\n\
    \            }\n            i++;\n        }\n        return Tuple.Create(countEven,\
    \ countOdd);", "        // Implement me!\n        long odd = 0;\n        long\
    \ even = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i))\
    \ {\n                if (i % 2 == 0) {\n                    even++;\n        \
    \        } else {\n                    odd++;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(even, odd);", "        if (n > Math.Pow(10,\
    \ 3))\n            throw new ArgumentOutOfRangeException(\"n\", n, \" must be\
    \ 1 <= n <= 10^3\");\n        long even = 0, odd = 0;\n        for (long i = 1;\
    \ i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i %\
    \ 2 == 0)\n                    even++;\n                else\n               \
    \     odd++;\n            }\n        }\n        return Tuple.Create(even, odd);",
  "        // TODO: Implement\n        return null;", "        var evenCount = 0L;\n\
    \        var oddCount = 0L;\n        for (var i = 1L; i <= n; i++) {\n       \
    \     if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n              \
    \      evenCount++;\n                else\n                    oddCount++;\n \
    \           }\n        }\n        return Tuple.Create(evenCount, oddCount);",
  "        // TODO: Implement Function Here\n        long odd = 0;\n        long even\
    \ = 0;\n        int oddDigits = 1;\n        int evenDigits = 0;\n        long\
    \ oddSmallest = 0;\n        long evenSmallest = 0;\n        long oddLargest =\
    \ 0;\n        long evenLargest = 0;\n        long startTime = Environment.TickCount;\n\
    \        long endTime = 0;\n        Console.WriteLine(DateTime.Now.ToString(\"\
    hh:mm:ss tt\"));\n        while (oddSmallest <= n) {\n            oddLargest =\
    \ oddSmallest;\n            oddSmallest = (long)Math.Pow(10, oddDigits - 1);\n\
    \            odd = odd + ((n - oddLargest) / (oddSmallest * 2)) + 1;\n       \
    \     oddDigits = oddDigits + 2;\n        }\n        while (evenSmallest <= n)\
    \ {\n            evenLargest = evenSmallest;\n            evenSmallest = (long)Math.Pow(10,\
    \ evenDigits);\n            even = even + ((n - evenLargest) / (evenSmallest *\
    \ 2)) + 1;\n            evenDigits = evenDigits + 2;\n        }\n        endTime\
    \ = Environment.TickCount;\n        long elapsedTime = endTime - startTime;\n\
    \        Console.WriteLine(DateTime.Now.ToString(\"hh:mm:ss tt\"));\n        Console.WriteLine(\"\
    Total time: \" + elapsedTime);\n        return Tuple.Create(even, odd);", "  \
    \      long even = 0;\n        long odd = 0;\n        string input = n.ToString();\n\
    \        if (input.Length == 1) {\n            if (input == \"0\") {\n       \
    \         return Tuple.Create(1L, 0L);\n            }\n            else {\n  \
    \              if (n % 2 == 0) {\n                    return Tuple.Create(1L,\
    \ 0L);\n                }\n                else {\n                    return\
    \ Tuple.Create(0L, 1L);\n                }\n            }\n        }\n       \
    \ if (input.Length == 2) {\n            if (input[0] == input[1]) {\n        \
    \        if (n % 2 == 0) {\n                    return Tuple.Create(2L, 0L);\n\
    \                }\n                else {\n                    return Tuple.Create(1L,\
    \ 1L);\n                }\n            }\n            else {\n               \
    \ if (n % 2 == 0) {\n                    return Tuple.Create(2L, 0L);\n      \
    \          }\n                else {\n                    return Tuple.Create(1L,\
    \ 1L);\n                }\n            }\n        }\n        if (input.Length\
    \ > 2) {\n            int middle = input.Length / 2;\n            if (input.Length\
    \ % 2 == 0) {\n                even = (long)Math.Pow(10, middle);\n          \
    \      odd = (long)Math.Pow(10, middle) * 9;\n            }\n            else\
    \ {\n                even = (long)Math.Pow(10, middle) * 10;\n               \
    \ odd = (long)Math.Pow(10, middle) * 9;\n            }\n            for (int i\
    \ = middle - 1; i >= 0; i--) {\n                if (input[i] == input[input.Length\
    \ - 1 - i]) {\n                    even += (long)Math.Pow(10, i) * (input[i] -\
    \ '0');\n                    odd += (long)Math.Pow(10, i) * (input[i] - '0');\n\
    \                }\n                else {\n                    even += (long)Math.Pow(10,\
    \ i) * ((input[i] - '0') - 1);\n                    odd += (long)Math.P", "  \
    \      // Write your code here\n        var result = Tuple.Create(0L, 0L);\n \
    \       for (long i = 1; i <= n; i++) {\n            var s = i.ToString();\n \
    \           if (s.ToCharArray().Reverse().SequenceEqual(s.ToCharArray())) {\n\
    \                if (i % 2 == 0) {\n                    result = Tuple.Create(result.Item1\
    \ + 1, result.Item2);\n                } else {\n                    result =\
    \ Tuple.Create(result.Item1, result.Item2 + 1);\n                }\n         \
    \   }\n        }\n        return result;", '        return null;', "        long\
    \ e=0,o=0;\n        for(int i=1;i<=n;i++)\n            if(IsPalindrome(i))\n \
    \               if(i%2==0)\n                    e++;\n                else\n \
    \                   o++;\n        return Tuple.Create(e,o);", "        // please\
    \ implement this function, if you are a C++, C#, Java, or Python programmer.\n\
    \        // you may use the codes in the question to help implement this function,\
    \ if you want.\n        // but you don't have to.\n        // you may also use\
    \ any third-party library you like, but you must use the\n        // standard\
    \ library.\n        return null;", "        long evens = 0;\n        long odds\
    \ = 0;\n        if (n >= 1) {\n            evens++;\n            odds++;\n   \
    \     }\n        for (int i = 2; i <= 9; i += 2) {\n            if (i > n) break;\n\
    \            evens++;\n            odds++;\n        }\n        for (int i = 3;\
    \ i <= 9; i += 2) {\n            if (i > n) break;\n            odds++;\n    \
    \    }\n        int count = 0;\n        for (int i = 10; i <= n; i++) {\n    \
    \        if (i % 10 == 0) continue;\n            int rev = int.Parse(i.ToString().Reverse().Aggregate(\"\
    \", (a, b) => a + b));\n            if (rev % 10 == 0) continue;\n           \
    \ if (rev > i) break;\n            if (i % 2 == 0) evens++;\n            else\
    \ odds++;\n            count++;\n        }\n        return Tuple.Create(evens,\
    \ odds);", "        // solution starts here\n\n\n\n        // solution ends here",
  "        // type your solution here\n        long even = 0;\n        long odd =\
    \ 0;\n        for (int i = 1; i <= n; i++) {\n            int k = i;\n       \
    \     int l = 0;\n            while (k > 0) {\n                l = l * 10 + k\
    \ % 10;\n                k /= 10;\n            }\n            if (l == i) {\n\
    \                if (i % 2 == 0)\n                    even++;\n              \
    \  else\n                    odd++;\n            }\n        }\n        return\
    \ Tuple.Create(even, odd);", "        Tuple<long, long> tuple;\n        int nEvens\
    \ = 0;\n        int nOdds = 0;\n        for (long i = 1; i <= n; i++) {\n    \
    \        if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n         \
    \           nEvens++;\n                } else {\n                    nOdds++;\n\
    \                }\n            }\n        }\n        tuple = Tuple.Create(nEvens,\
    \ nOdds);\n        return tuple;", "        Tuple<long, long> ret = Tuple.Create(0L,\
    \ 0L);\n        long i = 1;\n        long palindrome = 0;\n        while (i <=\
    \ n) {\n            palindrome = GetPalindrome(i);\n            if (palindrome\
    \ <= n) {\n                if (IsEven(palindrome)) {\n                    ret\
    \ = Tuple.Create(ret.Item1 + 1, ret.Item2);\n                } else {\n      \
    \              ret = Tuple.Create(ret.Item1, ret.Item2 + 1);\n               \
    \ }\n            }\n            i++;\n        }\n        return ret;", "     \
    \   long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n \
    \                   even++;\n                } else {\n                    odd++;\n\
    \                }\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        int even = 0;\n        int odd = 0;\n        for (long i =\
    \ 1; i <= n; i++) {\n            string s = i.ToString();\n            if (s.Length\
    \ % 2 == 0) {\n                even++;\n            } else {\n               \
    \ odd++;\n            }\n        }\n        return Tuple.Create((long)even, (long)odd);",
  "        long even = 1;\n        long odd = 1;\n        if (n < 0) return Tuple.Create(0L,\
    \ 0L);\n        while (n > 0) {\n            long temp = n % 10;\n           \
    \ if (temp % 2 == 0)\n                ++even;\n            else\n            \
    \    ++odd;\n            n /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long numberEven = 0;\n        long numberOdd = 0;\n       \
    \ for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n      \
    \          if (i % 2 == 0) {\n                    numberEven++;\n            \
    \    } else {\n                    numberOdd++;\n                }\n         \
    \   }\n        }\n        return Tuple.Create(numberEven, numberOdd);", '        return
    new Tuple<long, long>(0, 0);', "        var lo = new List<long>();\n        var\
    \ ol = new List<long>();\n        for (long i = 1; i <= n; i++) {\n          \
    \  var s = i.ToString();\n            var b = true;\n            for (int j =\
    \ 0; j < s.Length; j++) {\n                if (s[j] != s[s.Length - 1 - j]) {\n\
    \                    b = false;\n                    break;\n                }\n\
    \            }\n            if (b) {\n                if (i % 2 == 0) {\n    \
    \                lo.Add(i);\n                } else {\n                    ol.Add(i);\n\
    \                }\n            }\n        }\n        return Tuple.Create((long)lo.Count,\
    \ (long)ol.Count);", "        long even = 0;\n        long odd = 0;\n        if\
    \ (n >= 1)\n            odd++;\n        if (n >= 2)\n            even++;\n   \
    \     if (n >= 3)\n            odd++;\n        for (long i = 2; i < n; i++) {\n\
    \            if (CheckPalindrome(i)) {\n                if (i % 2 == 0)\n    \
    \                even++;\n                else\n                    odd++;\n \
    \           }\n        }\n        return Tuple.Create(even, odd);", "        Tuple<long,\
    \ long> answer = new Tuple<long, long>(0, 0);\n        for (long number = 1; number\
    \ <= n; number++) {\n            long palindrome = number;\n            long i\
    \ = number / 10;\n            while (i > 0) {\n                palindrome = (palindrome\
    \ * 10) + (i % 10);\n                i /= 10;\n            }\n            if (palindrome\
    \ <= n) {\n                if (palindrome % 2 == 0) {\n                    answer\
    \ = new Tuple<long, long>(answer.Item1 + 1, answer.Item2);\n                }\
    \ else {\n                    answer = new Tuple<long, long>(answer.Item1, answer.Item2\
    \ + 1);\n                }\n            }\n        }\n        return answer;",
  "        var even = 0L;\n        var odd = 0L;\n        for (var i = 1; i <= n;\
    \ i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\
    \ {\n                    even++;\n                } else {\n                 \
    \   odd++;\n                }\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", '        return new Tuple<long, long>(0, 0);', "        // Your code\
    \ goes here.\n        return new Tuple<long, long>(0, 0);", "        int countEven\
    \ = 0;\n        int countOdd = 0;\n        for (long i = 1; i <= n; i++) {\n \
    \           if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n      \
    \              countEven++;\n                } else {\n                    countOdd++;\n\
    \                }\n            }\n        }\n        return Tuple.Create(countEven,\
    \ countOdd);", "        long numOdd=0;\n        long numEven=0;\n        for(long\
    \ i=1;i<=n;i++){\n            if(IsPalindrome(i)){\n                if(i%2==0){\n\
    \                    numEven++;\n                }else{\n                    numOdd++;\n\
    \                }\n            }\n        }\n        return Tuple.Create(numEven,numOdd);",
  "        var even = 0L;\n        var odd = 0L;\n        if (n >= 1 && n <= 10) {\n\
    \            for (var i = 1; i <= n; i++) {\n                if (i % 2 == 0) {\n\
    \                    even++;\n                } else {\n                    odd++;\n\
    \                }\n            }\n        } else if (n >= 11 && n <= 100) {\n\
    \            even = 45;\n            odd = 55;\n        } else if (n >= 101 &&\
    \ n <= 1000) {\n            even = 945;\n            odd = 1055;\n        }\n\
    \        return Tuple.Create(even, odd);", "        //throw new Exception();\n\
    \        int evenCount = 0;\n        int oddCount = 0;\n        int palindromeCount\
    \ = 0;\n        int length = 0;\n        int number = 0;\n        for (int i =\
    \ 1; i <= n; i++) {\n            number = i;\n            length = (int)Math.Floor(Math.Log10(number)\
    \ + 1);\n            //Debug.WriteLine(\"number :\" + number);\n            //Debug.WriteLine(\"\
    length :\" + length);\n            //Debug.WriteLine(number.ToString() == new\
    \ string(number.ToString().Reverse().ToArray()));\n            if (number.ToString()\
    \ == new string(number.ToString().Reverse().ToArray())) {\n                palindromeCount++;\n\
    \                if (length % 2 == 0) {\n                    evenCount++;\n  \
    \              } else {\n                    oddCount++;\n                }\n\
    \            }\n        }\n        //Debug.WriteLine(\"palindromeCount :\" + palindromeCount);\n\
    \        return Tuple.Create((long)evenCount, (long)oddCount);", "        long\
    \ even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n\
    \            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n     \
    \               even++;\n                } else {\n                    odd++;\n\
    \                }\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long eCount = 0;\n        long oCount = 0;\n        for (long\
    \ i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if\
    \ (i % 2 == 0) {\n                    eCount++;\n                } else {\n  \
    \                  oCount++;\n                }\n            }\n        }\n  \
    \      return Tuple.Create(eCount, oCount);", "        var r = Tuple.Create<long,\
    \ long>(0L, 0L);\n        for (var i = 1L; i <= n; i++) {\n            if (i.ToString().SequenceEqual(string.Join(\"\
    \", i.ToString().Reverse()))) {\n                if (i % 2 == 0) {\n         \
    \           r = Tuple.Create(r.Item1 + 1, r.Item2);\n                } else {\n\
    \                    r = Tuple.Create(r.Item1, r.Item2 + 1);\n               \
    \ }\n            }\n        }\n        return r;", "        // Fill in the implementation\
    \ here.\n        int evenCount = 0;\n        int oddCount = 0;\n        int[]\
    \ palindromes = new int[2] { 1, 2 };\n        if (n == 1) {\n            return\
    \ Tuple.Create(0L, 1L);\n        }\n        for (int i = 3; i <= n; i++) {\n \
    \           int number = i;\n            int reverse = 0;\n            while (number\
    \ > 0) {\n                int digit = number % 10;\n                reverse =\
    \ reverse * 10 + digit;\n                number = number / 10;\n            }\n\
    \            if (reverse == i) {\n                if (i % 2 == 0) {\n        \
    \            evenCount++;\n                } else {\n                    oddCount++;\n\
    \                }\n            }\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long even=0, odd=0;\n        for(long i=1; i<=n; i++)\n\
    \            if(isPalindrome(i))\n                if(i%2==0)\n               \
    \     even++;\n                else\n                    odd++;\n        return\
    \ Tuple.Create(even, odd);", "        if (n < 1 || n > 1000) {\n            throw\
    \ new ArgumentOutOfRangeException(\"n\");\n        }\n        long even = 0;\n\
    \        long odd = 0;\n        long numEvenDigits = (long) Math.Floor(Math.Log10(n))\
    \ + 1;\n        long numOddDigits = numEvenDigits - 1;\n        // The palindromes\
    \ with even number of digits are of the form:\n        //  <leftDigits>00...0<leftDigits>\n\
    \        // where \"leftDigits\" represent the digits that are not 0. For example,\n\
    \        // the palindromes with 2 digits are:\n        //  11, 22, 33, 44, 55,\
    \ 66, 77, 88, 99\n        // The palindromes with 4 digits are:\n        //  1001,\
    \ 2002, 3003, 4004, 5005, 6006, 7007, 8008, 9009\n        // To count these palindromes,\
    \ we will divide them into two ranges:\n        //  1. [1, 9], [11, 99], [101,\
    \ 999], etc.\n        //  2. [10, 90], [110, 990], [1010, 9990], etc.\n      \
    \  // We will count the number of palindromes in each range separately.\n    \
    \    // Note that each range includes palindromes with digit length of 2, 4, 6,\
    \ 8...\n        // Count the palindromes with numEvenDigits digits.\n        //\
    \ Take the first range.\n        even += 1 + 9 * (long) Math.Pow(10, numEvenDigits\
    \ - 1);\n        // Take the second range.\n        long base10 = (long) Math.Pow(10,\
    \ numEvenDigits - 1);\n        long base9 = base10 - 1;\n        even += 2 * base9\
    \ + 9 * base10;\n        // Count the palindromes with numOddDigits digits.\n\
    \        odd += 1 + 9 * (long) Math.Pow(10, numOddDigits - 1);\n        if (n\
    \ % 2 == 0) {\n            even -= 9;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        // Implement the function here\n        long evenCount = 0;\n\
    \        long oddCount = 0;\n        long t = 0;\n        long z = n;\n      \
    \  int length = 0;\n        if (n < 10)\n        {\n            evenCount = (n\
    \ % 2 == 0) ? 1 : 0;\n            oddCount = (n % 2 == 0) ? n - 1 : n;\n     \
    \   }\n        else\n        {\n            // 9 = 10^1 - 1 \n            // 99\
    \ = 10^2 - 1\n            // 999 = 10^3 - 1\n            for (int i = 1; i <=\
    \ Math.Log10(n); i++)\n            {\n                t = (long)Math.Pow(10, i)\
    \ - 1;\n                length = i;\n                if (n - t <= 10)\n      \
    \          {\n                    length++;\n                    break;\n    \
    \            }\n                n -= t;\n            }\n            //Console.WriteLine(length);\n\
    \            if (length % 2 == 0)\n            {\n                evenCount =\
    \ (z + 1) / 2;\n                oddCount = z / 2;\n            }\n           \
    \ else\n            {\n                evenCount = z / 2;\n                oddCount\
    \ = (z + 1) / 2;\n            }\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        // your code goes here\n        return Tuple.Create(0L,\
    \ 0L);", "        // Your code goes here.\n        if (n < 10) {\n           \
    \ long even = 0;\n            if (n % 2 == 0) {\n                even = 1;\n \
    \           }\n            return Tuple.Create(even, n - even);\n        }\n \
    \       // \"n\" is a palindrome\n        if (IsPalindrome(n)) {\n           \
    \ // \"n\" is even\n            if (n % 2 == 0) {\n                return Tuple.Create(EvenOddPalindrome(n\
    \ - 1).Item1 + 1, EvenOddPalindrome(n - 1).Item2);\n            }\n          \
    \  // \"n\" is odd\n            else {\n                return Tuple.Create(EvenOddPalindrome(n\
    \ - 1).Item1, EvenOddPalindrome(n - 1).Item2 + 1);\n            }\n        }\n\
    \        else {\n            if (n % 10 == 0) {\n                return EvenOddPalindrome(n\
    \ - 1);\n            }\n            else {\n                return EvenOddPalindrome(n\
    \ - n % 10);\n            }\n        }", "        var result = Tuple.Create<long,\
    \ long>(0L, 0L);\n        var even = Tuple.Create<long, long>(0L, 0L);\n     \
    \   var odd = Tuple.Create<long, long>(0L, 0L);\n        // Write your code here.\n\
    \        var count = 1;\n        foreach (var p in GetPalindromes(n)) {\n    \
    \        if (p % 2 == 0) {\n                even = Tuple.Create(even.Item1 + 1,\
    \ count);\n            } else {\n                odd = Tuple.Create(odd.Item1\
    \ + 1, count);\n            }\n            count++;\n        }\n        result\
    \ = Tuple.Create(even.Item1, odd.Item1);\n        return result;", "        long\
    \ even = 0;\n        long odd = 0;\n        bool isEven = false;\n        bool\
    \ isOdd = false;\n        int count = 0;\n        while(n > 0) {\n           \
    \ isEven = isOdd = false;\n            if(n % 2 == 0) {\n                isEven\
    \ = true;\n            } else {\n                isOdd = true;\n            }\n\
    \            if(count > 0) {\n                if(isEven) {\n                 \
    \   even *= 10;\n                    even += 1;\n                } else {\n  \
    \                  odd *= 10;\n                    odd += 1;\n               \
    \ }\n            }\n            n /= 10;\n            count++;\n        }\n  \
    \      even *= 2;\n        odd *= 2;\n        odd += 1;\n        return Tuple.Create(even,\
    \ odd);", "        var list = new List<long>();\n        for (long i = 1; i <=\
    \ n; i++) {\n            if (IsPalindrome(i))\n                list.Add(i);\n\
    \        }\n        long even = list.Where(c => c % 2 == 0).Count();\n       \
    \ long odd = list.Where(c => c % 2 != 0).Count();\n        return Tuple.Create(even,\
    \ odd);", '        return Tuple.Create(1L, n - 1);', "        var ret = new Tuple<long,\
    \ long>(0, 0);\n        var palindromes = new HashSet<long>();\n        var maxPower\
    \ = 1;\n        while (maxPower * 10 <= n) {\n            maxPower *= 10;\n  \
    \      }\n        palindromes.Add(0);\n        for (long pow = 1; pow <= maxPower;\
    \ pow *= 10) {\n            for (long x = 0; x < 10; x++) {\n                for\
    \ (long y = 0; y < 10; y++) {\n                    var p = (x * pow) + (y * pow\
    \ / 10);\n                    if (p > n) {\n                        break;\n \
    \                   }\n                    palindromes.Add(p);\n             \
    \   }\n            }\n        }\n        for (long pow = 1; pow <= maxPower; pow\
    \ *= 10) {\n            for (long x = 0; x < 10; x++) {\n                for (long\
    \ y = 0; y < 10; y++) {\n                    var p = (x * pow) + (y * pow * 10);\n\
    \                    if (p > n) {\n                        break;\n          \
    \          }\n                    palindromes.Add(p);\n                }\n   \
    \         }\n        }\n        foreach (var p in palindromes) {\n           \
    \ if (p % 2 == 0) {\n                ret = new Tuple<long, long>(ret.Item1 + 1,\
    \ ret.Item2);\n            } else {\n                ret = new Tuple<long, long>(ret.Item1,\
    \ ret.Item2 + 1);\n            }\n        }\n        return ret;", "        //\
    \ Fill in your code here.\n        long even = 0;\n        long odd = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n  \
    \              if (i % 2 == 0) {\n                    even++;\n              \
    \  } else {\n                    odd++;\n                }\n            }\n  \
    \      }\n        return Tuple.Create(even, odd);", "        // This is a brute\
    \ force method that checks for every positive integer\n        // in the range\
    \ [1, n] whether it is a palindrome or not.\n        // The method has a time\
    \ complexity of O(n) and a space complexity of O(1).\n        long numOfEvenPalindromes\
    \ = 0;\n        long numOfOddPalindromes = 0;\n        for (long i = 1; i <= n;\
    \ i++) {\n            bool isPalindrome = true;\n            // Convert i to a\
    \ string\n            string s = i.ToString();\n            // Check if s is a\
    \ palindrome\n            for (int j = 0; j < s.Length / 2; j++) {\n         \
    \       if (s[j] != s[s.Length - 1 - j]) {\n                    isPalindrome =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       // Count s if it is a palindrome\n            if (isPalindrome) {\n  \
    \              if (i % 2 == 0) {\n                    numOfEvenPalindromes++;\n\
    \                } else {\n                    numOfOddPalindromes++;\n      \
    \          }\n            }\n        }\n        return Tuple.Create(numOfEvenPalindromes,\
    \ numOfOddPalindromes);", "        long even = 0, odd = 0;\n        for (int i\
    \ = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if\
    \ (i % 2 == 0) even++;\n                else odd++;\n            }\n        }\n\
    \        return Tuple.Create(even, odd);", "        int even = 0;\n        int\
    \ odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i))\
    \ {\n                if (i % 2 == 0)\n                    even++;\n          \
    \      else\n                    odd++;\n            }\n        }\n        return\
    \ Tuple.Create((long)even, (long)odd);", "        var odd = 0L;\n        var even\
    \ = 0L;\n        var x = 1L;\n        while (x <= n) {\n            if (IsPalindrome(x))\
    \ {\n                if (x % 2 == 0) {\n                    even++;\n        \
    \        } else {\n                    odd++;\n                }\n           \
    \ }\n            x++;\n        }\n        return Tuple.Create(even, odd);", " \
    \       // your code here\n        long numOdd = 0;\n        long numEven = 0;\n\
    \        if (n < 1 || n > 1000) {\n            return null;\n        }\n\n   \
    \     for (long i = 1; i <= n; i++) {\n            string num = i.ToString();\n\
    \            if (num == String.Join(\"\", num.Reverse())) {\n                if\
    \ (num.Length % 2 == 0) {\n                    numEven++;\n                } else\
    \ {\n                    numOdd++;\n                }\n            }\n       \
    \ }\n        return Tuple.Create(numEven, numOdd);", "        // TODO: Write your\
    \ code here\n        return new Tuple<long, long>(0, 0);", '        return new
    Tuple<long, long>(0, 0);', "        // Implement\n        // Time : O(n)\n   \
    \     // Space: O(1)\n        int countEven = 0;\n        int countOdd = 0;\n\
    \        for (int i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n\
    \                if (i % 2 == 0) {\n                    countEven++;\n       \
    \         } else {\n                    countOdd++;\n                }\n     \
    \       }\n        }\n        return Tuple.Create(countEven, countOdd);", "  \
    \      // Implement this placeholder.\n        return new Tuple<long, long>(0,\
    \ 0);", "        // TODO: implement this method\n        long evenPalindrome =\
    \ 0;\n        long oddPalindrome = 0;\n        string nStr = n.ToString();\n \
    \       string nStrRev = Reverse(nStr);\n        if (nStr == nStrRev) {\n    \
    \        if (n % 2 == 0)\n                evenPalindrome = 1;\n            else\n\
    \                oddPalindrome = 1;\n        }\n        for (int i = 1; i < nStr.Length;\
    \ i++) {\n            string str = nStr.Substring(0, i);\n            string strRev\
    \ = Reverse(str);\n            for (int j = str.Length - 1; j >= 0; j--) {\n \
    \               str = str.Insert(str.Length, str[j].ToString());\n           \
    \     strRev = strRev.Insert(strRev.Length, strRev[j].ToString());\n         \
    \       long l = long.Parse(str);\n                long lR = long.Parse(strRev);\n\
    \                if (l <= n) {\n                    if (l % 2 == 0)\n        \
    \                evenPalindrome++;\n                    else\n               \
    \         oddPalindrome++;\n                }\n                if (lR <= n) {\n\
    \                    if (lR % 2 == 0)\n                        evenPalindrome++;\n\
    \                    else\n                        oddPalindrome++;\n        \
    \        }\n            }\n        }\n        return Tuple.Create(evenPalindrome,\
    \ oddPalindrome);", '        throw new NotImplementedException();', "        long\
    \ even = 0;\n        long odd = 0;\n        for (int i = 1; i <= n; i++) {\n \
    \           if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n      \
    \              even++;\n                } else {\n                    odd++;\n\
    \                }\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", '        return new Tuple<long, long>(0, 0);', "        long evencount\
    \ = 0;\n        long oddcount = 0;\n        long reverse;\n        for (long i\
    \ = 1; i <= n; i++) {\n            reverse = 0;\n            long num = i;\n \
    \           while (num > 0) {\n                long remainder = num % 10;\n  \
    \              reverse = reverse * 10 + remainder;\n                num /= 10;\n\
    \            }\n            if (reverse == i) {\n                if (i % 2 ==\
    \ 0) {\n                    evencount++;\n                } else {\n         \
    \           oddcount++;\n                }\n            }\n        }\n       \
    \ return Tuple.Create(evencount, oddcount);", "        long even = 0, odd = 0;\n\
    \        for (int i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n\
    \                if (i % 2 == 0) even++;\n                else odd++;\n      \
    \      }\n        }\n        return Tuple.Create(even, odd);", '        throw
    new NotImplementedException();', "        // \u6211\u7684\u65B9\u6CD5\uFF1An\u7684\
    \u4F4D\u6570\u4E3A k\n        // \u5982\u679C\u524Dk/2\u4F4D\u662F\u56DE\u6587\
    \u6570\n        // \u5982\u679C k \u662F\u5076\u6570\uFF0C\u90A3\u4E48\u540Ek/2\u4F4D\
    \u4E5F\u662F\u56DE\u6587\u6570\n        // \u5982\u679C k \u662F\u5947\u6570\uFF0C\
    \u90A3\u4E48\u540E(k+1)/2\u4F4D\u4E5F\u662F\u56DE\u6587\u6570\n        // \u8FD4\
    \u56DE\u7ED3\u679C\uFF1A(\u56DE\u6587\u6570, 1-n\u4E4B\u95F4\u975E\u56DE\u6587\
    \u6570)\n        int max = 1000;\n        long even = 0;\n        long odd = 0;\n\
    \        int[] all = new int[max];\n        int[] even_all = new int[max];\n \
    \       int[] odd_all = new int[max];\n        int[] even_head = new int[max];\n\
    \        int[] odd_head = new int[max];\n        int[] even_tail = new int[max];\n\
    \        int[] odd_tail = new int[max];\n        int[] even_count = new int[max];\n\
    \        int[] odd_count = new int[max];\n        all[0] = 1;\n        all[1]\
    \ = 9;\n        even_all[0] = 0;\n        even_all[1] = 1;\n        odd_all[0]\
    \ = 1;\n        odd_all[1] = 9;\n        even_head[0] = 0;\n        even_head[1]\
    \ = 1;\n        odd_head[0] = 1;\n        odd_head[1] = 9;\n        even_tail[0]\
    \ = 0;\n        even_tail[1] = 1;\n        odd_tail[0] = 1;\n        odd_tail[1]\
    \ = 9;\n        even_count[0] = 0;\n        even_count[1] = 1;\n        odd_count[0]\
    \ = 1;\n        odd_count[1] = 9;\n        for (int i = 2; i", "        long[]\
    \ evens = new long[(int)n];\n        long[] odds = new long[(int)n];\n       \
    \ evens[0] = 1;\n        odds[0] = 1;\n        for (int i = 1; i < n; i++) {\n\
    \            evens[i] = evens[i - 1] + odds[i - 1];\n            odds[i] = evens[i\
    \ - 1];\n        }\n        return Tuple.Create(evens[n - 1], odds[n - 1]);",
  "        // your code goes here\n        // try to solve it in a way that would\
    \ be optimal for the BigInteger\n        // rather than using a slow string-based\
    \ approach.\n        throw new NotImplementedException();", "        long even\
    \ = 0;\n        long odd = 0;\n        int tempeven = 0;\n        int tempodd\
    \ = 0;\n        for (int i = 1; i <= n; i++) {\n            tempeven = even;\n\
    \            tempodd = odd;\n            if (IsPalindrome(i)) {\n            \
    \    if (i % 2 == 0) {\n                    even++;\n                } else {\n\
    \                    odd++;\n                }\n            }\n        }\n   \
    \     return Tuple.Create(even, odd);", "        long numEven = 0;\n        long\
    \ numOdd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) {\n                    numEven++;\n     \
    \           } else {\n                    numOdd++;\n                }\n     \
    \       }\n        }\n        return Tuple.Create(numEven, numOdd);", "      \
    \  long numOdd = 0;\n        long numEven = 0;\n        for (long i = 1; i <=\
    \ n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 ==\
    \ 0) {\n                    numEven++;\n                } else {\n           \
    \         numOdd++;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(numEven, numOdd);", "        var counter = new Tuple<long, long>(0,\
    \ 0);\n        for (long i = 1; i <= n; i++) {\n            counter = IsPalindrome(i)\
    \ ? new Tuple<long, long>(counter.Item1 + (i % 2 == 0 ? 1 : 0), counter.Item2\
    \ + (i % 2 == 0 ? 0 : 1)) : counter;\n        }\n        return counter;", " \
    \       // Write your code here\n        var array = new bool[n+1];\n        for\
    \ (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n          \
    \      array[i] = true;\n            }\n        }\n        var even = 0;\n   \
    \     var odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (array[i])\
    \ {\n                if (i % 2 == 0) {\n                    even++;\n        \
    \        } else {\n                    odd++;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(even, odd);", "        if (n < 0)\
    \ {\n            throw new ArgumentException(\"n should be non-negative integer.\"\
    );\n        }\n\n        var even = 0L;\n        var odd = 0L;\n        for (var\
    \ i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if\
    \ (i % 2 == 0) {\n                    even++;\n                } else {\n    \
    \                odd++;\n                }\n            }\n        }\n       \
    \ return Tuple.Create(even, odd);", "        var count = 0;\n        for (var\
    \ i = 1; i <= n; i++) {\n            var s = i.ToString();\n            var c\
    \ = 1;\n            for (var j = 0; j < s.Length / 2; j++) {\n               \
    \ if (s[j] != s[s.Length - j - 1]) {\n                    c = 0;\n           \
    \         break;\n                }\n            }\n            count += c;\n\
    \        }\n        var odds = (count + 1) / 2;\n        var evens = count / 2;\n\
    \        return Tuple.Create(evens, odds);", "        int even = 0;\n        int\
    \ odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i))\
    \ {\n                if (i % 2 == 0)\n                    even++;\n          \
    \      else\n                    odd++;\n            }\n        }\n        return\
    \ Tuple.Create(even, odd);", '        return new Tuple<long, long>(evenPalindrome(n),
    oddPalindrome(n));', "        List<int> odds = new List<int>() { 1, 3, 5, 7, 9\
    \ };\n        List<int> evens = new List<int>() { 0, 2, 4, 6, 8 };\n        List<int>\
    \ digits = new List<int>();\n        long num = 0;\n        for (int i = 0; i\
    \ < n.ToString().Length; i++) {\n            digits.Add(int.Parse(n.ToString()[i].ToString()));\n\
    \        }\n        for (int i = 0; i < digits.Count; i++) {\n            if (digits[i]\
    \ % 2 == 0) {\n                num = evens.Take(evens.IndexOf(digits[i]) + 1).Sum();\n\
    \            } else {\n                num = odds.Take(odds.IndexOf(digits[i])\
    \ + 1).Sum();\n            }\n        }\n        return Tuple.Create(0L, num);",
  "        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n;\
    \ i++) {\n            var s = i.ToString();\n            bool palindrome = true;\n\
    \            for (int j = 0; j < s.Length / 2; j++) {\n                if (s[j]\
    \ != s[s.Length - 1 - j]) {\n                    palindrome = false;\n       \
    \             break;\n                }\n            }\n            if (palindrome)\
    \ {\n                if (i % 2 == 0) {\n                    even++;\n        \
    \        } else {\n                    odd++;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(even, odd);", "        int odd = 0;\n\
    \        int even = 0;\n        for (long i = 1; i <= n; i++) {\n            if\
    \ (isPalindrome(i.ToString())) {\n                if (i % 2 == 0) {\n        \
    \            even++;\n                } else {\n                    odd++;\n \
    \               }\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        for (long x\
    \ = 1; x <= n; x++) {\n            if (IsPalindrome(x)) {\n                if\
    \ (x % 2 == 0) {\n                    even++;\n                } else {\n    \
    \                odd++;\n                }\n            }\n        }\n       \
    \ return Tuple.Create(even, odd);"]
stop_tokens:
- "\n    }\n"
