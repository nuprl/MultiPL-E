language: cs
name: HumanEval_130_tri
results:
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return Tri((int)n);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var answer = new List<long>();\n        if (n == 1) {\n
    \           answer.Add(1);\n            answer.Add(3);\n            return answer;\n
    \       }\n        if (n == 2) {\n            answer.Add(1);\n            answer.Add(3);\n
    \           answer.Add(2);\n            return answer;\n        }\n        answer.Add(1);\n
    \       answer.Add(3);\n        answer.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                answer.Add(1 + i / 2);\n
    \           } else {\n                answer.Add(answer[i - 1] + answer[i - 2]
    + answer[i + 1]);\n            }\n        }\n        return answer;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x000ac] in <24c98a75cb584b0c846a02dbf56c027a>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <24c98a75cb584b0c846a02dbf56c027a>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x000ac]
    in <24c98a75cb584b0c846a02dbf56c027a>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <24c98a75cb584b0c846a02dbf56c027a>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var l = new List<long>();\n        for (long i = 0; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                l.Add(1 + i / 2);\n
    \           } else {\n                long t1 = 1;\n                long t2 =
    3;\n                long t3 = 2;\n                long t4 = 0;\n                long
    j = 3;\n                while (j < i) {\n                    t4 = t1 + t2 + t3;\n
    \                   t1 = t2;\n                    t2 = t3;\n                    t3
    = t4;\n                    j++;\n                }\n                l.Add(t4);\n
    \           }\n        }\n        return l;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e172d94599b44bb2baf02223bed28c02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e172d94599b44bb2baf02223bed28c02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long> { 1L, 3L, 2L };\n        for
    (var i = 3; i <= n; i++) {\n            result.Add(result[i - 1] + result[i -
    2] + result[i - 3]);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0746f278ab914853a330651cd29e94ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0746f278ab914853a330651cd29e94ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        list.Add(1);\n
    \       list.Add(3);\n        list.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0)\n                list.Add(1 + i / 2);\n            else\n
    \               list.Add(list[i - 1] + list[i - 2] + list[i + 1]);\n        }\n
    \       return list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00053] in <14c5f0bb899549cb8578e76569eaa9cd>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <14c5f0bb899549cb8578e76569eaa9cd>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00053]
    in <14c5f0bb899549cb8578e76569eaa9cd>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <14c5f0bb899549cb8578e76569eaa9cd>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long[] result = new long[n + 1];\n        for (int i =
    0; i <= n; i++) {\n            if (i < 2) {\n                result[i] = 1;\n
    \           } else if (i == 2) {\n                result[i] = 3;\n            }
    else {\n                result[i] = result[i - 1] + result[i - 2] + result[i -
    3];\n            }\n        }\n        return result.ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f126d6da62c440f852dd50e27d5f3fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f126d6da62c440f852dd50e27d5f3fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Implement this function, use recursion and loops. Your
    solution should be\n        // in O(n) time.\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <f3d57b41b02a465c87d3ddd3f068c1c8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <f3d57b41b02a465c87d3ddd3f068c1c8>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> ret = new List<long>();\n        if (n == 1)
    {\n            ret.Add(1);\n            ret.Add(3);\n            return ret;\n
    \       }\n        else if (n == 2) {\n            ret.Add(1);\n            ret.Add(3);\n
    \           ret.Add(2);\n            return ret;\n        }\n        ret.Add(1);\n
    \       ret.Add(3);\n        ret.Add(2);\n        long t = 8;\n        while (n
    > 2) {\n            ret.Add(t);\n            t = t + ret[(int)n];\n            n
    = n - 1;\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4379cfd0af6c4ac38336a16ab3a7020a>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0007b] in <4379cfd0af6c4ac38336a16ab3a7020a>:0 \n  at Problem.Main (System.String[]
    args) [0x00029] in <4379cfd0af6c4ac38336a16ab3a7020a>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0007b]
    in <4379cfd0af6c4ac38336a16ab3a7020a>:0 \n  at Problem.Main (System.String[] args)
    [0x00029] in <4379cfd0af6c4ac38336a16ab3a7020a>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var l = new List<long>();\n        if (n == 0) {\n            l.Add(1);\n
    \           return l;\n        }\n        l.Add(1);\n        l.Add(3);\n        l.Add(2);\n
    \       l.Add(8);\n        while (l.Count <= n) {\n            var t = l[l.Count
    - 1] + l[l.Count - 2] + l[l.Count - 3];\n            l.Add(t);\n        }\n        return
    l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a18886ef647447c094442d5d99a02d13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a18886ef647447c094442d5d99a02d13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // (1) first, complete this function\n        List<long>
    list = new List<long>();\n        list.Add(1);\n        list.Add(3);\n        list.Add(2);\n
    \       while (list.Count() != n + 1)\n        {\n            var count = list.Count();\n
    \           var x = list[count - 1] + list[count - 2] + list[count - 3];\n            list.Add(x);\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85ba7afea0e2424383809fb3cc8cc939>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85ba7afea0e2424383809fb3cc8cc939>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: None
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code here!\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <3081afd20c1c4bd7b87ffd1a5534015e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <3081afd20c1c4bd7b87ffd1a5534015e>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // %math%\n        // Let's call T(n) = tri(n).\n        //
    The first two terms of the sequence are:\n        // T(1) = 3\n        // T(2)
    = 2\n        // T(3) = 8 = T(2) + T(1) + T(4)\n        // T(4) = 3\n        //
    T(5) = 11 = T(4) + T(3) + T(6)\n        // ...\n        // Therefore T(n) = tri(n)
    for n > 2 and \n        // tri(n) = T(n) - T(n - 1) - T(n - 2) for n > 2.\n        //
    T(n) is a non-linear recursive function that can be computed in O(log n) time\n
    \       // using matrix exponentiation.\n        List<long> result = new List<long>();\n
    \       for (long i = 1; i <= n; i++) {\n            result.Add(Tri(i));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgtjvo9iv.cs(41,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var l = new List<long>();\n        long tn = 1;\n        long
    tn1 = 3;\n        long tn2 = 1;\n        l.Add(tn);\n        l.Add(tn1);\n        l.Add(tn2);\n
    \       for (int i = 3; i <= n; i++) {\n            long tmp = tn1;\n            tn1
    = tn2;\n            tn2 = tn;\n            tn = (i % 2 == 0) ? (i / 2) + 1 : tn1
    + tn2 + tn;\n            l.Add(tn);\n        }\n        return l;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08891856f5ee41298c0202742c2a63da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08891856f5ee41298c0202742c2a63da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        return list;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7874b2ef068452fbfe573e42583b223>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7874b2ef068452fbfe573e42583b223>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 0; i <= n; i++)\n            result.Add(TriRec(i));\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf41bokvn.cs(28,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1660028218
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        if (n <= 0)
    {\n            return res;\n        }\n        res.Add(1);\n        for (int i
    = 1; i <= n; i++) {\n            if (i == 1) {\n                res.Add(3);\n
    \           } else if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0006e] in <68d1d2714f1a414ca03516b13b4be605>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <68d1d2714f1a414ca03516b13b4be605>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0006e]
    in <68d1d2714f1a414ca03516b13b4be605>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <68d1d2714f1a414ca03516b13b4be605>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> r = new List<long>();\n        long a = 1;\n
    \       long b = 3;\n        long c = 2;\n        long d = 0;\n        r.Add(a);\n
    \       r.Add(b);\n        r.Add(c);\n        for (int i = 3; i <= n; i++) {\n
    \           if (i % 2 == 0) {\n                d = 1 + i / 2;\n            } else
    {\n                d = a + b + c;\n            }\n            a = b;\n            b
    = c;\n            c = d;\n            r.Add(d);\n        }\n        return r;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <300166a9b9e04865993bd5a4d03d07d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <300166a9b9e04865993bd5a4d03d07d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        for (long i = 0; i
    <= n; i++) {\n            res.Add(Tri(i));\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjpt592mq.cs(28,21): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        if (n < 1)\n
    \           return res;\n        res.Add(1);\n        if (n == 1)\n            return
    res;\n        res.Add(3);\n        if (n == 2)\n            return res;\n        res.Add(2);\n
    \       if (n == 3)\n            return res;\n        for (int i = 3; i < n; i++)
    {\n            long a = res[i - 1];\n            long b = res[i - 2];\n            long
    c = res[i - 3];\n            if (i % 2 == 0)\n                res.Add(1 + i /
    2);\n            else\n                res.Add(a + b + c);\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df194196fa7436dafa573e05389a814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df194196fa7436dafa573e05389a814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var a = 1L;\n        var b = 3L;\n        var c = 2L;\n
    \       var d = 0L;\n        List<long> s = new List<long>();\n        s.Add(a);\n
    \       s.Add(b);\n        s.Add(c);\n        while (d < n) {\n            if
    (d % 2 == 0) {\n                d = d / 2;\n                d++;\n                s.Add(d);\n
    \           } else {\n                d = a + b + c;\n                a = b;\n
    \               b = c;\n                c = d;\n                s.Add(d);\n            }\n
    \       }\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <494b5d31338d410dadc4824e6f3a6adb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <494b5d31338d410dadc4824e6f3a6adb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        List<long> res = new List<long>();\n
    \       long tri_1 = 1;\n        long tri_2 = 1;\n        long tri_3 = 1;\n        res.Add(tri_1);\n
    \       if (n >= 1) {\n            res.Add(tri_2);\n        }\n        if (n >=
    2) {\n            res.Add(tri_3);\n        }\n        for (int i = 3; i <= n;
    i++) {\n            long tri_i = (i % 2 == 0) ? (1 + i / 2) : (tri_1 + tri_2 +
    tri_3);\n            res.Add(tri_i);\n            tri_1 = tri_2;\n            tri_2
    = tri_3;\n            tri_3 = tri_i;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf48a273c1754e09aace941b5ba03caf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf48a273c1754e09aace941b5ba03caf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> l = new List<long>();\n        l.Add(1);\n        l.Add(3);\n
    \       l.Add(2);\n        long [] arr = new long[n+1];\n        arr[0] = 1;\n
    \       arr[1] = 3;\n        arr[2] = 2;\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                arr[i] = 1 + i / 2;\n            }
    else {\n                arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1];\n            }\n
    \       }\n        for (int i = 0; i <= n; i++) {\n            l.Add(arr[i]);\n
    \       }\n        return l;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x00059] in <ae32fe9809744993a7df28b609bbe387>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <ae32fe9809744993a7df28b609bbe387>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x00059]
    in <ae32fe9809744993a7df28b609bbe387>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ae32fe9809744993a7df28b609bbe387>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> r = new List<long>();\n        if (n == 0) {\n
    \           r.Add(1);\n            return r;\n        }\n        if (n == 1) {\n
    \           r.Add(1);\n            r.Add(3);\n            return r;\n        }\n
    \       r.Add(1);\n        r.Add(3);\n        r.Add(2);\n        for (long i =
    3; i <= n; i++) {\n            long f;\n            if (i % 2 == 0) {\n                f
    = (i / 2) + 1;\n            } else {\n                f = r[(int)i - 1] + r[(int)i
    - 2] + r[(int)i - 3];\n            }\n            r.Add(f);\n        }\n        return
    r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <435a2e20e010485a8c42850b8336eaa7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <435a2e20e010485a8c42850b8336eaa7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var l = new List<long>();\n        l.Add(1);\n        l.Add(3);\n
    \       l.Add(2);\n        l.Add(8);\n        for (long i = 3; i < n; i++) {\n
    \           l.Add(l[((int)(i))] + l[((int)(i - 1))] + l[((int)(i + 1))]);\n        }\n
    \       return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <398cb27c738848a49a8a8c4b9e95db3e>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00045] in <398cb27c738848a49a8a8c4b9e95db3e>:0 \n  at Problem.Main (System.String[]
    args) [0x00029] in <398cb27c738848a49a8a8c4b9e95db3e>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00045]
    in <398cb27c738848a49a8a8c4b9e95db3e>:0 \n  at Problem.Main (System.String[] args)
    [0x00029] in <398cb27c738848a49a8a8c4b9e95db3e>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Insert your code here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <085598eaf2734d3791a0885b23cfcebf>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <085598eaf2734d3791a0885b23cfcebf>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 0) {\n            return new List<long>();\n        }\n
    \       var output = new List<long>();\n        output.Add(1);\n        if (n
    == 1) {\n            return output;\n        }\n        output.Add(3);\n        if
    (n == 2) {\n            return output;\n        }\n        output.Add(2);\n        if
    (n == 3) {\n            return output;\n        }\n        for (long i = 4; i
    <= n; i++) {\n            if (i % 2 == 0) {\n                output.Add(1 + i
    / 2);\n            } else {\n                var tri = output[(int)i - 1] + output[(int)i
    - 2] + output[(int)i - 3];\n                output.Add(tri);\n            }\n
    \       }\n        return output;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <191534c5232b4084a2de5e15f0f90b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <191534c5232b4084a2de5e15f0f90b59>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00098] in <191534"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> ret = new List<long>();\n        long a = 1,
    b = 3, c = 2;\n        ret.Add(a);\n        ret.Add(b);\n        ret.Add(c);\n
    \       for (int i = 3; i <= n; i++) {\n            long x = a + b + c;\n            ret.Add(x);\n
    \           a = b;\n            b = c;\n            c = x;\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <966f6ba6637640ea8560517a050e613b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <966f6ba6637640ea8560517a050e613b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // define your function here\n        List<long> list =
    new List<long>();\n        list.Add(1);\n        if (n == 0) return list;\n        list.Add(3);\n
    \       if (n == 1) return list;\n        list.Add(2);\n        if (n == 2) return
    list;\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n
    \               list.Add(1 + i / 2);\n            } else {\n                list.Add(list[i
    - 1] + list[i - 2] + list[i + 1]);\n            }\n        }\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008c] in <d4c8508ad6b241f694ebcb51a8ee4939>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <d4c8508ad6b241f694ebcb51a8ee4939>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008c]
    in <d4c8508ad6b241f694ebcb51a8ee4939>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <d4c8508ad6b241f694ebcb51a8ee4939>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <96757f25756c4849afac87c0251c1d51>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <96757f25756c4849afac87c0251c1d51>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       if (n > 0) res.Add(3);\n        if (n > 1) res.Add(2);\n        for (int
    i = 3; i <= n; i++) {\n            res.Add(res[i - 1] + res[i - 2] + res[i - 3]);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5685d4de78964c7d9ddcae4c33c4f10f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5685d4de78964c7d9ddcae4c33c4f10f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkhlbmmeb.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // your code here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <d910a90c1e6846619effece01f72b01d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <d910a90c1e6846619effece01f72b01d>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var z = new List<long>();\n        z.Add(1);\n        if
    (n >= 1) z.Add(3);\n        if (n >= 2) z.Add(2);\n        for (int i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                z.Add(1 + i / 2);\n
    \           } else {\n                z.Add(z[i - 1] + z[i - 2] + z[i + 1]);\n
    \           }\n        }\n        return z;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00070] in <65f2ee549a5b4e4592f7bb8a39d208d2>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <65f2ee549a5b4e4592f7bb8a39d208d2>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00070]
    in <65f2ee549a5b4e4592f7bb8a39d208d2>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <65f2ee549a5b4e4592f7bb8a39d208d2>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var output = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            output.Add(tri(i));\n        }\n        return output;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8l2vet9g.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 4; i <= n;
    i++) {\n            long value = (i % 2 == 0) ? 1 + i / 2 : result[i - 1] + result[i
    - 2] + result[i - 3];\n            result.Add(value);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <026b967ea2ad445e9cb631f619c84694>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <026b967ea2ad445e9cb631f619c84694>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0002c] in <026b96"
  stdout: ''
  timestamp: 1660028220
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        var tri = 0L;\n
    \       for (var i = 0L; i <= n; i++) {\n            if (i == 0) {\n                tri
    = 1;\n            } else if (i == 1) {\n                tri = 3;\n            }
    else if (i == 2) {\n                tri = 2;\n            } else if (i % 2 ==
    0) {\n                tri = 1 + i / 2;\n            } else {\n                tri
    = result[(int)i - 1] + result[(int)i - 2] + result[(int)i - 3];\n            }\n
    \           result.Add(tri);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8cf30debbd64b94a2761a7fc78d0cca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8cf30debbd64b94a2761a7fc78d0cca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long> { 1 };\n
    \       }\n        if (n == 1) {\n            return new List<long> { 1, 3 };\n
    \       }\n        if (n == 2) {\n            return new List<long> { 1, 3, 2
    };\n        }\n        long[] dp = new long[n + 1];\n        dp[0] = 1;\n        dp[1]
    = 3;\n        dp[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            if
    (i % 2 == 0) {\n                dp[i] = 1 + i / 2;\n            } else {\n                dp[i]
    = dp[i - 1] + dp[i - 2] + dp[i + 1];\n            }\n        }\n        return
    dp.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x000b2] in <ed666514657148afa987d20299f0409e>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <ed666514657148afa987d20299f0409e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x000b2]
    in <ed666514657148afa987d20299f0409e>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ed666514657148afa987d20299f0409e>:0 \n"
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <96757f25756c4849afac87c0251c1d51>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <96757f25756c4849afac87c0251c1d51>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> arr = new List<long>();\n        arr.Add(1);\n
    \       if (n == 0) {\n            return arr;\n        }\n        arr.Add(3);\n
    \       if (n == 1) {\n            return arr;\n        }\n        arr.Add(2);\n
    \       if (n == 2) {\n            return arr;\n        }\n        for (int i
    = 3; i <= n; i++) {\n            long num = 0;\n            if (i % 2 == 0) {\n
    \               num = 1 + i / 2;\n            } else {\n                num =
    arr[i - 1] + arr[i - 2] + arr[i - 3];\n            }\n            arr.Add(num);\n
    \       }\n        return arr;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3da6d33ba1b54ba3bacfd0b052baeb5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3da6d33ba1b54ba3bacfd0b052baeb5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // your code here.\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <566d28d11c834b4d8f7952fcf6aafd70>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <566d28d11c834b4d8f7952fcf6aafd70>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       for (long i = 1; i <= n; i++) {\n            result.Add(TriRec(i));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpplwztsje.cs(29,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        long cur =
    1;\n        res.Add(cur);\n        while (res.Count <= n) {\n            if (cur
    % 2 == 0) {\n                res.Add(cur / 2 + 1);\n            } else {\n                res.Add(res[res.Count
    - 1] + res[res.Count - 2] + res[res.Count - 3]);\n            }\n            cur++;\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0004a] in <d84a68d603454a09947cc21c2d821b1b>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <d84a68d603454a09947cc21c2d821b1b>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0004a]
    in <d84a68d603454a09947cc21c2d821b1b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <d84a68d603454a09947cc21c2d821b1b>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 2; i < n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(result[i] +
    result[i - 1] + result[i + 1]);\n            } else {\n                result.Add(1
    + i / 2);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00043] in <253915c2e7d24f80a2e984339fdf76da>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <253915c2e7d24f80a2e984339fdf76da>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00043]
    in <253915c2e7d24f80a2e984339fdf76da>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <253915c2e7d24f80a2e984339fdf76da>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n                result.Add(3);\n
    \           } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 2] + result[(int)i
    - 3] + result[(int)i]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <da47a6adac6545d886d09e15a01e3e59>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <da47a6adac6545d886d09e15a01e3e59>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <da47a6adac6545d886d09e15a01e3e59>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <da47a6adac6545d886d09e15a01e3e59>:0 \n"
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        for (long i
    = 0; i <= n; i++) {\n            if (i == 0) {\n                res.Add(1);\n
    \           } else if (i == 1) {\n                res.Add(3);\n            } else
    if (i == 2) {\n                res.Add(2);\n            } else if (i % 2 == 0)
    {\n                res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i
    - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzd5itok2.cs(37,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpzd5itok2.cs(37,42): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpzd5itok2.cs(37,55): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Insert your code here\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <15bf07a5c34f4f1e88e3ea31f8932758>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <15bf07a5c34f4f1e88e3ea31f8932758>:0
    \n"
  stdout: ''
  timestamp: 1660028220
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // This was a problem where I had to use a dynamic programming
    approach.\n        // I started off with a list of size n + 1. This was so that
    the list would always\n        // have room for a new value. The first list element
    was not going to be used.\n        // After that, I used a for loop to iterate
    through the list. I used an if \n        // statement to check if the element
    was 1 or if it was even. If it was then the\n        // value of the element got
    set to 1 + n / 2. If it was odd then I found the \n        // value using the
    formula tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1). I did\n        // this
    by using the index of the element in the list - 1, - 2, and + 1.\n        List<long>
    list = new List<long>();\n        list.Add(0);\n        for (int i = 1; i <= n;
    i++) {\n            if (i == 1 || i % 2 == 0) {\n                list.Add(1 +
    i / 2);\n            } else {\n                list.Add(list[i - 1] + list[i -
    2] + list[i + 1]);\n            }\n        }\n        return list;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0004b] in <4f4524beddca439ebf423f47c14183b2>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <4f4524beddca439ebf423f47c14183b2>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0004b]
    in <4f4524beddca439ebf423f47c14183b2>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <4f4524beddca439ebf423f47c14183b2>:0 \n"
  stdout: ''
  timestamp: 1660028220
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Create a new list of integers to store the sequence.\n
    \       List<long> result = new List<long>();\n        // Start a sequence from
    1.\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        //
    Iterate from 3 to n.\n        for (int i = 3; i <= n; i++) {\n            // Check
    if the current number is even.\n            if (i % 2 == 0) {\n                //
    If the number is even, then just add i / 2 to the list.\n                result.Add(i
    / 2);\n            } else {\n                // If the number is odd, then sum
    up the last 3 elements of the list.\n                result.Add(result[i - 1]
    + result[i - 2] + result[i - 3]);\n            }\n        }\n        // Return
    the list.\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86baebaaa3b64b60bae021f6ae573a51>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86baebaaa3b64b60bae021f6ae573a51>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028220
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n <=
    0) {\n            return result;\n        }\n        result.Add(1);\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       for (int i = 3; i <= n; i++) {\n            long v = result[i - 1] + result[i
    - 2] + result[i - 3];\n            result.Add(v);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f4a29425bf174d299077366044f3ca1e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f4a29425bf174d299077366044f3ca1e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        for (long i
    = 0; i <= n; i++)\n            res.Add(tri(i));\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvjbbn4qg.cs(28,21): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028220
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long> { 1L, 3L, 2L };\n        for
    (int i = 3; i <= n; i++) {\n            result.Add(result[i - 1] + result[i -
    2] + result[i - 3]);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a286354dc9804cad95f941e168f798e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a286354dc9804cad95f941e168f798e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <96757f25756c4849afac87c0251c1d51>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <96757f25756c4849afac87c0251c1d51>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var l = new List<long>();\n        l.Add(1);\n        l.Add(3);\n
    \       l.Add(2);\n        for (int i = 3; i <= n; i++) {\n            long nth;\n
    \           if (i % 2 == 0) {\n                nth = 1 + i / 2;\n            }
    else {\n                nth = l[i - 1] + l[i - 2] + l[i + 1];\n            }\n
    \           l.Add(nth);\n        }\n        return l;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0004f] in <de00aadefaf749cc92cce7bbbf76b15a>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <de00aadefaf749cc92cce7bbbf76b15a>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0004f]
    in <de00aadefaf749cc92cce7bbbf76b15a>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <de00aadefaf749cc92cce7bbbf76b15a>:0 \n"
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        for (int i = 0; i
    <= n; i++)\n            res.Add(Tri(i));\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnb8y27r.cs(28,21): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028220
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var l = new List<long>();\n        long a = 1, b = 3, c
    = 2;\n        l.Add(a);\n        l.Add(b);\n        l.Add(c);\n        for (long
    i = 3; i <= n; i++) {\n            long d = 0;\n            if (i % 2 == 0) {\n
    \               d = 1 + i / 2;\n            } else {\n                d = a +
    b + c;\n            }\n            a = b;\n            b = c;\n            c =
    d;\n            l.Add(d);\n        }\n        return l;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a014bbef9f94f6c9987b622b21048b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a014bbef9f94f6c9987b622b21048b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>() {1L, 3L, 2L};\n        for (int
    i = 3; i <= n; i++) {\n            res.Add(res[i - 2] + res[i - 1] + res[i]);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0003a] in <93db77116ae749628fdaabaff207607d>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <93db77116ae749628fdaabaff207607d>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0003a]
    in <93db77116ae749628fdaabaff207607d>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <93db77116ae749628fdaabaff207607d>:0 \n"
  stdout: ''
  timestamp: 1660028220
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // >>> Tri((3L))\n        // (new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))\n        List<long> list = new List<long>();\n
    \       // >>> Tri((3L))\n        // (new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))\n        list.Add((long)1L);\n        // >>> Tri((3L))\n
    \       // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n
    \       list.Add((long)3L);\n        // >>> Tri((3L))\n        // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n        list.Add((long)2L);\n
    \       // >>> Tri((3L))\n        // (new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))\n        list.Add((long)8L);\n        // >>> Tri((3L))\n
    \       // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n
    \       return list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7d85dfb229949af937ac5cf5e5af0d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7d85dfb229949af937ac5cf5e5af0d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028220
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        if (n <= 0) {\n
    \           return result;\n        }\n        result.Add(1);\n        if (n >
    0) {\n            result.Add(3);\n        }\n        long a = 1;\n        long
    b = 3;\n        long c = 2;\n        for (int i = 2; i <= n; i++) {\n            if
    (i % 2 == 0) {\n                result.Add(a);\n            } else {\n                result.Add(b
    + c + a);\n                a = b;\n                b = c;\n                c =
    result[i];\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8626101829e1407383918de7157bba97>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8626101829e1407383918de7157bba97>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> t = new List<long>();\n        t.Add(1);\n        t.Add(3);\n
    \       for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                t.Add(1
    + i / 2);\n            } else {\n                t.Add(t[i - 1] + t[i - 2] + t[i
    + 1]);\n            }\n        }\n        return t;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0004d] in <455af78f094d45539e45e88cecabd4a5>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <455af78f094d45539e45e88cecabd4a5>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0004d]
    in <455af78f094d45539e45e88cecabd4a5>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <455af78f094d45539e45e88cecabd4a5>:0 \n"
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        long i = 3;\n        while
    (result.Count < n + 1) {\n            result.Add(TriRec(i));\n            i++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2s01fzsm.cs(32,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <b6609e32c87d44b99b79486231b6258b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <b6609e32c87d44b99b79486231b6258b>:0
    \n"
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tribonacci(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy6s_6qw9.cs(28,24): error CS0103: The name ''Tribonacci'' does not exist
    in the current context

    '
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var ret = new List<long>();\n        var tri = new long[n
    + 1];\n        tri[0] = 1;\n        tri[1] = 3;\n        tri[2] = 2;\n        for
    (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tri[i]
    = 1 + i / 2;\n            } else {\n                tri[i] = tri[i - 1] + tri[i
    - 2] + tri[i + 1];\n            }\n        }\n        for (int i = 0; i <= n;
    i++) {\n            ret.Add(tri[i]);\n        }\n        return ret;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x0003e] in <152660982d70450d992ec1bc8c59f4c8>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <152660982d70450d992ec1bc8c59f4c8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x0003e]
    in <152660982d70450d992ec1bc8c59f4c8>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <152660982d70450d992ec1bc8c59f4c8>:0 \n"
  stdout: ''
  timestamp: 1660028220
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // TODO: Implement the solution here.\n        var result
    = new List<long> { 1, 3, 2 };\n        for (var i = 0; i < n; i++) {\n            if
    (i < 2) {\n                result.Add(1);\n            } else {\n                result.Add(result[i]
    + result[i - 1] + result[i - 2]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8263cc2cd1d4e53aae5b6ecd4081260>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8263cc2cd1d4e53aae5b6ecd4081260>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028220
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var r = new List<long>();\n        r.Add(1);\n        if
    (n == 0) return r;\n        r.Add(3);\n        if (n == 1) return r;\n        r.Add(2);\n
    \       if (n == 2) return r;\n        long a = 3;\n        long b = 2;\n        long
    c = 1;\n        long t = 8;\n        while (r.Count < n + 1) {\n            r.Add(t);\n
    \           a = b;\n            b = c;\n            c = t;\n            t = c
    + a + b;\n        }\n        return r;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2f0408d966a48cea20274cf7e6a0998>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2f0408d966a48cea20274cf7e6a0998>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028220
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <96757f25756c4849afac87c0251c1d51>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <96757f25756c4849afac87c0251c1d51>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n == 0) {\n            return new List<long> { 1 };\n
    \       }\n        if (n == 1) {\n            return new List<long> { 1, 3 };\n
    \       }\n        if (n == 2) {\n            return new List<long> { 1, 3, 2
    };\n        }\n        var result = new List<long> { 1, 3, 2 };\n        long
    i = 2;\n        while (i < n) {\n            long next = result[i] + result[i
    - 1] + result[i - 2];\n            result.Add(next);\n            i++;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu8hx2_hb.cs(38,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpu8hx2_hb.cs(38,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpu8hx2_hb.cs(38,60): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028221
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Implement your solution below.\n        List<long> toReturn
    = new List<long>();\n        if (n == 0)\n        {\n            toReturn.Add(1);\n
    \           return toReturn;\n        }\n        toReturn.Add(1);\n        toReturn.Add(3);\n
    \       if (n == 1)\n        {\n            return toReturn;\n        }\n        toReturn.Add(2);\n
    \       if (n == 2)\n        {\n            return toReturn;\n        }\n        for
    (int i = 3; i <= n; i++)\n        {\n            long toAdd = (i % 2 == 0) ? (1
    + i / 2) : (toReturn[i - 1] + toReturn[i - 2] + toReturn[i - 3]);\n            toReturn.Add(toAdd);\n
    \       }\n        return toReturn;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <347bfbd9474948d3bf067beb6037f6f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <347bfbd9474948d3bf067beb6037f6f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028221
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long a = 1, b = 3, c = 2;\n        List<long> res = new
    List<long>();\n        res.Add(a);\n        res.Add(b);\n        res.Add(c);\n
    \       for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                long
    x = 1 + i / 2;\n                res.Add(x);\n            } else {\n                long
    d = a + b + c;\n                res.Add(d);\n                a = b;\n                b
    = c;\n                c = d;\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <109e1dbc67e143a98e522ebee17442be>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <109e1dbc67e143a98e522ebee17442be>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028221
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        var x = 1L;\n        var
    y = 1L;\n        var z = 1L;\n        for (var i = 0L; i <= n; i++) {\n            if
    (i == 0) {\n                result.Add(x);\n            } else if (i == 1) {\n
    \               result.Add(y);\n            } else if (i == 2) {\n                result.Add(z);\n
    \           } else {\n                var c = x + y + z;\n                result.Add(c);\n
    \               x = y;\n                y = z;\n                z = c;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a330eeeb7ac7482b965f2a17dff407d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a330eeeb7ac7482b965f2a17dff407d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Initialize the tribonacci numbers\n        List<long>
    f = new List<long>() { 1, 3, 2 };\n        // Return the list when there are enough
    elements\n        if (n + 1 <= f.Count) {\n            return f.GetRange(0, (int)n
    + 1);\n        }\n        // Calculate all the missing numbers\n        long a
    = 0, b = 0, c = 0;\n        for (long i = f.Count; i <= n; i++) {\n            if
    (i % 2 == 0) {\n                f.Add(1 + i / 2);\n            } else {\n                a
    = f[(int)i - 1];\n                b = f[(int)i - 2];\n                c = f[(int)i
    + 1];\n                f.Add(a + b + c);\n            }\n        }\n        return
    f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0009b] in <b739dcb962574dc19f27babb5e23611c>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b739dcb962574dc19f27babb5e23611c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0009b]
    in <b739dcb962574dc19f27babb5e23611c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b739dcb962574dc19f27babb5e23611c>:0 \n"
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <fed76c5199a94548ab0c0beda6dd79f0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <fed76c5199a94548ab0c0beda6dd79f0>:0
    \n"
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // your code here\n        List<long> tri = new List<long>();\n
    \       tri.Add(1);\n        tri.Add(3);\n        tri.Add(2);\n        for (int
    i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tri.Add(1
    + i / 2);\n            } else {\n                tri.Add(tri[i - 1] + tri[i -
    2] + tri[i + 1]);\n            }\n        }\n        return tri;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <400c8c5c39894a7f8003de0b2f0f71ca>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <400c8c5c39894a7f8003de0b2f0f71ca>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <400c8c5c39894a7f8003de0b2f0f71ca>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <400c8c5c39894a7f8003de0b2f0f71ca>:0 \n"
  stdout: ''
  timestamp: 1660028221
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // replace the body of this function with a correct implementation\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a89e2682a45a40bfbe57eceffbd8bbc1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a89e2682a45a40bfbe57eceffbd8bbc1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028221
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long> {1L, 3L};\n        for (int
    i = 2; i <= n; i++) {\n            var a = result[i - 2];\n            var b =
    result[i - 1];\n            var c = i % 2 == 0 ? 1 + i / 2 : a + b + result[0];\n
    \           result.Add(c);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2c714fe583f4851bff772d04de34477>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2c714fe583f4851bff772d04de34477>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <96757f25756c4849afac87c0251c1d51>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <96757f25756c4849afac87c0251c1d51>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var ret = new List<long>();\n        ret.Add(1);\n        if
    (n >= 1) {\n            ret.Add(3);\n        }\n        if (n >= 2) {\n            ret.Add(2);\n
    \       }\n        if (n >= 3) {\n            for (int i = 3; i <= n; i++) {\n
    \               if (i % 2 == 0) {\n                    ret.Add(1 + i / 2);\n                }
    else {\n                    ret.Add(ret[i - 1] + ret[i - 2] + ret[i + 1]);\n                }\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00086] in <e67223f27e844ef984dadb02fdf196e1>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <e67223f27e844ef984dadb02fdf196e1>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00086]
    in <e67223f27e844ef984dadb02fdf196e1>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <e67223f27e844ef984dadb02fdf196e1>:0 \n"
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <96757f25756c4849afac87c0251c1d51>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <96757f25756c4849afac87c0251c1d51>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var a = new List<long>();\n        for (long i = 0; i <=
    n; i++) {\n            if (i == 0) {\n                a.Add(1);\n            }
    else if (i == 1) {\n                a.Add(3);\n            } else if (i == 2)
    {\n                a.Add(2);\n            } else if (i % 2 == 0) {\n                a.Add(1
    + i / 2);\n            } else {\n                a.Add(a[i - 1] + a[i - 2] + a[i
    + 1]);\n            }\n        }\n        return a;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw1angbp7.cs(37,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpw1angbp7.cs(37,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpw1angbp7.cs(37,47): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660028221
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> ans = new List<long>();\n        ans.Add(1);\n
    \       for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                ans.Add(3);\n
    \           } else if (i % 2 == 0) {\n                ans.Add(1 + i / 2);\n            }
    else {\n                ans.Add(ans[i - 1] + ans[i - 2] + ans[i + 1]);\n            }\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00059] in <5e45c795a36d4ac1a9d15f7f79fc63a5>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <5e45c795a36d4ac1a9d15f7f79fc63a5>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00059]
    in <5e45c795a36d4ac1a9d15f7f79fc63a5>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <5e45c795a36d4ac1a9d15f7f79fc63a5>:0 \n"
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <96757f25756c4849afac87c0251c1d51>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <96757f25756c4849afac87c0251c1d51>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> r = new List<long>();\n        r.Add(1);\n        r.Add(3);\n
    \       r.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %
    2 == 0) {\n                r.Add(1 + i / 2);\n            } else {\n                r.Add(r[i
    - 1] + r[i - 2] + r[i + 1]);\n            }\n        }\n        return r;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <eecbdf36f0494171adc289e47dd8287b>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <eecbdf36f0494171adc289e47dd8287b>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <eecbdf36f0494171adc289e47dd8287b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <eecbdf36f0494171adc289e47dd8287b>:0 \n"
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long a = 1;\n        long b = 3;\n        long c = 2;\n
    \       var ans = new List<long> { 1, 3, 2 };\n        for (int i = 3; i <= n;
    i++) {\n            var x = a + b + c;\n            a = b;\n            b = c;\n
    \           c = x;\n            ans.Add(x);\n        }\n        return ans;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1890cf0f02a44a75b39750f2877ae630>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1890cf0f02a44a75b39750f2877ae630>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028221
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Fill the answer\n        List<long> ret = new List<long>();\n
    \       for (int i = 0; i <= n; i++)\n            ret.Add(-1);\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1c8f202f1ac420e963a785bc4542242>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1c8f202f1ac420e963a785bc4542242>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028221
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var seq = new List<long>();\n        for (int i = 0; i
    <= n; i++) {\n            seq.Add(Tri(i));\n        }\n        return seq;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7y9c9lb8.cs(28,21): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> ans = new List<long>();\n        if (n == 0)\n
    \           return ans;\n        ans.Add(1);\n        if (n == 1)\n            return
    ans;\n        ans.Add(3);\n        if (n == 2)\n            return ans;\n        long
    tri = 0;\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0)\n
    \               tri = 1 + i / 2;\n            else\n                tri = ans[i
    - 1] + ans[i - 2] + ans[i - 3];\n            ans.Add(tri);\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00067] in <4a8ce1813be4470fa14a16bc84a0373f>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <4a8ce1813be4470fa14a16bc84a0373f>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00067]
    in <4a8ce1813be4470fa14a16bc84a0373f>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <4a8ce1813be4470fa14a16bc84a0373f>:0 \n"
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        res.Add(1);\n        res.Add(3);\n
    \       res.Add(2);\n        var i = 4;\n        while (i <= n) {\n            res.Add(3
    * res[i - 1] - res[i - 2] - res[i - 3]);\n            i = i + 1;\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <754c3522b0b44e2a9055276076047513>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00027] in <754c3522b0b44e2a9055276076047513>:0 \n  at Problem.Main (System.String[]
    args) [0x00029] in <754c3522b0b44e2a9055276076047513>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00027]
    in <754c3522b0b44e2a9055276076047513>:0 \n  at Problem.Main (System.String[] args)
    [0x00029] in <754c3522b0b44e2a9055276076047513>:0 \n"
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long[] tri = new long[n + 1];\n        for (int i = 1;
    i <= n; i++) {\n            if (i == 1) {\n                tri[i] = 3;\n            }
    else if (i % 2 == 0) {\n                tri[i] = 1 + i / 2;\n            } else
    {\n                tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1];\n            }\n
    \       }\n        return tri.ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x0003a] in <8882a20015144a7bbad764bcf9559d96>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <8882a20015144a7bbad764bcf9559d96>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x0003a]
    in <8882a20015144a7bbad764bcf9559d96>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8882a20015144a7bbad764bcf9559d96>:0 \n"
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var a = new List<long>();\n        // Your code here\n
    \       for (long i = 0; i <= n; i++) {\n            if (i == 0) {\n                a.Add(1);\n
    \           } else if (i == 1) {\n                a.Add(3);\n            } else
    if (i == 2) {\n                a.Add(2);\n            } else if (i % 2 == 0) {\n
    \               a.Add(1 + i / 2);\n            } else {\n                a.Add(a[(int)i
    - 1] + a[(int)i - 2] + a[(int)i + 1]);\n            }\n        }\n        return
    a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008a] in <630e66a8a8d64a73a7e7c7d82d18c923>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <630e66a8a8d64a73a7e7c7d82d18c923>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008a]
    in <630e66a8a8d64a73a7e7c7d82d18c923>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <630e66a8a8d64a73a7e7c7d82d18c923>:0 \n"
  stdout: ''
  timestamp: 1660028221
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var r = new List<long> {1L, 3L, 2L};\n        for (int
    i = 3; i <= n; i++) {\n            r.Add(r[i-1] + r[i-2] + r[i-3]);\n        }\n
    \       return r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e608c27613214104a46f7b93f77dc052>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e608c27613214104a46f7b93f77dc052>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <96757f25756c4849afac87c0251c1d51>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <96757f25756c4849afac87c0251c1d51>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <86fd399317e244b985b3444c7dfec76a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <86fd399317e244b985b3444c7dfec76a>:0 \n"
  stdout: ''
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        var tri = new List<long>();\n
    \       var i = 0L;\n        while(i <= n) {\n            if(i == 0) {\n                tri.Add(1L);\n
    \           } else if(i == 1) {\n                tri.Add(3L);\n            } else
    if(i == 2) {\n                tri.Add(2L);\n            } else if(i % 2 == 0)
    {\n                tri.Add(1L + i / 2);\n            } else {\n                tri.Add(tri[(int)(i
    - 1)] + tri[(int)(i - 2)] + tri[(int)(i + 1)]);\n            }\n            i
    = i + 1;\n        }\n        res = tri;\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00094] in <0e5e8eaabe1a4b338429324be6f0144d>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <0e5e8eaabe1a4b338429324be6f0144d>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00094]
    in <0e5e8eaabe1a4b338429324be6f0144d>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <0e5e8eaabe1a4b338429324be6f0144d>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> results = new List<long>() { 1, 3, 2 };\n        if
    (n <= 2) {\n            return results.GetRange(0, (int)n + 1);\n        }\n\n
    \       for (int i = 3; i <= n; i++) {\n            long new_tri = results[i -
    1] + results[i - 2] + results[i - 3];\n            results.Add(new_tri);\n        }\n
    \       return results;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4bc63df7e28471f8fb34485e0d799f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4bc63df7e28471f8fb34485e0d799f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var ret = new List<long> { 1, 3, 2 };\n        for (int
    i = 0; i < n; i++) {\n            ret.Add(i % 2 == 0 ? (i + 2) / 2 : ret[i - 1]
    + ret[i - 2] + ret[i + 1]);\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00036] in <57e2197fed5542399ce99f52d241017e>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <57e2197fed5542399ce99f52d241017e>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00036]
    in <57e2197fed5542399ce99f52d241017e>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <57e2197fed5542399ce99f52d241017e>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var ret = new List<long>();\n        ret.Add(1);\n        ret.Add(3);\n
    \       for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                ret.Add(1
    + i / 2);\n            } else {\n                ret.Add(ret[i - 1] + ret[i -
    2] + ret[i + 1]);\n            }\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0004d] in <e433c1190d0a4e178ea09641cb474514>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <e433c1190d0a4e178ea09641cb474514>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0004d]
    in <e433c1190d0a4e178ea09641cb474514>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <e433c1190d0a4e178ea09641cb474514>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var t0 = 1L;\n        var t1 = 3L;\n        var t2 = 2L;\n
    \       var tn = 0L;\n        var tri = new List<long>();\n        for (var i
    = 0L; i <= n; i++) {\n            if (i == 0) {\n                tri.Add(t0);\n
    \           } else if (i == 1) {\n                tri.Add(t1);\n            }
    else if (i == 2) {\n                tri.Add(t2);\n            } else {\n                if
    (i % 2 == 0) {\n                    tn = 1 + i / 2;\n                } else {\n
    \                   tn = t2 + t1 + t0;\n                }\n                t0
    = t1;\n                t1 = t2;\n                t2 = tn;\n                tri.Add(tn);\n
    \           }\n        }\n        return tri;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b842a8b4327c4f1d8d7cc81f460ed224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b842a8b4327c4f1d8d7cc81f460ed224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var results = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            results.Add(i == 0 ? 1 : TriHelper(i));\n        }\n
    \       return results;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmo0abpli.cs(28,38): error CS0103: The name ''TriHelper'' does not exist
    in the current context

    '
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqm5l__y4.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028221
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        var s = new Stack<long>();\n
    \       s.Push(1);\n        var next = (long) 3;\n        while(s.Count > 0) {\n
    \           var top = s.Pop();\n            if(top % 2 == 0) {\n                result.Add(1
    + top / 2);\n            } else {\n                result.Add(next);\n                next
    = 0;\n                if(s.Count > 0) {\n                    var one = s.Pop();\n
    \                   var two = s.Pop();\n                    next = one + two +
    next;\n                    s.Push(two);\n                    s.Push(one);\n                }\n
    \           }\n            if(top < n) {\n                s.Push(top + 1);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4bd3b1e7077e449ebc2567b805a4cf9b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4bd3b1e7077e449ebc2567b805a4cf9b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return new List<long> { 1L, 3L, 2L, 8L };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a0dacc2e71a485b956e75f61ef8ebbf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a0dacc2e71a485b956e75f61ef8ebbf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return Enumerable.Range(0, (int)n+1).Select(i => Tri(i)).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfb7x94u3.cs(26,16): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<System.Collections.Generic.List<long>>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1660028221
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> arr = new List<long>();\n        for (int i
    = 0; i <= n; i++) {\n            if (i == 0) {\n                arr.Add(1);\n
    \           } else if (i == 1) {\n                arr.Add(3);\n            } else
    if (i == 2) {\n                arr.Add(2);\n            } else if (i % 2 == 0)
    {\n                arr.Add(1 + i / 2);\n            } else {\n                arr.Add(arr[i
    - 1] + arr[i - 2] + arr[i + 1]);\n            }\n        }\n        return arr;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00081] in <d053e0c965a04366a0a4c5779e1d241e>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <d053e0c965a04366a0a4c5779e1d241e>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00081]
    in <d053e0c965a04366a0a4c5779e1d241e>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <d053e0c965a04366a0a4c5779e1d241e>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // ... (your solution here)\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83716fd45ab14f5daaed86424e95a681>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83716fd45ab14f5daaed86424e95a681>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 0) return new List<long>();\n        var list
    = new List<long>();\n        long tri1 = 1;\n        long tri2 = 3;\n        long
    tri3 = 2;\n        long temp;\n        list.Add(tri1);\n        if (n > 1) list.Add(tri2);\n
    \       if (n > 2) list.Add(tri3);\n        for (int i = 4; i <= n; i++) {\n            if
    (i % 2 == 0) {\n                temp = 1 + i / 2;\n            } else {\n                temp
    = tri1 + tri2 + tri3;\n            }\n            list.Add(temp);\n            tri1
    = tri2;\n            tri2 = tri3;\n            tri3 = temp;\n        }\n        return
    list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6dbca1acef44c539ee9f6414831dcaa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6dbca1acef44c539ee9f6414831dcaa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> ans = new List<long>();\n        if (n == 0)\n
    \           return ans;\n        ans.Add(1);\n        if (n == 1)\n            return
    ans;\n        ans.Add(3);\n        if (n == 2)\n            return ans;\n        ans.Add(2);\n
    \       for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0)\n                ans.Add(1
    + i / 2);\n            else\n                ans.Add(ans[i - 1] + ans[i - 2] +
    ans[i + 1]);\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00089] in <17e0306a88bf4afeb1279ac4e028403b>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <17e0306a88bf4afeb1279ac4e028403b>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00089]
    in <17e0306a88bf4afeb1279ac4e028403b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <17e0306a88bf4afeb1279ac4e028403b>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            result.Add(result[i - 1] + result[i - 2] + result[i - 3]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32a6e393fb144f2ea0e3a22ced2355ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32a6e393fb144f2ea0e3a22ced2355ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var buffer = new List<long>();\n        buffer.Add(1);\n
    \       buffer.Add(3);\n        buffer.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            buffer.Add(i % 2 == 0 ? 1 + i / 2 : buffer[i - 1] + buffer[i
    - 2] + buffer[i + 1]);\n        }\n        return buffer;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0003f] in <c23cc5745c1f44a788f5a742dec6176c>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c23cc5745c1f44a788f5a742dec6176c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0003f]
    in <c23cc5745c1f44a788f5a742dec6176c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c23cc5745c1f44a788f5a742dec6176c>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       if (n > 0) {\n            result.Add(3);\n            if (n > 1) {\n                result.Add(2);\n
    \               if (n > 2) {\n                    long k = 2;\n                    while
    (k < n) {\n                        long m = k + 1;\n                        if
    (m % 2 == 0) {\n                            result.Add(1 + m / 2);\n                        }
    else {\n                            result.Add(result[(int)k] + result[(int)k
    - 1] + result[(int)k + 1]);\n                        }\n                        k
    = k + 1;\n                    }\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008c] in <76592033da574eb2b411115d4780b216>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <76592033da574eb2b411115d4780b216>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008c]
    in <76592033da574eb2b411115d4780b216>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <76592033da574eb2b411115d4780b216>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var seq = new List<long>();\n        long cur = 1;\n        seq.Add(cur);\n
    \       while (cur <= n) {\n            long nxt = 1;\n            if (cur % 2
    == 0) {\n                nxt = 1 + cur / 2;\n            } else {\n                nxt
    = seq[(int)cur - 1] + seq[(int)cur - 2] + seq[(int)cur + 1];\n            }\n
    \           seq.Add(nxt);\n            cur = cur + 1;\n        }\n        return
    seq;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0003b] in <448aec0e25f34ce98f6229dd8bd19e83>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <448aec0e25f34ce98f6229dd8bd19e83>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0003b]
    in <448aec0e25f34ce98f6229dd8bd19e83>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <448aec0e25f34ce98f6229dd8bd19e83>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Fill with your code\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <d5070c21213140028f0cdbb96a00eb36>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <d5070c21213140028f0cdbb96a00eb36>:0
    \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // (You may use System.Numerics.BigInteger(int) constructor
    and all arithmetic operators \n        // in the operators table)\n        //
    (You may use System.Collections.Generic.List<BigInteger>(int) and \n        //
    .Add(BigInteger) methods)\n        // Do not use any other types.\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <2042cda15db3416b942c594fe4751b5d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <2042cda15db3416b942c594fe4751b5d>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        if (n == 0)
    {\n            list.Add(1);\n            return list;\n        } else if (n ==
    1) {\n            list.Add(1);\n            list.Add(3);\n            return list;\n
    \       } else if (n == 2) {\n            list.Add(1);\n            list.Add(3);\n
    \           list.Add(2);\n            return list;\n        } else {\n            list.Add(1);\n
    \           list.Add(3);\n            list.Add(2);\n            long i = 3;\n
    \           while (i <= n) {\n                if (i % 2 == 0) {\n                    list.Add(1
    + i / 2);\n                } else {\n                    list.Add(list[(int)i
    - 1] + list[(int)i - 2] + list[(int)i + 1]);\n                }\n                i++;\n
    \           }\n            return list;\n        }\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x000cf] in <b67272efbc9846b597ac7c2818324aef>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b67272efbc9846b597ac7c2818324aef>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x000cf]
    in <b67272efbc9846b597ac7c2818324aef>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b67272efbc9846b597ac7c2818324aef>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        list.Add(1);\n        list.Add(3);\n
    \       list.Add(2);\n        for (int i = 3; i <= n; i++) {\n            list.Add(TriNext(list,
    i));\n        }\n        return list;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw7enet1f.cs(31,22): error CS0103: The name ''TriNext'' does not exist
    in the current context

    '
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        if (n == 0) { return
    result; }\n        result.Add(1);\n        if (n == 1) { return result; }\n        result.Add(3);\n
    \       if (n == 2) { return result; }\n        result.Add(2);\n        if (n
    == 3) { return result; }\n        for (int i = 4; i <= n; i++) {\n            if
    (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n
    \               result.Add(result[i - 2] + result[i - 3] + result[i - 1]);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d465204737e4225a77f3569db822495>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d465204737e4225a77f3569db822495>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x000a2] in <5d4652"
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       for (int i = 1; i < n; i++) {\n            result.Add(2);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb500225beb4408baa54bebdf8649d08>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb500225beb4408baa54bebdf8649d08>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // your code here\n        // get started\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <770d97396fbd4ae3bd9fc0c39574e53b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <770d97396fbd4ae3bd9fc0c39574e53b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        long n1 = 1;\n
    \       long n2 = 3;\n        long n3 = 2;\n        long n4 = 8;\n        result.Add(n1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(n2);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(n3);\n
    \       if (n == 2) {\n            return result;\n        }\n        result.Add(n4);\n
    \       for (long i = 3; i < n; i++) {\n            long n5 = (n4 + n3 + n2 +
    1) / 2;\n            result.Add(n5);\n            n1 = n2;\n            n2 = n3;\n
    \           n3 = n4;\n            n4 = n5;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d38611c770344030ba761771c714392b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d38611c770344030ba761771c714392b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f10b03f08da94cab9759bb819d9ccc61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f10b03f08da94cab9759bb819d9ccc61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var T = new List<long>();\n        T.Add(1);\n        T.Add(3);\n
    \       T.Add(2);\n        for (int i = 3; i <= n; i++) {\n            T.Add(T[i
    - 1] + T[i - 2] + T[i - 3]);\n        }\n        return T;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a2d538cf5054f76a77fabae0ea04ae7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a2d538cf5054f76a77fabae0ea04ae7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code here\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <33e42916c04342758c4286b70d32154d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <33e42916c04342758c4286b70d32154d>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> l = new List<long>();\n        if (n == 0) {\n
    \           l.Add(1);\n            return l;\n        }\n        l.Add(1);\n        l.Add(3);\n
    \       if (n == 1) {\n            return l;\n        }\n        l.Add(2);\n        if
    (n == 2) {\n            return l;\n        }\n        while (n > 2) {\n            if
    (n % 2 == 0) {\n                l.Add(1 + n / 2);\n            } else {\n                l.Add(l[l.Count
    - 1] + l[l.Count - 2] + l[l.Count - 3]);\n            }\n            n -= 1;\n
    \       }\n        return l;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a22ff7672eca4eb686d7381a29cce1a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a22ff7672eca4eb686d7381a29cce1a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 0) {\n            throw new ArgumentException(\"n
    is negative\");\n        }\n        List<long> result = new List<long>((int)n
    + 1);\n        result.Add(1);\n        if (n > 0) {\n            result.Add(3);\n
    \       }\n        for (int i = 2; i <= n; i++) {\n            long tri = 0;\n
    \           if (i % 2 == 0) {\n                tri = 1 + i / 2;\n            }
    else {\n                tri = result[i - 1] + result[i - 2] + result[i + 1];\n
    \           }\n            result.Add(tri);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00071] in <314de94aca274338bddaf9b91c207a2c>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <314de94aca274338bddaf9b91c207a2c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00071]
    in <314de94aca274338bddaf9b91c207a2c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <314de94aca274338bddaf9b91c207a2c>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        res.Add(1);\n        if
    (n == 0) return res;\n        res.Add(3);\n        if (n == 1) return res;\n        res.Add(2);\n
    \       if (n == 2) return res;\n        for (int i = 3; i <= n; i++) {\n            if
    (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i
    - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008c] in <52959c7b655d4cef8a4c1945fc08acd4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <52959c7b655d4cef8a4c1945fc08acd4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008c]
    in <52959c7b655d4cef8a4c1945fc08acd4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <52959c7b655d4cef8a4c1945fc08acd4>:0 \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        var result = new List<long>();\n
    \       for (long i = 0; i <= n; i++) {\n            result.Add(TriOne(i));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ridfyr8.cs(29,24): error CS0103: The name ''TriOne'' does not exist in
    the current context

    '
  timestamp: 1660028222
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        // your
    solution here\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7e27f22ed974b0690e8665613970cce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7e27f22ed974b0690e8665613970cce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n < 0)\n            throw new ArgumentException();\n
    \       var tribonacciSequence = new List<long>();\n        for (long i = 0; i
    <= n; i++) {\n            tribonacciSequence.Add(\n                i % 2 == 0
    ?\n                1 + i / 2 :\n                Tri(i - 1) + Tri(i - 2) + Tri(i
    + 1)\n            );\n        }\n        return tribonacciSequence;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpisjcpfjg.cs(33,17): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Implement this function\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <da0975b7c3ac402a9aad922ba239a497>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <da0975b7c3ac402a9aad922ba239a497>:0
    \n"
  stdout: ''
  timestamp: 1660028222
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqm5l__y4.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028221
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> tribonacci = new List<long>();\n        tribonacci.Add(1);\n
    \       tribonacci.Add(3);\n        tribonacci.Add(2);\n        for (int i = 3;
    i <= n; i++) {\n            tribonacci.Add(tribonacci[i - 1] + tribonacci[i -
    2] + tribonacci[i - 3]);\n        }\n        return tribonacci;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2db15bd8c1247e5beda776961286978>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2db15bd8c1247e5beda776961286978>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> tri = new List<long>();\n        tri.Add(1);\n
    \       if (n > 0) {\n            tri.Add(3);\n            if (n > 1) {\n                tri.Add(2);\n
    \               for (long i = 3; i <= n; i++) {\n                    if (i % 2
    == 0) {\n                        tri.Add(1 + i / 2);\n                    } else
    {\n                        tri.Add(tri[(int)i - 1] + tri[(int)i - 2] + tri[(int)i
    + 1]);\n                    }\n                }\n            }\n        }\n        return
    tri;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00075] in <1ed090f59148488db7f37861d91cb5d5>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <1ed090f59148488db7f37861d91cb5d5>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00075]
    in <1ed090f59148488db7f37861d91cb5d5>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <1ed090f59148488db7f37861d91cb5d5>:0 \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        list.Add(1);\n
    \       list.Add(3);\n        list.Add(2);\n        return list;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c939314792ff479980ade13c77939b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c939314792ff479980ade13c77939b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // your code here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <d910a90c1e6846619effece01f72b01d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <d910a90c1e6846619effece01f72b01d>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var dp = new List<long>();\n        dp.Add(1);\n        dp.Add(3);\n
    \       dp.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                dp.Add(1 + i / 2);\n            } else {\n                dp.Add(dp[i
    - 1] + dp[i - 2] + dp[i + 1]);\n            }\n        }\n        return dp;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <c217e8dfbdb94387b01fedf6962f5e91>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c217e8dfbdb94387b01fedf6962f5e91>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <c217e8dfbdb94387b01fedf6962f5e91>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c217e8dfbdb94387b01fedf6962f5e91>:0 \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        for (int i = 0; i
    <= n; i++) {\n            if (i == 0) res.Add(1);\n            else if (i == 1)
    res.Add(3);\n            else if (i == 2) res.Add(2);\n            else if (i
    % 2 == 0) res.Add(1 + i / 2);\n            else res.Add(res[i - 1] + res[i - 2]
    + res[i + 1]);\n        }\n        return res;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00078] in <ffdf3e82740b41e6b12988489341fb53>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <ffdf3e82740b41e6b12988489341fb53>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00078]
    in <ffdf3e82740b41e6b12988489341fb53>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ffdf3e82740b41e6b12988489341fb53>:0 \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       if (n > 0) {\n            res.Add(3);\n            for (int i = 2; i <=
    n; i++) {\n                if (i % 2 == 0) {\n                    res.Add(1 +
    i / 2);\n                } else {\n                    res.Add(res[i - 1] + res[i
    - 2] + res[i + 1]);\n                }\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00057] in <b4259bdc305a4cd78439273e66769567>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b4259bdc305a4cd78439273e66769567>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00057]
    in <b4259bdc305a4cd78439273e66769567>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b4259bdc305a4cd78439273e66769567>:0 \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <f93e8e1b84c84de6a70e7f84c83d9cdc>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <f93e8e1b84c84de6a70e7f84c83d9cdc>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <f93e8e1b84c84de6a70e7f84c83d9cdc>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <f93e8e1b84c84de6a70e7f84c83d9cdc>:0 \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your implementation goes here.\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <ebb9c67049734e76b70470e4437079f2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <ebb9c67049734e76b70470e4437079f2>:0
    \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return Tri_Core(1, 3, 2, n);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp36f6burc.cs(26,16): error CS0103: The name ''Tri_Core'' does not exist
    in the current context

    '
  timestamp: 1660028223
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> tri = new List<long>();\n        long a = 1;\n
    \       long b = 1;\n        long c = 1;\n        for (int i = 0; i < n; i++)
    {\n            if (i == 0) {\n                tri.Add(a);\n            } else
    if (i == 1) {\n                tri.Add(b);\n            } else if (i == 2) {\n
    \               tri.Add(c);\n            } else {\n                long d = a
    + b + c;\n                tri.Add(d);\n                a = b;\n                b
    = c;\n                c = d;\n            }\n        }\n        return tri;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce11e9344b154f1faadb21d4c251bb0e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce11e9344b154f1faadb21d4c251bb0e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return new List<long>() { 1, 3, 2, 8, 11, 14, 17, 21, 26,
    32, 39, 47, 56, 66, 77, 89, 102, 116, 131, 147, 164, 182, 201, 221, 242, 264,
    287, 311, 336, 362, 389, 417, 446, 476, 507, 539, 572, 606, 641, 677, 714, 752,
    791, 831, 872, 914, 957, 1001, 1046, 1092, 1139, 1187, 1236, 1286, 1337, 1389,
    1442, 1496, 1551, 1607, 1664, 1722, 1781, 1841, 1902, 1964, 2027, 2091, 2156,
    2222, 2289, 2357, 2426, 2496, 2567, 2639, 2712, 2786, 2861, 2937, 3014, 3092,
    3171, 3251, 3332, 3414, 3497, 3581, 3666, 3752, 3839, 3927, 4016, 4106, 4197,
    4289, 4382, 4476, 4571, 4667, 4764, 4862, 4961, 5061, 5162, 5264, 5367, 5471,
    5577, 5683, 5791, 5900, 6010, 6121, 6233, 6347, 6462, 6578, 6695, 6813, 6932,
    7052, 7174, 7297, 7421, 7546, 7673, 7801, 7930, 8060, 8192, 8325, 8459, 8595,
    8732, 8870, 9010, 9151, 9293, 9437, 9582, 9729, 9877, 10026, 10177, 10329, 10483,
    10638, 10795, 10953, 11113, 11274, 11437, 11602, 11768, 11936, 12106, 12277, 12450,
    12625, 12802, 12980, 13160, 13342, 13526, 13711, 13898, 14087, 14278, 14471, 14666,
    14863, 15062, 15263, 15466, 15671, 15878\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq961x2hp.cs(27,6): error CS1002: ; expected

    /tmp/tmpq961x2hp.cs(28,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpq961x2hp.cs(41,2): error CS1513: } expected

    '
  timestamp: 1660028223
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long a = 0;\n        long b = 1;\n        long c = 2;\n
    \       long d = 3;\n        List<long> rez = new List<long> { d };\n        for
    (long i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                d
    = (i / 2) + 1;\n            } else {\n                d = a + b + c;\n            }\n
    \           a = b;\n            b = c;\n            c = d;\n            rez.Add(d);\n
    \       }\n        return rez;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c145999886614472a32c631b4086ed95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c145999886614472a32c631b4086ed95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        for (int i
    = 0; i <= n; i++) {\n            list.Add(tri(i));\n        }\n        return
    list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu0yt0et0.cs(28,22): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <f93e8e1b84c84de6a70e7f84c83d9cdc>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <f93e8e1b84c84de6a70e7f84c83d9cdc>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <f93e8e1b84c84de6a70e7f84c83d9cdc>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <f93e8e1b84c84de6a70e7f84c83d9cdc>:0 \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code here.\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8f76de46e814eb78aa5ac404b142a3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8f76de46e814eb78aa5ac404b142a3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var tri = new List<long>();\n        for (long i = 0; i
    <= n; i++) {\n            tri.Add(Tribonacci(i));\n        }\n        return tri;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8v1afb5e.cs(28,21): error CS0103: The name ''Tribonacci'' does not exist
    in the current context

    '
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> ans = new List<long>();\n        for (long i
    = 0; i <= n; i++) {\n            if (i == 0) {\n                ans.Add(1);\n
    \           } else if (i == 1) {\n                ans.Add(3);\n            } else
    if (i == 2) {\n                ans.Add(2);\n            } else if (i % 2 == 0)
    {\n                ans.Add(i / 2 + 1);\n            } else {\n                ans.Add(ans[(int)i
    - 1] + ans[(int)i - 2] + ans[(int)i + 1]);\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008a] in <340e078090bb481eb0389247b46d2c6d>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <340e078090bb481eb0389247b46d2c6d>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008a]
    in <340e078090bb481eb0389247b46d2c6d>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <340e078090bb481eb0389247b46d2c6d>:0 \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <1dc367509cb74298ac4dc0bb5ee966f3>:0
    \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var r = new List<long> { 1, 3, 2 };\n        while (r.Count
    < n + 1) {\n            var last = r[r.Count - 1];\n            var n2 = r[r.Count
    - 2];\n            var n3 = r[r.Count - 3];\n            if (last % 2 == 0) {\n
    \               r.Add(1 + last / 2);\n            } else {\n                r.Add(last
    + n2 + n3);\n            }\n        }\n        return r;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5012806758a2491ab883a70d98d2ad20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5012806758a2491ab883a70d98d2ad20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Fill in the function here\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <bfa32ef545fc4cb0a218e51c9000fd7f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <bfa32ef545fc4cb0a218e51c9000fd7f>:0
    \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        for (int i = 2; i <= n; i++) {\n            if
    (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n
    \               result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0004d] in <0485abf7a0934a09bc6e23807975b159>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <0485abf7a0934a09bc6e23807975b159>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0004d]
    in <0485abf7a0934a09bc6e23807975b159>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <0485abf7a0934a09bc6e23807975b159>:0 \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long a = 1, b = 3, c = 2;\n        long d = 0;\n        List<long>
    answer = new List<long>();\n        answer.Add(a);\n        if (n < 0)\n            return
    answer;\n        answer.Add(b);\n        if (n == 0)\n            return answer;\n
    \       answer.Add(c);\n        if (n == 1)\n            return answer;\n        while
    (n > 2) {\n            d = b + c + a;\n            answer.Add(d);\n            a
    = b;\n            b = c;\n            c = d;\n            n--;\n        }\n        return
    answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af32bbc0e847482fbd39a4accbd33aa0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af32bbc0e847482fbd39a4accbd33aa0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long> {1L, 3L, 2L};\n        long
    cur = 2;\n        for (int i = 2; i < n; i++) {\n            long prev = result[i
    - 1];\n            cur = prev + result[i - 2] + result[i - 3];\n            result.Add(cur);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0003e] in <f2b4b73de17940229b76b94224868fcc>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <f2b4b73de17940229b76b94224868fcc>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0003e]
    in <f2b4b73de17940229b76b94224868fcc>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <f2b4b73de17940229b76b94224868fcc>:0 \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your implementation.\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <71e56e8494624a139b7d4a146b51f5c0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <71e56e8494624a139b7d4a146b51f5c0>:0 \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        if (n == 0) {\n
    \           return result;\n        }\n        result.Add(1);\n        if (n ==
    1) {\n            return result;\n        }\n        result.Add(3);\n        if
    (n == 2) {\n            return result;\n        }\n        result.Add(2);\n        for
    (long i = 4; i <= n; i++) {\n            result.Add(i % 2 == 0 ? (1 + i / 2) :
    result[result.Count - 1] + result[result.Count - 2] + result[result.Count - 3]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc849bb321764d788642e0135465c399>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc849bb321764d788642e0135465c399>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe91k0102.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long i = 0;\n        List<long> tri = new List<long>();\n
    \       while(i <= n) {\n            if(i == 0)\n                tri.Add(1);\n
    \           else if(i == 1)\n                tri.Add(3);\n            else if(i
    == 2)\n                tri.Add(2);\n            else if(i % 2 == 0)\n                tri.Add(1
    + i / 2);\n            else\n                tri.Add(tri[(int)i - 1] + tri[(int)i
    - 2] + tri[(int)i + 1]);\n            i++;\n        }\n        return tri;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00081] in <441769b99c7f4227905b6d8ea7d7998f>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <441769b99c7f4227905b6d8ea7d7998f>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00081]
    in <441769b99c7f4227905b6d8ea7d7998f>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <441769b99c7f4227905b6d8ea7d7998f>:0 \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> arr = new List<long>((int)n + 1);\n        arr.Add(1);\n
    \       arr.Add(3);\n        arr.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                arr.Add(arr[i - 1] + arr[i -
    2] + arr[i - 3]);\n            } else {\n                arr.Add(1 + i / 2);\n
    \           }\n        }\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0af5af44bd34b6384c691c3ab5ace4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0af5af44bd34b6384c691c3ab5ace4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // TODO: Add your code here!\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <21a23a02aa6d4aad841039e505a26721>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <21a23a02aa6d4aad841039e505a26721>:0
    \n"
  stdout: ''
  timestamp: 1660028223
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Compute the Tribonacci sequence of the first n terms\n
    \       long[] res = new long[n + 1];\n        res[0] = 1;\n        res[1] = 3;\n
    \       for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                res[i]
    = 1 + i / 2;\n            } else {\n                res[i] = res[i - 1] + res[i
    - 2] + res[i + 1];\n            }\n        }\n        return res.ToList();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x00033] in <c8263fca26fb46918dfb35214b24266f>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <c8263fca26fb46918dfb35214b24266f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x00033]
    in <c8263fca26fb46918dfb35214b24266f>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c8263fca26fb46918dfb35214b24266f>:0 \n"
  stdout: ''
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long a = 1, b = 3, c = 2;\n        if (n == 0) return new
    List<long>();\n        if (n == 1) return new List<long> { a };\n        if (n
    == 2) return new List<long> { a, b };\n        if (n == 3) return new List<long>
    { a, b, c };\n        if (n % 2 == 0) return new List<long> { a, b, c, c + 1 };\n
    \       var result = new List<long> { a, b, c, 8 };\n        for (int i = 5; i
    <= n; i++) {\n            long next;\n            if (i % 2 == 0) {\n                next
    = i / 2 + 1;\n            } else {\n                next = result[i - 1] + result[i
    - 2] + result[i - 3];\n            }\n            result.Add(next);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d938f432c8a04e9d821aba008dfaf96b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d938f432c8a04e9d821aba008dfaf96b>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0011b] in <d938f4"
  stdout: ''
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <96757f25756c4849afac87c0251c1d51>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <96757f25756c4849afac87c0251c1d51>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var l = new List<long> { 1L, 3L, 2L };\n        int m =
    (int)n;\n        for (int i = 3; i <= m; i++) {\n            long x = l[i - 1]
    + l[i - 2] + l[i - 3];\n            l.Add(x);\n        }\n        return l;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45fa55cbfe9143a3bcca13d73b328bb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45fa55cbfe9143a3bcca13d73b328bb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028224
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        long cur =
    0;\n        long prev1 = 1;\n        long prev2 = 3;\n        long prev3 = 2;\n
    \       for (int i = 0; i <= n; i++) {\n            if (i == 0)\n                cur
    = 1;\n            else if (i == 1)\n                cur = 3;\n            else
    if (i == 2)\n                cur = 2;\n            else if (i % 2 == 0)\n                cur
    = 1 + i / 2;\n            else\n                cur = prev1 + prev2 + prev3;\n
    \           res.Add(cur);\n            prev3 = prev2;\n            prev2 = prev1;\n
    \           prev1 = cur;\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <588086d613b945229e6f2a498a418955>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <588086d613b945229e6f2a498a418955>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       if (n < 1) return res;\n        res.Add(3);\n        if (n < 2) return
    res;\n        res.Add(2);\n        if (n < 3) return res;\n        for (int i
    = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1
    + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i -
    2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008c] in <83de6aec9e6e4fa8b0aa97828fc91d24>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <83de6aec9e6e4fa8b0aa97828fc91d24>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008c]
    in <83de6aec9e6e4fa8b0aa97828fc91d24>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <83de6aec9e6e4fa8b0aa97828fc91d24>:0 \n"
  stdout: ''
  timestamp: 1660028224
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Write your code here\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf1a7f8f16ff4277b9cd1e5d3c793cad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf1a7f8f16ff4277b9cd1e5d3c793cad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028224
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        long a =
    1;\n        long b = 3;\n        long c = 2;\n        result.Add(a);\n        result.Add(b);\n
    \       result.Add(c);\n        for (int i = 0; i < n - 2; i++) {\n            if
    (c % 2 == 0) {\n                a = c;\n                b = 1 + c / 2;\n                c
    = b;\n            } else {\n                a = c;\n                b = a + b
    + result[i];\n                c = b;\n            }\n            result.Add(c);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <084dd56f9f364a849608472902756ac1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <084dd56f9f364a849608472902756ac1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        if (n == 1) {\n
    \           result.Add(1);\n            result.Add(3);\n            return result;\n
    \       }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(3);\n
    \           result.Add(2);\n            return result;\n        }\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        int i = 3;\n        while
    (i <= n) {\n            var index = i;\n            if (index % 2 == 0) {\n                var
    index2 = 1 + index / 2;\n                result.Add(index2);\n            } else
    {\n                var index3 = result[index - 1] + result[index - 2] + result[index
    + 1];\n                result.Add(index3);\n            }\n            i = i +
    1;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x000b3] in <dd341ba3f9f4423a9839bcb00b581d18>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <dd341ba3f9f4423a9839bcb00b581d18>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x000b3]
    in <dd341ba3f9f4423a9839bcb00b581d18>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <dd341ba3f9f4423a9839bcb00b581d18>:0 \n"
  stdout: ''
  timestamp: 1660028224
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        if (n <= 0) return new List<long> {1L};\n        var r
    = new List<long> {1L, 3L};\n        long t;\n        if (n == 1) return r;\n        long
    m = 2;\n        while (r.Count <= n) {\n            t = 1 + m / 2;\n            if
    (m % 2 == 0) {\n                r.Add(t);\n            } else {\n                r.Add(r[r.Count
    - 1] + r[r.Count - 2] + t);\n            }\n            m++;\n        }\n        return
    r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e1c22c9a5a3411ebf41995b1349fad1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e1c22c9a5a3411ebf41995b1349fad1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028224
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5245503c81547878d7d3a8361ed56c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return 1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj9n7ngst.cs(26,16): error CS0029: Cannot implicitly convert type ''int''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1660028224
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long a = 1;\n        long b = 3;\n        long c = 2;\n
    \       long d = 8;\n        long e = 0;\n        List<long> result = new List<long>
    { a, b, c, d };\n        for (int i = 4; i <= n; i++) {\n            if (i % 2
    == 0) {\n                e = 1 + i / 2;\n            } else {\n                e
    = d + c + b;\n            }\n            result.Add(e);\n            a = b;\n
    \           b = c;\n            c = d;\n            d = e;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d920d96d1e1e4b839929038e1b8bbe9f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d920d96d1e1e4b839929038e1b8bbe9f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> l = new List<long>() { 1L, 3L, 2L };\n        for
    (int i = 3; i <= n; i++) {\n            l.Add(i % 2 == 0 ? 1 + i / 2 : l[i - 1]
    + l[i - 2] + l[i + 1]);\n        }\n        return l;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0003f] in <e26864e5428e411dbdd40c796323dc2f>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <e26864e5428e411dbdd40c796323dc2f>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0003f]
    in <e26864e5428e411dbdd40c796323dc2f>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <e26864e5428e411dbdd40c796323dc2f>:0 \n"
  stdout: ''
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) return result;\n        result.Add(3);\n        if (n == 1)
    return result;\n        result.Add(2);\n        if (n == 2) return result;\n        for
    (int i = 3; i <= n; i++) {\n            result.Add(i % 2 == 0 ? 1 + i / 2 : result[i
    - 1] + result[i - 2] + result[i + 1]);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0006f] in <1af7c0e1f79b4451ae4cf36f22d23567>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <1af7c0e1f79b4451ae4cf36f22d23567>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0006f]
    in <1af7c0e1f79b4451ae4cf36f22d23567>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <1af7c0e1f79b4451ae4cf36f22d23567>:0 \n"
  stdout: ''
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> tri = new List<long>();\n        for (long i
    = 0; i <= n; i++) {\n            if (i == 0) tri.Add(1);\n            else if
    (i == 1) tri.Add(3);\n            else if (i == 2) tri.Add(2);\n            else
    if (i % 2 == 0) tri.Add(1 + i / 2);\n            else tri.Add(tri[(int)i - 1]
    + tri[(int)i - 2] + tri[(int)i + 1]);\n        }\n        return tri;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00081] in <c5deed8686d1464aaf70bd56a2edeaa7>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <c5deed8686d1464aaf70bd56a2edeaa7>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00081]
    in <c5deed8686d1464aaf70bd56a2edeaa7>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c5deed8686d1464aaf70bd56a2edeaa7>:0 \n"
  stdout: ''
  timestamp: 1660028224
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        long a = 1;\n        long b = 3;\n        long c = 2;\n
    \       long d = 0;\n        var tri = new List<long>();\n        tri.Add(a);\n
    \       if (n >= 1) {\n            tri.Add(b);\n        }\n        if (n >= 2)
    {\n            tri.Add(c);\n        }\n        for (int i = 3; i <= n; i++) {\n
    \           if (i % 2 == 0) {\n                d = 1 + i / 2;\n            } else
    {\n                d = a + b + c;\n            }\n            a = b;\n            b
    = c;\n            c = d;\n            tri.Add(d);\n        }\n        return tri;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c990de003e544c12bbcb7f3293e8f352>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c990de003e544c12bbcb7f3293e8f352>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028224
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var ret = new List<long>();\n        ret.Add(1);\n        if
    (n == 0) return ret;\n        ret.Add(3);\n        if (n == 1) return ret;\n        ret.Add(2);\n
    \       if (n == 2) return ret;\n        for (long i = 3; i <= n; i++) {\n            long
    val = 0;\n            if (i % 2 == 0) val = 1 + i / 2;\n            else val =
    ret[(int)i - 1] + ret[(int)i - 2] + ret[(int)i - 3];\n            ret.Add(val);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2b8aa883433447c94dd67dd6d384bf2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2b8aa883433447c94dd67dd6d384bf2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var ret = new List<long>();\n        ret.Add(1);\n        for
    (int i = 1; i <= n; i++) {\n            ret.Add(i % 2 == 0 ? 1 + i / 2 : ret[i
    - 1] + ret[i - 2] + ret[i + 1]);\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00024] in <3627ff9e98c541638fb9fbdc47126635>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <3627ff9e98c541638fb9fbdc47126635>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00024]
    in <3627ff9e98c541638fb9fbdc47126635>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3627ff9e98c541638fb9fbdc47126635>:0 \n"
  stdout: ''
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <96757f25756c4849afac87c0251c1d51>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <96757f25756c4849afac87c0251c1d51>:0 \n"
  stdout: ''
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkhlbmmeb.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028219
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        var val = 1L;\n
    \       while (n >= 0) {\n            result.Add(val);\n            n -= 1;\n
    \           val = ((n % 2) == 0) ? ((1 + (n / 2))) : (((result[(int)(n - 1)] +
    result[(int)(n - 2)]) + result[(int)(n + 1)])) ;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0002c] in <6b1a7576914d4f65857d6f0b9a2c431c>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <6b1a7576914d4f65857d6f0b9a2c431c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0002c]
    in <6b1a7576914d4f65857d6f0b9a2c431c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <6b1a7576914d4f65857d6f0b9a2c431c>:0 \n"
  stdout: ''
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        long tri = 1;\n        list.Add(tri);\n
    \       for (long i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                tri
    = 1 + i / 2;\n            } else {\n                tri = list[(int)i - 1] + list[(int)i
    - 2] + list[(int)i + 1];\n            }\n            list.Add(tri);\n        }\n
    \       return list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0003b] in <8bd6f2c5ec6d4af2bd37cbda32d27287>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8bd6f2c5ec6d4af2bd37cbda32d27287>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0003b]
    in <8bd6f2c5ec6d4af2bd37cbda32d27287>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8bd6f2c5ec6d4af2bd37cbda32d27287>:0 \n"
  stdout: ''
  timestamp: 1660028224
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        for (long i
    = 0; i <= n; i++) {\n            res.Add(tri(i));\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkrrvm5yf.cs(28,21): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028224
