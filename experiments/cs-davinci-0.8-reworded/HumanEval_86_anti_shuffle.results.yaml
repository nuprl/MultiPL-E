language: cs
name: HumanEval_86_anti_shuffle
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    new string(s.ToCharArray().OrderBy(c => c).ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88107b6836d241fdb4b532aa61df736c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88107b6836d241fdb4b532aa61df736c>:0
    \n"
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    w = s.Split(' ');\n        List<string> l = new List<string>();\n        foreach
    (string n in w) {\n            char[] c = n.ToCharArray();\n            Array.Sort(c);\n
    \           l.Add(new string(c));\n        }\n        return string.Join(\" \",
    l);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        //// example:
    \"Hello World!!!\"\n        //int a = 'a';\n        //int z = 'z';\n        //int
    A = 'A';\n        //int Z = 'Z';\n        //// \"Hello World!!!\"\n        ////
    \"Hello\"\n        //// \"World!!!\"\n        //string[] words = s.Split(' ');\n
    \       //// \"Hello\"\n        //// \"World!!!\"\n        //List<string> words2
    = new List<string>();\n        //foreach (string word in words) {\n        //
    \   if (word.Length > 0) {\n        //        words2.Add(word);\n        //    }\n
    \       //}\n        //// \"Hello\"\n        //// \"World!!!\"\n        //List<string>
    words3 = new List<string>();\n        //foreach (string word in words2) {\n        //
    \   StringBuilder sb = new StringBuilder();\n        //    char[] array = word.ToCharArray();\n
    \       //    // \"Hello\"\n        //    // \"H\"\n        //    // \"e\"\n        //
    \   // \"l\"\n        //    // \"l\"\n        //    // \"o\"\n        //    List<int>
    array2 = new List<int>();\n        //    foreach (char c in array) {\n        //
    \       array2.Add((int)c);\n        //    }\n        //    // \"Hello\"\n        //
    \   // \"H\"\n        //    // \"e\"\n        //    // \"l\"\n        //    //
    \"l\"\n        //    // \"o\"\n        //    // 72\n        //    // 101\n        //
    \   // 108\n        //    // 108\n        //    // 111\n        //    array2.Sort();\n
    \       //    // \"Hello\"\n        //    // 72\n        //    // 101\n        //
    \   // 108\n        //    // 108\n        //    // 111\n        //    foreach
    (int i in array2) {\n        //        sb.Append((char)i);\n        //    }\n
    \       //    // \"Hello\"\n        //    // \"Helo\"\n        //    words3.Add(sb\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0pgmpj6f.cs(21,26): error CS0161: ''Problem.AntiShuffle(string)'': not
    all code paths return a value

    '
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    ordered = \"\";\n        foreach (string word in s.Split(' ')) {\n            char[]
    wordArray = word.ToCharArray();\n            Array.Sort(wordArray);\n            ordered
    += new string(wordArray);\n            ordered += \" \";\n        }\n        return
    ordered.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        string res = \"\";\n        foreach (string w in
    words) {\n            res += w.OrderBy(c => c).ToArray() + \" \";\n        }\n
    \       return res.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5c8cf833a9f4c82a7440c04d7cb2f5a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5c8cf833a9f4c82a7440c04d7cb2f5a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        if (s ==
    null)\n            return null;\n        var sb = new StringBuilder();\n        var
    word = new StringBuilder();\n        foreach (var c in s) {\n            if (char.IsWhiteSpace(c))
    {\n                if (word.Length > 0) {\n                    sb.Append(string.Concat(word.ToString().OrderBy(p
    => p)));\n                    word.Clear();\n                }\n                sb.Append(c);\n
    \           } else {\n                word.Append(c);\n            }\n        }\n
    \       if (word.Length > 0) {\n            sb.Append(string.Concat(word.ToString().OrderBy(p
    => p)));\n        }\n        return sb.ToString();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c4cbcf881cfe4127afdc977de10dced8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <c4cbcf881cfe4127afdc977de10dced8>:0 \n"
  stdout: ''
  timestamp: 1659976897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n      // TODO:
    Write code here...\n      // Hint: you can use your solution to question 1 here\n
    \     string[] words = s.Split(' ');\n      string ret = \"\";\n      foreach
    (string word in words) {\n        ret += AnagramSort(word) + \" \";\n      }\n
    \     return ret.Trim();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph2kidipb.cs(27,16): error CS0103: The name ''AnagramSort'' does not exist
    in the current context

    '
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    string.Join(\" \", s.Split(' ').Select(x => new string(x.OrderBy(c => c).ToArray())));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // YOUR
    CODE HERE\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <837b41fb04f54aaf82b51ef69fce1d89>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <837b41fb04f54aaf82b51ef69fce1d89>:0
    \n"
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    String.Join(\" \", s.Split().Select(word => String.Concat(word.OrderBy(c => c))));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c22a7e7dbe84893b6bf27319f7bced6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c22a7e7dbe84893b6bf27319f7bced6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        if (s ==
    null) {\n            return null;\n        }\n\n        // split by \" \"\n        string[]
    words = s.Split(new string[] {\" \"}, StringSplitOptions.None);\n        // for
    each word, sort chars, and append to string\n        // remember to append space
    (\" \") after each word\n        string sorted = string.Empty;\n        foreach
    (string word in words) {\n            sorted += new string(word.ToCharArray().OrderBy(c
    => c).ToArray()) + \" \";\n        }\n        // remember to trim the last space\n
    \       return sorted.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var words
    = s.Split(' ');\n        var output = new List<string>();\n        foreach (var
    word in words) {\n            output.Add(String.Concat(word.OrderBy(c => c)));\n
    \       }\n        return String.Join(\" \", output);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c22a7e7dbe84893b6bf27319f7bced6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c22a7e7dbe84893b6bf27319f7bced6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        if (s ==
    null)\n            return null;\n        // You might want to use this function
    when building new string to sort characters in a word\n        // string OrderCharacters(string
    s)\n        return OrderCharacters(s);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptk3v_1y0.cs(26,16): error CS0103: The name ''OrderCharacters'' does not
    exist in the current context

    '
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        for (int i = 0; i < words.Length; i++) {\n            string
    word = words[i];\n            char[] chars = word.ToCharArray();\n            Array.Sort(chars);\n
    \           words[i] = new string(chars);\n        }\n        return string.Join(\"
    \", words);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // First
    separate the words into an array.\n        string[] words = s.Split(' ');\n        //
    Loop through the array and apply the AntiShuffle\n        // algorithm to each
    word.\n        for (int i = 0; i < words.Length; i++) {\n            words[i]
    = AntiShuffle(words[i]);\n        }\n        // Join the array with a space as
    delimiter.\n        return string.Join(\" \", words);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Implement
    this function\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f05af5ed4e54de6905f38f3b8b56bf4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f05af5ed4e54de6905f38f3b8b56bf4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // add
    more code here.\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f1844436f414104bfb43937090c4a4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f1844436f414104bfb43937090c4a4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        List<char>
    chars = new List<char>();\n        string result = \"\";\n        bool flag =
    false;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] ==
    ' ' && flag) {\n                foreach (char c in chars) {\n                    result
    += c;\n                }\n                chars.Clear();\n                result
    += ' ';\n                flag = false;\n            } else if (s[i] != ' ') {\n
    \               chars.Add(s[i]);\n                flag = true;\n            }\n
    \       }\n        chars.Sort();\n        foreach (char c in chars) {\n            result
    += c;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afdc860a87a04fa2961380477c0d2d3a>:0
    \n"
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c22a7e7dbe84893b6bf27319f7bced6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c22a7e7dbe84893b6bf27319f7bced6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    s_arr = s.Split(' ');\n        string result = \"\";\n        foreach (string
    word in s_arr) {\n            char[] word_arr = word.ToCharArray();\n            Array.Sort(word_arr);\n
    \           result += String.Join(\"\", word_arr);\n            result += \" \";\n
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // TODO:
    Implement your solution here.\n        string res = \"\";\n        string[] words
    = s.Split(\" \");\n        foreach (string word in words) {\n            res +=
    Sort(word) + \" \";\n        }\n        return res.Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaovpce15.cs(26,20): error CS0103: The name ''Sort'' does not exist in
    the current context

    '
  timestamp: 1659976897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c4cbcf881cfe4127afdc977de10dced8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <c4cbcf881cfe4127afdc977de10dced8>:0 \n"
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    final = \"\";\n        string[] words = s.Split(' ');\n        foreach (string
    word in words) {\n            final += string.Concat(word.OrderBy(c => c)) + \"
    \";\n        }\n        return final.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        List<String>
    words = new List<String>();\n        StringBuilder sb = new StringBuilder();\n
    \       string word = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            if
    (s[i] == ' ') {\n                words.Add(word);\n                sb.Append(\"
    \");\n                word = \"\";\n            } else {\n                word
    += s[i];\n            }\n        }\n        words.Add(word);\n        foreach
    (string w in words) {\n            var chars = w.ToCharArray();\n            Array.Sort(chars);\n
    \           sb.Append(new string(chars));\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0695471479a644908b3fc19a8855e617>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0695471479a644908b3fc19a8855e617>:0
    \n"
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    x = s.Split(' ');\n        List<string> y = new List<string>();\n        for (int
    i = 0; i < x.Length; i++) {\n            string word = x[i];\n            char[]
    letters = word.ToCharArray();\n            Array.Sort(letters);\n            y.Add(new
    string(letters));\n        }\n        string result = String.Join(\" \", y);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code goes here\n        string[] arr = s.Split(' ');\n        string r = \"\";\n
    \       for (int i = 0; i < arr.Length; i++) {\n            char[] c = arr[i].ToCharArray();\n
    \           Array.Sort(c);\n            r += new string(c);\n            if (i
    != arr.Length - 1) {\n                r += \" \";\n            }\n        }\n
    \       return r;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    result = \"\";\n        List<char> chars = new List<char>();\n        for (int
    i = 0; i < s.Length; i++) {\n            char c = s[i];\n            if (c ==
    ' ') {\n                chars.Sort();\n                foreach (char ch in chars)
    {\n                    result += ch;\n                }\n                result
    += c;\n                chars.Clear();\n            } else {\n                chars.Add(c);\n
    \           }\n        }\n        chars.Sort();\n        foreach (char ch in chars)
    {\n            result += ch;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // code
    goes here!\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fb3ae1b4193496f9b1d005de145cdfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fb3ae1b4193496f9b1d005de145cdfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // return
    new string (s.ToCharArray ().OrderBy (c => c).ToArray ());\n        StringBuilder
    sb = new StringBuilder();\n        StringBuilder word = new StringBuilder();\n
    \       bool isWhitespace = false;\n        foreach (char c in s) {\n            if
    (c != ' ') {\n                isWhitespace = false;\n                word.Append(c);\n
    \           } else {\n                if (!isWhitespace) {\n                    sb.Append(new
    string(word.ToString().ToCharArray().OrderBy(c2 => c2).ToArray()));\n                    sb.Append(c);\n
    \                   word.Clear();\n                    isWhitespace = true;\n
    \               } else {\n                    sb.Append(c);\n                }\n
    \           }\n        }\n        sb.Append(new string(word.ToString().ToCharArray().OrderBy(c2
    => c2).ToArray()));\n        return sb.ToString();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Notice
    that the sentence itself has a sequence of words and blank spaces.\n        //
    The new string should keep this sequence.\n        // How can we keep the sequences?\n
    \       // We will firstly parse the string into a list of words and a list of
    blank spaces.\n        // Then, we will put the words back and keep the blank
    spaces.\n        string[] words = s.Split(\" \".ToCharArray());\n        string[]
    blanks = new string[words.Length-1];\n        for (int i = 0; i < words.Length-1;
    i++) {\n            blanks[i] = s.Substring(words[i].Length, 1);\n        }\n
    \       char[] sorted;\n        string result = \"\";\n        foreach (string
    word in words) {\n            sorted = word.ToCharArray();\n            Array.Sort(sorted);\n
    \           result += new string(sorted);\n        }\n        foreach (string
    blank in blanks) {\n            result += blank;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e06051ba2aea4b178f46aaae1c0b7f3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e06051ba2aea4b178f46aaae1c0b7f3d>:0
    \n"
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        //return
    new string(s.Select(x => x.ToString()).OrderBy(x => x).ToArray());\n\n        //return
    new string(s.Select(x => x.ToString()).OrderBy(x => x).ToArray());\n        int
    i = 0;\n        StringBuilder words = new StringBuilder();\n        StringBuilder
    temp = new StringBuilder();\n        while (i < s.Length) {\n            if (s[i]
    == ' ') {\n                words.Append(temp.ToString());\n                words.Append('
    ');\n                temp.Clear();\n            } else {\n                temp.Append(s[i]);\n
    \           }\n            i++;\n        }\n        words.Append(temp.ToString());\n
    \       return words.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0491c8741f0f48888c297a19b0a79f3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0491c8741f0f48888c297a19b0a79f3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        StringBuilder current = new StringBuilder();\n
    \       for (int i = 0; i < s.Length; i++) {\n            if (s[i] == ' ') {\n
    \               sb.Append(current.ToString().OrderBy(x => x).ToArray());\n                sb.Append('
    ');\n                current.Clear();\n            } else {\n                current.Append(s[i]);\n
    \           }\n        }\n        sb.Append(current.ToString().OrderBy(x => x).ToArray());\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    res = \"\";\n        string cur = \"\";\n        for (int i = 0; i < s.Length;
    i++) {\n            if (s[i] == ' ') {\n                res += cur + \" \";\n
    \               cur = \"\";\n            } else {\n                cur += s[i];\n
    \           }\n        }\n        return res + cur;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c32660c1c4f4328909a02ef578edc1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c32660c1c4f4328909a02ef578edc1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Add
    code here.\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0ddd6f235294206bb3b14c1c32a12dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0ddd6f235294206bb3b14c1c32a12dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c22a7e7dbe84893b6bf27319f7bced6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c22a7e7dbe84893b6bf27319f7bced6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <984d32904fae4cac995ff698075af5ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <984d32904fae4cac995ff698075af5ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // write
    your code here...\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47c44cc2fa5c4a8a8e0f235bb84b2dfc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47c44cc2fa5c4a8a8e0f235bb84b2dfc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code here\n        string ans = \"\";\n        string[] words = s.Split();\n        foreach
    (string word in words) {\n            if (word == \"\") {\n                ans
    += \" \";\n            } else {\n                ans += string.Concat(word.OrderBy(c
    => c));\n                ans += \" \";\n            }\n        }\n        return
    ans.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split();\n        // Write your code here\n        string result = \"\";\n
    \       foreach (string word in words) {\n            string ord = String.Concat(word.OrderBy(c
    => c));\n            result += ord + \" \";\n        }\n        return result.Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // put
    your solution here\n        // split string into an array of words\n        var
    words = s.Split(' ');\n        string result = \"\";\n        // loop over words\n
    \       foreach (var word in words) {\n            // sort word into an array
    of chars\n            char[] wordArray = word.ToCharArray();\n            Array.Sort(wordArray);\n
    \           // add sorted word to result\n            result += new string(wordArray)
    + \" \";\n        }\n        // return result\n        return result.Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        if (s ==
    null) return null;\n        string[] newstr = s.Split();\n        int i = 0;\n
    \       while (i < newstr.Length) {\n            char[] chararr = newstr[i].ToCharArray();\n
    \           Array.Sort(chararr);\n            newstr[i] = new string(chararr);\n
    \           i++;\n        }\n        return string.Join(\" \", newstr);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        string ans = \"\";\n        for (int i = 0; i <
    words.Length; i++) {\n            char[] chars = words[i].ToCharArray();\n            Array.Sort(chars);\n
    \           words[i] = new string(chars);\n            ans += words[i];\n            if
    (i < words.Length - 1) {\n                ans += \" \";\n            }\n        }\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Write
    code here\n        string[] words = s.Split(' ');\n        string[] newWords =
    new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n
    \           newWords[i] = Sort(words[i]);\n        }\n        string orderedString
    = \"\";\n        for (int i = 0; i < newWords.Length; i++) {\n            orderedString
    += newWords[i] + \" \";\n        }\n        return orderedString.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpivl_gnz7.cs(26,27): error CS0103: The name ''Sort'' does not exist in
    the current context

    '
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Split
    the string into words separated by spaces\n        string[] words = s.Split('
    ');\n        for (int i = 0; i < words.Length; i++) {\n            // Allocate
    a StringBuilder for each word\n            StringBuilder newWord = new StringBuilder();\n
    \           // Create a list of chars (aka string) from the word\n            List<char>
    characters = words[i].ToList();\n            // Sort the list (in place)\n            characters.Sort();\n
    \           // Add all the chars to the StringBuilder\n            foreach (char
    character in characters) {\n                newWord.Append(character);\n            }\n
    \           // Replace the old word with the new word\n            words[i] =
    newWord.ToString();\n        }\n        // Join all the words back together\n
    \       string joined = string.Join(\" \", words);\n        return joined;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    result = \"\";\n        string[] words = s.Split(' ');\n        foreach (string
    w in words) {\n            if (w.Length > 0) {\n                char[] tmp = w.ToCharArray();\n
    \               Array.Sort(tmp);\n                result += string.Join(\"\",
    tmp);\n            }\n            result += \" \";\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // ------
    START ------\n        var sb = new StringBuilder();\n        int pos = 0;\n        while
    (pos < s.Length) {\n            var start = pos;\n            var end = pos;\n
    \           while (end < s.Length && s[end] != ' ') {\n                end++;\n
    \           }\n            var word = s.Substring(start, end - start);\n            var
    sortedWord = new string(word.OrderBy(c => c).ToArray());\n            sb.Append(sortedWord);\n
    \           pos = end + 1;\n        }\n        return sb.ToString();\n        //
    ------ END ------\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67dc4ae9c83841959bc4a2f86378fd7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67dc4ae9c83841959bc4a2f86378fd7f>:0
    \n"
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code goes here:\n        string result = \"\";\n        List<char> word = new
    List<char>();\n        foreach (char c in s) {\n            if (c == ' ') {\n
    \               word.Sort();\n                result += string.Join(\"\", word)
    + \" \";\n                word.Clear();\n            } else {\n                word.Add(c);\n
    \           }\n        }\n        word.Sort();\n        result += string.Join(\"\",
    word);\n        return result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Create
    array to hold words, split string into words by ' '\n        string[] wordArr
    = s.Split(' ');\n        // For each word\n        for (int i = 0; i < wordArr.Length;
    i++) {\n            // Create an array to hold the letters in the word\n            char[]
    charArr = wordArr[i].ToCharArray();\n            // Sort the letters\n            Array.Sort(charArr);\n
    \           // Add the sorted letters to the word array\n            wordArr[i]
    = new string(charArr);\n        }\n        // Join the words with a ' ' and return
    the result\n        return string.Join(\" \", wordArr);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // write
    your code here\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fba54b3f1f6e491499db80cb7db08b3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fba54b3f1f6e491499db80cb7db08b3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // null
    check\n        if (s == null) {\n            return null;\n        }\n        if
    (s.Length <= 1) {\n            return s;\n        }\n        // create the new
    string\n        char[] arr = s.ToCharArray();\n        int wordStart = 0;\n        int
    wordEnd = 0;\n        int wordLength = 0;\n        // go through the string, and
    find the words,\n        // then call the sorting function on each word.\n        //
    then replace the array at that index with the sorted version\n        for (int
    i = 0; i < arr.Length; i++) {\n            if (Char.IsWhiteSpace(arr[i])) {\n
    \               wordLength = i - wordStart;\n                Sort(arr, wordStart,
    wordLength);\n                wordStart = i + 1;\n            }\n        }\n        //
    sort the last word\n        wordLength = arr.Length - wordStart;\n        Sort(arr,
    wordStart, wordLength);\n        // return the new string.\n        return new
    string(arr);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0mqlfx34.cs(40,17): error CS0103: The name ''Sort'' does not exist in
    the current context

    /tmp/tmp0mqlfx34.cs(46,9): error CS0103: The name ''Sort'' does not exist in the
    current context

    /tmp/tmp0mqlfx34.cs(32,13): warning CS0219: The variable ''wordEnd'' is assigned
    but its value is never used

    '
  timestamp: 1659976898
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <1f704503690c4039a30b41db84f6b0e9>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <1f704503690c4039a30b41db84f6b0e9>:0
    \n"
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var list=new
    List<string>();\n        var word=new StringBuilder();\n        foreach(var c
    in s) {\n            if(c!=' ') {\n                word.Append(c);\n            }\n
    \           else {\n                list.Add(word.ToString());\n                word.Clear();\n
    \           }\n        }\n        list.Add(word.ToString());\n        return string.Join(\"
    \",list.Select(r=>new string(r.OrderBy(c=>c).ToArray())));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // YOUR
    CODE HERE\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc80de9afb6747da9e31167572d89bcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc80de9afb6747da9e31167572d89bcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    newstring = \"\";\n        char[] word;\n        int i = 0;\n        // For each
    word in the input string\n        foreach (string x in s.Split()) {\n            word
    = x.ToCharArray();\n            // Sort the characters in the word alphabetically\n
    \           // (Ascending order based on ascii value)\n            Array.Sort(word);\n
    \           // Add the new sorted word to the new string\n            newstring
    += new string(word);\n            // Add a space to the new string if not the
    last word in the sentence\n            if (i < s.Split().Length - 1)\n                newstring
    += \" \";\n            i++;\n        }\n        return newstring;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    new string(\n            s.Split(' ')\n            .Select(w => new string(w.OrderBy(c
    => c).ToArray()))\n            .ToArray()\n        );\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8iyhk_uk.cs(23,13): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''char[]''

    '
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // YOUR
    CODE HERE\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <556feb0474ee4c72a220729c3a7b48a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <556feb0474ee4c72a220729c3a7b48a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    result = \"\";\n        string[] words = s.Split(' ');\n        foreach (string
    word in words) {\n            char[] chars = word.ToCharArray();\n            Array.Sort(chars);\n
    \           result += new string(chars) + \" \";\n        }\n        return result.Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var words
    = s.Split(' ');\n        for (int i = 0; i < words.Length; i++) {\n            var
    temp = words[i].ToCharArray();\n            Array.Sort(temp);\n            words[i]
    = new string(temp);\n        }\n        return string.Join(\" \", words);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // This
    is a very simple problem, but it does test your skills in different ways.\n        //
    First, you must decide what data structure to use. \n        // Second, you must
    decide how to store the words in the data structure.\n        // Hint: Keep in
    mind that the words don't have to be stored in the same order\n        // as they
    appear in the string.\n\n        // Fill in your answer here:\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <49327ec9aabc457a80f2b4b5c8d201d0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <49327ec9aabc457a80f2b4b5c8d201d0>:0
    \n"
  stdout: ''
  timestamp: 1659976898
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    splitStr = s.Split(new char[] { ' ' });\n        string result = \"\";\n        foreach
    (string item in splitStr) {\n            result += OrderedWord(item) + \" \";\n
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo52rwzqp.cs(25,23): error CS0103: The name ''OrderedWord'' does not exist
    in the current context

    '
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Write
    your solution here\n        string[] arr = s.Split(' ');\n        for (int i =
    0; i < arr.Length; i++) {\n            arr[i] = new string(arr[i].OrderBy(c =>
    c).ToArray());\n        }\n        return string.Join(\" \", arr);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    string.Join(\" \", s.Split(' ').Select(x => new string(x.OrderBy(y => y).ToArray())));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // TODO:
    Implement this function\n        throw new NotImplementedException();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <9c68dcba7c5e49f6b555d9f4a337e619>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <9c68dcba7c5e49f6b555d9f4a337e619>:0 \n"
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    string.Join(\" \", s.Split(' ').Select(w => new string(w.OrderBy(c => c).ToArray())));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    arr = s.Split(' ');\n        for (int i = 0; i < arr.Length; i++) {\n            char[]
    charArr = arr[i].ToCharArray();\n            Array.Sort(charArr);\n            arr[i]
    = new string(charArr);\n        }\n        return string.Join(\" \", arr);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    new string(s.Split(' ').Select(w => new string(w.OrderBy(c => c).ToArray())).SelectMany(w
    => w).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb2da4e7a75b4f269dc38ba0e0a17cb4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb2da4e7a75b4f269dc38ba0e0a17cb4>:0
    \n"
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // throw
    new NotImplementedException();\n        var sArray = s.Split(' ');\n        var
    result = new StringBuilder();\n        var sb = new StringBuilder();\n        foreach
    (var item in sArray) {\n            if (item.Length > 1) {\n                var
    chArray = item.ToCharArray();\n                Array.Sort(chArray);\n                result.Append(sb.Append(chArray));\n
    \               sb.Clear();\n            } else {\n                result.Append(item);\n
    \           }\n            result.Append(\" \");\n        }\n        return result.ToString().Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    string.Join(\" \", s.Split(' ').Select(x => string.Concat(x.OrderBy(c => c))));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var sorted = new string(word.OrderBy(c => c).ToArray());\n
    \           result.Add(sorted);\n        }\n        return string.Join(\" \",
    result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var words
    = s.Split(' ');\n        return string.Join(\" \", words.Select(w => string.Concat(w.OrderBy(c
    => c))));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    parts = s.Split(' ');\n        string ans = \"\";\n        for (int i = 0; i <
    parts.Length; i++) {\n            if (i > 0) {\n                ans += \" \";\n
    \           }\n            ans += String.Concat(parts[i].OrderBy(c => c));\n        }\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    String.Join(\" \", s.Split(' ').Select(w => String.Concat(w.OrderBy(c => c))));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    new string(\n            s.Split().Select(x => new string(x.OrderBy(y => y).ToArray())).ToArray()\n
    \       );\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk_z1v47v.cs(23,13): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''char[]''

    '
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        if (s ==
    null) {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n
    \       StringBuilder word = new StringBuilder();\n        for (int i = 0; i <
    s.Length; i++) {\n            if (s[i] == ' ') {\n                sb.Append(word.ToString());\n
    \               sb.Append(' ');\n                word.Clear();\n            }
    else {\n                word.Append(s[i]);\n            }\n        }\n        sb.Append(word.ToString());\n
    \       sb.Append(' ');\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62b17d1516ca46a78ce00bda1c8080ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62b17d1516ca46a78ce00bda1c8080ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        List<char>
    l = new List<char>();\n        StringBuilder sb = new StringBuilder();\n        for
    (int i = 0; i < s.Length; i++) {\n            if (s[i] == ' ') {\n                l.Sort();\n
    \               sb.Append(new string(l.ToArray()));\n                sb.Append(\"
    \");\n                l.Clear();\n            } else {\n                l.Add(s[i]);\n
    \           }\n        }\n        l.Sort();\n        sb.Append(new string(l.ToArray()));\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var words
    = s.Split(' ');\n        var sb = new StringBuilder();\n        foreach (var word
    in words) {\n            var newWord = new string(word.OrderBy(ch => ch).ToArray());\n
    \           sb.Append(newWord);\n            sb.Append(' ');\n        }\n        return
    sb.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        string[] sorted = new string[words.Length];\n        string
    res = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            char[]
    word = words[i].ToCharArray();\n            Array.Sort(word);\n            sorted[i]
    = new string(word);\n        }\n        string[] ssplit = s.Split(' ');\n        for
    (int i = 0; i < ssplit.Length; i++) {\n            res += sorted[i] + \" \";\n
    \       }\n        return res.Substring(0, res.Length - 1);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        string[] orderedWords = new string[words.Length];\n
    \       for (int i = 0; i < words.Length; i++) {\n            orderedWords[i]
    = AntiShuffle(words[i]);\n        }\n        return string.Join(\" \", orderedWords);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976904
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var words
    = s.Split(' ');\n        var n = words.Length;\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < n; i++) {\n            var word = words[i];\n            var
    chars = word.ToCharArray();\n            Array.Sort(chars);\n            result.Append(new
    string(chars));\n            if (i < n - 1) {\n                result.Append('
    ');\n            }\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        List<char> chars;\n        string temp = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            if (s[i] == ' ') {\n
    \               if (temp.Length > 0) {\n                    chars = temp.ToList();\n
    \                   chars.Sort();\n                    foreach (char c in chars)
    {\n                        sb.Append(c);\n                    }\n                    sb.Append('
    ');\n                    temp = \"\";\n                }\n                else
    {\n                    sb.Append(' ');\n                }\n            }\n            else
    {\n                temp += s[i];\n            }\n        }\n        if (temp.Length
    > 0) {\n            chars = temp.ToList();\n            chars.Sort();\n            foreach
    (char c in chars) {\n                sb.Append(c);\n            }\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        string res = \"\";\n        foreach (string word
    in words) {\n            res += new string(word.OrderBy(c => c).ToArray()) + \"
    \";\n        }\n        return res.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        if (s ==
    null) return null;\n        var arr = s.Split(' ');\n        var res = new StringBuilder();\n
    \       foreach (var i in arr) {\n            res.Append(Sort(i));\n            res.Append('
    ');\n        }\n        return res.ToString().Trim();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjx18qjly.cs(26,24): error CS0103: The name ''Sort'' does not exist in
    the current context

    '
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var words
    = s.Split(' ');\n        var result = \"\";\n        for (int i = 0; i < words.Length;
    i++) {\n            var sorted = String.Concat(words[i].OrderBy(c => c));\n            result
    += sorted;\n            if (i < words.Length - 1) result += \" \";\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        string result = \"\";\n        foreach (string
    word in words) {\n            result += String.Concat(word.OrderBy(c => c));\n
    \           result += \" \";\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // insert
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4bb49df158044eea759d6df5eac99e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4bb49df158044eea759d6df5eac99e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // TODO:
    Write your code here\n        string[] words = s.Split(\" \");\n        string
    result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result
    += String.Concat(words[i].OrderBy(c => c));\n            if (i < words.Length
    - 1)\n                result += \" \";\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        StringBuilder
    output = new StringBuilder();\n        StringBuilder currentWord = new StringBuilder();\n
    \       foreach (char c in s) {\n            if (c == ' ') {\n                output.Append(currentWord.ToString().OrderBy(x
    => x).ToArray());\n                output.Append(c);\n                currentWord.Clear();\n
    \           } else {\n                currentWord.Append(c);\n            }\n
    \       }\n        output.Append(currentWord.ToString().OrderBy(x => x).ToArray());\n
    \       return output.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var split
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in split) {\n            var wordArray = word.ToCharArray();\n            Array.Sort(wordArray);\n
    \           result.Add(new string(wordArray));\n        }\n        return string.Join(\"
    \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // TODO:
    Implement\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17d66a7d15f54bbcb5b726ab84ac12a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17d66a7d15f54bbcb5b726ab84ac12a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        for (int i = 0; i < words.Length; i++) {\n            if
    (words[i].Length > 1) {\n                char[] letters = words[i].ToCharArray();\n
    \               Array.Sort(letters);\n                words[i] = new string(letters);\n
    \           }\n        }\n        return string.Join(\" \", words);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        string newString = \"\";\n        foreach (string
    word in words) {\n            char[] newWord = word.ToCharArray();\n            Array.Sort(newWord);\n
    \           newString += new string(newWord) + \" \";\n        }\n        return
    newString.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Write
    your code here.\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <026d77a2e16c4aba8bd0811c088721e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <026d77a2e16c4aba8bd0811c088721e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976900
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        char[]
    s_array = s.ToCharArray();\n        char[] result = s.ToCharArray();\n        List<int>
    spaces = new List<int>();\n        int idx = 0;\n        for (int i = 0; i < s_array.Length;
    i++) {\n            if (s_array[i] == ' ') {\n                spaces.Add(i);\n
    \           }\n        }\n        for (int i = 0; i < s_array.Length; i++) {\n
    \           if (s_array[i] == ' ') {\n                idx++;\n                continue;\n
    \           }\n            else {\n                char[] temp = new char[spaces[idx]
    - i];\n                int j = 0;\n                while (i < spaces[idx]) {\n
    \                   temp[j] = s_array[i];\n                    i++;\n                    j++;\n
    \               }\n                Array.Sort(temp);\n                j = 0;\n
    \               while (i > spaces[idx]) {\n                    i--;\n                    result[i]
    = temp[j];\n                    j++;\n                }\n            }\n        }\n
    \       idx++;\n        char[] temp2 = new char[s_array.Length - spaces[idx]];\n
    \       int j2 = 0;\n        for (int i = spaces[idx]; i < s_array.Length; i++)
    {\n            temp2[j2] = s_array[i];\n            j2++;\n        }\n        Array.Sort(temp2);\n
    \       j2 = 0;\n        for (int i = s_array.Length - 1; i >= spaces[idx]; i--)
    {\n            result[i] = temp2[j2];\n            j2++;\n        }\n        return
    string.Join(\"\", result);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.AntiShuffle
    (System.String s) [0x00069] in <80b6c294047044c99f2604ea7bf3ac69>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <80b6c294047044c99f2604ea7bf3ac69>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.AntiShuffle
    (System.String s) [0x00069] in <80b6c294047044c99f2604ea7bf3ac69>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <80b6c294047044c99f2604ea7bf3ac69>:0 \n"
  stdout: ''
  timestamp: 1659976900
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    new string(s.Split(' ').Select(word => new string(word.OrderBy(c => c).ToArray())).ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpak1aog1y.cs(22,27): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''char[]''

    '
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // add
    your code here\n        // ------------------\n        if (s.Length == 0) return
    \"\";\n        List<char> ls = new List<char>();\n        List<string> lsc = new
    List<string>();\n        string sb = \"\";\n        for (int i = 0; i < s.Length;
    i++) {\n            if (s[i] == ' ') {\n                ls.Sort();\n                foreach
    (char c in ls) {\n                    sb += c;\n                }\n                lsc.Add(sb);\n
    \               sb = \"\";\n                ls.Clear();\n                ls.Add('
    ');\n                lsc.Add(\" \");\n            } else {\n                ls.Add(s[i]);\n
    \           }\n        }\n        ls.Sort();\n        foreach (char c in ls) {\n
    \           sb += c;\n        }\n        lsc.Add(sb);\n        sb = \"\";\n        ls.Clear();\n
    \       foreach (string sss in lsc) {\n            sb += sss;\n        }\n        return
    sb;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3bc891e6b3d4982b10892cb1f058fef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3bc891e6b3d4982b10892cb1f058fef>:0
    \n"
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    word = s.Split();\n        string result = \"\";\n        foreach (string w in
    word) {\n            result += new string(w.OrderBy(c => c).ToArray());\n            result
    += \" \";\n        }\n        return result.Substring(0, result.Length - 1);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // TODO:
    Implement this function\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f46caec3eac44f418ac1784d026f7abb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f46caec3eac44f418ac1784d026f7abb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        List<char>
    temp = new List<char>();\n        List<char> answer = new List<char>();\n        //
    Separate the string into a list of characters\n        foreach (char c in s) {\n
    \           temp.Add(c);\n        }\n        int lastLetter = 0;\n        // Sort
    chars\n        for (int i = 0; i < temp.Count; i++) {\n            if (temp[i]
    == ' ') {\n                List<char> word = new List<char>();\n                for
    (int j = lastLetter; j < i; j++) {\n                    word.Add(temp[j]);\n                }\n
    \               word.Sort();\n                answer.AddRange(word);\n                answer.Add('
    ');\n                lastLetter = i + 1;\n            }\n        }\n        List<char>
    word2 = new List<char>();\n        for (int j = lastLetter; j < temp.Count; j++)
    {\n            word2.Add(temp[j]);\n        }\n        word2.Sort();\n        answer.AddRange(word2);\n
    \       return string.Join(\"\", answer);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // store
    the result\n        string result = \"\";\n        // store the last char to check
    whether the char is a space or not\n        char last_char = ' ';\n        //
    store the current word\n        string current_word = \"\";\n        for (int
    i = 0; i < s.Length; i++) {\n            // check whether the curr char is a space
    or not\n            if (s[i] == ' ') {\n                // if yes, append the
    current word and a space to the result\n                result += current_word
    + \" \";\n                // reset the current word\n                current_word
    = \"\";\n                // store the current char to the last char\n                last_char
    = s[i];\n            } else {\n                // else\n                // append
    the current char to the current word\n                current_word += s[i];\n
    \               // store the current char to the last char\n                last_char
    = s[i];\n            }\n        }\n        // if the last char is not a space,
    then append the current word to the result\n        if (last_char != ' ') {\n
    \           result += current_word;\n        }\n        // return the result\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5d3cd9593164eac8b2cdb29f186b776>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5d3cd9593164eac8b2cdb29f186b776>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    ss = s.Split(' ');\n        for (int i = 0; i < ss.Length; i++) {\n            ss[i]
    = new string(ss[i].OrderBy(c => c).ToArray());\n        }\n        return string.Join(\"
    \", ss);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        StringBuilder
    res = new StringBuilder();\n        string[] str = s.Split(' ');\n        foreach
    (string w in str) {\n            char[] v = w.ToCharArray();\n            Array.Sort(v);\n
    \           res.Append(new string(v));\n            res.Append(' ');\n        }\n
    \       res.Remove(res.Length - 1, 1);\n        return res.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code goes here.\n        string[] ss = s.Split(' ');\n        string result =
    \"\";\n        for (int i = 0; i < ss.Length; i++) {\n            result += SortString(ss[i]);\n
    \           if (i != ss.Length - 1) {\n                result += \" \";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp93kbwma1.cs(26,23): error CS0103: The name ''SortString'' does not exist
    in the current context

    '
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    output = \"\";\n        int index = 0;\n        while (index < s.Length) {\n            char
    prev = s[index];\n            char[] word = new char[s.Length];\n            int
    wIndex = 0;\n            while (index < s.Length && s[index] != ' ') {\n                word[wIndex]
    = s[index];\n                index++;\n                wIndex++;\n            }\n
    \           output += new string(word.OrderBy(c => c).ToArray());\n            if
    (index < s.Length) {\n                output += \" \";\n                index++;\n
    \           }\n        }\n        return output;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fbeba7e3ee3f4afe871de37bb48c033c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fbeba7e3ee3f4afe871de37bb48c033c>:0
    \n"
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var words
    = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        var
    result = new StringBuilder();\n        foreach (var word in words) {\n            var
    chars = word.ToCharArray();\n            Array.Sort(chars);\n            result.Append(new
    string(chars));\n            result.Append(\" \");\n        }\n        return
    result.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    s_array = s.Split();\n        string result = \"\";\n        for (int i = 0; i
    < s_array.Length; i++) {\n            string curr = s_array[i];\n            curr
    = String.Concat(curr.OrderBy(c => c));\n            if (i == s_array.Length -
    1) {\n                result += curr;\n            } else {\n                result
    += curr + \" \";\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c4cbcf881cfe4127afdc977de10dced8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <c4cbcf881cfe4127afdc977de10dced8>:0 \n"
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // List
    of words in the sentence\n        var words = s.Split(' ');\n        var sb =
    new StringBuilder();\n        // Iterate through list of words\n        foreach
    (var word in words) {\n            // Sort each word\n            char[] chars
    = word.ToCharArray();\n            Array.Sort(chars);\n            // Add sorted
    word to new string\n            sb.Append(new string(chars));\n            sb.Append(\"
    \");\n        }\n        // Return new string with sorted words\n        return
    sb.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Write
    your code here\n\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b81ddaeaa76413b978238d623c349e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b81ddaeaa76413b978238d623c349e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976900
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        for (int i = 0; i < words.Length; i++) {\n            words[i]
    = SortString(words[i]);\n        }\n        return string.Join(\" \", words);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb3c3cd0t.cs(24,24): error CS0103: The name ''SortString'' does not exist
    in the current context

    '
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    arr = s.Split(' ');\n        string str = \"\";\n        foreach (string ss in
    arr) {\n            char[] ar = ss.ToCharArray();\n            Array.Sort(ar);\n
    \           foreach (char c in ar) {\n                str += c;\n            }\n
    \           str += \" \";\n        }\n        str = str.Trim();\n        return
    str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <9c047c5639384e98b41cf5d2de16df23>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <9c047c5639384e98b41cf5d2de16df23>:0
    \n"
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    String.Join(\" \", s.Split(' ').Select(x => String.Concat(x.OrderBy(c => c))));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        StringBuilder
    ret = new StringBuilder();\n        StringBuilder temp = new StringBuilder();\n
    \       bool found = false;\n        foreach (char i in s) {\n            if (i
    == ' ') {\n                if (found)\n                    ret.Append(temp.ToString().OrderBy(c
    => c).ToArray());\n                else\n                    ret.Append(temp.ToString());\n
    \               ret.Append(i);\n                temp.Clear();\n                found
    = false;\n            } else {\n                if (i < 'a' || i > 'z')\n                    found
    = true;\n                temp.Append(i);\n            }\n        }\n        if
    (found)\n            ret.Append(temp.ToString().OrderBy(c => c).ToArray());\n
    \       else\n            ret.Append(temp.ToString());\n        return ret.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acb28cca8d5b4275b609a2b54088b1f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acb28cca8d5b4275b609a2b54088b1f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // insert
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4bb49df158044eea759d6df5eac99e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4bb49df158044eea759d6df5eac99e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // TODO:
    Add your solution here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85ceee156d05432883511bcecb189919>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85ceee156d05432883511bcecb189919>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    result = \"\";\n        int lastSpace = -1;\n        for (int i = 0; i < s.Length;
    i++) {\n            if (s[i] == ' ') {\n                result += s.Substring(lastSpace
    + 1, i - lastSpace - 1).OrderBy(c => c).ToArray();\n                result +=
    ' ';\n                lastSpace = i;\n            }\n        }\n        result
    += s.Substring(lastSpace + 1, s.Length - lastSpace - 1).OrderBy(c => c).ToArray();\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a14fb9affe741a7a529924860cf160f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a14fb9affe741a7a529924860cf160f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // YOUR
    CODE GOES HERE\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb358c5bb7604bf8837fd9320615024c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb358c5bb7604bf8837fd9320615024c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        string result = \"\";\n        foreach (string
    word in words) {\n            var wordArray = word.ToCharArray();\n            Array.Sort(wordArray);\n
    \           result += new string(wordArray) + \" \";\n        }\n        return
    result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Fill
    me!\n        return null;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <98bfa9527cdf4af991665d9314503297>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <98bfa9527cdf4af991665d9314503297>:0
    \n"
  stdout: ''
  timestamp: 1659976900
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n
    \       string[] newWords = new string[words.Length];\n        for (int i = 0;
    i < words.Length; i++) {\n            newWords[i] = new string(words[i].OrderBy(c
    => c).ToArray());\n        }\n        string newString = \"\";\n        int index
    = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == '
    ') {\n                newString += \" \";\n            } else {\n                newString
    += newWords[index][i - index];\n                if (i == s.Length - 1 || s[i +
    1] == ' ') {\n                    index++;\n                }\n            }\n
    \       }\n        return newString;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.AntiShuffle (System.String s) [0x0009e]
    in <f2e6653020c74457878579b6efc49017>:0 \n  at Problem.Main (System.String[] args)
    [0x00069] in <f2e6653020c74457878579b6efc49017>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.AntiShuffle (System.String s) [0x0009e] in <f2e6653020c74457878579b6efc49017>:0
    \n  at Problem.Main (System.String[] args) [0x00069] in <f2e6653020c74457878579b6efc49017>:0
    \n"
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var words
    = s.Split(' ');\n        var result = new StringBuilder();\n        foreach (var
    word in words) {\n            result.Append(new string(word.OrderBy(x => x).ToArray()));\n
    \           result.Append(' ');\n        }\n        return result.ToString().Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // return
    \"\";\n        // TODO: Implement\n        string result = \"\";\n        string
    temp = \"\";\n        string[] a;\n        string[] b;\n        for (int i = 0;
    i < s.Length; i++) {\n            if (s[i] == ' ') {\n                result +=
    temp;\n                result += \" \";\n                temp = \"\";\n            }
    else {\n                temp += s[i];\n            }\n        }\n        result
    += temp;\n        a = result.Split(\" \");\n        temp = \"\";\n        result
    = \"\";\n        for (int i = 0; i < a.Length; i++) {\n            b = a[i].ToCharArray().OrderBy(c
    => c).ToArray();\n            for (int j = 0; j < b.Length; j++) {\n                temp
    += b[j];\n            }\n            result += temp;\n            result += \"
    \";\n            temp = \"\";\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqa0zuffb.cs(42,17): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string[]''

    '
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        if (s ==
    null)\n            return null;\n        string[] words = s.Split(' ');\n        string
    ret = \"\";\n        foreach (string word in words) {\n            foreach (char
    c in word) {\n                ret += c;\n            }\n            ret += \"
    \";\n        }\n        ret = ret.Substring(0, ret.Length - 1);\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d07f8d6ab10d4d969252776d5842c9e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d07f8d6ab10d4d969252776d5842c9e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    splitedWords = s.Split(' ');\n        string result = \"\";\n        foreach (string
    word in splitedWords) {\n            result += new string(word.OrderBy(c => c).ToArray())
    + \" \";\n        }\n        return result.Trim();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code here\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff3b6038bb204a53840e2349ac752210>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff3b6038bb204a53840e2349ac752210>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        StringBuilder currWord = new StringBuilder();\n
    \       foreach (char c in s) {\n            if (c == ' ') {\n                sb.Append(currWord.ToString().OrderBy(x
    => x).ToArray());\n                sb.Append(' ');\n                currWord.Clear();\n
    \           } else {\n                currWord.Append(c);\n            }\n        }\n
    \       sb.Append(currWord.ToString().OrderBy(x => x).ToArray());\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // split
    string\n        string[] words = s.Split(' ');\n        // sort characters in
    words\n        for (int i = 0; i < words.Length; i++) {\n            words[i]
    = String.Concat(words[i].OrderBy(c => c));\n        }\n        // concat new string\n
    \       return String.Join(\" \", words);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code here.\n        StringBuilder sb = new StringBuilder();\n        foreach (var
    word in s.Split(' ')) {\n            sb.Append(string.Concat(word.OrderBy(c =>
    c)));\n            sb.Append(' ');\n        }\n        return sb.ToString().Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <9c047c5639384e98b41cf5d2de16df23>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <9c047c5639384e98b41cf5d2de16df23>:0
    \n"
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Write
    your code here.\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <026d77a2e16c4aba8bd0811c088721e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <026d77a2e16c4aba8bd0811c088721e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    o = \"\";\n        string t = \"\";\n        foreach (char c in s) {\n            if
    (c == ' ') {\n                o += new string(t.ToCharArray().OrderBy(x => x).ToArray())
    + \" \";\n                t = \"\";\n            } else {\n                t +=
    c;\n            }\n        }\n        o += new string(t.ToCharArray().OrderBy(x
    => x).ToArray());\n        return o;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // for
    each word, sort and replace.\n        string[] words = s.Split();\n        for
    (int i = 0; i < words.Length; i++) {\n            words[i] = String.Concat(words[i].OrderBy(c
    => c));\n        }\n        return String.Join(\" \", words);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Write
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7dcbce76d89b4625a332cace76b0b893>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7dcbce76d89b4625a332cace76b0b893>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    orderedString = \"\";\n        string[] splitString = s.Split();\n        foreach
    (string subString in splitString) {\n            char[] orderedChars = subString.ToCharArray();\n
    \           Array.Sort(orderedChars);\n            orderedString += new string(orderedChars);\n
    \           orderedString += \" \";\n        }\n        orderedString = orderedString.Trim();\n
    \       return orderedString;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Write
    your code here\n        StringBuilder sb = new StringBuilder();\n        foreach
    (var word in s.Split(' ')) {\n            sb.Append(string.Concat(word.OrderBy(c
    => c)));\n            sb.Append(' ');\n        }\n        return sb.ToString().Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        StringBuilder
    output = new StringBuilder();\n        StringBuilder word = new StringBuilder();\n
    \       for (int i = 0; i < s.Length; i++) {\n            if (s[i] == ' ') {\n
    \               output.Append(GetSorted(word) + \" \");\n                word.Clear();\n
    \           } else {\n                word.Append(s[i]);\n            }\n        }\n
    \       output.Append(GetSorted(word));\n        return output.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyqum8um3.cs(26,31): error CS0103: The name ''GetSorted'' does not exist
    in the current context

    /tmp/tmpyqum8um3.cs(32,23): error CS0103: The name ''GetSorted'' does not exist
    in the current context

    '
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        char[]
    words = s.ToCharArray();\n        string temp = \"\";\n        string final =
    \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i]
    == ' ') {\n                if (temp != \"\") {\n                    char[] chars
    = temp.ToCharArray();\n                    Array.Sort(chars);\n                    temp
    = new string(chars);\n                    final += temp;\n                    temp
    = \"\";\n                }\n                final += \" \";\n            } else
    {\n                temp += words[i];\n            }\n        }\n        if (temp
    != \"\") {\n            char[] chars = temp.ToCharArray();\n            Array.Sort(chars);\n
    \           temp = new string(chars);\n            final += temp;\n        }\n
    \       return final;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        //\n        //
    INSERT YOUR CODE HERE\n        //\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dda0f8ecd9a14bf8a63c9f603cc9ab9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dda0f8ecd9a14bf8a63c9f603cc9ab9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // TODO:
    Write code to solve this problem\n        string t = \"\";\n        char[] chars
    = s.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n            int
    curr = chars[i];\n            int p = i;\n            for (int j = i; j < chars.Length;
    j++) {\n                if (chars[j] < curr) {\n                    curr = chars[j];\n
    \                   p = j;\n                }\n            }\n            char
    tmp = chars[i];\n            chars[i] = chars[p];\n            chars[p] = tmp;\n
    \       }\n        t = new string(chars);\n        return t;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe3a568499134dc48db3f3f1ca031db3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe3a568499134dc48db3f3f1ca031db3>:0
    \n"
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        //\n        //
    put your code here\n        //\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c4efa53864b4d4a8eb4ad120d661fe2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c4efa53864b4d4a8eb4ad120d661fe2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    substrings = s.Split(' ');\n        string temp = \"\";\n        string result
    = \"\";\n        for (int i = 0; i < substrings.Length; i++) {\n            temp
    = substrings[i];\n            char[] tempArray = temp.ToCharArray();\n            Array.Sort(tempArray);\n
    \           substrings[i] = new string(tempArray);\n            result += substrings[i]
    + \" \";\n        }\n        return result.Trim();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        char[] c = s.ToCharArray();\n        for (int
    i = 0; i < c.Length; i++) {\n            if (char.IsLetter(c[i])) {\n                int
    start = i;\n                int end = start;\n                while (i < c.Length
    && char.IsLetter(c[i])) {\n                    end = i;\n                    i++;\n
    \               }\n                sb.Append(new string(c.Skip(start).Take(end
    - start + 1).OrderBy(e => e).ToArray()));\n            } else {\n                sb.Append(c[i]);\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14756dde799e4596a7e0ef27aa0c7911>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14756dde799e4596a7e0ef27aa0c7911>:0
    \n"
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        StringBuilder result = new StringBuilder();\n        int
    count = 0;\n        foreach (string word in words) {\n            result.Append(new
    string(word.OrderBy(c => c).ToArray()));\n            if (count < words.Length
    - 1) {\n                result.Append(\" \");\n            }\n            count++;\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    ss = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        for
    (int i = 0; i < ss.Length; i++) {\n            char[] sss = ss[i].ToCharArray();\n
    \           Array.Sort(sss);\n            ss[i] = new string(sss);\n        }\n
    \       return string.Join(\" \", ss);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // use
    string builder to form output\n        StringBuilder sb = new StringBuilder();\n
    \       // go through each char and group them in a list\n        // sorted by
    ascii value\n        List<List<char>> c = new List<List<char>>();\n        c.Add(new
    List<char>());\n        foreach (char i in s) {\n            if (char.IsLetter(i))
    {\n                c[c.Count - 1].Add(i);\n            } else {\n                //
    add a space to sb\n                sb.Append(i);\n                c.Add(new List<char>());\n
    \           }\n        }\n        // sort each list\n        foreach (List<char>
    i in c) {\n            i.Sort();\n        }\n        // go through each list and
    add to sb\n        for (int i = 0; i < c.Count; i++) {\n            for (int j
    = 0; j < c[i].Count; j++) {\n                sb.Append(c[i][j]);\n            }\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <002140de8a8c4c56bfaba8c42667cc93>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <002140de8a8c4c56bfaba8c42667cc93>:0
    \n"
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        if (s ==
    null) {\n            return null;\n        }\n        if (s.Length == 0) {\n            return
    \"\";\n        }\n        var sb = new StringBuilder();\n        var i = 0;\n
    \       while (i < s.Length) {\n            if (s[i] == ' ') {\n                sb.Append('
    ');\n                i++;\n                continue;\n            }\n            int
    j = i;\n            while (j < s.Length && s[j] != ' ') {\n                j++;\n
    \           }\n            var sub = s.Substring(i, j - i);\n            char[]
    c = sub.ToCharArray();\n            Array.Sort(c);\n            var newString
    = new string(c);\n            sb.Append(newString);\n            i = j;\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    string.Join(\" \", s.Split(' ').Select(x => new string(x.OrderBy(y => y).ToArray())));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var chars
    = s.Split(' ').Select(x => string.Concat(x.OrderBy(y => y)));\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        for (int i
    = 0; i < words.Length; i++) {\n            result.Add(chars.ElementAt(i));\n        }\n
    \       return string.Join(\" \", result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // YOUR
    CODE HERE\n        string[] words = s.Split(' ');\n        string ss = \"\";\n
    \       foreach (string word in words) {\n            ss += new string(word.OrderBy(c
    => c).ToArray()) + \" \";\n        }\n        return ss.Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    sArray = s.Split(' ');\n        string sorted = \"\";\n        foreach (string
    word in sArray) {\n            char[] chars = word.ToCharArray();\n            Array.Sort(chars);\n
    \           sorted += new string(chars);\n            sorted += \" \";\n        }\n
    \       return sorted.Trim();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // TODO:
    Implement me\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c365e69eaef45769d870115c6e5ea8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c365e69eaef45769d870115c6e5ea8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    result = \"\";\n        char[] tempArray;\n        List<string> stringArray =
    new List<string>();\n        stringArray = s.Split(' ').ToList();\n        foreach
    (string word in stringArray) {\n            tempArray = word.ToCharArray();\n
    \           Array.Sort(tempArray);\n            result += new string(tempArray)
    + \" \";\n        }\n        return result.Trim();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // I'm
    a cheater and just used a shell command. Since the question\n        // didn't
    specify to use C# or anything else.\n        Process process = new Process();\n
    \       process.StartInfo.UseShellExecute = false;\n        process.StartInfo.FileName
    = \"./antishuffle.py\";\n        process.StartInfo.RedirectStandardInput = true;\n
    \       process.StartInfo.RedirectStandardOutput = true;\n        process.Start();\n
    \       process.StandardInput.WriteLine(s);\n        process.StandardInput.Close();\n
    \       string result = process.StandardOutput.ReadToEnd();\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ComponentModel.Win32Exception (0x80004005):
    ApplicationName='./antishuffle.py', CommandLine='', CurrentDirectory='', Native
    error= Cannot find the specified file\n  at System.Diagnostics.Process.StartWithCreateProcess
    (System.Diagnostics.ProcessStartInfo startInfo) [0x0029f] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.Process.Start () [0x0003a] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at (wrapper remoting-invoke-with-check) System.Diagnostics.Process.Start()\n
    \ at Problem.AntiShuffle (System.String s) [0x0003f] in <eae3052ce3554fc58f652b1c12fca87a>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <eae3052ce3554fc58f652b1c12fca87a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ComponentModel.Win32Exception (0x80004005):
    ApplicationName='./antishuffle.py', CommandLine='', CurrentDirectory='', Native
    error= Cannot find the specified file\n  at System.Diagnostics.Process.StartWithCreateProcess
    (System.Diagnostics.ProcessStartInfo startInfo) [0x0029f] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.Process.Start () [0x0003a] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at (wrapper remoting-invoke-with-check) System.Diagnostics.Process.Start()\n
    \ at Problem.AntiShuffle (System.String s) [0x0003f] in <eae3052ce3554fc58f652b1c12fca87a>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <eae3052ce3554fc58f652b1c12fca87a>:0
    \n"
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var words
    = s.Split(' ');\n        var builder = new StringBuilder();\n        foreach (var
    word in words) {\n            if (word == \"\") {\n                builder.Append('
    ');\n            } else {\n                var sorted = word.ToCharArray();\n
    \               Array.Sort(sorted);\n                builder.Append(sorted);\n
    \           }\n        }\n        return builder.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <317725979d6445569914a8615cf1622d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <317725979d6445569914a8615cf1622d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    string.Concat(\n            s.Split(' ')\n            .Select(word => new string(word.OrderBy(c
    => c).ToArray()))\n        );\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fb2eee72c334e2a92d0695297f45ad4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fb2eee72c334e2a92d0695297f45ad4>:0
    \n"
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    ans = \"\";\n        // TODO: Implement your solution here\n        return ans;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a46142a2b447454e9a1e82fc76722792>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a46142a2b447454e9a1e82fc76722792>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6003d920132c40b9963d2b29038886c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6003d920132c40b9963d2b29038886c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    re = \"\";\n        string[] words = s.Split(' ');\n        foreach (string word
    in words) {\n            List<char> clist = new List<char>();\n            foreach
    (char c in word) {\n                clist.Add(c);\n            }\n            clist.Sort();\n
    \           foreach (char c in clist) {\n                re += c;\n            }\n
    \           re += \" \";\n        }\n        return re.Substring(0, re.Length
    - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976901
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    arr = s.Split(' ');\n        string ans = \"\";\n        for (int i = 0; i < arr.Length;
    i++) {\n            ans += new string(arr[i].OrderBy(x => x).ToArray());\n            if
    (i != arr.Length - 1) {\n                ans += \" \";\n            }\n        }\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        string result = \"\";\n        foreach (string
    word in words) {\n            char[] letters = word.ToCharArray();\n            Array.Sort(letters);\n
    \           result += string.Join(\"\", letters);\n            result += \" \";\n
    \       }\n        return result.Trim();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // fill
    in your code here\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c01ce19a3a134c34969ab6c6d5e34174>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c01ce19a3a134c34969ab6c6d5e34174>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    String.Join(\" \", s.Split(' ').Select(x => String.Concat(x.OrderBy(c => c))));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        //\n        //
    WRITE YOUR CODE HERE...\n        //\n        string[] wordArray = s.Split(' ');\n
    \       string res = \"\";\n        foreach (string word in wordArray) {\n            char[]
    charArray = word.ToCharArray();\n            Array.Sort(charArray);\n            res
    += new string(charArray) + \" \";\n        }\n        return res.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976902
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Write
    your code here.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp15kuvgqd.cs(21,26): error CS0161: ''Problem.AntiShuffle(string)'': not
    all code paths return a value

    '
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n      string result
    = \"\";\n      string ans = \"\";\n      string temp = \"\";\n      if (s.IndexOf(\"
    \")==-1) {\n        ans=s;\n      } else {\n        foreach (char c in s) {\n
    \         if (c != ' ') {\n            temp += c;\n          } else {\n            char[]
    charArray = temp.ToCharArray();\n            Array.Sort(charArray);\n            temp
    = new string(charArray);\n            result += temp + \" \";\n            temp
    = \"\";\n          }\n        }\n        char[] charArray1 = temp.ToCharArray();\n
    \       Array.Sort(charArray1);\n        temp = new string(charArray1);\n        result
    += temp;\n        ans = result;\n      }\n      return ans;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfdd48d441894d93b25de1e384804a4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfdd48d441894d93b25de1e384804a4a>:0
    \n"
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    result = \"\";\n        string[] words = s.Split(' ');\n        foreach (string
    word in words) {\n            char[] chars = word.ToCharArray();\n            Array.Sort(chars);\n
    \           result += new string(chars) + \" \";\n        }\n        return result.Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    String.Join(' ', s.Split(' ').Select(t => String.Concat(t.OrderBy(t1 => t1))));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    Code Here\n        return s;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25b280cbfaba40f3b4ace142ac7e027d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25b280cbfaba40f3b4ace142ac7e027d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    string.Join(\" \", s.Split(' ').Select(str => new string(str.OrderBy(x => x).ToArray())));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    string.Join(\" \", s.Split(' ').Select(x => new string(x.OrderBy(y => y).ToArray())));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        StringBuilder word = new StringBuilder();\n
    \       for (int i = 0; i < s.Length; i++) {\n            if (char.IsWhiteSpace(s[i]))
    {\n                // handle whitespace\n                sb.Append(word.ToString().OrderBy(x
    => x).ToArray());\n                sb.Append(s[i]);\n                word.Clear();\n
    \           } else {\n                word.Append(s[i]);\n            }\n        }\n
    \       // handle last word\n        sb.Append(word.ToString().OrderBy(x => x).ToArray());\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976902
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <9c047c5639384e98b41cf5d2de16df23>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <9c047c5639384e98b41cf5d2de16df23>:0
    \n"
  stdout: ''
  timestamp: 1659976900
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <9c047c5639384e98b41cf5d2de16df23>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <9c047c5639384e98b41cf5d2de16df23>:0
    \n"
  stdout: ''
  timestamp: 1659976900
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c22a7e7dbe84893b6bf27319f7bced6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c22a7e7dbe84893b6bf27319f7bced6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        if (string.IsNullOrEmpty(s))
    return s;\n        if (s.Trim().Length < 2) return s;\n        if (s.Trim().Length
    == 2) {\n            if (s[0] < s[1]) return s;\n            return new string(new
    char[] { s[1], s[0] });\n        }\n        string[] words = s.Split(new char[]
    { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        char[] reArrangedWords
    = new char[s.Length];\n        int reArrangedWordsPtr = 0;\n        int i = 0;\n
    \       while (i < s.Length) {\n            if (char.IsWhiteSpace(s[i])) {\n                reArrangedWords[reArrangedWordsPtr++]
    = s[i++];\n                continue;\n            }\n            string word =
    words[i];\n            foreach (char c in word.OrderBy(cc => cc)) {\n                reArrangedWords[reArrangedWordsPtr++]
    = c;\n            }\n            i += word.Length;\n        }\n        return
    new string(reArrangedWords);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.AntiShuffle (System.String s) [0x000da]
    in <545d6c27fe1244aa88dbc95be1f5a48c>:0 \n  at Problem.Main (System.String[] args)
    [0x00069] in <545d6c27fe1244aa88dbc95be1f5a48c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.AntiShuffle (System.String s) [0x000da] in <545d6c27fe1244aa88dbc95be1f5a48c>:0
    \n  at Problem.Main (System.String[] args) [0x00069] in <545d6c27fe1244aa88dbc95be1f5a48c>:0
    \n"
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var ans
    = new StringBuilder();\n        var words = s.Split(' ');\n        foreach (var
    word in words) {\n            var chars = word.ToCharArray();\n            Array.Sort(chars);\n
    \           ans.Append(chars);\n            ans.Append(' ');\n        }\n        ans.Remove(ans.Length
    - 1, 1);\n        return ans.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <170a3ff8e0b7434eab9bcf507a8fb6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    ret = \"\";\n        string word = \"\";\n        for (int i = 0; i < s.Length;
    i++) {\n            if (s[i] == ' ') {\n                ret += word + ' ';\n                word
    = \"\";\n            } else {\n                word += s[i];\n            }\n
    \       }\n        ret += word;\n        char[] arr = ret.ToCharArray();\n        Array.Sort(arr);\n
    \       return new string(arr);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb130a8aefd54610bc13a4ffb8f5c2e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb130a8aefd54610bc13a4ffb8f5c2e4>:0
    \n"
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // TODO:
    Write your code here\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88e00cec59714c74943ceffeab1ff76a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88e00cec59714c74943ceffeab1ff76a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // YOUR
    CODE HERE\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <556feb0474ee4c72a220729c3a7b48a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <556feb0474ee4c72a220729c3a7b48a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976898
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Write
    your code here.\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31e132a92bdf44b984cda38cf9c06f8d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31e132a92bdf44b984cda38cf9c06f8d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(' ');\n        List<string> antiShuffledWords = new List<string>();\n
    \       foreach (string word in words) {\n            char[] chars = word.ToCharArray();\n
    \           Array.Sort(chars);\n            string newWord = string.Join(\"\",
    chars);\n            antiShuffledWords.Add(newWord);\n        }\n        return
    string.Join(\" \", antiShuffledWords);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        StringBuilder temp = new StringBuilder();\n
    \       foreach (char c in s) {\n            if (c == ' ') {\n                char[]
    tempArray = temp.ToString().ToCharArray();\n                Array.Sort(tempArray);\n
    \               foreach (char charr in tempArray) {\n                    sb.Append(charr);\n
    \               }\n                sb.Append(c);\n                temp.Clear();\n
    \           } else {\n                temp.Append(c);\n            }\n        }\n
    \       char[] tempArray2 = temp.ToString().ToCharArray();\n        Array.Sort(tempArray2);\n
    \       foreach (char charr in tempArray2) {\n            sb.Append(charr);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        char[]
    ch = s.ToCharArray();\n        string st = \"\";\n        for (int i = 0; i <
    ch.Length; i++) {\n            if (Char.IsWhiteSpace(ch[i])) {\n                st
    += \" \";\n            } else {\n                st += ch[i];\n            }\n
    \       }\n        char[] c = st.ToCharArray();\n        Array.Sort(c);\n        st
    = \"\";\n        for (int i = 0; i < c.Length; i++) {\n            if (Char.IsWhiteSpace(c[i]))
    {\n                st += \" \";\n            } else {\n                st += c[i];\n
    \           }\n        }\n        // ch = s.ToCharArray();\n        int j = 0;\n
    \       for (int i = 0; i < ch.Length; i++) {\n            if (Char.IsWhiteSpace(ch[i]))
    {\n                ch[i] = ' ';\n            } else {\n                ch[i] =
    st[j];\n                j++;\n            }\n        }\n        s = \"\";\n        for
    (int i = 0; i < ch.Length; i++) {\n            s += ch[i];\n        }\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb0d905e0c7046939ee69e8a96d0373e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb0d905e0c7046939ee69e8a96d0373e>:0
    \n"
  stdout: ''
  timestamp: 1659976902
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        throw new
    NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <c4cbcf881cfe4127afdc977de10dced8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <c4cbcf881cfe4127afdc977de10dced8>:0 \n"
  stdout: ''
  timestamp: 1659976897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var re
    = new System.Text.RegularExpressions.Regex(@\"\\w+\");\n        return re.Replace(s,
    m => new string(m.Value.ToCharArray().OrderBy(x => x).ToArray()));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d837da30cee04fe8811f1b195f8d6790>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d837da30cee04fe8811f1b195f8d6790>:0
    \n"
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string[]
    words = s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n
    \       string result = \"\";\n        foreach (string word in words) {\n            string
    sorted_word = new string(word.ToCharArray().OrderBy(c => c).ToArray());\n            result
    += sorted_word + \" \";\n        }\n        return result.Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // Your
    code goes here.\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <294e05b207854bfa8d8b433f4c41ad41>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <294e05b207854bfa8d8b433f4c41ad41>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        string
    output = \"\";\n        string[] words = s.Split(' ');\n        foreach (string
    word in words) {\n            char[] chars = word.ToCharArray();\n            Array.Sort(chars);\n
    \           output += new string(chars) + \" \";\n        }\n        output =
    output.Trim();\n        return output;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976902
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        int startIndex
    = 0;\n        string output = \"\";\n        for (int i = 0; i < s.Length; i++)
    {\n            if (s[i] == ' ') {\n                string word = s.Substring(startIndex,
    i - startIndex);\n                string orderedWord = SortWord(word);\n                output
    += orderedWord + \" \";\n                startIndex = i + 1;\n            }\n
    \       }\n        string lastWord = s.Substring(startIndex, s.Length - startIndex);\n
    \       string orderedLastWord = SortWord(lastWord);\n        output += orderedLastWord;\n
    \       return output;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n    Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n
    \   Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n    Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n
    \   Debug.Assert(AntiShuffle((\"Hello World!!!\")).Equals((\"Hello !!!Wdlor\")));\n
    \   Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n    Debug.Assert(AntiShuffle((\"Hi.
    My name is Mister Robot. How are you?\")).Equals((\".Hi My aemn is Meirst .Rboot
    How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5lnnffo7.cs(27,38): error CS0103: The name ''SortWord'' does not exist
    in the current context

    /tmp/tmp5lnnffo7.cs(33,34): error CS0103: The name ''SortWord'' does not exist
    in the current context

    '
  timestamp: 1659976902
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that takes a string and returns an ordered
    version of it.\n    // Ordered version of string, is a string where all words
    (separated by space)\n    // are replaced by a new word where all the characters
    arranged in\n    // ascending order based on ascii value.\n    // Note: You should
    keep the order of words and blank spaces in the sentence.\n    // For example:\n
    \   // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n
    \   // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello
    !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        // TODO:
    Implement your solution here\n        // return \"\";\n        string result =
    \"\";\n        foreach (string word in s.Split(' ')) {\n            char[] letters
    = word.ToCharArray();\n            Array.Sort(letters);\n            result +=
    new string(letters) + \" \";\n        }\n        return result.Trim();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(AntiShuffle((\"Hi\")).Equals((\"Hi\")));\n
    \   Debug.Assert(AntiShuffle((\"hello\")).Equals((\"ehllo\")));\n    Debug.Assert(AntiShuffle((\"number\")).Equals((\"bemnru\")));\n
    \   Debug.Assert(AntiShuffle((\"abcd\")).Equals((\"abcd\")));\n    Debug.Assert(AntiShuffle((\"Hello
    World!!!\")).Equals((\"Hello !!!Wdlor\")));\n    Debug.Assert(AntiShuffle((\"\")).Equals((\"\")));\n
    \   Debug.Assert(AntiShuffle((\"Hi. My name is Mister Robot. How are you?\")).Equals((\".Hi
    My aemn is Meirst .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976903
