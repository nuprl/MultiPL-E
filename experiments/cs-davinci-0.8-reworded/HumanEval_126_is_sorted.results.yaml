language: cs
name: HumanEval_126_is_sorted
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count() == 0) {\n            return true;\n        }\n
    \       else {\n            if (lst.Count() == 1) {\n                return true;\n
    \           }\n            else {\n                long pnum = lst[0];\n                int
    c1 = 0;\n                for (int i = 1; i < lst.Count(); i++) {\n                    if
    (lst[i] < pnum) {\n                        return false;\n                    }\n
    \                   else {\n                        if (lst[i] == pnum) {\n                            c1
    += 1;\n                        }\n                        else {\n                            pnum
    = lst[i];\n                            c1 = 0;\n                        }\n                    }\n
    \                   if (c1 > 1) {\n                        return false;\n                    }\n
    \               }\n                return true;\n            }\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long current = -1;\n        long previous = -1;\n        long
    max = long.MinValue;\n        bool sorted = true;\n        foreach (long element
    in lst) {\n            current = element;\n            if (previous == -1) {\n
    \               previous = current;\n                max = current;\n            }
    else {\n                if (current >= max) {\n                    previous =
    current;\n                    max = current;\n                } else {\n                    sorted
    = false;\n                    break;\n                }\n            }\n        }\n
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08c706e03a204c6a9b6b0873f3bb4fbd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08c706e03a204c6a9b6b0873f3bb4fbd>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Fill in your code here, and any helper functions you need.\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da5cd3e0da1748e5bb7f2fd34b8bc3d5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da5cd3e0da1748e5bb7f2fd34b8bc3d5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long? prev = null;\n        long count = 0;\n        foreach (long
    x in lst) {\n            if (prev != null && prev > x) {\n                return
    false;\n            }\n            if (prev == x) {\n                count +=
    1;\n            } else {\n                count = 0;\n            }\n            if
    (count > 1) {\n                return false;\n            }\n            prev
    = x;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var r = new List<long>();\n        long c = 0;\n        for (int
    i = 0; i < lst.Count; i++) {\n            if (lst[i] != c) {\n                r.Add(lst[i]);\n
    \               c = lst[i];\n            }\n        }\n        for (int i = 0;
    i < r.Count - 1; i++) {\n            if (r[i] > r[i + 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0957bde73be24d078251e1ab539bcb13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0957bde73be24d078251e1ab539bcb13>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Create a list of all unique numbers in the given list\n        var
    set = new HashSet<long>(lst);\n        // Sort the list of unique numbers into
    ascending order\n        List<long> sorted = set.ToList();\n        sorted.Sort();\n
    \       // Return true if the given list matches the sorted list\n        return
    sorted.SequenceEqual(lst);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a2b816caf2b4595a65e056f777812f0>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool sorted = true;\n        long last = lst[0];\n        bool
    seenLast = false;\n        int lstLen = lst.Count;\n        if (lstLen == 1) {\n
    \           return true;\n        }\n        foreach (long thisNum in lst) {\n
    \           if (seenLast) {\n                if (thisNum == last) {\n                    return
    false;\n                }\n                if (thisNum < last) {\n                    sorted
    = false;\n                }\n            }\n            seenLast = true;\n            last
    = thisNum;\n        }\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00003] in <9a1cf320622d4476b67954f995964f18>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <9a1cf320622d4476b67954f995964f18>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00003] in <9a1cf320622d4476b67954f995964f18>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <9a1cf320622d4476b67954f995964f18>:0
    \n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool result = true;\n        bool haveDup = false;\n        long
    prev = 0;\n        for (int i = 0; i < lst.Count; i += 1) {\n            if (i
    > 0) {\n                if (lst[i] == prev) {\n                    haveDup = true;\n
    \               }\n                if (lst[i] < prev) {\n                    result
    = false;\n                }\n            }\n            prev = lst[i];\n        }\n
    \       return result && !haveDup;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f1c5595b6cc4727b98d9f0651339956>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // TODO: Return whether or not the input list is sorted in ascending
    order\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    > lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ea05ebd991e48599770276186eec8d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ea05ebd991e48599770276186eec8d4>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        int
    curr_num = 0;\n        int curr_val = lst[0];\n        foreach (int val in lst)
    {\n            if (val < curr_val) {\n                return false;\n            }\n
    \           if (val == curr_val) {\n                curr_num += 1;\n                if
    (curr_num == 2) {\n                    return false;\n                }\n            }\n
    \           else {\n                curr_num = 0;\n                curr_val =
    val;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp40mh8cgr.cs(34,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        List<long> diff = new
    List<long>();\n        for (int i = 0; i < lst.Count - 1; i++) {\n            diff.Add(lst[i
    + 1] - lst[i]);\n        }\n        return !diff.Where(x => x == 0).Any() && diff.All(x
    => x > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3adaa2cd8f1c4b29b29639890c1e2542>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool wasDuplicate = false;\n        long current = -1;\n        foreach
    (long number in lst) {\n            if (number <= current) {\n                if
    (wasDuplicate) {\n                    return false;\n                }\n                wasDuplicate
    = true;\n            }\n            current = number;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29e13c45daac49609600fea7353c9c4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29e13c45daac49609600fea7353c9c4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) {\n            return true;\n        }\n        for
    (int i = 1; i < lst.Count; i += 1) {\n            if (lst[i] < lst[i - 1]) {\n
    \               return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9940937f3bae4fa4a4b5d6ddf501d4c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9940937f3bae4fa4a4b5d6ddf501d4c2>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        long
    cur = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]
    < cur) {\n                return false;\n            }\n            cur = lst[i];\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e477d0bebfc648f1803561a4497d628b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e477d0bebfc648f1803561a4497d628b>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long x = (long)1L;\n        long last = default(long);\n        bool
    hasLast = false;\n        foreach (long i in lst) {\n            if (hasLast)
    {\n                if (i > last) {\n                    last = i;\n                    continue;\n
    \               }\n                return false;\n            }\n            last
    = i;\n            hasLast = true;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6009d0a56954a21b7c8026be16c3f8f>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    >= lst[i + 1]) return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1057a44075bb42748b30c4e3cc327c5a>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        List<long>
    nums = lst.Distinct().ToList();\n        for (int i = 0; i < nums.Count; i++)
    {\n            if (i == nums.Count - 1) {\n                return true;\n            }\n
    \           if (nums[i] > nums[i + 1]) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab0540bca61945208589af9b7c71b590>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab0540bca61945208589af9b7c71b590>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        long last = lst[0];\n
    \       lst.RemoveAt(0);\n        foreach (long curr in lst) {\n            if
    (curr < last) return false;\n            last = curr;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2b91c3deba34390838bca1a26734d41>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2b91c3deba34390838bca1a26734d41>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var isSorted = true;\n        var duplicates = false;\n        var
    prev = 0L;\n        for (var i = 0; i < lst.Count; i++) {\n            if (i >
    0) {\n                if (lst[i] < prev) {\n                    isSorted = false;\n
    \               }\n                if (lst[i] == prev) {\n                    duplicates
    = true;\n                }\n            }\n            prev = lst[i];\n        }\n
    \       return isSorted && !duplicates;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8562ff11b1f3448baad602f968b89436>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        else
    {\n            var acc1 = (lst[0]);\n            var acc2 = 1;\n            for
    (int i = 1; i < lst.Count; i++) {\n                var arg1 = (lst[i]);\n                var
    arg2 = acc1;\n                var arg3 = acc2;\n                if ((arg1) < (arg2))
    {\n                    return false;\n                }\n                else
    if ((arg1) == (arg2)) {\n                    if ((arg3) > 1) {\n                        return
    false;\n                    }\n                    else {\n                        acc2
    = (arg3) + 1;\n                    }\n                }\n                else
    {\n                    acc1 = (arg1);\n                    acc2 = 1;\n                }\n
    \           }\n            return true;\n        }\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976986
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool ans = true;\n        // Pass 1: Compare each element to the
    next\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    > lst[i + 1]) {\n                ans = false;\n                break;\n            }\n
    \       }\n        // Pass 2: Compare each element to the previous\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lst[i - 1]) {\n                ans
    = false;\n                break;\n            }\n        }\n        // Pass 3:
    Check for duplicates\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if
    (lst[i] == lst[i + 1]) {\n                ans = false;\n                break;\n
    \           }\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14b868b1a3a545a1a5f9a2ccad0425a4>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool sorted = true;\n        if (lst.Count > 1) {\n            for
    (long i = 1; i < lst.Count; i++) {\n                if (lst[(int)i] < lst[(int)(i
    - 1)]) {\n                    sorted = false;\n                    break;\n                }\n
    \           }\n        }\n        return sorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12394941a2814e55998127fdf9c65a14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12394941a2814e55998127fdf9c65a14>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // for (int i = 0; i < lst.Count; i++) {\n        //     if (i+1
    < lst.Count && lst[i] == lst[i+1]) {\n        //         return false;\n        //
    \    }\n        // }\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if
    (lst[i] > lst[i+1]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <856533466d6b4a70abeaba25ff03b286>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <856533466d6b4a70abeaba25ff03b286>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Implement this\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d8cd4883de9467bb65af7f72afa9c55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d8cd4883de9467bb65af7f72afa9c55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var count = lst.Count;\n        if (count <= 1) {\n            return
    true;\n        }\n        var pre = lst[0];\n        if (count == 2) {\n            return
    lst[1] > pre;\n        }\n        for (int i = 1; i < count; i++) {\n            var
    cur = lst[i];\n            if (cur < pre) {\n                return false;\n            }\n
    \           if (i > 1 && cur == pre) {\n                return false;\n            }\n
    \           pre = cur;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8314705a5b8d4eca88a399999abe33ec>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // STUDENT WORK\n        long prevValue = 0;\n        foreach
    (long value in lst) {\n            if (value < prevValue)\n                return
    false;\n            prevValue = value;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a97b622c77047c39007e717d8756bda>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a97b622c77047c39007e717d8756bda>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool flag = true;\n        long prevItem = lst[0];\n        int
    index = 1;\n        int lstLength = lst.Count;\n        while (index < lstLength)
    {\n            long thisItem = lst[index];\n            if (thisItem <= prevItem)
    {\n                flag = false;\n                break;\n            }\n            prevItem
    = thisItem;\n            index += 1;\n        }\n        return flag;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00003] in <a7100860ee1b473ea03783369d1112bc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <a7100860ee1b473ea03783369d1112bc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00003] in <a7100860ee1b473ea03783369d1112bc>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <a7100860ee1b473ea03783369d1112bc>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        long
    prev = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i] <= prev) {\n                return false;\n            }\n            prev
    = lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <34d66f28c91f44858ddc22bc8b4be3ed>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Convert to System.Collections.Generic.List<long> because I
    can't\n        // figure out how to use F# Set.\n        //var uniqueList = lst.Distinct().ToList();\n
    \       var uniqueList = new List<long>();\n        foreach (var item in lst)
    {\n            if (!uniqueList.Contains(item)) {\n                uniqueList.Add(item);\n
    \           }\n        }\n        var sorted = true;\n        var last = 0L;\n
    \       foreach (var item in uniqueList) {\n            if (item < last) {\n                sorted
    = false;\n                break;\n            }\n            last = item;\n        }\n
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e3292f95eb64bfe8ec453f7a0f11388>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2e3292f95eb64bfe8ec453f7a0f11388>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var temp = new List<long>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            long n = lst[i];\n            if (temp.Contains(n)) {\n                return
    false;\n            }\n            temp.Add(n);\n        }\n        temp.Sort();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] != temp[i])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d88bc2f4a12483f863b8f5ad3ada6e4>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool flag = true;\n        int cnt = 0;\n        for (int i =
    0; i < lst.Count - 1; i++) {\n            if (lst[i] == lst[i + 1]) {\n                cnt++;\n
    \           }\n            if (lst[i] > lst[i + 1]) {\n                flag =
    false;\n            }\n        }\n        if (cnt > 1) {\n            flag = false;\n
    \       }\n        return flag;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e51542c7ba984d45bd8c230c43efc93b>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        long
    prev = lst[0];\n        foreach (long num in lst) {\n            if (num < prev)
    {\n                return false;\n            }\n            prev = num;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49b49159355b457da4eba5734e2e395c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49b49159355b457da4eba5734e2e395c>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        for
    (long i = (long)1L; i < lst.Count; i++) {\n            if (lst[(int)(i - 1L)]
    > lst[(int)(i)]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a08e6db2137843e8836fd82d67726ccd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a08e6db2137843e8836fd82d67726ccd>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    >= lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84e200ba65d444a8b7ee0d599c5db2d1>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if(lst.Count == 0 || lst.Count == 1) {\n            return true;\n
    \       }\n        long last = lst[0];\n        foreach(long x in lst) {\n            if(x
    < last) {\n                return false;\n            }\n            last = x;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd1ec74cb3bd4e09bea26fc2125398d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd1ec74cb3bd4e09bea26fc2125398d6>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        long
    prev = lst[0];\n        long count = 1;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] == prev) {\n                count++;\n                if
    (count > 1) {\n                    return false;\n                }\n            }
    else {\n                if (lst[i] < prev) {\n                    return false;\n
    \               }\n                prev = lst[i];\n                count = 1;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <136ecf47dd1843dcad0b0965afad0922>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        // How can we return
    true if we find any number that is greater than\n        // the next?\n        //for
    i in range(len(lst) - 1):\n        for (long i = 0; i < (lst.Count - 1); i++)
    {\n            // if lst[i] > lst[i + 1]:\n            if (lst[(int)i] > lst[(int)(i
    + 1)]) {\n                // return false\n                return false;\n            }\n
    \       }\n        // return true\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82d82e2c1e484d2594fbb80bedf47fd0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82d82e2c1e484d2594fbb80bedf47fd0>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = lst[0];\n        foreach (long n in lst) {\n            if
    (n < prev) return false;\n            prev = n;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <612363b7fda941cfb8f09ea48c794e32>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <612363b7fda941cfb8f09ea48c794e32>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <612363b7fda941cfb8f09ea48c794e32>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <612363b7fda941cfb8f09ea48c794e32>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        List<long> tmp = new List<long>(lst);\n        tmp.Sort();\n        for
    (int i = 0; i < lst.Count; i++) {\n            if (lst[i] != tmp[i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acb30e403d134aec9bdadd73a38f5fe0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acb30e403d134aec9bdadd73a38f5fe0>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        long
    last = lst[0];\n        for (int i = 1; i < lst.Count; i += 1) {\n            if
    (lst[i] <= last) {\n                return false;\n            }\n            last
    = lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d47fd2a431c34f4aafe8b8846faeb353>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = (long)0L;\n        bool first = true;\n        bool
    dup = false;\n        foreach (long v in lst) {\n            if (first) {\n                first
    = false;\n            } else {\n                if (v == prev) {\n                    dup
    = true;\n                } else if (v < prev) {\n                    return false;\n
    \               }\n            }\n            prev = v;\n        }\n        return
    !dup;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <30388b6c63314417afd41cb6c1896330>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count-1; i++) {\n            if (lst[i]
    > lst[i+1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9fd5b4ba7d143aa887e65c0808e89ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9fd5b4ba7d143aa887e65c0808e89ef>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        long
    current = lst[0];\n        int count = 1;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] == current) {\n                count++;\n                if
    (count > 1) {\n                    return false;\n                }\n            }
    else {\n                if (lst[i] < current) {\n                    return false;\n
    \               }\n                current = lst[i];\n                count =
    1;\n            }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f7d6efffcb4434da6cbeb41927f54a3>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        if
    (lst[0] > lst[1]) {\n            return false;\n        }\n        if (lst.Count
    == 2) {\n            return true;\n        }\n        for (int i = 1; i < lst.Count
    - 1; i += 1) {\n            if (lst[i] > lst[i + 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <896f7604884c467d9db80b7e7af07741>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <896f7604884c467d9db80b7e7af07741>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       return lst.SequenceEqual(lst2);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04e9b3b9a3c0481a96b974a0507309d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04e9b3b9a3c0481a96b974a0507309d1>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (long i = 0; i < lst.Count-1; i++) {\n            if (lst[(int)i]
    > lst[(int)(i+1)]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b687019498814b9ca20cc3a2d590be87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b687019498814b9ca20cc3a2d590be87>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var i = 1;\n        var current = lst[0];\n        var currentCount
    = 1;\n        while (i < lst.Count) {\n            var next = lst[i];\n            if
    (next >= current) {\n                if (next == current) {\n                    currentCount
    += 1;\n                    if (currentCount > 1) {\n                        return
    false;\n                    }\n                } else {\n                    current
    = next;\n                    currentCount = 1;\n                }\n            }
    else {\n                return false;\n            }\n            i += 1;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00003] in <1a02cd6a1d214b19b8d8ddb8e0e0fd05>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <1a02cd6a1d214b19b8d8ddb8e0e0fd05>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00003] in <1a02cd6a1d214b19b8d8ddb8e0e0fd05>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <1a02cd6a1d214b19b8d8ddb8e0e0fd05>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long last = 0;\n        bool isSorted = true;\n        bool hasDup
    = false;\n        foreach (long i in lst) {\n            if (i < last) {\n                isSorted
    = false;\n            }\n            if (i == last) {\n                hasDup
    = true;\n            }\n            last = i;\n        }\n        return isSorted
    && !hasDup;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58e47ea97c234ebb9c48ed362e9fe4a5>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        long
    prev = lst[0];\n        long cur;\n        for (long i = 1; i < lst.Count; i++)
    {\n            cur = lst[(int)i];\n            if (cur == prev) {\n                return
    false;\n            }\n            if (cur < prev) {\n                return false;\n
    \           }\n            prev = cur;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11a661300f004676964b444101491fa0>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        else
    {\n            var prev = lst[0];\n            foreach (var num in lst) {\n                if
    (num < prev) {\n                    return false;\n                }\n                else
    if (num == prev) {\n                    return false;\n                }\n                else
    {\n                    prev = num;\n                }\n            }\n            return
    true;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f6dd64252854e6d89b865c2b783f387>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f6dd64252854e6d89b865c2b783f387>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) {\n            return true;\n        }\n        int
    index = 0;\n        while (index + 1 < lst.Count) {\n            long curr = lst[index];\n
    \           long next = lst[index + 1];\n            if (curr >= next) {\n                return
    false;\n            }\n            index = index + 1;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7fef1aa902f4490839f9cc0aabf9fe7>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // return true if lst is sorted in ascending order\n        //
    return false otherwise\n        int i = 0;\n        while (i < lst.Count - 1)
    {\n            if (lst[i] >= lst[i + 1]) {\n                return false;\n            }\n
    \           i += 1;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0d2e0acc25242258fb90d9a64a35c21>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // If the given list is empty or only has 1 element, return true\n
    \       if (lst.Count <= 1) {\n            return true;\n        }\n        //
    Traverse through the list, checking if the elements are sorted\n        // in
    ascending order\n        long prev = lst[0];\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < prev) {\n                return false;\n            }\n
    \           prev = lst[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f181968d9d5d4ee2b0a0163ca32f986a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f181968d9d5d4ee2b0a0163ca32f986a>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var last = long.MinValue;\n        var dup = new HashSet<long>();\n
    \       foreach (var val in lst) {\n            if (val < last) {\n                return
    false;\n            }\n            if (dup.Contains(val)) {\n                return
    false;\n            }\n            dup.Add(val);\n            last = val;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <965ff54f2de14d009d4288654a0ff4df>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Your code here\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4419e6c506a448508fd126a0f57d412c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4419e6c506a448508fd126a0f57d412c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        List<long> list = lst;\n        long prev = (long)0L;\n        bool
    sorted = true;\n        foreach (long num in list) {\n            long num_1 =
    num;\n            if (num_1 < prev) {\n                sorted = false;\n            }\n
    \           prev = num_1;\n        }\n        return sorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62a1e88fedf945c5abfe666196aeb303>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62a1e88fedf945c5abfe666196aeb303>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // TODO: complete the function definition\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2adfac0f8b9e4d7093cee45025f66cf7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2adfac0f8b9e4d7093cee45025f66cf7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    >= lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84e200ba65d444a8b7ee0d599c5db2d1>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        else
    {\n            for (long i = (long)1L; i < (long)lst.Count; i++) {\n                if
    ((lst[(int)(i - (long)1L)] + (long)1L) != lst[(int)i]) {\n                    return
    false;\n                }\n            }\n            return true;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d46e7e5023d475b84327adef58dc26a>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // replace this code with something else\n        // return true
    if list is in ascending order\n        if (lst.Count == 0) {\n            return
    true;\n        }\n        long prev = lst[0];\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] <= prev) {\n                return false;\n            }\n
    \           prev = lst[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37d34f02e0f34b6eb9e4e2b4177cb0ec>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) {\n            return true;\n        }\n        for
    (int i = 1; i < lst.Count; i++) {\n            if (lst[i - 1] >= lst[i]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b35660ce92b44539538f31591f3120b>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return lst.Zip(lst.Skip(1), (a, b) => a < b).All(x => x);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b60b7d1bed24ae0896e5e606edf8d53>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19feb7740fce42da813a5fa7f9085412>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19feb7740fce42da813a5fa7f9085412>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // your code goes here!\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00011] in <1961bf184a1240c6b30a48a6d5edfe25>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00011]
    in <1961bf184a1240c6b30a48a6d5edfe25>:0 \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var count = new Dictionary<long, long>();\n        foreach (var
    i in lst) {\n            if (count.ContainsKey(i)) {\n                count[i]
    = count[i] + 1L;\n            } else {\n                count[i] = 1L;\n            }\n
    \       }\n        if (count.Values.Any((long c) => c > 1L)) {\n            return
    false;\n        }\n        for (var i = 1L; i < lst.Count; i++) {\n            if
    (lst[i] <= lst[i - 1L]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2wsk7_3p.cs(42,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp2wsk7_3p.cs(42,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool result = true;\n        bool result2 = true;\n        bool
    result3 = true;\n        bool result4 = true;\n        bool result5 = true;\n
    \       bool result6 = true;\n        bool result7 = true;\n        bool result8
    = true;\n        bool result9 = true;\n        bool result10 = true;\n        bool
    result11 = true;\n        bool result12 = true;\n        bool result13 = true;\n
    \       bool result14 = true;\n        bool result15 = true;\n        bool result16
    = true;\n        bool result17 = true;\n        bool result18 = true;\n        bool
    result19 = true;\n        bool result20 = true;\n        bool result21 = true;\n
    \       bool result22 = true;\n        bool result23 = true;\n        bool result24
    = true;\n        bool result25 = true;\n        bool result26 = true;\n        bool
    result27 = true;\n        bool result28 = true;\n        bool result29 = true;\n
    \       bool result30 = true;\n        bool result31 = true;\n        bool result32
    = true;\n        bool result33 = true;\n        bool result34 = true;\n        bool
    result35 = true;\n        bool result36 = true;\n        bool result37 = true;\n
    \       bool result38 = true;\n        bool result39 = true;\n        bool result40
    = true;\n        bool result41 = true;\n        bool result42 = true;\n        bool
    result43 = true;\n        bool result44 = true;\n        bool result45 = true;\n
    \       bool result46 = true;\n        bool result47 = true;\n        bool result48
    = true;\n        bool result49 = true;\n        bool result50 = true;\n        bool
    result51 = true;\n        bool result52 = true;\n        bool result53 = true;\n
    \       bool result54 = true;\n        bool result55 = true;\n        bool result56
    = true;\n        bool result57 = true;\n        bool result58 = true;\n        bool
    result59 = true;\n        bool result60 = true;\n        bool result61 = true;\n
    \       bool result62 = true;\n        bool result63 = true;\n        bool result64
    = true;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmple_618c1.cs(30,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(31,14): warning CS0219: The variable ''result2'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(32,14): warning CS0219: The variable ''result3'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(33,14): warning CS0219: The variable ''result4'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(34,14): warning CS0219: The variable ''result5'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(35,14): warning CS0219: The variable ''result6'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(36,14): warning CS0219: The variable ''result7'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(37,14): warning CS0219: The variable ''result8'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(38,14): warning CS0219: The variable ''result9'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(39,14): warning CS0219: The variable ''result10'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(40,14): warning CS0219: The variable ''result11'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(41,14): warning CS0219: The variable ''result12'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(42,14): warning CS0219: The variable ''result13'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(43,14): warning CS0219: The variable ''result14'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(44,14): warning CS0219: The variable ''result15'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(45,14): warning CS0219: The variable ''result16'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(46,14): warning CS0219: The variable ''result17'' is assigned
    but its value is never used

    /tmp/tmple_618c1.cs(47,14): warning CS0219: The variable ''result18'' is assigned
    but its value i'
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if(lst.Count == 0) {\n            return true;\n        }\n        var
    tmp = new List<long>(lst);\n        tmp.Sort();\n        var output = true;\n
    \       for(int i = 0; i < tmp.Count; i++) {\n            if(tmp[i] != lst[i])
    {\n                output = false;\n            }\n        }\n        return output;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f99ecee694a94700bcc7bebadcb5a983>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f99ecee694a94700bcc7bebadcb5a983>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) {\n            return true;\n        }\n        else
    {\n            for (int i = 0; i < lst.Count - 1; i++) {\n                if (lst[i]
    > lst[i + 1]) {\n                    return false;\n                }\n            }\n
    \           return true;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <681524ce95ba4b6898c0345ac8a86b4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <681524ce95ba4b6898c0345ac8a86b4c>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // List has zero elements\n        if (lst.Count == 0) {\n            return
    true;\n        }\n        // List has one element\n        if (lst.Count == 1)
    {\n            return true;\n        }\n        // Loop through each number, ensuring
    that it is greater than\n        // the previous number.\n        long prev_num
    = lst[0];\n        long num_duplicates = 0;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < prev_num) {\n                return false;\n
    \           }\n            if (lst[i] == prev_num) {\n                num_duplicates++;\n
    \           }\n            prev_num = lst[i];\n        }\n        // If there
    are more than 2 duplicates of a single number, return false\n        if (num_duplicates
    > 1) {\n            return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce69fb4f7db54cdd9b2470bc7f983d71>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = (long)1L;\n        long prev_prev = (long)0L;\n        foreach
    (long x in lst) {\n            if (x <= prev_prev) {\n                return false;\n
    \           }\n            prev_prev = prev;\n            prev = x;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3a195c5d80c45a5b9a4035282dca91b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3a195c5d80c45a5b9a4035282dca91b>:0
    \n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // I can't break the outer loop early, so I need to build a flag\n
    \       // that I can check to see if it's sorted.\n        bool outflag = true;\n
    \       // Now loop over the list, checking each element\n        for (long idx
    = (long)0L; (idx) < (lst.Count); idx += (long)1L) {\n            // If it's at
    the end, don't need to do anything.\n            if ((idx) == ((lst.Count) - (long)1L))
    {\n                continue;\n            }\n            // If the previous element
    is greater than the current one,\n            // it's not sorted\n            if
    ((lst[(int)(idx)]) > (lst[(int)((idx) + (long)1L)])) {\n                outflag
    = false;\n            }\n        }\n        return outflag;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <947cb88cfc374a8fa40397f2836ac140>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <947cb88cfc374a8fa40397f2836ac140>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long lastNum = long.MinValue;\n        foreach (long num in lst)
    {\n            if (num <= lastNum) {\n                return false;\n            }\n
    \           lastNum = num;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4031dd64369b48b6b6fc23fc9de058be>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = 0;\n        foreach (long item in lst) {\n            if
    (item <= prev) {\n                return false;\n            }\n            prev
    = item;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <76f759bc52b64e2c9cbe75ecb9a6ffd8>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int i = 0;\n        while (i < lst.Count - 1) {\n            if
    (lst[i] == lst[i + 1]) {\n                return false;\n            } else if
    (lst[i] > lst[i + 1]) {\n                return false;\n            }\n            i
    = i + 1;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0f59b3137dc4549ac15f58bf9082398>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var q = new Queue<long>(lst);\n        while (q.Count > 0) {\n
    \           var current = q.Dequeue();\n            var currentCount = 0;\n            while
    (q.Count > 0 && q.Peek() == current) {\n                q.Dequeue();\n                currentCount++;\n
    \           }\n            if (currentCount > 1) {\n                return false;\n
    \           }\n            if (q.Count > 0 && q.Peek() < current) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        long
    __lst = lst[0];\n        for (long i = 1; i < lst.Count; i++) {\n            long
    cur = lst[(int)i];\n            if (cur < __lst) {\n                return false;\n
    \           }\n            __lst = cur;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6396ed3bb454741906293039e584aba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6396ed3bb454741906293039e584aba>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        Debug.Assert(lst.Count > 0);\n        if (lst.Count == 1) return
    true;\n        long lastNum = lst[0];\n        int instances = 1;\n        for
    (int i = 1; i < lst.Count; i++) {\n            var num = lst[i];\n            if
    (num < lastNum) return false;\n            if (num == lastNum) {\n                instances++;\n
    \               if (instances > 1) return false;\n            }\n            else
    instances = 1;\n            lastNum = num;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00000] in
    <cea56ff71a17478093ba6582ea15d469>:0 \n  at Problem.Main (System.String[] args)
    [0x00000] in <cea56ff71a17478093ba6582ea15d469>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException:
    Index was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00021] in <cea56ff71a17478093ba6582ea15d469>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <cea56ff71a17478093ba6582ea15d469>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00021] in <cea56ff71a17478093ba6582ea15d469>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <cea56ff71a17478093ba6582ea15d469>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (long i = (long)0L; i < lst.Count - (long)1L; i++) {\n            if
    (lst[(int)(i)] > lst[(int)(i + (long)1L)]) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1fd4b6e8747450aa613967b5e6b03d7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1fd4b6e8747450aa613967b5e6b03d7>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long last = 0;\n        bool used = false;\n        foreach (long
    l in lst) {\n            if (used) {\n                if (l < last) {\n                    return
    false;\n                }\n                if (l == last) {\n                    return
    false;\n                }\n            }\n            last = l;\n            used
    = true;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9664c95d532a4ae2bf721da53fa598ee>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long v = -1L;\n        bool vSet = false;\n        bool first
    = true;\n        bool seenDup = false;\n        bool seenTriple = false;\n        foreach
    (long x in lst) {\n            if (x == v) {\n                if (first) {\n                    first
    = false;\n                } else {\n                    seenDup = true;\n                }\n
    \           } else {\n                first = true;\n                if (seenDup)
    {\n                    seenTriple = true;\n                }\n                seenDup
    = false;\n            }\n            if (vSet && (x < v)) {\n                return
    false;\n            }\n            v = x;\n            vSet = true;\n        }\n
    \       return !seenTriple;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        //throw new NotImplementedException();\n        long count = 0;\n
    \       long curr = 0;\n        long prev = 0;\n        bool result = true;\n
    \       foreach (long i in lst) {\n            if (count == 0) {\n                prev
    = i;\n                count++;\n            }\n            else {\n                curr
    = i;\n                if (curr <= prev) {\n                    result = false;\n
    \                   break;\n                }\n                else {\n                    prev
    = curr;\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3f2dfe626004d2ca224f0a1b8a13cf9>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        //Implement your solution here.\n        long count = 0;\n        long
    prev = 0;\n        foreach (long num in lst) {\n            if (count == 0) {\n
    \               prev = num;\n                count = 1;\n            } else {\n
    \               if (prev == num) {\n                    return false;\n                }
    else if (prev > num) {\n                    return false;\n                } else
    {\n                    prev = num;\n                }\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ac504648e0841d29e7368922e88ab43>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool ret = true;\n        long prev = (long)1L;\n        long
    cnt = (long)0L;\n        foreach (long num in lst) {\n            if (num <= prev)
    {\n                cnt++;\n                if (cnt > (long)1L) {\n                    ret
    = false;\n                    break;\n                }\n            }\n            else
    {\n                cnt = (long)0L;\n            }\n            prev = num;\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e14c70c0262740c29454743be7786cb5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e14c70c0262740c29454743be7786cb5>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool result = true;\n        bool foundDup = false;\n        for
    (int i = 0; i < lst.Count; i++) {\n            if (i < lst.Count - 1) {\n                if
    (lst[i] == lst[i + 1]) {\n                    if (foundDup) {\n                        result
    = false;\n                        break;\n                    }\n                    else
    {\n                        foundDup = true;\n                    }\n                }\n
    \               else if (lst[i] > lst[i + 1]) {\n                    result =
    false;\n                    break;\n                }\n                else {\n
    \                   foundDup = false;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) {\n            return true;\n        }\n        long
    prev = lst[0];\n        long curr = prev;\n        int i = 1;\n        while (i
    < lst.Count) {\n            curr = lst[i];\n            if (curr < prev) {\n                return
    false;\n            }\n            prev = curr;\n            i += 1;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6edc852aaea240d8939865fbc770637d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6edc852aaea240d8939865fbc770637d>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long curr = long.MinValue;\n        HashSet<long> dict = new HashSet<long>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] < curr)
    {\n                return false;\n            }\n            if (dict.Contains(lst[i]))
    {\n                return false;\n            }\n            dict.Add(lst[i]);\n
    \           curr = lst[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f98d45502d154da9b1aa181d37cf5db3>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        else
    {\n            var m = lst.GroupBy(x => x).Select(y => y.First()).ToList();\n
    \           if (m.Count < lst.Count) {\n                return false;\n            }\n
    \           for (int i = 0; i < (lst.Count - 1); i++) {\n                if (lst[i]
    > lst[i + 1]) {\n                    return false;\n                }\n            }\n
    \           return true;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4d83bba7ea6c49c8ae48355c9103d22d>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long[] arr = lst.ToArray();\n        int len = arr.Length;\n        long
    last = arr[0];\n        for (int i = 1; i < len; i++) {\n            if (arr[i]
    <= last) {\n                return false;\n            }\n            last = arr[i];\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.IsSorted (System.Collections.Generic.List`1[T]
    lst) [0x0000c] in <62f8f23420d14bedb022b53cabbad33f>:0 \n  at Problem.Main (System.String[]
    args) [0x000cc] in <62f8f23420d14bedb022b53cabbad33f>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x0000c]
    in <62f8f23420d14bedb022b53cabbad33f>:0 \n  at Problem.Main (System.String[] args)
    [0x000cc] in <62f8f23420d14bedb022b53cabbad33f>:0 \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long last = long.MinValue;\n        bool seen = false;\n        foreach
    (long item in lst) {\n            if (item == last) {\n                if (seen)
    {\n                    return false;\n                }\n                seen
    = true;\n            }\n            if (item < last) {\n                return
    false;\n            }\n            last = item;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f027afad221b4083bf751a5f4550c399>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return lst.Zip(lst.Skip(1), (x, y) => x <= y).All(b => b);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d0af438148c4625b0994406cfe103c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d0af438148c4625b0994406cfe103c4>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Checks to see if lst is empty.\n        if (lst.Count == 0)
    {\n            return true;\n        }\n        // The list is not empty, so we
    check to see if the numbers are sorted.\n        // We know that lst is not empty,
    so we know that the first number is\n        // sorted by itself.\n        for
    (long i = 1; i < lst.Count; i++) {\n            // Check to see if the number
    is greater than the previous number.\n            if (lst[(int)i] < lst[(int)(i
    - 1)]) {\n                return false;\n            }\n            // Check to
    see if the number is equal to the previous number, but\n            // not equal
    to the last equal number.\n            if (lst[(int)i] == lst[(int)(i - 1)]) {\n
    \               // Compare the current number to the previous number.\n                if
    (lst[(int)i] != lst[(int)(i - 2)]) {\n                    return false;\n                }\n
    \           }\n        }\n        // The list is sorted.\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9d6c702605b45dea1b1e596274e2215>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        //
    we're going to go through the list and sort it\n        var prev = lst[0];\n        var
    index = 1;\n        var sorted = true;\n        while (index < lst.Count) {\n
    \           if (lst[index] > prev) {\n                prev = lst[index];\n                index
    += 1;\n            } else {\n                sorted = false;\n                break;\n
    \           }\n        }\n        return sorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9dd07e3a74242b8b6ef75747abf0f0e>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        if
    (lst.Count == 1) {\n            return true;\n        }\n        var prev = lst[0];\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] <= prev)
    {\n                return false;\n            }\n            prev = lst[i];\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7792cd5788a4d74a2eccbd564497318>:0
    \n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool flag = true;\n        for (int i = 0; i < lst.Count; i++)
    {\n            long current = lst[i];\n            if (i != lst.Count - 1) {\n
    \               long next = lst[i + 1];\n                if (current >= next)
    {\n                    flag = false;\n                    break;\n                }\n
    \           }\n        }\n        return flag;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b5a0176561f4f4da2afd36f991c9303>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        List<long> distinct = lst.Distinct().ToList();\n        if (distinct.Count
    != lst.Count) {\n            return false;\n        }\n        for (long i = 0;
    i < lst.Count; i++) {\n            if (lst[(int)i] != i + 1) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1769275448444a5afe7ccf1ac90b3b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1769275448444a5afe7ccf1ac90b3b6>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Your code goes here\n        int[] nums = lst.ToArray();\n
    \       int sorted = 1;\n        int i = 0;\n        while (sorted == 1 && i <
    lst.Count - 1) {\n            if (nums[i] > nums[i + 1]) {\n                sorted
    = 0;\n            }\n            i = i + 1;\n        }\n        if (sorted ==
    1) {\n            return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxw6t71sz.cs(31,22): error CS0029: Cannot implicitly convert type ''long[]''
    to ''int[]''

    '
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int index = 0;\n        while (index < lst.Count - 1) {\n            if
    (lst[index] > lst[index + 1]) {\n                return false;\n            }\n
    \           index += 1;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b86146adaa54263b5e57e29d3c9740a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b86146adaa54263b5e57e29d3c9740a>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        long
    last_val = lst[0];\n        long last_count = 0;\n        for (int i = 0; i <
    lst.Count; i++) {\n            long val = lst[i];\n            if (val < last_val)
    {\n                return false;\n            }\n            if (val == last_val)
    {\n                last_count++;\n                if (last_count > 1) {\n                    return
    false;\n                }\n            }\n            last_val = val;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5a7a192435c4e0aa3659312bf02c6ad>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        bool sorted = true;\n
    \       long last = lst[0];\n        long seen = 1;\n        for (int i = 1; i
    < lst.Count; i++) {\n            if (lst[i] == last) {\n                seen++;\n
    \               if (seen > 1) return false;\n            } else {\n                seen
    = 1;\n            }\n            if (lst[i] < last) return false;\n            last
    = lst[i];\n        }\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c9fdff415e343d095e8d30815b3a29c>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        long
    prev = lst[0];\n        int count = 1;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] == prev) {\n                count += 1;\n                if
    (count > 1) {\n                    return false;\n                }\n            }
    else {\n                if (lst[i] < prev) {\n                    return false;\n
    \               }\n                prev = lst[i];\n                count = 1;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <144574ff12d645279a4caa7d5b29300d>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (long i = (long)0L; i < (long)(lst.Count - (int)1L); i++)
    {\n            if ((lst[(int)i] >= lst[(int)(i + (long)1L)])) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f4bd76b1eb6b457b99420e8e6b96524e>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long len = (long)lst.Count;\n        long i = (long)0L;\n        while
    (i < len)\n        {\n            if (i < len - (long)1L)\n            {\n                long
    cur = lst[(int)i];\n                long next = lst[(int)(i + (long)1L)];\n                if
    (cur >= next)\n                {\n                    return false;\n                }\n\n
    \           }\n\n            i = i + (long)1L;\n\n        }\n\n        return
    true;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19e45a6ad7944145979a7ab8cb2a90a4>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        } else
    {\n            long n = lst[0];\n            lst.RemoveAt(0);\n            for
    (int i = 0; i < lst.Count; i++) {\n                if (lst[i] > n) {\n                    n
    = lst[i];\n                } else {\n                    return false;\n                }\n
    \           }\n            return true;\n        }\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ca33b012c4e474ca51c7a4c05603ae4>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    >= lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84e200ba65d444a8b7ee0d599c5db2d1>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long curr = (long)lst[(int)0L];\n        for (long ind = (long)1L;
    ind < (long)lst.Count; ind++) {\n            if (curr >= lst[(int)ind]) {\n                return
    false;\n            }\n            curr = lst[(int)ind];\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <0f75e16aec1b4a3cbdf80f0d835649b8>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <0f75e16aec1b4a3cbdf80f0d835649b8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <0f75e16aec1b4a3cbdf80f0d835649b8>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <0f75e16aec1b4a3cbdf80f0d835649b8>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool dup = false;\n        bool isSorted = true;\n        int
    n = lst.Count();\n        if (n > 1) {\n            for (int i = 0; i < n - 1;
    i++) {\n                long prev = lst[i];\n                long curr = lst[i
    + 1];\n                // check for duplicates\n                if (prev == curr)
    {\n                    dup = true;\n                }\n                // check
    for unsorted\n                if (prev > curr) {\n                    isSorted
    = false;\n                }\n            }\n        }\n        if (dup || !isSorted)
    {\n            return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e41937a873245abbba890e325f26a20>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool sorted = true;\n        int count = 0;\n        long lastNum
    = lst[0];\n        foreach (long currNum in lst) {\n            count++;\n            if
    (count > 1) {\n                if (currNum == lastNum) {\n                    return
    false;\n                }\n                if (currNum < lastNum) {\n                    return
    false;\n                }\n            }\n            lastNum = currNum;\n        }\n
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00005] in <8bb8d5889a0145ec9cfb5b069e8c51b9>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <8bb8d5889a0145ec9cfb5b069e8c51b9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00005] in <8bb8d5889a0145ec9cfb5b069e8c51b9>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <8bb8d5889a0145ec9cfb5b069e8c51b9>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) {\n            return true;\n        } else
    {\n            // Set the value to compare against\n            var a = lst[0];\n
    \           var b = lst[1];\n            // Every number must be greater than
    or equal to the previous number\n            for (int i = 0; i < lst.Count; i++)
    {\n                if (lst[i] < a) {\n                    return false;\n                }\n
    \               a = lst[i];\n            }\n            // Duplicates must exist\n
    \           for (int i = 0; i < lst.Count; i++) {\n                if (lst[i]
    == b) {\n                    return false;\n                }\n                b
    = lst[i];\n            }\n            return true;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d57028ccb52349a5b70d39acbcee2ec5>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        HashSet<long> seen = new HashSet<long>();\n        for (int i
    = 0; i < lst.Count; i++) {\n            long it = lst[i];\n            if (seen.Contains(it))
    {\n                return false;\n            }\n            seen.Add(it);\n        }\n
    \       long prev = long.MinValue;\n        foreach (long it in lst) {\n            if
    (it <= prev) {\n                return false;\n            }\n            prev
    = it;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0e63b7df5d74878b8c3f2ca86d62235>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = 0;\n        foreach (long e in lst) {\n            if
    (e < prev) {\n                return false;\n            }\n            prev =
    e;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0068e4a116b04de9b0965c77ad467981>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0068e4a116b04de9b0965c77ad467981>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        int
    previous = (int)lst[0];\n        int duplicates = 0;\n        for (int i = 1;
    i < lst.Count; i++) {\n            int current = (int)lst[i];\n            if
    (current < previous) {\n                return false;\n            }\n            if
    (current == previous) {\n                duplicates++;\n            }\n            previous
    = current;\n        }\n        return duplicates == 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0070ad7a571041f9b1837493f5e87be3>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var dict = new Dictionary<long, int>();\n        foreach (var
    num in lst) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n
    \           } else {\n                dict[num] = 1;\n            }\n        }\n
    \       var sorted = dict.Keys.ToList();\n        sorted.Sort();\n        int
    i = 0;\n        foreach (var key in sorted) {\n            if (dict[key] != 1)
    {\n                return false;\n            }\n            if (key != lst[i])
    {\n                return false;\n            }\n            i++;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <18226db100d446e7bdf246bf7e96799f>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var len = (long)lst.Count;\n        if ((len == (long)1L)) {\n
    \           return true;\n        }\n\n        long previous = lst[0L];\n        long
    duplicates = 0L;\n        for (long i = (long)1L; i < len; i++) {\n            if
    ((lst[i] < previous)) {\n                return false;\n            }\n\n            if
    ((lst[i] == previous)) {\n                duplicates += 1L;\n            }\n\n
    \           previous = lst[i];\n\n        }\n\n        return ((len - duplicates)
    == (long)1L);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqqhrssug.cs(35,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpqqhrssug.cs(38,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpqqhrssug.cs(42,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpqqhrssug.cs(46,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        lst.Sort();\n        for (int i = 0; i < lst.Count - 1; i++) {\n
    \           if (lst[i] == lst[i + 1]) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60d7bcd0f4414225add1d03e8e52ef81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60d7bcd0f4414225add1d03e8e52ef81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Your code here\n        bool[] dup_checker = new bool[lst.Count];\n
    \       foreach (long elt in lst) {\n            if (dup_checker[elt] == true)
    {\n                return false;\n            }\n            dup_checker[elt]
    = true;\n        }\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if
    (lst[i] > lst[i + 1]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.IsSorted (System.Collections.Generic.List`1[T]
    lst) [0x00020] in <5e565c99ca0440b9849b62fc6aa69b2f>:0 \n  at Problem.Main (System.String[]
    args) [0x00011] in <5e565c99ca0440b9849b62fc6aa69b2f>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00020]
    in <5e565c99ca0440b9849b62fc6aa69b2f>:0 \n  at Problem.Main (System.String[] args)
    [0x00011] in <5e565c99ca0440b9849b62fc6aa69b2f>:0 \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var sorted = true;\n        var last = lst[0];\n        for (int
    i = 1; i < lst.Count; i++) {\n            if (lst[i] <= last) {\n                sorted
    = false;\n                break;\n            }\n            last = lst[i];\n
    \       }\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00003] in <bacf07365e4441338076ad4292dc21ec>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <bacf07365e4441338076ad4292dc21ec>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00003] in <bacf07365e4441338076ad4292dc21ec>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <bacf07365e4441338076ad4292dc21ec>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) return true;\n        long lastVal = lst[0];\n
    \       int counter = 0;\n        foreach (long val in lst) {\n            if
    (val == lastVal) {\n                counter++;\n                if (counter >
    1) {\n                    return false;\n                }\n            }\n            if
    (val < lastVal) {\n                return false;\n            }\n            lastVal
    = val;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f36a21530fb48c68a81609a2eba70fe>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = lst[0];\n        int counter = 0;\n        for (int
    i = 1; i < lst.Count; i++) {\n            long curr = lst[i];\n            if
    (curr > prev) {\n                prev = curr;\n                counter = 0;\n
    \           } else if (curr == prev) {\n                counter++;\n                if
    (counter > 1) {\n                    return false;\n                }\n            }
    else {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <3ff85035f6e34d7d991a2fea47fcd8e7>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <3ff85035f6e34d7d991a2fea47fcd8e7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <3ff85035f6e34d7d991a2fea47fcd8e7>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <3ff85035f6e34d7d991a2fea47fcd8e7>:0
    \n"
  stdout: ''
  timestamp: 1659976990
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Your code goes here\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df4c1d3b34e348479ceb8d29b2f44785>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df4c1d3b34e348479ceb8d29b2f44785>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) {\n            return true;\n        } else
    {\n            var seen = new HashSet<long>();\n            var prev = lst[0];\n
    \           seen.Add(prev);\n            foreach (var x in lst.Skip(1)) {\n                if
    (x <= prev) {\n                    return false;\n                }\n                if
    (seen.Contains(x)) {\n                    return false;\n                }\n                seen.Add(x);\n
    \               prev = x;\n            }\n            return true;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48963c7ff527421392faf51ed6195716>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        HashSet<long> set = new HashSet<long>();\n        for (int i =
    0; i < lst.Count; i++) {\n            if (set.Contains(lst[i])) {\n                return
    false;\n            }\n            else {\n                set.Add(lst[i]);\n
    \           }\n        }\n        if (lst.Count == 1) {\n            return true;\n
    \       }\n        else {\n            if (lst[0] <= lst[1]) {\n                for
    (int i = 1; i < lst.Count - 1; i++) {\n                    if (lst[i] > lst[i
    + 1]) {\n                        return false;\n                    }\n                }\n
    \               return true;\n            }\n            else {\n                for
    (int i = 1; i < lst.Count - 1; i++) {\n                    if (lst[i] < lst[i
    + 1]) {\n                        return false;\n                    }\n                }\n
    \               return true;\n            }\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00061] in <ee35c8442b62477088fa6523628e53ac>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <ee35c8442b62477088fa6523628e53ac>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00061] in <ee35c8442b62477088fa6523628e53ac>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <ee35c8442b62477088fa6523628e53ac>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int dupCount = 0;\n        long prevVal = 0;\n        foreach
    (long val in lst) {\n            if (val == prevVal) {\n                dupCount
    += 1;\n            }\n            else {\n                dupCount = 0;\n            }\n
    \           if (dupCount > 1) {\n                return false;\n            }\n
    \           prevVal = val;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d073d34601d64db1a22c1452494360e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d073d34601d64db1a22c1452494360e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return (new Problem()).isSorted(lst);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg8l1rdpe.cs(30,32): error CS1061: ''Problem'' does not contain a definition
    for ''isSorted'' and no accessible extension method ''isSorted'' accepting a first
    argument of type ''Problem'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    > lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6faf3b5f669f43ecab3c43f0c871309f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6faf3b5f669f43ecab3c43f0c871309f>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00011] in <315203caa7d24d8aae2e5ea089b97c02>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00011]
    in <315203caa7d24d8aae2e5ea089b97c02>:0 \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19feb7740fce42da813a5fa7f9085412>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19feb7740fce42da813a5fa7f9085412>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19feb7740fce42da813a5fa7f9085412>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19feb7740fce42da813a5fa7f9085412>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976988
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00011] in <315203caa7d24d8aae2e5ea089b97c02>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00011]
    in <315203caa7d24d8aae2e5ea089b97c02>:0 \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        long lastVal = lst[0];\n
    \       foreach (long curVal in lst) {\n            if (curVal < lastVal) return
    false;\n            lastVal = curVal;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6f1d52d2b8941f1bd9c370ac80f887f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6f1d52d2b8941f1bd9c370ac80f887f>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    > lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6faf3b5f669f43ecab3c43f0c871309f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6faf3b5f669f43ecab3c43f0c871309f>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long[] lst2 = lst.ToArray();\n        for (long i = 0L; i < (lst2.Length
    - 1L); i++) {\n            if ((lst2[i] > lst2[(i + 1L)])) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5142e44018404ff1b8dae929a759fa8b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5142e44018404ff1b8dae929a759fa8b>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    >= lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84e200ba65d444a8b7ee0d599c5db2d1>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        var
    prev = lst[0];\n        var num_duplicates = 0;\n        foreach (var num in lst)
    {\n            if (num < prev) {\n                return false;\n            }\n
    \           if (num == prev) {\n                num_duplicates += 1;\n            }\n
    \           prev = num;\n        }\n        return num_duplicates <= 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a94d4c77db9448c3b6a8a73bf4d9e6f9>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) {\n            return true;\n        }\n        long
    prev = lst[0];\n        bool ascending = true;\n        foreach (long num in lst)
    {\n            if (prev != num) {\n                if (prev > num) {\n                    ascending
    = false;\n                }\n                else {\n                    if (!ascending)
    {\n                        return false;\n                    }\n                }\n
    \           }\n            prev = num;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6977c7f2aa914ae4932506746e8697db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6977c7f2aa914ae4932506746e8697db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (long i = (long)1L; i < (long)lst.Count; i++) {\n            if
    (lst[(int)(i - (long)1L)] == lst[(int)i]) {\n                return false;\n            }\n\n
    \           if (lst[(int)(i - (long)1L)] > lst[(int)i]) {\n                return
    false;\n            }\n\n        }\n\n        return true;\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7c73414d7c84f059513f984a914533a>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var previous = long.MinValue;\n        var current = long.MinValue;\n
    \       var current_count = (long)0L;\n        for (int i = 0; i < lst.Count;
    i++) {\n            current = lst[i];\n            if (current < previous) {\n
    \               return false;\n            }\n            if (current == previous)
    {\n                current_count = current_count + (long)1L;\n                if
    (current_count > (long)1L) {\n                    return false;\n                }\n
    \           }\n            else {\n                current_count = (long)0L;\n
    \           }\n            previous = current;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if(lst.Count == 0) {\n            return true;\n        }\n        long
    last = lst[0];\n        int count = 1;\n        for(int i = 1; i < lst.Count;
    i++) {\n            if(lst[i] < last) {\n                return false;\n            }\n
    \           if(lst[i] == last) {\n                count++;\n            }\n            if(lst[i]
    > last) {\n                if(count > 1) {\n                    return false;\n
    \               }\n                count = 1;\n            }\n            last
    = lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ed8196b655a451bb93ad0685a7e9518>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Iterate through the list starting from index 1,\n        //
    checking whether each element is less than the previous.\n        for (int i =
    1; i < lst.Count; i++) {\n            if (lst[i] < lst[i - 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e6f84b835f5403a9804ea8a96f8a55a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e6f84b835f5403a9804ea8a96f8a55a>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        List<long> numbers = new List<long>();\n        foreach (long
    num in lst) {\n            if (numbers.Contains(num)) {\n                return
    false;\n            }\n            numbers.Add(num);\n        }\n        numbers.Sort();\n
    \       for (int i = 0; i < numbers.Count; i++) {\n            if (numbers[i]
    != lst[i]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db040a29b81343d89be320ad0631c2ea>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long last = long.MinValue;\n        Dictionary<long, long> dict
    = new Dictionary<long, long>();\n        foreach (long v in lst) {\n            if
    (v < last) {\n                return false;\n            }\n            if (dict.ContainsKey(v))
    {\n                dict[v] += 1;\n                if (dict[v] > 1) {\n                    return
    false;\n                }\n            } else {\n                dict[v] = 1;\n
    \           }\n            last = v;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d73c9034d8e44df4adc12c45b14d2f04>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Fill me in!\n        //long prev = 0;\n        //foreach (long
    x in lst) {\n        //    if (x < prev) {\n        //        return false;\n
    \       //    }\n        //    prev = x;\n        //}\n        //return true;\n
    \       return lst.SequenceEqual(lst.OrderBy(x => x));\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57189de7cf1c4a6cbe3c47c5477ceb95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57189de7cf1c4a6cbe3c47c5477ceb95>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00011] in <315203caa7d24d8aae2e5ea089b97c02>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00011]
    in <315203caa7d24d8aae2e5ea089b97c02>:0 \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        long l = lst[0];\n        if
    (lst.Count == 1) return true;\n        bool asc = lst[1] > l;\n        for (int
    i = 1; i < lst.Count; i++) {\n            long next = lst[i];\n            if
    (next == l) return false;\n            if (asc && next < l) return false;\n            if
    (!asc && next > l) return false;\n            l = next;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1bf3a300d6a84d57a7fc0239d342a5a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1bf3a300d6a84d57a7fc0239d342a5a7>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00011] in <315203caa7d24d8aae2e5ea089b97c02>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00011]
    in <315203caa7d24d8aae2e5ea089b97c02>:0 \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        long
    prev = lst[0];\n        foreach (long x in lst) {\n            if (x < prev) {\n
    \               return false;\n            }\n            prev = x;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce666b79f15843358e4512f138afbc69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce666b79f15843358e4512f138afbc69>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long? previous = null;\n        long? next = null;\n        long?
    following = null;\n        // >>> list(lst)\n        // [(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L]\n        int i = 0;\n        for (; (i < (lst.Count));
    i++) {\n            previous = next;\n            next = lst[i];\n            if
    ((i < ((lst.Count) - 1))) {\n                following = lst[(i + 1)];\n            }\n
    \           // >>> previous\n            // (long)2L\n            // >>> next\n
    \           // (long)2L\n            // >>> following\n            // (long)2L\n
    \           if ((previous.HasValue && (next.HasValue && (previous.Value >= next.Value))))
    {\n                return false;\n            }\n            if ((next.HasValue
    && (following.HasValue && (next.Value >= following.Value)))) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f7b72a42edfc46f28b40ff7421ed04dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f7b72a42edfc46f28b40ff7421ed04dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count() <= 1) {\n            return true;\n        }\n
    \       bool lastDupFound = false;\n        long lastValue = lst[0];\n        foreach
    (long currValue in lst.Skip(1)) {\n            if (currValue == lastValue) {\n
    \               if (lastDupFound) {\n                    return false;\n                }\n
    \               lastDupFound = true;\n            } else {\n                if
    (currValue < lastValue) {\n                    return false;\n                }\n
    \               lastDupFound = false;\n            }\n            lastValue =
    currValue;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Replace this code with your solution.\n        bool toReturn
    = true;\n        bool one = false;\n        bool two = false;\n        bool three
    = false;\n        bool four = false;\n        bool five = false;\n        bool
    six = false;\n        bool seven = false;\n        bool eight = false;\n        bool
    nine = false;\n        bool ten = false;\n        foreach (long num in lst) {\n
    \           switch (num) {\n                case 1:\n                    if (one)
    {\n                        toReturn = false;\n                    }\n                    one
    = true;\n                    break;\n                case 2:\n                    if
    (two) {\n                        toReturn = false;\n                    }\n                    two
    = true;\n                    break;\n                case 3:\n                    if
    (three) {\n                        toReturn = false;\n                    }\n
    \                   three = true;\n                    break;\n                case
    4:\n                    if (four) {\n                        toReturn = false;\n
    \                   }\n                    four = true;\n                    break;\n
    \               case 5:\n                    if (five) {\n                        toReturn
    = false;\n                    }\n                    five = true;\n                    break;\n
    \               case 6:\n                    if (six) {\n                        toReturn
    = false;\n                    }\n                    six = true;\n                    break;\n
    \               case 7:\n                    if (seven) {\n                        toReturn
    = false;\n                    }\n                    seven = true;\n                    break;\n
    \               case 8:\n                    if (eight) {\n                        toReturn
    = false;\n                    }\n                    eight = true;\n                    break;\n
    \               case 9:\n                    if (nine) {\n                        toReturn
    = false;\n                    }\n                    nine = true;\n                    break;\n
    \               case 10:\n                    if (ten) {\n                        toReturn
    = false;\n                    }\n                    ten = true;\n                    break;\n
    \               default:\n                    toReturn = false;\n                    break;\n
    \           }\n        }\n        return toReturn;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <607e01ebf80e4ca69d52bd63bfe4375d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <607e01ebf80e4ca69d52bd63bfe4375d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool _sorted = true;\n        for (int i = 0; i < lst.Count; i++)
    {\n            if (i > 0) {\n                if (lst[i - 1] >= lst[i]) {\n                    _sorted
    = false;\n                    break;\n                }\n            }\n        }\n
    \       return _sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <056a24a76ae3419a8c17f31920c6fa49>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (long i = 0; i < lst.Count - 1; i++) {\n            if (lst[(int)i]
    > lst[(int)(i + 1)]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05818be5bab741cf80bc2b2ba6e879f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05818be5bab741cf80bc2b2ba6e879f5>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    >= lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84e200ba65d444a8b7ee0d599c5db2d1>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long last = 0;\n        bool first = true;\n        foreach (long
    elem in lst) {\n            if (first) {\n                first = false;\n            }
    else {\n                if (elem <= last) {\n                    return false;\n
    \               }\n            }\n            last = elem;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2f44618d82a45a39f3a3bf63fe4b4a4>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long last = 0;\n        long count = 0;\n        if (lst.Count
    == 0) {\n            return true;\n        }\n        foreach (long l in lst)
    {\n            if (l >= last) {\n                last = l;\n                count
    = 0;\n            } else {\n                return false;\n            }\n            count
    += 1;\n            if (count > 1) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65e5b5cc5a8042a1a6fc7363c9c0157b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65e5b5cc5a8042a1a6fc7363c9c0157b>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var lst2 = lst.Distinct().ToList();\n        lst2.Sort();\n        return
    lst.SequenceEqual(lst2);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <953f0ae897794ddd80b57d15c7de4804>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        int len = lst.Count;\n        if (len <= 1) {\n            return
    true;\n        }\n        int n = len - 1;\n        long prev = lst[(int)0L];\n
    \       bool prevDup = false;\n        long dupCnt = 0L;\n        for (long i
    = (long)1L; i < len; i++) {\n            long nxt = lst[(int)i];\n            if
    (nxt < prev) {\n                return false;\n            }\n            if (nxt
    == prev) {\n                dupCnt++;\n                if (prevDup) {\n                    return
    false;\n                }\n                prevDup = true;\n            }\n            else
    {\n                prevDup = false;\n            }\n            prev = nxt;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        if
    (lst.Count == 1) {\n            return true;\n        }\n        int i = 0;\n
    \       long prev = lst[i];\n        i = 1;\n        while (i < lst.Count) {\n
    \           if (lst[i] < prev) {\n                return false;\n            }\n
    \           if (lst[i] == prev) {\n                return false;\n            }\n
    \           prev = lst[i];\n            i = i + 1;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52677fe5ada346559cfeb4c8903aa537>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        List<long> temp = new List<long>(lst);\n        temp.Sort();\n
    \       return temp.Count == temp.Distinct().Count() && temp.SequenceEqual(lst);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29ba938ab45a4821b0a5774852585e57>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var N = (long)lst.Count;\n        if ((N <= 1L)) {\n            return
    true;\n        }\n        ;\n        // achilles and the tortoise\n        //
    skip all the values that are equal to the first value\n        var first = lst[0L];\n
    \       var achilles = 1L;\n        while ((achilles < N)) {\n            if ((lst[achilles]
    == first)) {\n                achilles += 1L;\n            }\n            else
    {\n                break;\n            }\n        }\n        if ((achilles ==
    N)) {\n            return true;\n        }\n        ;\n        // if all the numbers
    were equal, then achilles is at the end of the list\n        // and we are done\n
    \       // otherwise, achilles is one past the first value, so we start from there\n
    \       var ascending = (lst[achilles] > first);\n        var tortoise = achilles;\n
    \       achilles += 1L;\n        var K = 1L;\n        while ((achilles < N)) {\n
    \           if ((lst[achilles] == lst[tortoise])) {\n                return false;\n
    \           }\n            else if (((lst[achilles] > lst[tortoise]) != ascending))
    {\n                return false;\n            }\n            else {\n                achilles
    += 1L;\n                tortoise += 1L;\n                K += 1L;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0spk3_1.cs(37,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpb0spk3_1.cs(40,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpb0spk3_1.cs(54,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpb0spk3_1.cs(59,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpb0spk3_1.cs(59,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpb0spk3_1.cs(62,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpb0spk3_1.cs(62,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) {\n            return true;\n        }\n        if
    (lst.Count == 1) {\n            return true;\n        }\n        if (lst.Count
    == 2) {\n            return lst[(int)0L] < lst[(int)1L];\n        }\n        long
    last = lst[(int)0L];\n        long curr = lst[(int)1L];\n        if (last >= curr)
    {\n            return false;\n        }\n        for (long i = (long)2L; i < lst.Count;
    i++) {\n            last = curr;\n            curr = lst[(int)i];\n            if
    (last > curr) {\n                return false;\n            }\n            if
    (last == curr) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <083a5ed4a798414aa405633350e4fafa>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool ans = true;\n        // Write your code here\n        long
    prevNum = -1;\n        bool isRepeat = false;\n        for (int i = 0; i < lst.Count;
    i++) {\n            long currNum = lst[i];\n            if (currNum < prevNum)
    {\n                ans = false;\n                break;\n            }\n            if
    (currNum == prevNum) {\n                isRepeat = true;\n            }\n            prevNum
    = currNum;\n        }\n        if (isRepeat) {\n            ans = false;\n        }\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <947b08866a474e20bda6aab138fbceaf>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var len = lst.Count;\n        if (len <= 1) {\n            return
    true;\n        }\n        else {\n            var isSorted = true;\n            var
    prev = lst[0];\n            var prevIndex = 0;\n            for (var i = 1; i
    < len; i++) {\n                var curr = lst[i];\n                if (curr <
    prev) {\n                    isSorted = false;\n                    break;\n                }\n
    \               if (curr == prev) {\n                    if (i - prevIndex > 1)
    {\n                        isSorted = false;\n                        break;\n
    \                   }\n                }\n                else {\n                    prevIndex
    = i;\n                }\n                prev = curr;\n            }\n            return
    isSorted;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        else
    {\n            if (lst[0] >= lst[1]) {\n                return false;\n            }\n
    \           else {\n                lst.RemoveAt(0);\n                return IsSorted(lst);\n
    \           }\n        }\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b733f96a7fda444fbec190170f412cb8>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // This is actually correct! But it is too inefficient\n        //
    to pass all the test cases\n        // for (int i = 0; i < lst.Count - 1; i++)
    {\n        //     if (lst[i] >= lst[i + 1]) {\n        //         return false;\n
    \       //     }\n        // }\n        // return true;\n        // Read in the
    first 3 elements, so that we can check if\n        // the second element is bigger
    than the first or third.\n        // If so, return false.\n        // After reading
    in the first 3 elements, read in 2 more at a time\n        // and check if they
    are ordered correctly.\n        if (lst.Count < 2) {\n            return true;\n
    \       }\n        long n1 = lst[0];\n        long n2 = lst[1];\n        if (n1
    >= n2) {\n            return false;\n        }\n        if (lst.Count == 2) {\n
    \           return true;\n        }\n        long n3 = lst[2];\n        if (n2
    >= n3) {\n            return false;\n        }\n        for (int i = 3; i < lst.Count;
    i += 2) {\n            long n4 = lst[i];\n            long n5 = lst[i + 1];\n
    \           if (n4 < n1 || n4 > n2 || n5 < n2 || n5 > n3) {\n                return
    false;\n            }\n            n1 = n2;\n            n2 = n3;\n            n3
    = n4;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af0519ee3f624a6b835bf296ed9c6dbc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af0519ee3f624a6b835bf296ed9c6dbc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        HashSet<long>
    hs = new HashSet<long>();\n        long previous = lst[0];\n        hs.Add(previous);\n
    \       for (int i = 1; i < lst.Count; i++) {\n            long current = lst[i];\n
    \           if (previous >= current) {\n                return false;\n            }\n
    \           if (hs.Contains(current)) {\n                return false;\n            }\n
    \           hs.Add(current);\n            previous = current;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60f58204fcdf466aac65b2b31525287d>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    == lst[i + 1]) return false;\n            if (lst[i] > lst[i + 1]) return false;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fa2e93be1874766ad6106ac415e30a9>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        long
    last = lst[0];\n        int repeats = 0;\n        foreach (long elem in lst) {\n
    \           if (elem == last) {\n                repeats += 1;\n            }\n
    \           else {\n                last = elem;\n                repeats = 0;\n
    \           }\n            if (repeats > 1) {\n                return false;\n
    \           }\n        }\n        for (int i = 1; i < lst.Count; i++) {\n            if
    (lst[i] < lst[i - 1]) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if(lst.Count <= 1) return true;\n        long first = lst[0];\n
    \       lst.RemoveAt(0);\n        if(lst.Count <= 1) return true;\n        long
    second = lst[0];\n        if(first == second) return false;\n        bool IsAscending
    = (first < second);\n        for(int i = 1; i < lst.Count; i++) {\n            long
    curr = lst[i];\n            if(first == curr) return false;\n            if(IsAscending
    && (first > curr)) return false;\n            if(!IsAscending && (first < curr))
    return false;\n            first = curr;\n        }\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85fe5017636e497595bc61085336cb4f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85fe5017636e497595bc61085336cb4f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if(lst.Count == 0) {\n            return true;\n        }\n        long
    lastVal = lst[0];\n        long numRepeats = 1;\n        for(int i = 1; i < lst.Count;
    i++) {\n            if(lst[i] == lastVal) {\n                numRepeats++;\n                if(numRepeats
    > 1) {\n                    return false;\n                }\n            } else
    {\n                if(lst[i] < lastVal) {\n                    return false;\n
    \               }\n                lastVal = lst[i];\n                numRepeats
    = 1;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77caca3f0dd744f7b9185bd73dd6413c>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19feb7740fce42da813a5fa7f9085412>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19feb7740fce42da813a5fa7f9085412>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) return true;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] <= lst[i - 1]) return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1947a3c98df42569b6003bca8736e6c>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Returns true if all elements in a list are sorted and unique\n
    \       long last = (long)0L;\n        long count = (long)0L;\n        foreach
    (long elt in lst) {\n            if (elt < last) {\n                return false;\n
    \           }\n            else if (elt == last) {\n                count = count
    + (long)1L;\n                if (count == (long)2L) {\n                    return
    false;\n                }\n            }\n            else {\n                last
    = elt;\n                count = (long)1L;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68ddbe076f084e8583909913447da280>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        long last = lst[0];\n
    \       foreach (long value in lst) {\n            if (value < last) return false;\n
    \           last = value;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06a002b7835341f285a80c290aa9211b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06a002b7835341f285a80c290aa9211b>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00011] in <315203caa7d24d8aae2e5ea089b97c02>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00011]
    in <315203caa7d24d8aae2e5ea089b97c02>:0 \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool ret = true;\n        long n = (long)lst.Count;\n        if
    ((n > (long)1L)) {\n            long prev = lst[(int)0L];\n            long first
    = prev;\n            long last = prev;\n            bool duplicates = false;\n
    \           foreach (long i in Enumerable.Range(1L, n - 1L)) {\n                long
    x = lst[(int)i];\n                if ((x <= prev)) {\n                    ret
    = false;\n                    break;\n                }\n\n                if
    ((x == prev)) {\n                    duplicates = true;\n                }\n\n
    \               prev = x;\n                last = x;\n\n            }\n\n            if
    (((first == last) && duplicates)) {\n                ret = false;\n            }\n\n
    \       }\n\n        return ret;\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwx2xpv90.cs(37,49): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpwx2xpv90.cs(37,53): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // Your code goes here\n        if (lst.Count == 1)\n            return
    true;\n        for (long i = 0; i < lst.Count - 1; i++) {\n            if (lst[(int)i]
    >= lst[(int)(i + 1)])\n                return false;\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abbf136721814e31ad17ff202850c61b>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool sorted = true;\n        long a = 0;\n        long b = 0;\n
    \       bool first = true;\n        bool same = false;\n        long numSame =
    0;\n        long prev = 0;\n        if (lst.Count == 1) {\n            return
    true;\n        }\n        foreach (long n in lst) {\n            if (first) {\n
    \               a = n;\n                first = false;\n            } else {\n
    \               b = n;\n                if (a < b) {\n                    if (same)
    {\n                        if (b == prev) {\n                            sorted
    = false;\n                            break;\n                        } else {\n
    \                           same = false;\n                        }\n                    }\n
    \               } else if (a == b) {\n                    if (prev == a) {\n                        sorted
    = false;\n                        break;\n                    } else {\n                        same
    = true;\n                        numSame = a;\n                    }\n                }
    else {\n                    sorted = false;\n                    break;\n                }\n
    \               a = b;\n                prev = b;\n            }\n        }\n
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b76778bdbd2641bea5b62bbb10670cf8>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long prev = 0;\n        for (long i = 0; i < lst.Count; i++) {\n
    \           if (i == 0) {\n                prev = lst[(int)i];\n            }
    else {\n                if (lst[(int)i] <= prev) {\n                    return
    false;\n                }\n                prev = lst[(int)i];\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c7d14c22bc046119c92d7404fb70553>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        long last = lst[0];\n        HashSet<long> set = new HashSet<long>();\n
    \       foreach (long el in lst) {\n            if (set.Contains(el)) {\n                return
    false;\n            }\n            set.Add(el);\n            if (el < last) {\n
    \               return false;\n            }\n            last = el;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <fe5e2a84cd034a829a09f5fbcc6046dd>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <fe5e2a84cd034a829a09f5fbcc6046dd>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <fe5e2a84cd034a829a09f5fbcc6046dd>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <fe5e2a84cd034a829a09f5fbcc6046dd>:0
    \n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var count = lst.Count;\n        if (count == 0) {\n            return
    true;\n        }\n        if (count == 1) {\n            return true;\n        }\n
    \       if (count == 2) {\n            return lst[0] < lst[1];\n        }\n        var
    first = lst[0];\n        var second = lst[1];\n        if (first >= second) {\n
    \           return false;\n        }\n        var last = second;\n        var
    duplicate = false;\n        for (int i = 2; i < count; i++) {\n            var
    cur = lst[i];\n            if (cur == last) {\n                if (duplicate)
    {\n                    return false;\n                }\n                duplicate
    = true;\n            }\n            if (cur < last) {\n                return
    false;\n            }\n            last = cur;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f36ec1d894d84dbfa6c0c8b02dc5d8d7>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00011] in <315203caa7d24d8aae2e5ea089b97c02>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00011]
    in <315203caa7d24d8aae2e5ea089b97c02>:0 \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        throw new NotImplementedException();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00011] in <315203caa7d24d8aae2e5ea089b97c02>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00011]
    in <315203caa7d24d8aae2e5ea089b97c02>:0 \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // [1,2,3,4,5] --> [0,1,2,3,4] -x-> [0,1,2,3,4] == O(n)\n        //
    [1,3,2,4,5] --> [0,1,2,3,4] -x-> [0,2,2,4,5] == O(n)\n        // [1,2,2,3,4] -->
    [0,1,2,3,4] -x-> [0,1,2,3,4] == O(n)\n        // [1,2,2,2,3] --> [0,1,2,3,4] -x->
    [0,1,2,2,4] == O(n)\n        // [1,2,2,2,3] --> [0,1,2,3,4] -x-> [0,1,2,2,4] ==
    O(n)\n        // [1,2,2,2,3] --> [0,1,2,3,4] -x-> [0,1,2,2,4] == O(n)\n        //
    [1,2,2,2,3] --> [0,1,2,3,4] -x-> [0,1,2,2,4] == O(n)\n        // [1,2,2,2,3] -->
    [0,1,2,3,4] -x-> [0,1,2,2,4] == O(n)\n        // [1,2,2,2,3] --> [0,1,2,3,4] -x->
    [0,1,2,2,4] == O(n)\n        // [1,2,2,2,3] --> [0,1,2,3,4] -x-> [0,1,2,2,4] ==
    O(n)\n        // [1,2,2,2,3] --> [0,1,2,3,4] -x-> [0,1,2,2,4] == O(n)\n        //
    [1,2,2,2,3] --> [0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvbs6qlhz.cs(29,24): error CS0161: ''Problem.IsSorted(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659976992
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool result = true;\n        long lastItem = long.MinValue;\n
    \       int i = 0;\n        foreach (long item in lst) {\n            if (item
    == lastItem) {\n                result = false;\n                break;\n            }\n
    \           if (item < lastItem) {\n                result = false;\n                break;\n
    \           }\n            lastItem = item;\n            i++;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <657d8db5dbdc428f9cffe278b6fd9ab3>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool res = true;\n        long[] tempLst = lst.ToArray();\n        for
    (int i = 0; i < tempLst.Length - 1; i++) {\n            if (tempLst[i] >= tempLst[i
    + 1]) {\n                res = false;\n                break;\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a58d3235cb3d4c27b5b0625a4a536498>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        }\n        long
    prev = lst[0];\n        int curcnt = 1;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] < prev) {\n                return false;\n            }\n
    \           if (lst[i] == prev) {\n                curcnt++;\n                if
    (curcnt > 1) {\n                    return false;\n                }\n            }
    else {\n                curcnt = 1;\n            }\n            prev = lst[i];\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d2b7d3972b74124a9066a40e745bf4c>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        // YOUR CODE HERE\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b63139c157b24d068d353565dcb79591>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b63139c157b24d068d353565dcb79591>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    >= lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84e200ba65d444a8b7ee0d599c5db2d1>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool status = true;\n        for (int i = 0; i < lst.Count; i++)
    {\n            if (i + 1 < lst.Count) {\n                if (lst[i] > lst[i +
    1]) {\n                    status = false;\n                }\n            }\n
    \       }\n        return status;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d394f1404e6c4507844473f752171f5a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d394f1404e6c4507844473f752171f5a>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool inOrder = true;\n        for (int i = 0; i < lst.Count -
    1; i++) {\n            if (lst[i] == lst[i + 1]) {\n                return false;\n
    \           }\n            if (lst[i] > lst[i + 1]) {\n                inOrder
    = false;\n            }\n        }\n        return inOrder;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e52d8b1a4fa04420bfe3c970326be5d1>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        //+BEGIN_SOLUTION\n        long last = long.MinValue;\n        foreach
    (long x in lst) {\n            if (x < last) return false;\n            if (x
    == last) return false;\n            last = x;\n        }\n        return true;\n
    \       //+END_SOLUTION\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <09f301f1b9034c52bbfafc906a3edcd9>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        bool dup = false;\n        bool foundDup = false;\n        int
    i = 0;\n        while (i < lst.Count - 1) {\n            if (lst[i] < lst[i +
    1]) {\n                i++;\n            } else if (lst[i] == lst[i + 1]) {\n
    \               foundDup = true;\n                dup = true;\n                i++;\n
    \           } else {\n                return false;\n            }\n        }\n
    \       if (foundDup) {\n            return !dup;\n        } else {\n            return
    true;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e4f9f64267e4ed1a08109d37f09d4e0>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        List<long> sortedLst = new List<long>(lst);\n        sortedLst.Sort();\n
    \       if (sortedLst.Count != lst.Count) {\n            return false;\n        }\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] != sortedLst[i])
    {\n                return false;\n            }\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe9b036fa9f947d7b10100667bca9621>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe9b036fa9f947d7b10100667bca9621>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count < 2) {\n            return true;\n        } else
    {\n            var first = lst[0];\n            for (int i = 1; i < lst.Count;
    i++) {\n                if (lst[i] <= first) {\n                    return false;\n
    \               }\n                first = lst[i];\n            }\n            return
    true;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28d4323cbf704af1ab4293a103bc5f6f>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        Debug.Assert(lst.Count > 0, \"Need non-empty list!\");\n        long
    prev = lst[0];\n        int count = 1;\n        for (int i = 1; i < lst.Count;
    i++) {\n            if (lst[i] == prev) {\n                count++;\n                if
    (count > 1) {\n                    return false;\n                }\n            }
    else {\n                if (lst[i] < prev) {\n                    return false;\n
    \               }\n                prev = lst[i];\n                count = 1;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: Need non-empty list!\n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition, System.String
    message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition, System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at Problem.IsSorted (System.Collections.Generic.List`1[T] lst) [0x00000] in
    <6b4ce25d04cc462686f1edec5069feb0>:0 \n  at Problem.Main (System.String[] args)
    [0x00000] in <6b4ce25d04cc462686f1edec5069feb0>:0 \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException:
    Index was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00015] in <6b4ce25d04cc462686f1edec5069feb0>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <6b4ce25d04cc462686f1edec5069feb0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00015] in <6b4ce25d04cc462686f1edec5069feb0>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <6b4ce25d04cc462686f1edec5069feb0>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count == 0) return true;\n        long lastItem = lst[0];\n
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastItem)
    return false;\n            lastItem = lst[i];\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a1a257232784bdb8153d22ec3f1b0ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a1a257232784bdb8153d22ec3f1b0ed>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    > lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6faf3b5f669f43ecab3c43f0c871309f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6faf3b5f669f43ecab3c43f0c871309f>:0
    \n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    >= lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84e200ba65d444a8b7ee0d599c5db2d1>:0
    \n"
  stdout: ''
  timestamp: 1659976987
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if(lst.Count <= 1) {\n            return true;\n        }\n        var
    first = lst[0];\n        var rest = lst.Skip(1).ToList();\n        if(rest.Count
    == 0) {\n            return true;\n        }\n        if(first > rest[0]) {\n
    \           return false;\n        }\n        return IsSorted(rest);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <174ad763e03249939ed9660bd19d8d12>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <174ad763e03249939ed9660bd19d8d12>:0
    \n"
  stdout: ''
  timestamp: 1659976993
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        var fst = lst[0];\n        var lst1 = lst.Skip(1).ToList();\n
    \       if (lst1.Count == 0) {\n            return true;\n        }\n        var
    snd = lst1[0];\n        if (fst >= snd) {\n            return false;\n        }\n
    \       var lst2 = lst1.Skip(1).ToList();\n        if (lst2.Count == 0) {\n            return
    true;\n        }\n        var n = fst;\n        while (true) {\n            var
    lst3 = lst2.Skip(1).ToList();\n            if (lst3.Count == 0) {\n                return
    true;\n            }\n            var c = lst2[0];\n            if (n == c) {\n
    \               return false;\n            }\n            if (n >= c) {\n                return
    false;\n            }\n            n = c;\n            lst2 = lst3;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <633775703e224057835db08e8207abef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <633775703e224057835db08e8207abef>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List"
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return false. Assume no negative numbers and only integers.\n    // Examples\n
    \   // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    //
    >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,
    (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n
    \   // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>
    IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,
    (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //
    (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,
    (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>
    lst) {\n        if (lst.Count <= 1) {\n            return true;\n        }\n        List<long>
    newLst = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            if
    (i == 0) {\n                newLst.Add(lst[i]);\n            } else {\n                if
    (lst[i] != lst[i - 1]) {\n                    newLst.Add(lst[i]);\n                }\n
    \           }\n        }\n        for (int i = 0; i < newLst.Count - 1; i++) {\n
    \           if (newLst[i] > newLst[i + 1]) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86f22a296b90416da3cb709966db85dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86f22a296b90416da3cb709966db85dd>:0
    \n"
  stdout: ''
  timestamp: 1659976993
