name: HumanEval_150_x_or_y
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // A simple program which should return the value of x if n is\
  \ \n    // a prime number and should return the value of y otherwise.\n    // Examples:\n\
  \    // >>> XOrY((7L), (34L), (12L))\n    // (34L)\n    // >>> XOrY((15L), (8L),\
  \ (5L))\n    // (5L)\n    public static long XOrY(long n, long x, long y) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(XOrY((7L),\
  \ (34L), (12L)) == (34L));\n    Debug.Assert(XOrY((15L), (8L), (5L)) == (5L));\n\
  \    Debug.Assert(XOrY((3L), (33L), (5212L)) == (33L));\n    Debug.Assert(XOrY((1259L),\
  \ (3L), (52L)) == (3L));\n    Debug.Assert(XOrY((7919L), (-1L), (12L)) == (-1L));\n\
  \    Debug.Assert(XOrY((3609L), (1245L), (583L)) == (583L));\n    Debug.Assert(XOrY((91L),\
  \ (56L), (129L)) == (129L));\n    Debug.Assert(XOrY((6L), (34L), (1234L)) == (1234L));\n\
  \    Debug.Assert(XOrY((1L), (2L), (0L)) == (0L));\n    Debug.Assert(XOrY((2L),\
  \ (2L), (0L)) == (2L));\n    }\n\n}\n"
completions: ["        // TODO: implement this function\n        throw new NotImplementedException();",
  '        return isPrime(n) ? x : y;', "        if (n % 2 == 0) {\n            return\
    \ x;\n        } else {\n            return y;\n        }", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        if (IsPrime(n)) {\n            return x;\n        } else {\n          \
    \  return y;\n        }", '        return (n.IsPrime()) ? x : y;', '        return
    IsPrime(n) ? x : y;', "        // BEGIN\n        for (long i = 2; i <= n / 2;\
    \ i++) {\n            if (n % i == 0) {\n                return y;\n         \
    \   }\n        }\n        return x;\n        // END", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        if (n % 2 == 0)\n            return y;\n        else\n            return\
    \ x;", "        if (IsPrime(n)) {\n            return x;\n        } else {\n \
    \           return y;\n        }", "        // Given the parameters above, what\
    \ value do you return?\n        // Remember that you should return either x or\
    \ y.\n        // Replace this with your return value.\n        if (isPrime(n))\n\
    \            return x;\n        else\n            return y;", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        if (isPrime(n)) {\n            return x;\n        } else {\n          \
    \  return y;\n        }", "        if (IsPrime(n)) {\n            return x;\n\
    \        } else {\n            return y;\n        }", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        if (IsPrime(n)) {\n            return x;\n        } else {\n          \
    \  return y;\n        }", "        for (long i = 2; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                return y;\n            }\n        }\n  \
    \      return x;", "        if (IsPrime(n)) {\n            return x;\n       \
    \ } else {\n            return y;\n        }", '        return (isPrime(n)) ?
    x : y;', '        return n;', "        if (IsPrime(n)) {\n            return x;\n\
    \        } else {\n            return y;\n        }", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        if (IsPrime(n)) {\n            return x;\n        } else {\n          \
    \  return y;\n        }", "        if (n % 2 == 0)\n            return y;\n  \
    \      else {\n            for (long i = 3; i < Math.Sqrt(n); i += 2) {\n    \
    \            if (n % i == 0)\n                    return y;\n            }\n \
    \           return x;\n        }", "        var res = n % 2 == 0 ? y : x;\n  \
    \      return res;", '        return IsPrime(n) ? x : y;', "        if (n == 2)\
    \ {\n            return x;\n        }\n        if (n % 2 == 0) {\n           \
    \ return y;\n        }\n        for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n\
    \            if (n % i == 0) {\n                return y;\n            }\n   \
    \     }\n        return x;", "        //long r = (n>2L)?0L:x;\n        //for (long\
    \ i = 2L; i<n; i++) {\n        //    if (n%i==0L) {\n        //        r = y;\n\
    \        //        break;\n        //    }\n        //}\n        //return r;\n\
    \        long r = x;\n        if (n<=2L) {\n            r = x;\n        } else\
    \ {\n            long i = 2L;\n            while (i<n) {\n                if (n%i==0L)\
    \ {\n                    r = y;\n                    break;\n                }\n\
    \                i = i+1L;\n            }\n        }\n        return r;", "  \
    \      if (n.IsPrime()) {\n            return x;\n        } else {\n         \
    \   return y;\n        }", "        for (long i = 2; i * i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                return y;\n            }\n       \
    \ }\n        return x;", '        return Prime.IsPrime(n) ? x : y;', "       \
    \ if (isPrime(n)) {\n            return x;\n        } else {\n            return\
    \ y;\n        }", '        return IsPrime(n) ? x : y;', '        return ((IsPrime(n))
    ? x : y);', "        bool condition = (n % 2 == 0);\n        bool result = condition\
    \ ? true : false;\n        if (result) {\n            return y;\n        } else\
    \ {\n            return x;\n        }", '        return n % 2 == 0 ? y : x;',
  "        if (n % 2 == 0) {\n            return y;\n        } else {\n          \
    \  return x;\n        }", '        return 0;', "        if (BigInteger.Parse(n.ToString()).IsProbablePrime(10))\n\
    \            return x;\n        else\n            return y;", '        return
    n % n == 1 ? x : y;', "        if (IsPrime(n)) {\n            return x;\n    \
    \    } else {\n            return y;\n        }", "        //return n % 2 == 0\
    \ ? y : x;\n        var t0 = n % 2 == 0;\n        var r = t0 ? y : x;\n      \
    \  return r;", "        if (IsPrime(n)) {\n            return x;\n        } else\
    \ {\n            return y;\n        }", '        return Helpers.IfThenElse(Helpers.IsPrime(n),
    x, y);', "        if (IsPrime(n)) {\n            return x;\n        } else {\n\
    \            return y;\n        }", '        return Primality.IsPrime((ulong)n)
    ? x : y;', "        long retval = 0;\n        long i = 2;\n        if (n < 2)\
    \ {\n            retval = y;\n        } else {\n            while (i < n && n\
    \ % i != 0) {\n                i = i + 1;\n            }\n            if (i <\
    \ n) {\n                retval = y;\n            } else {\n                retval\
    \ = x;\n            }\n        }\n        return retval;", "        if (n % 2\
    \ == 0) {\n            return y;\n        } else {\n            return x;\n  \
    \      }", "        if (Program.IsPrime(n)) {\n            return x;\n       \
    \ } else {\n            return y;\n        }", "        if (IsPrime(n)) {\n  \
    \          return x;\n        } else {\n            return y;\n        }", " \
    \       if (IsPrime(n)) {\n            return x;\n        } else {\n         \
    \   return y;\n        }", '        return n.IsPrime() ? x : y;', '        return
    is_prime(n) ? x : y;', '        return (x * (n % 2) + y * (1 - n % 2));', "  \
    \      // Fun fact: all prime numbers greater than 3 have remainder 1 or 5 when\
    \ divided by 6.\n        long mod6 = n % 6;\n        if ((mod6 == 1) || (mod6\
    \ == 5)) {\n            return x;\n        } else {\n            return y;\n \
    \       }", '        return IsPrime(n) ? x : y;', "        if (Prime(n)) {\n \
    \           return x;\n        } else {\n            return y;\n        }", '        return
    n % 2 == 0 ? y : x;', "        long flag = (1L) - ((((n) == (1L)) || ((isPrime((n)))\
    \ != (0L))) ? (1L) : (0L));\n        return ((flag) * (x)) + (((1L) - (flag))\
    \ * (y));", "        long res = 0;\n        if (n%2 == 0) {\n            res =\
    \ y;\n        } else {\n            res = x;\n        }\n        return res;",
  '        return n % 2 == 0 ? y : x;', "        if (IsPrime(n)) {\n            return\
    \ x;\n        } else {\n            return y;\n        }", "        int i = 2;\n\
    \        bool prime = true;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0)\n                prime = false;\n            i++;\n        }\n     \
    \   if (prime)\n            return x;\n        else\n            return y;", '        return
    n % 2 == 0 ? y : x;', "        if (IsPrime(n))\n            return x;\n      \
    \  else\n            return y;", "        if (IsPrime(n)) {\n            return\
    \ x;\n        } else {\n            return y;\n        }", '        return n %
    2L == 0L ? y : x;', "        if (IsPrime(n)) {\n            return x;\n      \
    \  } else {\n            return y;\n        }", "        if (n < 1) {\n      \
    \      throw new ArgumentException();\n        }\n        return n % 2 == 0 ?\
    \ y : x;", '        return new long[2] {x, y}[(int) Math.Pow(new long[2] {1, 0}[1],
    (int) IsPrime(n))];', '        return (n == 2 || n == 3 || n == 5 || n == 7 ||
    n == 11 || n == 13 || n == 17 || n == 19 || n == 23 || n == 29 || n == 31 || n
    == 37 || n == 41 || n == 43 || n == 47 || n == 53 || n == 59 || n == 61 || n ==
    67 || n == 71 || n == 73 || n == 79 || n == 83 || n == 89 || n == 97 || n == 101
    || n == 103 || n == 107 || n == 109 || n == 113 || n == 127 || n == 131 || n ==
    137 || n == 139 || n == 149 || n == 151 || n == 157 || n == 163 || n == 167 ||
    n == 173 || n == 179 || n == 181 || n == 191 || n == 193 || n == 197 || n == 199
    || n == 211 || n == 223 || n == 227 || n == 229 || n == 233 || n == 239 || n ==
    241 || n == 251 || n == 257 || n == 263 || n == 269 || n == 271 || n == 277 ||
    n == 281 || n == 283 || n == 293 || n == 307 || n == 311 || n == 313 || n == 317
    || n == 331 || n == 337 || n == 347 || n == 349 || n == 353 || n == 359 || n ==
    367 || n == 373 || n == 379 || n == 383 || n == 389 || n == 397 || n == 401 ||
    n == 409 || n == 419 || n == 421 || n == 431 || n == 433 || n == 439 || n == 443
    || n == 449 || n == 457 || n == 461 || n == 463 || n == 467 || n == 479 || n ==
    487 || n == 491 || n == 499 || n == 503 || n == 509 || n == 521 || n == 523 ||
    n == 541 || n == 547 || n == 557 || n == 563 || n == 569 || n == 571 || n == 577
    || n == 587 || n == 593 || n == 599 || n == 601 || n == 607 || n == 613 || n ==
    617 || n == 619 || n == 631 || n == 641 || n == 643 || n == 647 || n == 653 ||',
  "        if (IsPrime(n)) {\n            return x;\n        } else {\n          \
    \  return y;\n        }", "        var r = ModularArithmetic.modpow(n, (int) (n\
    \ - 1), new BigInteger(n));\n        return r == 1 ? x : y;", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  '        return (((long)(n % 2L) == 0L) ? y : x);', '        return n.IsPrime()
    ? x : y;', "        if (IsPrime(n))\n            return x;\n        else\n   \
    \         return y;", "        // TODO\n        return 0;", '        return IsPrime(n)
    ? x : y;', "        if (IsPrime(n)) {\n            return x;\n        } else {\n\
    \            return y;\n        }", "        if (n < 2) return y;\n        long\
    \ lim = (long)Math.Sqrt(n);\n        for (long i = 2; i <= lim; i++) {\n     \
    \       if (n % i == 0) return y;\n        }\n        return x;", '        return
    IsPrime(n) ? x : y;', "        if (IsPrime(n)) {\n            return x;\n    \
    \    } else {\n            return y;\n        }", "        if (IsPrime(n))\n \
    \           return x;\n        else\n            return y;", "        if (n ==\
    \ 1) {\n            return y;\n        }\n        // If n is even, n is divisible\
    \ by 2.\n        if (n % 2 == 0) {\n            return y;\n        }\n       \
    \ // If n is odd, n is not divisible by 2.\n        long i = 3;\n        while\
    \ (i < n) {\n            if (n % i == 0) {\n                return y;\n      \
    \      }\n            i = i + 2;\n        }\n        return x;", "        if (n\
    \ % 2 == 0) {\n            return y;\n        } else {\n            return x;\n\
    \        }", '        throw new NotImplementedException();', '        return (isPrime(n))
    ? x : y;', "        long r = n % 6;\n        if (r == 1 || r == 5) {\n       \
    \     return x;\n        } else {\n            return y;\n        }", '        return
    n%2==0 ? y : x;', "        var bn = BigInteger.Parse(n.ToString());\n        return\
    \ bn.IsProbablePrime(10) ? x : y;", "        if (IsPrime(n)) {\n            return\
    \ x;\n        } else {\n            return y;\n        }", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        if (IsPrime(n))\n            return x;\n        else\n            return\
    \ y;", "        if (IsPrime(n)) {\n            return x;\n        } else {\n \
    \           return y;\n        }", "        if (IsPrime(n)) {\n            return\
    \ x;\n        } else {\n            return y;\n        }", '        return isPrime(n)
    ? x : y;', '        return (IsPrime(n)) ? x : y;', "        // TODO: Implement\
    \ this, so that the below code will work.\n        return -1;", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        if (IsPrime(n)) {\n            return x;\n        } else {\n          \
    \  return y;\n        }", "        if (IsPrime(n))\n            return x;\n  \
    \      else\n            return y;", "        long z = 1;\n        for (int i\
    \ = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                z =\
    \ y;\n                break;\n            }\n        }\n        return z;", " \
    \       if (n % 2 == 0) {\n            return y;\n        } else {\n         \
    \   return x;\n        }", "        if (IsPrime(n)) {\n            return x;\n\
    \        } else {\n            return y;\n        }", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  '        return (n==1) ? x : y;', "        long z = 0;\n        if(n == 1) {\n \
    \           z = y;\n        } else {\n            if(n % 2 == 0) {\n         \
    \       z = y;\n            } else {\n                int i = 3;\n           \
    \     while(i < n) {\n                    if(n % i == 0) {\n                 \
    \       z = y;\n                        break;\n                    }\n      \
    \              i = i + 2;\n                }\n                if(i >= n) {\n \
    \                   z = x;\n                }\n            }\n        }\n    \
    \    return z;", "        if (Prime(n)) {\n            return x;\n        } else\
    \ {\n            return y;\n        }", "        if (IsPrime(n))\n           \
    \ return x;\n        else\n            return y;", "        if (is_prime(n)) {\n\
    \            return x;\n        } else {\n            return y;\n        }", " \
    \       if (n % 2 == 0)\n            return y;\n        else\n            return\
    \ x;", "        if (n % 2 == 0) {\n            return y;\n        } else {\n \
    \           return x;\n        }", "        if (IsPrime(n))\n            return\
    \ x;\n        else\n            return y;", "        if (n % 2 == 0) {\n     \
    \       return y;\n        } else {\n            return x;\n        }", '        return
    n % 2 == 0 ? y : x;', "        if (is_prime(n)) {\n            return x;\n   \
    \     } else {\n            return y;\n        }", '        return (n > 1) ? ((IsPrime(n))
    ? x : y) : 0;', "        if (IsPrime(n)) {\n            return x;\n        } else\
    \ {\n            return y;\n        }", "        if (isPrime(n))\n           \
    \ return x;\n        else\n            return y;", "        if (IsPrime(n)) {\n\
    \            return x;\n        } else {\n            return y;\n        }", " \
    \       if (n.isPrime())\n            return x;\n        else\n            return\
    \ y;", "        // Your code here.\n        return (n % 2 == 0) ? y : x;", " \
    \       if (n == 1)\n            return y;\n        if (n == 2)\n            return\
    \ x;\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0)\n\
    \                return y;\n        }\n        return x;", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        if (IsPrime(n)) {\n            return x;\n        } else {\n          \
    \  return y;\n        }", '        return n % 2 == 0 ? y : x;', '        return
    (isPrime(n)) ? x : y;', "        // Implement this function.\n        return 0;",
  "        if (n < 2)\n            return y;\n        for (int i = 2; i < n; i++)\
    \ {\n            if (n % i == 0)\n                return y;\n        }\n     \
    \   return x;", '        return (n.IsPrime() ? x : y);', '        return (n %
    2) == 0 ? y : x;', "        if (IsPrime(n)) {\n            return x;\n       \
    \ } else {\n            return y;\n        }", "        if (IsPrime(n)) {\n  \
    \          return x;\n        } else {\n            return y;\n        }", " \
    \       // FILL IN CODE HERE\n        if (n.IsPrime())\n            return x;\n\
    \        else\n            return y;", "        if (IsPrime(n)) {\n          \
    \  return x;\n        } else {\n            return y;\n        }", "        if\
    \ (n % 2 == 0)\n            return x;\n        return y;", "        if (n % 2\
    \ == 0)\n            return x;\n        else\n            return y;", '        return
    IsPrime(n) ? x : y;', "        if (n < 2) return y;\n        for (long i = 2;\
    \ i < n; i++) {\n            if (n % i == 0) return y;\n        }\n        return\
    \ x;", "        if (isPrime(n))\n            return x;\n        else\n       \
    \     return y;", '        return (!isPrime(n)) ? y : x;', "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        if (IsPrime(n)) {\n            return x;\n        } else {\n          \
    \  return y;\n        }", '        return IsPrime(n) ? x : y;', '        return
    (n == 2L) ? x : y;', "        if (n < 2)\n            return y;\n        for (long\
    \ i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0)\n            \
    \    return y;\n        }\n        return x;", "        if (IsPrime(n))\n    \
    \        return x;\n        else\n            return y;", "        if (IsPrime(n))\n\
    \            return x;\n        else\n            return y;", "        if (n <\
    \ 2) {\n            return y;\n        }\n        if (n % 2 == 0) {\n        \
    \    return y;\n        }\n        long max = (long)Math.Ceiling(Math.Sqrt(n));\n\
    \        for (long i = 3; i <= max; i += 2) {\n            if (n % i == 0) {\n\
    \                return y;\n            }\n        }\n        return x;", "  \
    \      if (IsPrime(n)) {\n            return x;\n        } else {\n          \
    \  return y;\n        }", "        if (IsPrime(n)) {\n            return x;\n\
    \        } else {\n            return y;\n        }", '        return ((n & 1)
    == 0 ? y : x);', "        if (n < 2) {\n            throw new Exception(\"Input\
    \ n should be greater than 1\");\n        }\n        if (n == 2) {\n         \
    \   return x;\n        }\n        bool flag = false;\n        for (long i = 2;\
    \ i < n; i++) {\n            if (n % i == 0) {\n                flag = true;\n\
    \                break;\n            }\n        }\n        if (flag) {\n     \
    \       return y;\n        } else {\n            return x;\n        }", '        return
    IsPrime(n) ? x : y;', "        long[] args = new long[] { n, x, y };\n       \
    \ long result = args[1];\n        Func<long, long> returnX = delegate(long arg)\
    \ { return arg; };\n        Func<long, long> returnY = delegate(long arg) { return\
    \ arg; };\n        if (n % 2 == 0)\n            result = args[2];\n        else\n\
    \            result = args[1];\n        return result;", '        return SolveSubsetSum(n,
    new long[] { 0, x, y });', "        if (n % 2 == 0) {\n            return y;\n\
    \        } else {\n            return x;\n        }", '        return IsPrime(n)
    ? x : y;', "        // TODO: fill in your solution here.\n        // Hint: If\
    \ you are using a modern C# version,\n        // you can use the BigInteger type\
    \ from the .NET API\n        // to represent the number n.\n        // You can\
    \ also use the isProbablePrime method\n        // to determine whether a number\
    \ is a prime.\n        return n.IsPrime() ? x : y;", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        // TODO: Implement the program here.\n        return 0;", "        if (IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        // ...\n        return 0;", '        return (IsPrime(n)) ? x : y;', " \
    \       if (IsPrime(n)) {\n            return x;\n        } else {\n         \
    \   return y;\n        }", "        if (n % 2 == 0) {\n            return x;\n\
    \        } else {\n            return y;\n        }", "        // WRITE YOUR CODE\
    \ HERE\n        return 1;", '        return ((BigInteger.Pow(2, n) - 1).IsProbablePrime(1000))
    ? x : y;', "        if (IsPrime(n)) {\n            return x;\n        } else {\n\
    \            return y;\n        }", '        return (n % 2) == 0 ? y : x;', " \
    \       if (IsPrime(n)) {\n            return x;\n        } else {\n         \
    \   return y;\n        }", "        if (IsPrime(n)) {\n            return x;\n\
    \        } else {\n            return y;\n        }", "        if(Helper.IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        if (isPrime(n)) {\n            return x;\n        } else {\n          \
    \  return y;\n        }", "        if (IsPrime(n)) {\n            return x;\n\
    \        } else {\n            return y;\n        }", '        return IsPrime(n)
    ? x : y;', '        return n.IsPrime() ? x : y;', "        if (MathUtil.IsPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  "        if (IsPrime(n)) {\n            return x;\n        } else {\n          \
    \  return y;\n        }", "        long[] args = new long[] { n, x, y };\n   \
    \     long result = 0;\n        if (args[0] % 2 == 0) {\n            result =\
    \ args[1];\n        } else {\n            result = args[2];\n        }\n     \
    \   return result;", "        if (IsPrime(n))\n            return x;\n       \
    \ else\n            return y;", "        if (IsPrime(n))\n            return x;\n\
    \        else\n            return y;", "        if (IsPrime(n))\n            return\
    \ x;\n        else\n            return y;", "        if (IsPrime(n))\n       \
    \     return x;\n        else\n            return y;", "        // Compute the\
    \ problem solution and return the result\n        if (n % 2 == 0)\n          \
    \  return y;\n        else\n            return x;", "        if (Prime(n)) {\n\
    \            return x;\n        } else {\n            return y;\n        }", " \
    \       if (IsPrime(n))\n            return x;\n        else\n            return\
    \ y;", "        if (IsPrime(n))\n            return x;\n        else\n       \
    \     return y;", '        return (n == 1) ? y : x;', "        long result = 0;\n\
    \        bool isPrime = IsPrime(n);\n        if (isPrime)\n            result\
    \ = x;\n        else\n            result = y;\n        return result;", "    \
    \    var p = n.IsPrime();\n        return p ? x : y;", "        if (isPrime(n))\
    \ {\n            return x;\n        } else {\n            return y;\n        }",
  '        return isPrime(n) ? x : y;', "        if(IsPrime(n)) {\n            return\
    \ x;\n        } else {\n            return y;\n        }", '        return isPrime(n)
    ? x : y;', "        if (IsPrime(n)) {\n            return x;\n        } else {\n\
    \            return y;\n        }", "        if (n % 2 == 0) {\n            return\
    \ y;\n        } else {\n            return x;\n        }", '        return (n
    % 2 == 0) ? y : x;']
stop_tokens:
- "\n    }\n"
