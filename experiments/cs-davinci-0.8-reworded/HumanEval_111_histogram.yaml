name: HumanEval_111_histogram
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n    // of the letter with the most repetition and containing\
  \ the corresponding count.\n    // If several letters have the same occurrence,\
  \ return all of them.\n    // Example:\n    // >>> Histogram((\"a b c\"))\n    //\
  \ (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}})\n    //\
  \ >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"a\", 2L},\
  \ {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
  b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
  \    public static Dictionary<string,long> Histogram(string test) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
  a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
  \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
  \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
  \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
  r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\"\
  )).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
  r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\"\
  , 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
  \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"a\"\
  , 1L}})));\n    }\n\n}\n"
completions: ["        Dictionary<string,long> results = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string element in test.Split(' ')) {\n            if (histogram.ContainsKey(element))\
    \ {\n                histogram[element]++;\n            } else {\n           \
    \     histogram[element] = 1;\n            }\n        }\n        if (histogram.Count\
    \ == 0) {\n            return results;\n        }\n        long max = histogram.Max(x\
    \ => x.Value);\n        foreach (KeyValuePair<string,long> entry in histogram)\
    \ {\n            if (entry.Value == max) {\n                results[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return results;", '        return
    Histogram2(test);', "        // Fill this stub.\n        return null;", "    \
    \    var result = new Dictionary<string,long>();\n        if (test.Trim() == \"\
    \") {\n            return result;\n        }\n        var letters = test.Split('\
    \ ');\n        var max_count = 1L;\n        foreach (var letter in letters) {\n\
    \            if (result.ContainsKey(letter)) {\n                result[letter]\
    \ += 1L;\n            } else {\n                result[letter] = 1L;\n       \
    \     }\n            if (result[letter] > max_count) {\n                max_count\
    \ = result[letter];\n            }\n        }\n        var result_filtered = new\
    \ Dictionary<string,long>();\n        foreach (var kvp in result) {\n        \
    \    if (kvp.Value == max_count) {\n                result_filtered[kvp.Key] =\
    \ kvp.Value;\n            }\n        }\n        return result_filtered;", "  \
    \      var dict = new Dictionary<string,long>();\n        var max = 0L;\n    \
    \    var split = test.Split();\n        foreach (var word in split) {\n      \
    \      if (dict.ContainsKey(word)) {\n                dict[word] += 1;\n     \
    \       } else {\n                dict[word] = 1;\n            }\n           \
    \ if (dict[word] > max) {\n                max = dict[word];\n            }\n\
    \        }\n        return dict.Where(entry => entry.Value == max).ToDictionary(entry\
    \ => entry.Key, entry => entry.Value);", "        var dict = new Dictionary<string,long>();\n\
    \        if (test == \"\") {\n            return dict;\n        }\n\n        var\
    \ len = 0;\n        var max = 0;\n        var items = test.Split(' ');\n     \
    \   foreach (var item in items) {\n            if (dict.ContainsKey(item)) {\n\
    \                dict[item] += 1;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n            if (dict[item] > max) {\n                max\
    \ = (int)dict[item];\n            }\n        }\n\n        return dict;", "   \
    \     var d = new Dictionary<string,long>();\n        foreach (var s in test.Split('\
    \ ')) {\n            long c;\n            if (d.TryGetValue(s, out c)) {\n   \
    \             d[s] = c + 1;\n            } else {\n                d[s] = 1;\n\
    \            }\n        }\n        long max = 0;\n        foreach (var entry in\
    \ d) {\n            if (entry.Value > max) {\n                max = entry.Value;\n\
    \            }\n        }\n        var r = new Dictionary<string,long>();\n  \
    \      foreach (var entry in d) {\n            if (entry.Value == max) {\n   \
    \             r[entry.Key] = entry.Value;\n            }\n        }\n        return\
    \ r;", "        Dictionary<string,long> soln = new Dictionary<string,long>();\n\
    \        // INSERT CODE HERE\n        return soln;", "        // Fill in your\
    \ code here\n        return new Dictionary<string,long>();", "        Dictionary<string,long>\
    \ d = new Dictionary<string,long>();\n        string[] splitted = test.Split('\
    \ ');\n        foreach (string s in splitted) {\n            if (d.ContainsKey(s))\
    \ {\n                d[s] += 1;\n            } else {\n                d[s] =\
    \ 1;\n            }\n        }\n        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        long max = d.Max(p => p.Value);\n        foreach (KeyValuePair<string,long>\
    \ e in d) {\n            if (e.Value == max) {\n                result[e.Key]\
    \ = e.Value;\n            }\n        }\n        return result;", "        var\
    \ d = new Dictionary<string,long>();\n        if (test.Length == 0) return d;\n\
    \        var split = test.Split(' ');\n        var l = new List<string>();\n \
    \       foreach (var x in split) {\n            if (d.ContainsKey(x)) {\n    \
    \            d[x] += 1;\n            } else {\n                d[x] = 1;\n   \
    \         }\n        }\n        var max = d.Values.Max();\n        var res = new\
    \ Dictionary<string,long>();\n        foreach (var x in d) {\n            if (x.Value\
    \ == max) {\n                res[x.Key] = x.Value;\n            }\n        }\n\
    \        return res;", "        if (test == null) { throw new ArgumentNullException(\"\
    test\"); }\n        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries))\
    \ {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]\
    \ += 1L;\n            } else {\n                histogram[letter] = 1L;\n    \
    \        }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ dic = new Dictionary<string,long>();\n        foreach (string s in test.Split(\"\
    \ \".ToCharArray())) {\n            if (dic.ContainsKey(s)) {\n              \
    \  dic[s]++;\n            } else {\n                dic[s] = 1;\n            }\n\
    \        }\n        return dic;", "        var words = test.Split(' ');\n    \
    \    var counts = new Dictionary<string,long>();\n        foreach (var w in words)\
    \ {\n            if (counts.ContainsKey(w)) {\n                counts[w] += 1;\n\
    \            } else {\n                counts[w] = 1;\n            }\n       \
    \ }\n        var max = counts.Values.Max();\n        var dict = new Dictionary<string,long>();\n\
    \        foreach (var kv in counts) {\n            if (kv.Value == max) {\n  \
    \              dict[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ dict;", "      var letters = test.Split(' ');\n      return letters.GroupBy(letter\
    \ => letter)\n              .ToDictionary(group => group.Key, group => group.Count());",
  '        return new Dictionary<string,long>();', '        throw new NotImplementedException();',
  "        var ret = new Dictionary<string,long>();\n        var dict = new Dictionary<string,long>();\n\
    \        foreach (var c in test.Split(' '))\n        {\n            if (!dict.ContainsKey(c))\n\
    \            {\n                dict[c] = 0;\n            }\n            dict[c]\
    \ += 1;\n        }\n        var maxVal = dict.Values.Max();\n        foreach (var\
    \ e in dict)\n        {\n            if (e.Value == maxVal)\n            {\n \
    \               ret[e.Key] = e.Value;\n            }\n        }\n        return\
    \ ret;", "        Dictionary<string,long> res = new Dictionary<string,long>();\n\
    \        foreach (string w in test.Split(' ')) {\n            long c = 0;\n  \
    \          if (res.TryGetValue(w, out c)) {\n                res[w] = c + 1;\n\
    \            } else {\n                res[w] = 1;\n            }\n        }\n\
    \        Dictionary<string,long> ret = new Dictionary<string,long>();\n      \
    \  long highest = 0;\n        foreach (KeyValuePair<string,long> kvp in res) {\n\
    \            if (kvp.Value == highest) {\n                ret[kvp.Key] = kvp.Value;\n\
    \            } else if (kvp.Value > highest) {\n                ret.Clear();\n\
    \                ret[kvp.Key] = kvp.Value;\n                highest = kvp.Value;\n\
    \            }\n        }\n        return ret;", "        Dictionary<string,long>\
    \ ret = new Dictionary<string,long>();\n        if (test.Length == 0) return ret;\n\
    \        // Split the string on spaces and store in a list.\n        var chars\
    \ = test.Split(' ').ToList();\n        // Loop through the list, updating the\
    \ dictionary with the character counts.\n        foreach (var letter in chars)\
    \ {\n            if (ret.ContainsKey(letter)) {\n                ret[letter]++;\n\
    \            } else {\n                ret[letter] = 1;\n            }\n     \
    \   }\n        // Now, loop through the dictionary and find the maximum value.\n\
    \        long max = 0;\n        foreach (var v in ret.Values) {\n            if\
    \ (v > max) max = v;\n        }\n        // Clear the dictionary and place only\
    \ the elements with a value == max.\n        ret.Clear();\n        foreach (var\
    \ letter in chars) {\n            if (ret.ContainsKey(letter)) {\n           \
    \     ret[letter]++;\n            } else {\n                ret[letter] = 1;\n\
    \            }\n            if (ret[letter] == max) ret[letter] = max;\n     \
    \       else ret.Remove(letter);\n        }\n        return ret;", "        var\
    \ group = test.Split(' ').GroupBy(c => c).Select(c => new { Char = c.Key, Count\
    \ = c.Count() });\n        var maxCount = group.Select(g => g.Count).Max();\n\
    \        var mostFrequent = group.Where(g => g.Count == maxCount).Select(g =>\
    \ g.Char).ToList();\n        var histogram = new Dictionary<string,long>();\n\
    \        foreach (var key in mostFrequent) {\n            histogram.Add(key, maxCount);\n\
    \        }\n        return histogram;", "        var letters = test.Split(' ');\n\
    \        var histogram = new Dictionary<string,long>();\n        foreach (var\
    \ letter in letters) {\n            if (histogram.ContainsKey(letter)) {\n   \
    \             histogram[letter] += 1;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        // your\
    \ code here...\n        return new Dictionary<string,long>();", "        // Fill\
    \ me in\n        Dictionary<string, long> result = new Dictionary<string, long>();\n\
    \        string[] substrings = test.Split(' ');\n        foreach (string substring\
    \ in substrings)\n        {\n            if (!result.ContainsKey(substring))\n\
    \            {\n                result.Add(substring, 1);\n            }\n   \
    \         else\n            {\n                result[substring]++;\n        \
    \    }\n        }\n        return result;", "        return test.Split(' ').GroupBy(x\
    \ => x).Select(x => new {x.Key, Count = x.Count()}).OrderByDescending(x => x.Count).GroupBy(x\
    \ => x.Count).OrderByDescending(x => x.Key).First().ToDictionary(x => x.Key, x\
    \ => (long)x.Count);", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test.Length == 0) {\n            return result;\n        }\n    \
    \    Dictionary<string,long> counts = new Dictionary<string,long>();\n       \
    \ foreach (var c in test.Split(' ')) {\n            long cnt = 0;\n          \
    \  if (counts.TryGetValue(c, out cnt)) {\n                counts[c] = cnt + 1;\n\
    \            } else {\n                counts[c] = 1;\n            }\n       \
    \ }\n        long max = counts.Values.Max();\n        foreach (var kv in counts)\
    \ {\n            if (kv.Value == max) {\n                result[kv.Key] = kv.Value;\n\
    \            }\n        }\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        foreach (var letter in test.Split(' ')) {\n            if (dict.ContainsKey(letter))\
    \ {\n                dict[letter]++;\n            } else {\n                dict[letter]\
    \ = 1;\n            }\n        }\n        var maxVal = dict.Max(kvp => kvp.Value);\n\
    \        return dict.Where(kvp => kvp.Value == maxVal).ToDictionary(kvp => kvp.Key,\
    \ kvp => kvp.Value);", "        int[] hist = new int[26];\n        var dict =\
    \ new Dictionary<string,long>();\n        foreach (char c in test) {\n       \
    \     hist[c - 'a']++;\n        }\n        int max = hist.Max();\n        for\
    \ (int i = 0; i < 26; i++) {\n            if (hist[i] == max)\n              \
    \  dict.Add(((char)(i + 'a')).ToString(), max);\n        }\n        return dict;",
  "        // Create a dictionary to store the result\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        // Create a list to hold the\
    \ current occurances\n        List<long> ocurrances = new List<long>();\n    \
    \    // Create a list to hold the highest occurances\n        List<long> highest\
    \ = new List<long>();\n        // Create a variable to hold the highest occurance\n\
    \        long high = 0;\n        // Split the test into a string array\n     \
    \   string[] words = test.Split(' ');\n        // Iterate over the words in the\
    \ array\n        foreach (string word in words) {\n            // If the word\
    \ has been seen\n            if (result.ContainsKey(word)) {\n               \
    \ // Update the occurance in the dictionary\n                result[word] += 1;\n\
    \            } else {\n                // Add the occurance to the dictionary\n\
    \                result.Add(word, 1);\n            }\n        }\n        // Get\
    \ the occurances from the dictionary\n        foreach (KeyValuePair<string,long>\
    \ pair in result) {\n            // Add the occurance to the list\n          \
    \  ocurrances.Add(pair.Value);\n        }\n        // Get the highest occurance\
    \ in the list\n        high = ocurrances.Max();\n        // Get the occurances\
    \ with the highest occurance\n        foreach (long value in ocurrances) {\n \
    \           // If the current value is the highest\n            if (value == high)\
    \ {\n                // Add the value to the highest list\n                highest.Add(value);\n\
    \            }\n        }\n        // Create a list to hold the new values\n \
    \       List<KeyValuePair<string,long>> newValues = new List<KeyValuePair<string,long>>();\n\
    \        // Add the key value pairs that match the highest occurance to the new\
    \ list\n        foreach (KeyValuePair<string,long> pair in result) {\n       \
    \     // If the value is in the highest list\n            if (highest.Contains(pair.Value))\
    \ {\n                // Add the key value pair to the new list\n             \
    \   newValues.Add(pair);\n            }\n        }\n        // Create a dictionary\
    \ to hold the new key value pairs\n        Dictionary<string,", "        var hist\
    \ = new Dictionary<string,long>();\n        var max = 0L;\n        foreach (var\
    \ c in test.Split(' ')) {\n            if (hist.ContainsKey(c)) {\n          \
    \      hist[c]++;\n            } else {\n                hist[c] = 1;\n      \
    \      }\n            max = Math.Max(max, hist[c]);\n        }\n        return\
    \ hist.Where(x => x.Value == max).ToDictionary(x => x.Key, x => x.Value);", '        return
    new Dictionary<string,long>();', "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        // Insert code here\n\n        return result;",
  "        var letters = test.Split(' ');\n        var dict = new Dictionary<string,long>();\n\
    \        foreach (var letter in letters) {\n            if (dict.ContainsKey(letter))\
    \ {\n                dict[letter] += 1;\n            } else {\n              \
    \  dict[letter] = 1;\n            }\n        }\n        var max = dict.Aggregate((x,\
    \ y) => x.Value > y.Value ? x : y).Value;\n        var keys = dict.Where(pair\
    \ => pair.Value == max).Select(pair => pair.Key).ToList();\n        return keys.ToDictionary(key\
    \ => key, key => max);", '        return new Dictionary<string,long>();', "  \
    \      Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      // TODO: Implement\n        return histogram;", "        var words = test.Split('\
    \ ');\n        var results = new Dictionary<string,long>();\n        for (int\
    \ i = 0; i < words.Length; i++) {\n            if (results.ContainsKey(words[i]))\
    \ {\n                results[words[i]] += 1;\n            } else {\n         \
    \       results[words[i]] = 1;\n            }\n        }\n        var max = words.Length\
    \ > 0 ? results.Values.Max() : 0;\n        var top = new Dictionary<string,long>();\n\
    \        foreach (var kvp in results) {\n            if (kvp.Value == max) {\n\
    \                top[kvp.Key] = kvp.Value;\n            }\n        }\n       \
    \ return top;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        test.Split(new string[] {\" \"}, StringSplitOptions.RemoveEmptyEntries).ToList().ForEach(s\
    \ => {\n            if (histogram.ContainsKey(s)) {\n                histogram[s]++;\n\
    \            } else {\n                histogram[s] = 1L;\n            }\n   \
    \     });\n        long maxValue = histogram.Values.Max();\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        histogram.Keys.ToList().ForEach(s\
    \ => {\n            if (histogram[s] == maxValue) {\n                result[s]\
    \ = maxValue;\n            }\n        });\n        return result;", "        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        string[] testArr = test.Split('\
    \ ');\n        Dictionary<string, long> counts = new Dictionary<string, long>();\n\
    \        for (int i = 0; i < testArr.Length; i++) {\n            if (counts.ContainsKey(testArr[i]))\
    \ {\n                counts[testArr[i]] += 1;\n            } else {\n        \
    \        counts[testArr[i]] = 1;\n            }\n        }\n        long max =\
    \ counts.Values.Max();\n        foreach (KeyValuePair<string, long> entry in counts)\
    \ {\n            if (entry.Value == max) {\n                dict[entry.Key] =\
    \ entry.Value;\n            }\n        }\n        return dict;", "        var\
    \ histogram = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        if (test.Length == 0) {\n        \
    \    return result;\n        }\n        long max_count = 0;\n        string max_letter\
    \ = \"\";\n        foreach (string letter in test.Split(' ')) {\n            if\
    \ (result.ContainsKey(letter)) {\n                result[letter]++;\n        \
    \    } else {\n                result[letter] = 1;\n            }\n          \
    \  if (result[letter] > max_count) {\n                max_count = result[letter];\n\
    \                max_letter = letter;\n            }\n        }\n        Dictionary<string,long>\
    \ result2 = new Dictionary<string,long>();\n        foreach (string letter in\
    \ result.Keys) {\n            if (result[letter] == max_count) {\n           \
    \     result2[letter] = max_count;\n            }\n        }\n        return result2;",
  "        var dict = new Dictionary<string,long>();\n        foreach (var l in test.Split(\"\
    \ \")) {\n            if (dict.ContainsKey(l)) {\n                dict[l]++;\n\
    \            } else {\n                dict[l] = 1;\n            }\n        }\n\
    \        var max = dict.Values.Max();\n        var filtered = dict.Where(x =>\
    \ x.Value == max).ToDictionary(x => x.Key, x => x.Value);\n        return filtered;",
  "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      long highest_count = 0;\n        foreach (string letter in test.Split(\"\
    \ \")) {\n            long count = 0;\n            if (histogram.ContainsKey(letter))\
    \ {\n                count = histogram[letter];\n            }\n            count\
    \ += 1;\n            histogram[letter] = count;\n            if (count > highest_count)\
    \ {\n                highest_count = count;\n            }\n        }\n      \
    \  return histogram.Where(x => x.Value == highest_count).ToDictionary(x => x.Key,\
    \ x => x.Value);", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        string[] splitTest = test.Split(' ');\n        foreach (string letter\
    \ in splitTest) {\n            if (histogram.ContainsKey(letter)) {\n        \
    \        histogram[letter]++;\n            } else {\n                histogram.Add(letter,\
    \ 1L);\n            }\n        }\n        return histogram;", "        // The\
    \ idea here is to use the LINQ Aggregate() function\n        // to create a dictionary\
    \ that maps from each letter to\n        // the count of that letter.\n      \
    \  // The second argument to Aggregate() is an anonymous function\n        //\
    \ which takes in the accumulated value and the next value,\n        // and returns\
    \ a new accumulated value.\n        // The first argument to Aggregate() is the\
    \ initial value,\n        // which in this case is an empty dictionary.\n    \
    \    return test.Split(' ').Aggregate(new Dictionary<string,long>(), (c,k) =>\
    \ {\n            // Get the count of the current letter\n            long count\
    \ = 0;\n            c.TryGetValue(k, out count);\n            // Update the count\
    \ and add the letter if it's not already in the dictionary\n            count++;\n\
    \            if (!c.ContainsKey(k)) {\n                c.Add(k, count);\n    \
    \        } else {\n                c[k] = count;\n            }\n            return\
    \ c;\n        });", "        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1L;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        return counts.Where(entry => entry.Value == max).ToDictionary(x => x.Key,\
    \ x => x.Value);", "        var dic = new Dictionary<string,long>();\n       \
    \ var cnt = 0L;\n        foreach (var c in test.Split(' ')) {\n            if\
    \ (dic.ContainsKey(c)) {\n                dic[c] += 1L;\n            } else {\n\
    \                dic[c] = 1L;\n            }\n            cnt = Math.Max(cnt,\
    \ dic[c]);\n        }\n        return dic.Where(kv => kv.Value == cnt).ToDictionary(kv\
    \ => kv.Key, kv => kv.Value);", "        // Your code here\n        return null;",
  "        var ret = new Dictionary<string,long>();\n        return ret;", "     \
    \   Dictionary<string,long> res = new Dictionary<string,long>();\n        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        foreach (var i in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(i)) {\n                dict[i] += 1;\n\
    \            } else {\n                dict[i] = 1;\n            }\n        }\n\
    \        long max = 0;\n        foreach (var i in dict) {\n            if (i.Value\
    \ > max) {\n                max = i.Value;\n            }\n        }\n       \
    \ foreach (var i in dict) {\n            if (i.Value == max) {\n             \
    \   res[i.Key] = i.Value;\n            }\n        }\n        return res;", '        throw
    new NotImplementedException();', "        var res = new Dictionary<string,long>();\n\
    \        var s = test.Split(' ');\n        var max = 0L;\n        foreach (var\
    \ x in s) {\n            if (res.ContainsKey(x)) {\n                res[x]++;\n\
    \            } else {\n                res[x] = 1;\n            }\n          \
    \  if (res[x] > max) {\n                max = res[x];\n            }\n       \
    \ }\n        var ret = new Dictionary<string,long>();\n        foreach (var pair\
    \ in res) {\n            if (pair.Value == max) {\n                ret[pair.Key]\
    \ = pair.Value;\n            }\n        }\n        return ret;", "        var\
    \ histogram = new Dictionary<string,long>();\n        var items = test.Split('\
    \ ');\n        var counts = new Dictionary<string,int>();\n        var maxCount\
    \ = 0;\n        foreach (var item in items) {\n            if (counts.ContainsKey(item))\
    \ {\n                counts[item] += 1;\n            } else {\n              \
    \  counts[item] = 1;\n            }\n            if (counts[item] > maxCount)\
    \ {\n                maxCount = counts[item];\n            }\n        }\n    \
    \    foreach (var kv in counts) {\n            if (kv.Value == maxCount) {\n \
    \               histogram[kv.Key] = kv.Value;\n            }\n        }\n    \
    \    return histogram;", "        // Use dictionary to store counts.\n       \
    \ Dictionary<string,long> dict = new Dictionary<string,long>();\n        string[]\
    \ vals = test.Split(' ');\n        foreach (string s in vals) {\n            if\
    \ (dict.ContainsKey(s)) {\n                dict[s] += 1;\n            } else {\n\
    \                dict[s] = 1;\n            }\n        }\n        // Find max count.\n\
    \        long max = 0;\n        foreach (long l in dict.Values) {\n          \
    \  if (l > max) {\n                max = l;\n            }\n        }\n      \
    \  // Return those with highest count.\n        return dict.Where(x => x.Value\
    \ == max).ToDictionary(x => x.Key, x => x.Value);", "        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        long count = 0;\n        long\
    \ max = 0;\n        foreach (string i in test.Split(' ')) {\n            if (dict.ContainsKey(i))\
    \ {\n                count = dict[i];\n                count++;\n            \
    \    dict[i] = count;\n            } else {\n                dict.Add(i, 1);\n\
    \            }\n            if (count > max) {\n                max = count;\n\
    \            }\n        }\n        Dictionary<string,long> ret = new Dictionary<string,long>();\n\
    \        foreach (string i in dict.Keys) {\n            if (dict[i] == max) {\n\
    \                ret.Add(i, max);\n            }\n        }\n        return ret;",
  "        // TODO: write your code here\n        return null;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        return result;", "        //\
    \ Get the occurrence for each letter.\n        string[] elements = test.Split('\
    \ ');\n        Dictionary<string, long> dic = new Dictionary<string, long>();\n\
    \        foreach (string element in elements) {\n            if (dic.ContainsKey(element))\
    \ {\n                dic[element]++;\n            } else {\n                dic[element]\
    \ = 1;\n            }\n        }\n        // Find the maximum occurrence.\n  \
    \      long max_occurrence = 0;\n        foreach (KeyValuePair<string, long> kvp\
    \ in dic) {\n            if (kvp.Value > max_occurrence) {\n                max_occurrence\
    \ = kvp.Value;\n            }\n        }\n        // Filter the letters that are\
    \ not the maximum occurrence.\n        Dictionary<string, long> filtered_dic =\
    \ new Dictionary<string, long>();\n        foreach (KeyValuePair<string, long>\
    \ kvp in dic) {\n            if (kvp.Value == max_occurrence) {\n            \
    \    filtered_dic[kvp.Key] = kvp.Value;\n            }\n        }\n        return\
    \ filtered_dic;", "        // Your implementation goes here.\n        // (Don't\
    \ forget to update the following line)\n        throw new NotImplementedException();",
  "        var d = new Dictionary<string,long>();\n        var keys = new List<string>();\n\
    \        foreach (var l in test.Split(' ')) {\n            if (d.ContainsKey(l))\
    \ {\n                d[l] += 1;\n            } else {\n                d[l] =\
    \ 1;\n                keys.Add(l);\n            }\n        }\n        var max\
    \ = 0L;\n        foreach (var k in keys) {\n            if (d[k] > max) max =\
    \ d[k];\n        }\n        var nd = new Dictionary<string,long>();\n        foreach\
    \ (var k in keys) {\n            if (d[k] == max) nd[k] = d[k];\n        }\n \
    \       return nd;", "        var r = new Dictionary<string,long>();\n       \
    \ foreach (var c in test.Split(' ')) {\n            long count;\n            if\
    \ (r.TryGetValue(c, out count)) {\n                r[c] = count + 1;\n       \
    \     } else {\n                r[c] = 1;\n            }\n        }\n        return\
    \ r;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test == \"\") {\n            return result;\n        }\n        string[]\
    \ splitted = test.Split(' ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        Dictionary<long, List<string>> occurrences = new Dictionary<long, List<string>>();\n\
    \        foreach (string s in splitted) {\n            if (counts.ContainsKey(s))\
    \ {\n                counts[s]++;\n            } else {\n                counts[s]\
    \ = 1;\n            }\n        }\n        foreach (KeyValuePair<string,long> kv\
    \ in counts) {\n            if (occurrences.ContainsKey(kv.Value)) {\n       \
    \         occurrences[kv.Value].Add(kv.Key);\n            } else {\n         \
    \       occurrences[kv.Value] = new List<string>(){kv.Key};\n            }\n \
    \       }\n        List<long> occurenceslist = new List<long>(occurrences.Keys);\n\
    \        occurenceslist.Sort();\n        occurenceslist.Reverse();\n        foreach\
    \ (long i in occurenceslist) {\n            foreach (string s in occurrences[i])\
    \ {\n                result[s] = i;\n            }\n        }\n        return\
    \ result;", "        var hash = new Dictionary<string,long>();\n        var max\
    \ = 0L;\n        foreach (var i in test.Split(' ')) {\n            if (hash.ContainsKey(i))\
    \ {\n                hash[i]++;\n            } else {\n                hash[i]\
    \ = 1;\n            }\n            if (hash[i] > max) {\n                max =\
    \ hash[i];\n            }\n        }\n        return hash.Where(x => x.Value ==\
    \ max).ToDictionary(x => x.Key, x => x.Value);", "        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        if (test.Length == 0) {\n   \
    \         return dict;\n        }\n        foreach (var val in test.Split(' '))\
    \ {\n            if (dict.ContainsKey(val)) {\n                dict[val]++;\n\
    \            } else {\n                dict[val] = 1;\n            }\n       \
    \ }\n        var max = dict.Values.Max();\n        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach (var val in dict) {\n    \
    \        if (val.Value == max) {\n                result[val.Key] = val.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        // find the most common value\n\
    \        // build a dictionary to store key value pairs\n        // foreach through\
    \ each word in test\n        // search dictionary for key\n        // if exists,\
    \ add 1 to value\n        // if does not exist, add key to dictionary with value\
    \ 1\n        foreach (string word in test.Split(\" \")) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result.Add(word,\
    \ 1);\n            }\n        }\n        Dictionary<string,long> result2 = new\
    \ Dictionary<string,long>();\n        long mostOccurences = 0;\n        // foreach\
    \ through dictionary and find the most occurences and use that as a reference\
    \ value\n        foreach (KeyValuePair<string,long> entry in result) {\n     \
    \       if (entry.Value > mostOccurences) {\n                mostOccurences =\
    \ entry.Value;\n            }\n        }\n        // foreach through dictionary\
    \ and compare values to mostOccurences\n        // if equal, add to result2 dictionary\n\
    \        foreach (KeyValuePair<string,long> entry in result) {\n            if\
    \ (entry.Value == mostOccurences) {\n                result2.Add(entry.Key, entry.Value);\n\
    \            }\n        }\n        return result2;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        // Write your code here\n \
    \       var letters = test.Split(' ');\n        var letterFreq = new Dictionary<string,\
    \ long>();\n        foreach (var letter in letters) {\n            if (letter.Length\
    \ > 0) {\n                if (letterFreq.ContainsKey(letter)) {\n            \
    \        letterFreq[letter]++;\n                } else {\n                   \
    \ letterFreq[letter] = 1;\n                }\n            }\n        }\n     \
    \   long max = letterFreq.Values.Max();\n        foreach (var item in letterFreq)\
    \ {\n            if (item.Value == max) {\n                result[item.Key] =\
    \ item.Value;\n            }\n        }\n        return result;", "        //\
    \ `test` is a `string` object. You can iterate over its characters using\n   \
    \     // a range-based for-loop:\n        //\n        // ```c++\n        // for\
    \ (char c : test) {\n        //   // `c` is a character (char)\n        // }\n\
    \        // ```\n        //\n        // This is equivalent to the following C#\
    \ code:\n        //\n        // ```c#\n        // foreach (char c in test) {\n\
    \        //   // `c` is a character (char)\n        // }\n        // ```\n   \
    \     //\n        // The C# equivalent of an std::unordered_map<string,long> is\
    \ a\n        // `Dictionary<string,long>`:\n        //\n        // ```c#\n   \
    \     // var a = new Dictionary<string,long>();\n        // a[\"hello\"] = 42L;\
    \ // `42L` is a long\n        // long b = a[\"hello\"];\n        // ```\n    \
    \    //\n        // You can append a string to another string using the `+=` operator:\n\
    \        //\n        // ```c#\n        // string a = \"hello\";\n        // a\
    \ += \" world\";\n        // // `a` is now `\"hello world\"`\n        // ```\n\
    \        //\n        // Write your code below:\n        var dict = new Dictionary<string,\
    \ long>();\n        foreach (char c in test)\n        {\n            if (dict.ContainsKey(c.ToString()))\n\
    \            {\n                dict[c.ToString()]++;\n            }\n       \
    \     else\n            {\n                dict[c.ToString()] = 1;\n         \
    \   }\n        }\n        // This variable will be automatically filled with\n\
    \        // the test's verdict (SUCCESS/FAIL). Do not modify it.\n        var\
    \ verdict = \"NEUTRAL\";\n        // Your code ends here.\n        return dict;",
  "        var dict = new Dictionary<string,long>();\n        return dict;", "   \
    \     var d = new Dictionary<string,long>();\n        if (test.Length == 0) {\n\
    \            return d;\n        }\n        var a = test.Split(\" \");\n      \
    \  foreach (var s in a) {\n            if (d.ContainsKey(s)) {\n             \
    \   d[s]++;\n            } else {\n                d[s] = 1;\n            }\n\
    \        }\n        var max = d.Values.Max();\n        var l = new List<string>();\n\
    \        foreach (var s in d.Keys) {\n            if (d[s] == max) {\n       \
    \         l.Add(s);\n            }\n        }\n        var res = new Dictionary<string,long>();\n\
    \        foreach (var s in l) {\n            res[s] = max;\n        }\n      \
    \  return res;", "        Dictionary<string,long> dictionary = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (!dictionary.ContainsKey(word)) {\n                dictionary.Add(word,\
    \ 1L);\n            } else {\n                dictionary[word] += 1L;\n      \
    \      }\n        }\n        // Debug.WriteLine(\"dictionary: \" + (dictionary.ToString()));\n\
    \        Dictionary<string,long> maxDictionary = new Dictionary<string,long>();\n\
    \        long maxCount = 0L;\n        foreach (KeyValuePair<string,long> pair\
    \ in dictionary) {\n            long count = pair.Value;\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxDictionary.Clear();\n\
    \                maxDictionary.Add(pair.Key, pair.Value);\n            } else\
    \ if (count == maxCount) {\n                maxDictionary.Add(pair.Key, pair.Value);\n\
    \            }\n        }\n        return maxDictionary;", "        var dic =\
    \ new Dictionary<string,long>();\n        if(test.Length == 0) return dic;\n \
    \       var letters = test.Split(' ');\n        var count = 0L;\n        foreach(var\
    \ letter in letters) {\n            if(dic.ContainsKey(letter)) {\n          \
    \      dic[letter] += 1L;\n            } else {\n                dic[letter] =\
    \ 1L;\n            }\n            count = Math.Max(count, dic[letter]);\n    \
    \    }\n        var newDic = new Dictionary<string,long>();\n        foreach(var\
    \ d in dic) {\n            if(d.Value == count) newDic[d.Key] = d.Value;\n   \
    \     }\n        return newDic;", "        Dictionary<string,long> dict = new\
    \ Dictionary<string,long>();\n        string[] words = test.Split(' ');\n    \
    \    foreach (string word in words) {\n            if (dict.ContainsKey(word))\
    \ {\n                dict[word] += 1;\n            } else {\n                dict[word]\
    \ = 1;\n            }\n        }\n        return dict;", "        // TODO\n  \
    \      return new Dictionary<string,long>();", '        return new Dictionary<string,long>();',
  "        if (test == \"\") return new Dictionary<string,long>();\n        var lookup\
    \ = new Dictionary<string,long>();\n        foreach (var c in test.Split(' '))\
    \ {\n            long count;\n            if (lookup.TryGetValue(c, out count))\
    \ {\n                lookup[c] = count + 1;\n            } else {\n          \
    \      lookup[c] = 1;\n            }\n        }\n        var max = lookup.Values.Max();\n\
    \        var h = new Dictionary<string,long>();\n        foreach (var c in lookup)\
    \ {\n            if (c.Value == max) h[c.Key] = c.Value;\n        }\n        return\
    \ h;", "        return test.Split(' ').GroupBy(x => x).ToDictionary(x => x.Key,\
    \ x => x.Count());", "        var counts = new Dictionary<string,long>();\n  \
    \      foreach (var c in test.Split(' ')) {\n            if (counts.ContainsKey(c))\
    \ {\n                counts[c]++;\n            } else {\n                counts[c]\
    \ = 1;\n            }\n        }\n        return counts;", "        var groups\
    \ = test.Split(' ').GroupBy(x => x).OrderByDescending(x => x.Count());\n     \
    \   var dict = new Dictionary<string,long>();\n        var max_count = 0;\n  \
    \      foreach (var group in groups) {\n            if (max_count < group.Count())\
    \ {\n                max_count = group.Count();\n                dict.Clear();\n\
    \            }\n            if (max_count == group.Count()) {\n              \
    \  dict.Add(group.Key, group.Count());\n            }\n        }\n        return\
    \ dict;", "        Dictionary<string,long> output = new Dictionary<string,long>();\n\
    \        List<string> items = test.Split(' ').ToList();\n        List<long> counts\
    \ = new List<long>();\n        for (long i = 0; i < items.Count; i++) {\n    \
    \        if (items[(int)i] != \"\") {\n                if (output.ContainsKey(items[(int)i]))\
    \ {\n                    output[items[(int)i]]++;\n                } else {\n\
    \                    output.Add(items[(int)i], 1L);\n                }\n     \
    \       }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ pair in output) {\n            if (pair.Value > max) {\n                max\
    \ = pair.Value;\n            }\n        }\n        Dictionary<string,long> output2\
    \ = new Dictionary<string,long>();\n        foreach (KeyValuePair<string,long>\
    \ pair in output) {\n            if (pair.Value == max) {\n                output2.Add(pair.Key,\
    \ pair.Value);\n            }\n        }\n        return output2;", "        //\
    \ REMOVE the following line, and add your solution instead\n        throw new\
    \ NotImplementedException();", '        return null;', "        return test.Split('\
    \ ').GroupBy(x => x).OrderByDescending(x => x.Count()).First().ToDictionary(x\
    \ => x, x => (long)x.Count());", "        // fill me!\n        return new Dictionary<string,long>();",
  '        throw new NotImplementedException();', "        Dictionary<string,long>\
    \ stats = new Dictionary<string,long>();\n        long max = 0;\n        foreach\
    \ (string letter in test.Split(' ')) {\n            if (stats.ContainsKey(letter))\
    \ {\n                stats[letter] += 1;\n            } else {\n             \
    \   stats[letter] = 1;\n            }\n            if (stats[letter] > max) {\n\
    \                max = stats[letter];\n            }\n        }\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ stats.Keys) {\n            if (stats[letter] == max) {\n                histogram[letter]\
    \ = max;\n            }\n        }\n        return histogram;", "        var dict\
    \ = new Dictionary<string,long>();\n        foreach (var ch in test.Split(' '))\
    \ {\n            if (dict.ContainsKey(ch)) {\n                dict[ch] += 1;\n\
    \            } else {\n                dict[ch] = 1;\n            }\n        }\n\
    \        var maxCnt = dict.Values.Max();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var ch in dict.Keys) {\n            if (dict[ch] == maxCnt)\
    \ {\n                result[ch] = maxCnt;\n            }\n        }\n        return\
    \ result;", "        var d = new Dictionary<string,long>();\n        foreach (string\
    \ s in test.Split(' ')) {\n            if (d.ContainsKey(s)) {\n             \
    \   d[s] += 1;\n            } else {\n                d[s] = 1;\n            }\n\
    \        }\n        long maxVal = d.Aggregate(0L, (acc, kv) => acc < kv.Value\
    \ ? kv.Value : acc);\n        var res = new Dictionary<string,long>();\n     \
    \   foreach (KeyValuePair<string,long> kv in d) {\n            if (kv.Value ==\
    \ maxVal) {\n                res[kv.Key] = kv.Value;\n            }\n        }\n\
    \        return res;", "        var dic = new Dictionary<string,long>();\n   \
    \     string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (dic.ContainsKey(letter)) {\n                dic[letter]++;\n\
    \            } else {\n                dic[letter] = 1;\n            }\n     \
    \   }\n        var max = (long)0;\n        var keys = new List<string>();\n  \
    \      foreach (var kvp in dic) {\n            if (kvp.Value > max) {\n      \
    \          max = kvp.Value;\n                keys.Clear();\n                keys.Add(kvp.Key);\n\
    \            } else if (kvp.Value == max) {\n                keys.Add(kvp.Key);\n\
    \            }\n        }\n        var ret = new Dictionary<string,long>();\n\
    \        foreach (string k in keys) {\n            ret[k] = max;\n        }\n\
    \        return ret;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        List<string> let_keys =\
    \ new List<string>();\n        List<long> let_counts = new List<long>();\n   \
    \     foreach (string letter in letters) {\n            bool has_letter = false;\n\
    \            int letter_index = 0;\n            for (int index = 0; index < let_keys.Count;\
    \ index += 1) {\n                if (letter == let_keys[index]) {\n          \
    \          has_letter = true;\n                    letter_index = index;\n   \
    \                 break;\n                }\n            }\n            if (has_letter)\
    \ {\n                let_counts[letter_index] += 1;\n            } else {\n  \
    \              let_keys.Add(letter);\n                let_counts.Add(1);\n   \
    \         }\n        }\n        long max_count = let_counts.Max();\n        for\
    \ (int index = 0; index < let_keys.Count; index += 1) {\n            if (let_counts[index]\
    \ == max_count) {\n                result.Add(let_keys[index], max_count);\n \
    \           }\n        }\n        return result;", "        // TODO: Fill in the\
    \ code to calculate the histogram and return the appropriate data structure.\n\
    \        Dictionary<string, long> dic = new Dictionary<string, long>();\n    \
    \    string[] letters = test.Split(' ');\n        foreach (string letter in letters)\n\
    \        {\n            if (!dic.ContainsKey(letter))\n            {\n       \
    \         dic.Add(letter, 1);\n            }\n            else\n            {\n\
    \                dic[letter]++;\n            }\n        }\n        return dic;",
  '        throw new Exception("Not implemented");', '        throw new NotImplementedException();',
  '        return new Dictionary<string,long>();', '        return null;', "     \
    \   Dictionary<string,long> res = new Dictionary<string,long>();\n        return\
    \ res;", "        var counts = new Dictionary<string,long>();\n        var letters\
    \ = test.Split(' ');\n        for (int i = 0; i < letters.Length; i++) {\n   \
    \         if (counts.ContainsKey(letters[i])) {\n                counts[letters[i]]++;\n\
    \            } else {\n                counts[letters[i]] = 1;\n            }\n\
    \        }\n        var max = counts.Values.Max();\n        return counts.Where(kvp\
    \ => kvp.Value == max).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);", "   \
    \     Dictionary<string,long> dict = new Dictionary<string,long>();\n        string[]\
    \ split = test.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (string s in split) {\n            if (dict.ContainsKey(s)) {\n\
    \                dict[s]++;\n            } else {\n                dict[s] = 1;\n\
    \            }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        string[] tokens = test.Split('\
    \ ');\n        foreach (string tok in tokens) {\n            if (dict.ContainsKey(tok))\
    \ {\n                dict[tok] += 1;\n            } else {\n                dict[tok]\
    \ = 1;\n            }\n        }\n        long maxVal = dict.Values.Max();\n \
    \       return dict.Where(x => x.Value == maxVal).ToDictionary(x => x.Key, x =>\
    \ x.Value);", '        return new Dictionary<string,long>();', '        return
    new Dictionary<string,long>();', "        Dictionary<string,long> results = new\
    \ Dictionary<string,long>();\n        string[] split = test.Split(new char[] {'\
    \ '}, StringSplitOptions.RemoveEmptyEntries);\n        if (split.Length == 0)\
    \ {\n            return results;\n        }\n        Dictionary<string,long> hist\
    \ = new Dictionary<string,long>();\n        long maxCount = 0;\n        foreach\
    \ (string s in split) {\n            if (hist.ContainsKey(s)) {\n            \
    \    hist[s] += 1;\n            } else {\n                hist[s] = 1;\n     \
    \       }\n            if (hist[s] > maxCount) {\n                maxCount = hist[s];\n\
    \            }\n        }\n        foreach (string key in hist.Keys) {\n     \
    \       if (hist[key] == maxCount) {\n                results[key] = hist[key];\n\
    \            }\n        }\n        return results;", "        var dc = new Dictionary<string,long>();\n\
    \        //Console.WriteLine(test);\n        string[] strings = test.Split(new\
    \ char[] {' '});\n        foreach (string s in strings) {\n            if (dc.ContainsKey(s))\
    \ {\n                dc[s] += 1;\n            } else {\n                dc[s]\
    \ = 1;\n            }\n        }\n        return dc;", "        var dict = new\
    \ Dictionary<string,long>();\n        if (test.Length == 0) {\n            return\
    \ dict;\n        }\n        var words = test.Split(' ');\n        var topCount\
    \ = 1L;\n        foreach (var word in words) {\n            if (dict.ContainsKey(word))\
    \ {\n                dict[word]++;\n            } else {\n                dict[word]\
    \ = 1L;\n            }\n            if (dict[word] > topCount) {\n           \
    \     topCount = dict[word];\n            }\n        }\n        var result = new\
    \ Dictionary<string,long>();\n        foreach (var entry in dict) {\n        \
    \    if (entry.Value == topCount) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        long maxCount = 0;\n   \
    \     foreach (string letter in test.Split(' ')) {\n            if (letter.Length\
    \ == 0) {\n                continue;\n            }\n            long count =\
    \ 1;\n            if (histogram.ContainsKey(letter)) {\n                count\
    \ = histogram[letter] + 1;\n            }\n            histogram[letter] = count;\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \        }\n        }\n        return histogram.Where(kv => kv.Value == maxCount).ToDictionary(kv\
    \ => kv.Key, kv => kv.Value);", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        Dictionary<string,long> ocurr = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (ocurr.ContainsKey(word)) {\n                ocurr[word] +=\
    \ 1;\n            } else {\n                ocurr[word] = 1;\n            }\n\
    \        }\n        long value = 0;\n        foreach (KeyValuePair<string,long>\
    \ item in ocurr) {\n            if (item.Value > value) {\n                value\
    \ = item.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ item in ocurr) {\n            if (item.Value == value) {\n                result[item.Key]\
    \ = item.Value;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ dic = new Dictionary<string,long>();\n        if (test.Length == 0) {\n    \
    \        return dic;\n        }\n        string[] str = test.Split(\" \");\n \
    \       long max = 0;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      if (dic.ContainsKey(str[i])) {\n                dic[str[i]] += 1;\n   \
    \         } else {\n                dic.Add(str[i], 1);\n            }\n     \
    \       if (dic[str[i]] > max) {\n                max = dic[str[i]];\n       \
    \     }\n        }\n        Dictionary<string,long> dic2 = new Dictionary<string,long>();\n\
    \        foreach (var key in dic.Keys) {\n            if (dic[key] == max) {\n\
    \                dic2.Add(key, max);\n            }\n        }\n        return\
    \ dic2;", "        var result = new Dictionary<string,long>();\n        return\
    \ result;", '        return null;', "        Dictionary<string,long> ret = new\
    \ Dictionary<string,long>();\n        if (test == \"\") return ret;\n        string[]\
    \ tests = test.Split();\n        foreach (string t in tests) {\n            if\
    \ (ret.ContainsKey(t)) {\n                ret[t] += 1;\n            } else {\n\
    \                ret[t] = 1;\n            }\n        }\n        long max = ret.Values.Max();\n\
    \        Dictionary<string,long> ret_ = new Dictionary<string,long>();\n     \
    \   foreach (KeyValuePair<string,long> kvp in ret) {\n            if (kvp.Value\
    \ == max) {\n                ret_[kvp.Key] = kvp.Value;\n            }\n     \
    \   }\n        return ret_;", "        // TODO: implement\n        return new\
    \ Dictionary<string,long>();", "        var letters = test.Split(' ');\n     \
    \   Dictionary<string,long> result = new Dictionary<string,long>();\n        var\
    \ longes = 0L;\n        for (int i = 0; i < letters.Length; i++) {\n         \
    \   if (result.ContainsKey(letters[i])) {\n                result[letters[i]]++;\n\
    \            } else {\n                result[letters[i]] = 1L;\n            }\n\
    \            if (result[letters[i]] > longes) {\n                longes = result[letters[i]];\n\
    \            }\n        }\n        foreach (var k in result.Keys.ToList()) {\n\
    \            if (result[k] != longes) {\n                result.Remove(k);\n \
    \           }\n        }\n        return result;", "      var histogram = new\
    \ Dictionary<string,long>();\n      var words = test.Split(' ');\n      foreach\
    \ (var word in words) {\n        if (histogram.ContainsKey(word)) {\n        \
    \  histogram[word]++;\n        } else {\n          histogram[word] = 1;\n    \
    \    }\n      }\n      var max = histogram.Values.Max();\n      return histogram.Where(kvp\
    \ => kvp.Value == max).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);", "   \
    \     var result = new Dictionary<string,long>();\n        if (string.IsNullOrEmpty(test))\
    \ return result;\n        var split = test.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries);\n\
    \        var groups = split.GroupBy(x => x).OrderByDescending(x => x.Count());\n\
    \        var max = groups.First().Count();\n        var filtered = groups.Where(x\
    \ => x.Count() == max);\n        foreach (var group in filtered) {\n         \
    \   result.Add(group.Key, group.Count());\n        }\n        return result;",
  "        var wordList = test.Split(' ');\n        Dictionary<string, long> letterCounts\
    \ = new Dictionary<string, long>();\n        long highestCount = 0;\n        Dictionary<string,\
    \ long> res = new Dictionary<string, long>();\n        foreach (var letter in\
    \ wordList) {\n            if (letterCounts.ContainsKey(letter)) {\n         \
    \       letterCounts[letter]++;\n            } else {\n                letterCounts[letter]\
    \ = 1;\n            }\n            if (letterCounts[letter] > highestCount) {\n\
    \                highestCount = letterCounts[letter];\n            }\n       \
    \ }\n        foreach (var kvp in letterCounts) {\n            if (kvp.Value ==\
    \ highestCount) {\n                res[kvp.Key] = kvp.Value;\n            }\n\
    \        }\n        return res;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        Dictionary<string,long> histogram = new\
    \ Dictionary<string,long>();\n        foreach (var t in test.Split(' '))\n   \
    \     {\n            if (histogram.ContainsKey(t))\n            {\n          \
    \      histogram[t]++;\n            }\n            else\n            {\n     \
    \           histogram.Add(t, 1);\n            }\n        }\n        long max =\
    \ histogram.Values.Max();\n        foreach (var t in histogram)\n        {\n \
    \           if (t.Value == max)\n            {\n                result.Add(t.Key,\
    \ t.Value);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ ret = new Dictionary<string,long>();\n        if (test == \"\") {\n        \
    \    return ret;\n        }\n        string[] split = test.Split(new string[]\
    \ {\" \"}, StringSplitOptions.None);\n        long max = 0;\n        foreach (string\
    \ letter in split) {\n            if (ret.ContainsKey(letter)) {\n           \
    \     ret[letter] += 1;\n            } else {\n                ret[letter] = 1;\n\
    \            }\n            if (ret[letter] > max) {\n                max = ret[letter];\n\
    \            }\n        }\n        Dictionary<string,long> ret2 = new Dictionary<string,long>();\n\
    \        foreach (KeyValuePair<string,long> kvp in ret) {\n            if (kvp.Value\
    \ == max) {\n                ret2[kvp.Key] = kvp.Value;\n            }\n     \
    \   }\n        return ret2;", "        string[] test_split = test.Split(new string[]\
    \ {\" \"}, StringSplitOptions.RemoveEmptyEntries);\n        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        foreach (string c in test_split)\
    \ {\n            if (dict.ContainsKey(c)) {\n                dict[c] += 1;\n \
    \           } else {\n                dict[c] = 1;\n            }\n        }\n\
    \        Dictionary<string,long> result = new Dictionary<string,long>();\n   \
    \     long max = dict.Values.Max();\n        for (int i = 0; i < dict.Count; i++)\
    \ {\n            if (dict.Values.ElementAt(i) == max) {\n                result.Add(dict.Keys.ElementAt(i),\
    \ dict.Values.ElementAt(i));\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   long max = 1;\n        foreach (string s in test.Split(' ')) {\n         \
    \   if (result.ContainsKey(s)) {\n                result[s]++;\n             \
    \   if (result[s] > max) {\n                    max = result[s];\n           \
    \     }\n            } else {\n                result[s] = 1;\n            }\n\
    \        }\n        var res = result.Where(a => a.Value == max).ToDictionary(a\
    \ => a.Key, a => a.Value);\n        return res;", "        var histogram = new\
    \ Dictionary<string,long>();\n        foreach (var letter in test.Split(' '))\
    \ {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]\
    \ += 1;\n            } else {\n                histogram[letter] = 1;\n      \
    \      }\n        }\n        var maxValue = histogram.Max(kvp => kvp.Value);\n\
    \        return histogram.Where(kvp => kvp.Value == maxValue).ToDictionary(kvp\
    \ => kvp.Key, kvp => kvp.Value);", '        throw new NotImplementedException();',
  "        var letterHistogram = new Dictionary<string,long>();\n        var letters\
    \ = test.Split(' ');\n        var maxCount = 0L;\n        foreach (var letter\
    \ in letters) {\n            if (letterHistogram.ContainsKey(letter)) {\n    \
    \            letterHistogram[letter] += 1;\n            } else {\n           \
    \     letterHistogram[letter] = 1;\n            }\n            if (letterHistogram[letter]\
    \ > maxCount) {\n                maxCount = letterHistogram[letter];\n       \
    \     }\n        }\n        foreach (var letter in letterHistogram.Keys.ToList())\
    \ {\n            if (letterHistogram[letter] < maxCount) {\n                letterHistogram.Remove(letter);\n\
    \            }\n        }\n        return letterHistogram;", "        Dictionary<string,long>\
    \ counts = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')) {\n            if (s.Length < 1) continue;\n            if (counts.ContainsKey(s))\
    \ {\n                counts[s] += 1;\n            } else {\n                counts[s]\
    \ = 1;\n            }\n        }\n        long maxCount = 0;\n        Dictionary<string,long>\
    \ maxCountLetters = new Dictionary<string,long>();\n        foreach (KeyValuePair<string,long>\
    \ entry in counts) {\n            if (entry.Value > maxCount) {\n            \
    \    maxCount = entry.Value;\n                maxCountLetters = new Dictionary<string,long>();\n\
    \                maxCountLetters[entry.Key] = entry.Value;\n            } else\
    \ if (entry.Value == maxCount) {\n                maxCountLetters[entry.Key] =\
    \ entry.Value;\n            }\n        }\n        return maxCountLetters;", " \
    \       var dict = new Dictionary<string,long>();\n        string[] items = test.Split('\
    \ ');\n        foreach (string item in items) {\n            if (dict.ContainsKey(item))\n\
    \                dict[item]++;\n            else\n                dict[item] =\
    \ 1;\n        }\n        if (dict.Count == 0) return dict;\n        long maxValue\
    \ = dict.Values.Max();\n        var newDict = new Dictionary<string,long>();\n\
    \        foreach (var key in dict.Keys) {\n            if (dict[key] == maxValue)\
    \ {\n                newDict[key] = maxValue;\n            }\n        }\n    \
    \    return newDict;", "        Dictionary<string,long> hist = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(\" \")) {\n            if (hist.ContainsKey(letter))\
    \ {\n                hist[letter] += 1;\n            } else {\n              \
    \  hist[letter] = 1;\n            }\n        }\n        return hist;", '        return
    null;', "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        List<string> s = test.Split(' ').ToList();\n        return s.GroupBy(x\
    \ => x).ToDictionary(x => x.Key, x => x.Count());", "        Dictionary<string,long>\
    \ res = new Dictionary<string,long>();\n        string[] str_arr = test.Split('\
    \ ');\n        foreach (string s in str_arr) {\n            if (res.ContainsKey(s))\
    \ {\n                res[s]++;\n            } else {\n                res[s] =\
    \ 1;\n            }\n        }\n        Dictionary<string,long> r = new Dictionary<string,long>();\n\
    \        long m = 0;\n        foreach (KeyValuePair<string,long> kv in res) {\n\
    \            if (kv.Value > m) {\n                m = kv.Value;\n            \
    \    r.Clear();\n                r[kv.Key] = kv.Value;\n            } else if\
    \ (kv.Value == m) {\n                r[kv.Key] = kv.Value;\n            }\n  \
    \      }\n        return r;", "        var hist = new Dictionary<string,long>();\n\
    \        var words = test.Split(' ');\n        foreach (var word in words) {\n\
    \            if (hist.ContainsKey(word)) {\n                hist[word] += 1;\n\
    \            } else {\n                hist[word] = 1;\n            }\n      \
    \  }\n        return hist;", "        Dictionary<string,long> dict = new Dictionary<string,long>();\n\
    \        string[] strings = test.Split(' ');\n        long max_count = 0;\n  \
    \      foreach (string s in strings) {\n            if (s.Length > 0) {\n    \
    \            if (dict.ContainsKey(s)) {\n                    dict[s] += 1;\n \
    \               } else {\n                    dict[s] = 1;\n                }\n\
    \                if (dict[s] > max_count) {\n                    max_count = dict[s];\n\
    \                }\n            }\n        }\n        // Construct the result\n\
    \        Dictionary<string,long> result = new Dictionary<string,long>();\n   \
    \     foreach (KeyValuePair<string,long> pair in dict) {\n            if (pair.Value\
    \ == max_count) {\n                result[pair.Key] = pair.Value;\n          \
    \  }\n        }\n        return result;", "        var counts = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (counts.ContainsKey(c)) {\n                counts[c]++;\n           \
    \ } else {\n                counts[c] = 1;\n            }\n            if (counts[c]\
    \ > max) {\n                max = counts[c];\n            }\n        }\n     \
    \   var result = new Dictionary<string,long>();\n        foreach (var kv in counts)\
    \ {\n            if (kv.Value == max) {\n                result[kv.Key] = kv.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ res = new Dictionary<string,long>();\n        foreach (var c in test.Split())\
    \ {\n            if (res.ContainsKey(c)) {\n                res[c]++;\n      \
    \      } else {\n                res[c] = 1;\n            }\n        }\n     \
    \   return res;", "        var dict = new Dictionary<string,long>();\n       \
    \ var counts = new Dictionary<string,long>();\n        var max = 0L;\n       \
    \ foreach (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c))\n\
    \                dict[c]++;\n            else\n                dict[c] = 1;\n\
    \            if (dict[c] > max)\n                max = dict[c];\n        }\n \
    \       foreach (var d in dict) {\n            if (d.Value == max)\n         \
    \       counts[d.Key] = d.Value;\n        }\n        return counts;", "      \
    \  // TODO: Implement this method\n        // Remove this throw statement when\
    \ you are ready to implement\n        //throw new NotImplementedException();\n\
    \        Dictionary<string, long> dic = new Dictionary<string, long>();\n    \
    \    Dictionary<string, long> dic_out = new Dictionary<string, long>();\n    \
    \    string[] str_split = test.Split(' ');\n        if (str_split.Length == 0)\n\
    \        {\n            return dic_out;\n        }\n        foreach (string word\
    \ in str_split)\n        {\n            if (dic.ContainsKey(word))\n         \
    \   {\n                dic[word]++;\n            }\n            else\n       \
    \     {\n                dic.Add(word, 1);\n            }\n        }\n       \
    \ long max = 0;\n        foreach (var d in dic)\n        {\n            if (d.Value\
    \ >= max)\n            {\n                max = d.Value;\n            }\n    \
    \    }\n        foreach (var d in dic)\n        {\n            if (d.Value ==\
    \ max)\n            {\n                dic_out.Add(d.Key, d.Value);\n        \
    \    }\n        }\n        return dic_out;", '        return new Dictionary<string,long>();',
  "        Dictionary<string,long> ret = new Dictionary<string,long>();\n        string[]\
    \ s = test.Split(' ');\n        for (int i = 0; i < s.Length; i++) {\n       \
    \     if (ret.ContainsKey(s[i])) {\n                ret[s[i]]++;\n           \
    \ } else {\n                ret.Add(s[i], 1L);\n            }\n        }\n   \
    \     return ret;", "        Dictionary<string,long> ret = new Dictionary<string,long>();\n\
    \        long max = 0;\n        string[] letters = test.Split(' ');\n        Dictionary<string,long>\
    \ count = new Dictionary<string,long>();\n        foreach (string letter in letters)\
    \ {\n            long cur;\n            if (count.TryGetValue(letter, out cur))\
    \ {\n                count[letter] = cur + 1;\n            } else {\n        \
    \        count[letter] = 1;\n            }\n            if (max < count[letter])\
    \ {\n                max = count[letter];\n            }\n        }\n        foreach\
    \ (KeyValuePair<string,long> letter in count) {\n            if (letter.Value\
    \ == max) {\n                ret[letter.Key] = letter.Value;\n            }\n\
    \        }\n        return ret;", "        var dic = new Dictionary<string,long>();\n\
    \        var letters = test.Split(' ');\n        foreach (var letter in letters)\
    \ {\n            if (dic.ContainsKey(letter)) {\n                dic[letter] +=\
    \ 1;\n            } else {\n                dic[letter] = 1;\n            }\n\
    \        }\n        var result = new Dictionary<string,long>();\n        var maxValue\
    \ = dic.Aggregate((a, b) => a.Value > b.Value ? a : b).Value;\n        foreach\
    \ (var item in dic) {\n            if (item.Value == maxValue) {\n           \
    \     result[item.Key] = item.Value;\n            }\n        }\n        return\
    \ result;", "        // Add your code here.\n        Dictionary<string, long>\
    \ dictionary = new Dictionary<string, long>();\n        foreach (string c in test.Split(\"\
    \ \"))\n        {\n            if (dictionary.ContainsKey(c))\n            {\n\
    \                dictionary[c] += 1;\n            }\n            else\n      \
    \      {\n                dictionary.Add(c, 1);\n            }\n        }\n  \
    \      return dictionary;", "        return test.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)\n\
    \          .GroupBy(x => x)\n          .Select(g => new KeyValuePair<string, long>(g.Key,\
    \ g.Count()))\n          .ToDictionary(x => x.Key, x => x.Value);", "        Dictionary<string,long>\
    \ d = new Dictionary<string,long>();\n        Dictionary<string,long> h = new\
    \ Dictionary<string,long>();\n        foreach (string c in test.Split(' ')) {\n\
    \            if (h.ContainsKey(c)) {\n                h[c]++;\n            } else\
    \ {\n                h[c] = 1;\n            }\n        }\n        long max = 0;\n\
    \        foreach (string c in h.Keys) {\n            if (h[c] > max) {\n     \
    \           max = h[c];\n            }\n        }\n        foreach (string c in\
    \ h.Keys) {\n            if (h[c] == max) {\n                d[c] = h[c];\n  \
    \          }\n        }\n        return d;", "        var histogram = new Dictionary<string,long>();\n\
    \        foreach (var ch in test.Split(' ')) {\n            if (histogram.ContainsKey(ch))\
    \ {\n                histogram[ch]++;\n            } else {\n                histogram[ch]\
    \ = 1;\n            }\n        }\n        var maxCount = histogram.Values.Max();\n\
    \        var maxItems = histogram.Where(e => e.Value == maxCount).ToDictionary(e\
    \ => e.Key, e => e.Value);\n        return maxItems;", '        return new Dictionary<string,long>();',
  "        // add your code here\n        return null;", "        string[] split =\
    \ test.Split(' ');\n        Dictionary<string, long> count = new Dictionary<string,\
    \ long>();\n        List<string> max = new List<string>();\n        long maxVal\
    \ = 0;\n        foreach (string s in split) {\n            if (count.ContainsKey(s))\
    \ {\n                count[s] += 1;\n            } else {\n                count[s]\
    \ = 1;\n            }\n            if (count[s] > maxVal) {\n                maxVal\
    \ = count[s];\n                max.Clear();\n                max.Add(s);\n   \
    \         } else if (count[s] == maxVal) {\n                max.Add(s);\n    \
    \        }\n        }\n        Dictionary<string, long> solution = new Dictionary<string,\
    \ long>();\n        foreach (string s in max) {\n            solution[s] = maxVal;\n\
    \        }\n        return solution;", "        Dictionary<string,long> rv = new\
    \ Dictionary<string,long>();\n        string[] words = test.Split(new char[] {'\
    \ '}, StringSplitOptions.RemoveEmptyEntries);\n        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        long maxCount = long.MinValue;\n\
    \        foreach (string word in words) {\n            if (dict.ContainsKey(word))\
    \ {\n                dict[word]++;\n            } else {\n                dict[word]\
    \ = 1;\n            }\n            maxCount = Math.Max(maxCount, dict[word]);\n\
    \        }\n        if (maxCount == long.MinValue) {\n            return rv;\n\
    \        }\n        foreach (string word in dict.Keys) {\n            if (dict[word]\
    \ == maxCount) {\n                rv[word] = maxCount;\n            }\n      \
    \  }\n        return rv;", "        var groups = test.Split(' ').GroupBy(x =>\
    \ x);\n        var dict = new Dictionary<string,long>();\n        var max = 0L;\n\
    \        foreach (var group in groups) {\n            var count = group.Count();\n\
    \            if (count > max) {\n                max = count;\n              \
    \  dict.Clear();\n            }\n            if (count == max) {\n           \
    \     dict.Add(group.Key, count);\n            }\n        }\n        return dict;",
  "        string[] split = test.Split(' ');\n        Dictionary<string,long> ret\
    \ = new Dictionary<string,long>();\n        long count = 0;\n        for (int\
    \ i = 0; i < split.Length; i++) {\n            if (ret.ContainsKey(split[i]))\
    \ {\n                ret[split[i]] += 1;\n            } else {\n             \
    \   ret[split[i]] = 1;\n            }\n            if (ret[split[i]] > count)\
    \ {\n                count = ret[split[i]];\n            }\n        }\n      \
    \  Dictionary<string,long> keyval = new Dictionary<string,long>();\n        foreach\
    \ (KeyValuePair<string,long> pair in ret) {\n            if (pair.Value == count)\
    \ {\n                keyval[pair.Key] = pair.Value;\n            }\n        }\n\
    \        return keyval;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] tokens = test.Split(' ');\n        long count = 0;\n       \
    \ string item = \"\";\n        foreach (string token in tokens) {\n          \
    \  if (result.ContainsKey(token)) {\n                result[token]++;\n      \
    \      } else {\n                result.Add(token, 1);\n            }\n      \
    \  }\n        return result;", '        return null;', "        var m = new Dictionary<string,long>();\n\
    \        foreach (var c in test.Split(' '))\n            if (m.ContainsKey(c))\n\
    \                m[c]++;\n            else\n                m[c] = 1;\n      \
    \  long max = 0;\n        foreach (var kv in m)\n            max = Math.Max(max,\
    \ kv.Value);\n        return m.Where(kv => kv.Value == max).ToDictionary(kv =>\
    \ kv.Key, kv => kv.Value);", '        throw new NotImplementedException();', " \
    \       var dict = new Dictionary<string,long>();\n        var words = test.Split(\"\
    \ \");\n        var length = words.Length;\n        for (var i = 0; i < length;\
    \ i++) {\n            if (dict.ContainsKey(words[i])) {\n                dict[words[i]]\
    \ += 1;\n            } else {\n                dict[words[i]] = 1;\n         \
    \   }\n        }\n        return dict;", '        return null;', "        // Your\
    \ code here\n        throw new NotImplementedException();", "        var result\
    \ = new Dictionary<string,long>();\n        if(test.Length == 0) {\n         \
    \   return result;\n        }\n        string[] chars = test.Split(new char[]\
    \ {' '});\n        int maxCount = 1;\n        for(int i = 0; i < chars.Length;\
    \ i++) {\n            if(!result.ContainsKey(chars[i])) {\n                result.Add(chars[i],\
    \ 1);\n            } else {\n                result[chars[i]]++;\n           \
    \     if(result[chars[i]] > maxCount) {\n                    maxCount = (int)result[chars[i]];\n\
    \                }\n            }\n        }\n        var newResult = new Dictionary<string,long>();\n\
    \        foreach(var pair in result) {\n            if(pair.Value == maxCount)\
    \ {\n                newResult.Add(pair.Key, pair.Value);\n            }\n   \
    \     }\n        return newResult;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        if (test.Length == 0) {\n          \
    \  return result;\n        }\n        string[] parts = test.Split(\" \");\n  \
    \      var letters = parts.GroupBy(x => x);\n        long max = 0;\n        foreach\
    \ (var pair in letters) {\n            if (pair.Count() == max) {\n          \
    \      result.Add(pair.Key, pair.Count());\n            } else if (pair.Count()\
    \ > max) {\n                result.Clear();\n                result.Add(pair.Key,\
    \ pair.Count());\n                max = pair.Count();\n            }\n       \
    \ }\n        return result;", '        return new Dictionary<string,long>();',
  "        // Your code\n        return new Dictionary<string,long>();", '        throw
    new NotImplementedException();', "        Dictionary<string,long> histogram =\
    \ new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        foreach (string word in words) {\n            if (histogram.ContainsKey(word))\
    \ {\n                histogram[word] += 1;\n            } else {\n           \
    \     histogram[word] = 1;\n            }\n        }\n        return histogram;",
  "        // Your Code Here\n        return new Dictionary<string,long>(){};", " \
    \       var result = new Dictionary<string,long>();\n        var counts = new\
    \ Dictionary<string,long>();\n        var characters = test.Split(' ');\n    \
    \    var highest = -1L;\n        foreach (var character in characters) {\n   \
    \         if (counts.ContainsKey(character)) {\n                counts[character]\
    \ += 1;\n            } else {\n                counts[character] = 1;\n      \
    \      }\n            if (counts[character] > highest) {\n                highest\
    \ = counts[character];\n            }\n        }\n        foreach (var key in\
    \ counts.Keys) {\n            if (counts[key] == highest) {\n                result[key]\
    \ = highest;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')) {\n            histogram[letter] = histogram.ContainsKey(letter) ? (histogram[letter]\
    \ + 1) : 1;\n        }\n        long max = histogram.Values.Max();\n        foreach\
    \ (var pair in histogram) {\n            if (pair.Value == max) {\n          \
    \      result[pair.Key] = pair.Value;\n            }\n        }\n        return\
    \ result;", "        var words = test.Split(' ');\n        var dict = new Dictionary<string,\
    \ long>();\n        var max_occurence = 0L;\n        foreach (var word in words)\
    \ {\n            if (dict.ContainsKey(word)) {\n                dict[word]++;\n\
    \            } else {\n                dict[word] = 1;\n            }\n      \
    \      max_occurence = Math.Max(max_occurence, dict[word]);\n        }\n     \
    \   var result = new Dictionary<string, long>();\n        foreach (var entry in\
    \ dict) {\n            if (entry.Value == max_occurence) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;", "       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        Dictionary<string,long>\
    \ count = new Dictionary<string,long>();\n        long max = 0;\n        long\
    \ curr = 0;\n        long previous = 0;\n        for (int i = 0; i < test.Length;\
    \ i += 2) {\n            string letter = test.Substring(i, 1);\n            if\
    \ (count.ContainsKey(letter)) {\n                curr = count[letter];\n     \
    \           count[letter] = curr + 1;\n            } else {\n                count[letter]\
    \ = 1;\n            }\n            if (max < count[letter]) {\n              \
    \  max = count[letter];\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ entry in count) {\n            if (entry.Value == max) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;", "      //\
    \ Tuple<Value, Count>[] hist = new Tuple<Value, Count>[26];\n      // char[] letters\
    \ = test.ToCharArray();\n      // foreach (char c in letters) {\n      //   int\
    \ index = c - 'a';\n      //   if (hist[index] == null) {\n      //     hist[index]\
    \ = new Tuple<Value, Count>(c, 0);\n      //   }\n      //   hist[index] = new\
    \ Tuple<Value, Count>(c, hist[index].Item2 + 1);\n      // }\n      //\n     \
    \ // // Gets the maximum count in the Histogram\n      // var maxCount = hist.Select(x\
    \ => x.Item2).Max();\n      //\n      // // Gets the letters that have the maximum\
    \ count\n      // var lettersWithMaxCount = hist.Where(x => x.Item2 == maxCount);\n\
    \      //\n      // var dict = new Dictionary<string,long>();\n      // foreach\
    \ (var letter in lettersWithMaxCount) {\n      //   dict.Add(letter.Item1.ToString(),\
    \ maxCount);\n      // }\n      // return dict;\n      var dict = new Dictionary<string,long>();\n\
    \      var letters = test.Split(' ');\n      var dict2 = new Dictionary<string,int>();\n\
    \      foreach (var letter in letters) {\n        if (dict2.ContainsKey(letter))\
    \ {\n          dict2[letter] += 1;\n        } else {\n          dict2.Add(letter,\
    \ 1);\n        }\n      }\n      // Gets the maximum count in the Histogram\n\
    \      var maxCount = dict2.Select(x => x.Value).Max();\n      // Gets the letters\
    \ that have the maximum count\n      var lettersWithMaxCount = dict2.Where(x =>\
    \ x.Value == maxCount);\n      foreach (var letter in lettersWithMaxCount) {\n\
    \        dict.Add(letter.Key, maxCount);\n      }\n      return dict;", "    \
    \    var occurences = new Dictionary<string,long>();\n        foreach (var letter\
    \ in test.Split(' '))\n        {\n            if (occurences.ContainsKey(letter))\n\
    \            {\n                occurences[letter] += 1;\n            }\n    \
    \        else\n            {\n                occurences[letter] = 1;\n      \
    \      }\n        }\n        var max = occurences.Max(x => x.Value);\n       \
    \ var dict = new Dictionary<string,long>();\n        foreach (var item in occurences)\n\
    \        {\n            if (item.Value == max)\n            {\n              \
    \  dict[item.Key] = item.Value;\n            }\n        }\n        return dict;",
  "        var dic = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (dic.ContainsKey(c)) {\n                dic[c]++;\n  \
    \          } else {\n                dic[c] = 1;\n            }\n        }\n \
    \       var max = dic.Values.Max();\n        var keys = new List<string>();\n\
    \        foreach (var k in dic.Keys) {\n            if (dic[k] == max) {\n   \
    \             keys.Add(k);\n            }\n        }\n        var rtn = new Dictionary<string,long>();\n\
    \        foreach (var k in keys) {\n            rtn[k] = max;\n        }\n   \
    \     return rtn;", "        var t = test.Split(' ');\n        Dictionary<string,\
    \ long> d = new Dictionary<string, long>();\n        var l = t.Select(x => new\
    \ { key = x, count = t.Count(y => y == x) }).GroupBy(x => x.count).OrderByDescending(x\
    \ => x.Key).First();\n        foreach (var item in l)\n        {\n           \
    \ d.Add(item.key, item.count);\n        }\n        return d;", "        Dictionary<string,long>\
    \ d = new Dictionary<string,long>();\n        foreach (var ch in test.Split('\
    \ ')) {\n            if (d.ContainsKey(ch)) {\n                d[ch]++;\n    \
    \        } else {\n                d[ch] = 1;\n            }\n        }\n    \
    \    return d;", "        var result = new Dictionary<string,long>();\n      \
    \  var dict = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(letter)) {\n                dict[letter]\
    \ += 1;\n            } else {\n                dict[letter] = 1;\n           \
    \ }\n        }\n        var max = dict.Values.Max();\n        foreach (var letter\
    \ in dict.Keys) {\n            if (dict[letter] == max) {\n                result[letter]\
    \ = max;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        long max = 0;\n        foreach\
    \ (string letter in test.Split(\" \")) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n            if (result[letter] > max) {\n\
    \                max = result[letter];\n            }\n        }\n        Dictionary<string,long>\
    \ retval = new Dictionary<string,long>();\n        foreach (KeyValuePair<string,long>\
    \ pair in result) {\n            if (pair.Value == max) {\n                retval[pair.Key]\
    \ = pair.Value;\n            }\n        }\n        return retval;", "        Dictionary<string,long>\
    \ dict = new Dictionary<string,long>();\n        var tokens = test.Split(' ');\n\
    \        foreach (var token in tokens) {\n            if (dict.ContainsKey(token))\
    \ {\n                dict[token]++;\n            } else {\n                dict[token]\
    \ = 1;\n            }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ d = new Dictionary<string,long>();\n        // ???\n        return d;", "  \
    \      // TODO: Implement this function\n        Dictionary<string, long> result\
    \ = new Dictionary<string, long>();\n        long counter = 0;\n        foreach\
    \ (char letter in test)\n        {\n            if (Char.IsLetter(letter))\n \
    \           {\n                if (result.ContainsKey(letter.ToString()))\n  \
    \              {\n                    result[letter.ToString()]++;\n         \
    \       }\n                else\n                {\n                    result.Add(letter.ToString(),\
    \ 1);\n                }\n            }\n        }\n        return result;", " \
    \       Dictionary<string,long> dict = new Dictionary<string,long>();\n      \
    \  for (int i = 0; i < test.Length; i++) {\n            if (!dict.ContainsKey(test[i].ToString()))\
    \ {\n                dict.Add(test[i].ToString(), 1);\n            } else {\n\
    \                dict[test[i].ToString()] += 1;\n            }\n        }\n  \
    \      return dict;", "        // Your code here\n        var alpha = new Dictionary<string,\
    \ long>();\n        foreach (char c in test) {\n            if (alpha.ContainsKey(c.ToString()))\
    \ {\n                alpha[c.ToString()]++;\n            } else {\n          \
    \      alpha.Add(c.ToString(), 1);\n            }\n        }\n        return alpha;",
  "        Dictionary<string,long> freq = new Dictionary<string,long>();\n       \
    \ test.Trim();\n        if (test == \"\") {\n            return freq;\n      \
    \  }\n        string[] letters = test.Split(' ');\n        int maxCount = 0;\n\
    \        foreach (string letter in letters) {\n            if (freq.ContainsKey(letter))\
    \ {\n                freq[letter] += 1;\n            } else {\n              \
    \  freq[letter] = 1;\n            }\n            if (freq[letter] > maxCount)\
    \ {\n                maxCount = (int)freq[letter];\n            }\n        }\n\
    \        Dictionary<string,long> maxFreq = new Dictionary<string,long>();\n  \
    \      foreach (KeyValuePair<string,long> entry in freq) {\n            if (entry.Value\
    \ == maxCount) {\n                maxFreq[entry.Key] = entry.Value;\n        \
    \    }\n        }\n        return maxFreq;", "        // TODO\n        return\
    \ new Dictionary<string,long>();", "        if (test == \"\") return new Dictionary<string,long>();\n\
    \        Dictionary<string,long> ret = new Dictionary<string,long>();\n      \
    \  foreach (string key in test.Split(' ')) {\n            long entry;\n      \
    \      if (ret.TryGetValue(key, out entry)) {\n                ret[key]++;\n \
    \           } else {\n                ret[key] = 1;\n            }\n        }\n\
    \        long max = ret.Values.Max();\n        return ret.Where(kvp => kvp.Value\
    \ == max).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);", "        // TODO:\
    \ Implement this function as described above.\n        return new Dictionary<string,long>();",
  "        var d = new Dictionary<string,long>();\n        foreach (var s in test.Split('\
    \ ')) {\n            if (d.ContainsKey(s)) {\n                d[s]++;\n      \
    \      } else {\n                d[s] = 1;\n            }\n        }\n       \
    \ var max = d.Aggregate((left, right) => left.Value > right.Value ? left : right).Value;\n\
    \        return d.Where(kv => kv.Value == max).ToDictionary(kv => kv.Key, kv =>\
    \ kv.Value);", "        var d = new Dictionary<string,long>();\n        var s\
    \ = test.Split(' ');\n        foreach (var key in s) {\n            if (d.ContainsKey(key))\
    \ {\n                d[key]++;\n            } else {\n                d[key] =\
    \ 1;\n            }\n        }\n        var max = (from pair in d select pair.Value).Max();\n\
    \        return (from pair in d where pair.Value == max select pair).ToDictionary(pair\
    \ => pair.Key, pair => pair.Value);", "        // Type 1:\n        // var hist\
    \ = new Dictionary<string,long>();\n        // for (int i = 0; i < test.Length;\
    \ i++) {\n        //     if (hist.ContainsKey(test[i].ToString())) {\n       \
    \ //         hist[test[i].ToString()] += 1;\n        //     } else {\n       \
    \ //         hist[test[i].ToString()] = 1;\n        //     }\n        // }\n \
    \       // Type 2:\n        // var hist = new Dictionary<string,long>();\n   \
    \     // foreach (char c in test) {\n        //     if (hist.ContainsKey(c.ToString()))\
    \ {\n        //         hist[c.ToString()] += 1;\n        //     } else {\n  \
    \      //         hist[c.ToString()] = 1;\n        //     }\n        // }\n  \
    \      // Type 3:\n        // var hist = new Dictionary<string,long>();\n    \
    \    // foreach (char c in test) {\n        //     if (hist.ContainsKey(c.ToString()))\
    \ {\n        //         hist[c.ToString()]++;\n        //     } else {\n     \
    \   //         hist[c.ToString()] = 1;\n        //     }\n        // }\n     \
    \   // Type 4:\n        // var hist = new Dictionary<string,long>();\n       \
    \ // foreach (char c in test) {\n        //     if (hist.ContainsKey(c.ToString()))\
    \ {\n        //         hist[c.ToString()]++;\n        //     } else {\n     \
    \   //         hist.Add(c.ToString(), 1);\n        //     }\n        // }\n  \
    \      // Type 5:\n        // var hist = new Dictionary<string,long>();\n    \
    \    // foreach (char c in test) {\n        //     hist[c.ToString()] = hist.ContainsKey(c.ToString())\
    \ ? hist[c.ToString()] + 1 : 1;\n        // }\n        // Type 6:\n        //\
    \ var hist = new Dictionary<string,long>();\n        // foreach (char c in test)\
    \ {\n        //     hist[c.To", "        var dict = new Dictionary<string,long>();\n\
    \        var words = test.Split(new[] {' '}, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (var word in words) {\n            if (dict.ContainsKey(word))\
    \ {\n                dict[word] += 1;\n            } else {\n                dict[word]\
    \ = 1;\n            }\n        }\n        var maxCount = dict.Values.Max();\n\
    \        return dict.Where(x => x.Value == maxCount).ToDictionary(pair => pair.Key,\
    \ pair => pair.Value);", "        var t = new Dictionary<string,long>();\n   \
    \     if (string.IsNullOrEmpty(test)) {\n            return t;\n        }\n  \
    \      var count = 1L;\n        test = test.Trim();\n        var current = test[0];\n\
    \        for (var i = 1; i < test.Length; i++) {\n            if (test[i] == current)\
    \ {\n                count++;\n            } else {\n                t[current.ToString()]\
    \ = count;\n                current = test[i];\n                count = 1;\n \
    \           }\n        }\n        t[current.ToString()] = count;\n        return\
    \ t;", "        // TODO: Complete this function.\n        throw new NotImplementedException();",
  "        // throw new NotImplementedException();\n        return null;", "     \
    \   var res = new Dictionary<string,long>();\n        var mapping = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        // One iteration\n        foreach (var t in test.Split('\
    \ ')) {\n            if (mapping.ContainsKey(t)) {\n                mapping[t]\
    \ += 1;\n            } else {\n                mapping[t] = 1;\n            }\n\
    \            if (mapping[t] > max) {\n                max = mapping[t];\n    \
    \        }\n        }\n        // Second iteration\n        foreach (var p in\
    \ mapping) {\n            if (p.Value == max) {\n                res[p.Key] =\
    \ p.Value;\n            }\n        }\n        return res;", "      var counts\
    \ = new Dictionary<string,long>();\n      foreach (var l in test.Split(' ')) {\n\
    \        counts[l] = counts.GetValueOrDefault(l, 0L) + 1L;\n      }\n      var\
    \ max = counts.Values.Max();\n      var result = new Dictionary<string,long>();\n\
    \      foreach (var item in counts) {\n        if (item.Value == max) {\n    \
    \      result[item.Key] = item.Value;\n        }\n      }\n      return result;",
  "      Dictionary<string,long> result = new Dictionary<string,long>();\n      string[]\
    \ input = test.Split(' ');\n      if (input.Length == 0) {\n        return result;\n\
    \      }\n      Dictionary<string,long> dic = new Dictionary<string,long>();\n\
    \      foreach (string item in input) {\n        if (dic.ContainsKey(item)) {\n\
    \          dic[item]++;\n        } else {\n          dic.Add(item, 1);\n     \
    \   }\n      }\n      long max = dic.Values.Max();\n      foreach (KeyValuePair<string,long>\
    \ pair in dic) {\n        if (pair.Value == max) {\n          result.Add(pair.Key,\
    \ pair.Value);\n        }\n      }\n      return result;", "        if (test ==\
    \ null)\n            throw new ArgumentNullException(\"Please provide a string\
    \ input.\");\n        if (test.Length < 1)\n            return new Dictionary<string,long>();\n\
    \        var testDict = new Dictionary<string,long>();\n        var words = test.Split('\
    \ ');\n        foreach (var word in words) {\n            if (testDict.ContainsKey(word))\n\
    \                testDict[word]++;\n            else\n                testDict.Add(word,\
    \ 1);\n        }\n        var maxCount = testDict.Values.Max();\n        return\
    \ testDict.Where(entry => entry.Value == maxCount).ToDictionary(entry => entry.Key,\
    \ entry => entry.Value);", "        // --- Obfuscated Code ---\n        string[]\
    \ L_a = test.Split(' ');\n        if(L_a.Length == 0) return new Dictionary<string,long>();\n\
    \        Dictionary<string,long> L_m = new Dictionary<string,long>();\n      \
    \  var L_t = L_a.ToList();\n        L_a.ToList().ForEach(x => L_m.Add(x, L_t.FindAll(z\
    \ => z == x).Count));\n        return L_m.Where(x => x.Value == L_m.Values.Max()).ToDictionary(x\
    \ => x.Key, x => x.Value);\n        // --- End of Obfuscated Code ---", "    \
    \    Dictionary<string,long> dict = new Dictionary<string,long>();\n        string[]\
    \ array = test.Split(' ');\n        for (int i = 0; i < array.Length; i++) {\n\
    \            if (dict.ContainsKey(array[i])) {\n                dict[array[i]]++;\n\
    \            } else {\n                dict.Add(array[i], 1);\n            }\n\
    \        }\n        long max = dict.Values.Max();\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (KeyValuePair<string,long>\
    \ kvp in dict) {\n            if (kvp.Value == max) {\n                result.Add(kvp.Key,\
    \ kvp.Value);\n            }\n        }\n        return result;", "        //\
    \ Check for null or empty test strings.\n        if (test == null || test.Length\
    \ == 0) {\n            return new Dictionary<string,long>();\n        }\n    \
    \    // Split on a single space.\n        string[] test_array = test.Split(' ');\n\
    \        // Generate the histogram.\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string s in test_array) {\n\
    \            if (histogram.ContainsKey(s)) {\n                histogram[s]++;\n\
    \            } else {\n                histogram[s] = 1L;\n            }\n   \
    \     }\n        // Find the maximum number of occurences.\n        long max_occurrences\
    \ = 0L;\n        foreach (long count in histogram.Values) {\n            if (count\
    \ > max_occurrences) {\n                max_occurrences = count;\n           \
    \ }\n        }\n        // Remove any keys not equal to the maximum occurences.\n\
    \        List<string> remove_keys = new List<string>();\n        foreach (string\
    \ key in histogram.Keys) {\n            if (histogram[key] != max_occurrences)\
    \ {\n                remove_keys.Add(key);\n            }\n        }\n       \
    \ foreach (string key in remove_keys) {\n            histogram.Remove(key);\n\
    \        }\n        return histogram;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (c.Length == 0) continue;\n            var v = 1L;\n            if (dict.ContainsKey(c))\
    \ {\n                v = dict[c] + 1;\n            }\n            dict[c] = v;\n\
    \            if (v > max) max = v;\n        }\n        var ret = new Dictionary<string,long>();\n\
    \        foreach (var c in dict.Keys) {\n            if (dict[c] == max) ret[c]\
    \ = max;\n        }\n        return ret;", "        string[] tokens = test.Split('\
    \ ');\n        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string t in tokens) {\n            if (histogram.ContainsKey(t))\
    \ {\n                histogram[t]++;\n            } else {\n                histogram[t]\
    \ = 1L;\n            }\n        }\n        long maxOccurence = 0L;\n        foreach\
    \ (KeyValuePair<string,long> entry in histogram) {\n            if (entry.Value\
    \ > maxOccurence) {\n                maxOccurence = entry.Value;\n           \
    \ }\n        }\n        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (KeyValuePair<string,long> entry in histogram) {\n          \
    \  if (entry.Value == maxOccurence) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> tmp\
    \ = new Dictionary<string,long>();\n        long max = 0;\n        string[] split\
    \ = test.Split(' ');\n        foreach (string s in split) {\n            if (tmp.ContainsKey(s))\
    \ {\n                tmp[s]++;\n            } else {\n                tmp[s] =\
    \ 1;\n            }\n            if (tmp[s] > max) {\n                max = tmp[s];\n\
    \            }\n        }\n        foreach (string s in tmp.Keys) {\n        \
    \    if (tmp[s] == max) {\n                result[s] = max;\n            }\n \
    \       }\n        return result;", "        Dictionary<string,long> ans = new\
    \ Dictionary<string,long>();\n        string[] parts = test.Split(new char[] {'\
    \ '}, StringSplitOptions.RemoveEmptyEntries);\n        foreach (string part in\
    \ parts) {\n            if (ans.ContainsKey(part))\n                ans[part]\
    \ += 1;\n            else\n                ans[part] = 1;\n        }\n       \
    \ Dictionary<string,long> ret = new Dictionary<string,long>();\n        long maxCount\
    \ = 0;\n        foreach (string key in ans.Keys) {\n            if (ans[key] >\
    \ maxCount) {\n                maxCount = ans[key];\n                ret.Clear();\n\
    \                ret[key] = ans[key];\n            } else if (ans[key] == maxCount)\
    \ {\n                ret[key] = ans[key];\n            }\n        }\n        return\
    \ ret;", "        var dict = new Dictionary<string,long>();\n        foreach (var\
    \ c in test.Split(\" \")) {\n            if (dict.ContainsKey(c)) {\n        \
    \        dict[c] += 1;\n            } else {\n                dict[c] = 1;\n \
    \           }\n        }\n        var max = dict.Values.Max();\n        var newdict\
    \ = new Dictionary<string,long>();\n        foreach (var c in dict) {\n      \
    \      if (c.Value == max) {\n                newdict[c.Key] = c.Value;\n    \
    \        }\n        }\n        return newdict;", '      return null;']
stop_tokens:
- "\n    }\n"
