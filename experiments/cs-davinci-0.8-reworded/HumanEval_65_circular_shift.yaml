name: HumanEval_65_circular_shift
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Circular shift the digits of the integer x, shift the digits\
  \ right by shift\n    // and return the result as a string.\n    // If shift > number\
  \ of digits, return digits reversed.\n    // >>> CircularShift((12L), (1L))\n  \
  \  // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\")\n    public\
  \ static string CircularShift(long x, long shift) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
  \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
  12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
  \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
  11\")));\n    }\n\n}\n"
completions: ["        if (shift == 0) return x.ToString();\n        int n = 0;\n\
    \        long tmp = x;\n        while (tmp > 0) {\n            n++;\n        \
    \    tmp /= 10;\n        }\n        long ret = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            ret = ret * 10 + (x % 10);\n            x /= 10;\n  \
    \      }\n        if (shift < n) ret = ret / (long)Math.Pow(10, n - shift) + ret\
    \ % (long)Math.Pow(10, n - shift) * (long)Math.Pow(10, shift);\n        return\
    \ ret.ToString();", "        // Take the number of digits, add shift and modularly\
    \ reduce by the same to\n        // get the right circular shift\n        int\
    \ digits = x.ToString().Length;\n        if (shift > digits)\n            return\
    \ Reverse(x.ToString());\n        shift = (shift + digits) % digits;\n       \
    \ return x.ToString().Substring((int)shift) + x.ToString().Substring(0, (int)shift);",
  "        string s = x.ToString();\n        if (shift >= s.Length) {\n          \
    \  return new string(s.Reverse().ToArray());\n        }\n        int l = s.Length;\n\
    \        return s.Substring(l - (int)shift) + s.Substring(0, l - (int)shift);",
  "        string numStr = x.ToString();\n        if (shift >= numStr.Length) {\n\
    \            return new string(numStr.Reverse().ToArray());\n        }\n     \
    \   string front = numStr.Substring(0, (int) shift);\n        string back = numStr.Substring((int)\
    \ shift);\n        return back + front;", "        if (shift > x.ToString().Length)\
    \ {\n            string s = x.ToString();\n            char[] charArray = s.ToCharArray();\n\
    \            Array.Reverse(charArray);\n            return new string(charArray);\n\
    \        }\n        long pow = 1;\n        for (int i = 0; i < shift; i++) {\n\
    \            pow *= 10;\n        }\n        return (x % pow).ToString() + (x /\
    \ pow).ToString();", "        string xs = x.ToString();\n        // If shift >=\
    \ length of x, reverse.\n        if (shift >= xs.Length) {\n            StringBuilder\
    \ xsb = new StringBuilder(xs);\n            xsb.Reverse();\n            return\
    \ xsb.ToString();\n        }\n        string ys = xs.Substring(0, (int)shift);\n\
    \        return xs.Substring((int)shift) + ys;", "        if (shift == 0) {\n\
    \            return x.ToString();\n        }\n        long y = x;\n        long\
    \ pow = 1;\n        while (y >= 10) {\n            y /= 10;\n            pow *=\
    \ 10;\n        }\n        return ((x % pow) * 10 + y).ToString();", "        char[]\
    \ digits = x.ToString().ToCharArray();\n        for (int i = 0; i < shift; i++)\
    \ {\n            char lastDigit = digits[digits.Length - 1];\n            for\
    \ (int j = digits.Length - 1; j > 0; j--) {\n                digits[j] = digits[j\
    \ - 1];\n            }\n            digits[0] = lastDigit;\n        }\n      \
    \  return new string(digits);", "        char[] x_digits = x.ToString().ToCharArray();\n\
    \        if (shift >= x_digits.Length) {\n            Array.Reverse(x_digits);\n\
    \            return new string(x_digits);\n        }\n        else {\n       \
    \     char[] y_digits = new char[x_digits.Length];\n            for (int i = 0;\
    \ i < x_digits.Length; i++) {\n                int y_pos = (i + (int)shift) %\
    \ x_digits.Length;\n                y_digits[y_pos] = x_digits[i];\n         \
    \   }\n            return new string(y_digits);\n        }", "        if (shift\
    \ == 0) {\n            return (x.ToString());\n        }\n        string s = x.ToString();\n\
    \        if (shift > s.Length) {\n            return (new string(s.Reverse().ToArray()));\n\
    \        }\n        s = s.Substring(s.Length - (int)shift, (int)shift) + s.Substring(0,\
    \ s.Length - (int)shift);\n        return (s);", "        long y = x / 10;\n \
    \       long z = x % 10;\n        for (long i = 0; i < shift; i++) {\n       \
    \     long r = z % 10;\n            long q = z / 10;\n            z = y % 10;\n\
    \            y = y / 10;\n            x = r * (long)Math.Pow(10, NumberLength(x))\
    \ + x;\n        }\n        return x.ToString();", "        string s = x.ToString();\n\
    \        if (shift < s.Length) {\n            string prefix = s.Substring(0, (int)shift);\n\
    \            string suffix = s.Substring((int)shift);\n            s = suffix\
    \ + prefix;\n        } else {\n            s = new string(s.Reverse().ToArray());\n\
    \        }\n        return s;", "        // Longest possible number of digits\
    \ (need to store in long to avoid\n        // overflow for really big numbers)\n\
    \        long digits = 18;\n        string s = x.ToString();\n        int len\
    \ = s.Length;\n        shift = shift % len;\n        string a = s.Substring(len\
    \ - (int)shift);\n        string b = s.Substring(0, len - (int)shift);\n     \
    \   return a + b;", "        var s = x.ToString();\n        var digits = s.ToCharArray();\n\
    \        Array.Reverse(digits);\n        if (shift < digits.Length) {\n      \
    \      // Shift digit array around\n            var newArr = new char[digits.Length];\n\
    \            for (var i = 0; i < digits.Length; i++) {\n                newArr[(i\
    \ + shift) % digits.Length] = digits[i];\n            }\n            return new\
    \ string(newArr);\n        } else {\n            return new string(digits);\n\
    \        }", "        var digits = ListOfDigits(x);\n        shift = shift % digits.Count;\n\
    \        if (shift == 0) {\n            return x.ToString();\n        }\n    \
    \    var d = digits.Skip((int)shift).ToList();\n        d.AddRange(digits.Take((int)shift));\n\
    \        return string.Join(\"\", d);", "        var xs = x.ToString();\n    \
    \    if (shift > xs.Length) {\n            return Reverse(xs);\n        }\n  \
    \      var rot = Right(xs, (int)shift);\n        var left = Left(xs, xs.Length\
    \ - (int)shift);\n        return rot + left;", "        int digits = (int)Math.Floor(Math.Log10(x)\
    \ + 1);\n        if (shift > digits) {\n            return new string(x.ToString().Reverse().ToArray());\n\
    \        }\n        string raw = x.ToString();\n        return raw.Substring((int)shift)\
    \ + raw.Substring(0, (int)shift);", "        string s = x.ToString();\n      \
    \  if (shift >= s.Length) {\n            return string.Join(\"\", s.Reverse());\n\
    \        }\n        else {\n            return s.Substring(shift) + s.Substring(0,\
    \ shift);\n        }", "        char[] chars = x.ToString().ToCharArray();\n \
    \       long how_many = shift % chars.Length;\n        if (how_many == 0) return\
    \ x.ToString();\n        string reversed = new string(chars.Reverse().ToArray());\n\
    \        return reversed.Substring((int)how_many) + reversed.Substring(0, (int)how_many);",
  "        if (shift == 0) return x.ToString();\n        if (shift > x.ToString().Length)\
    \ return string.Join(\"\", x.ToString().Reverse());\n        var arr = x.ToString().ToCharArray();\n\
    \        Array.Reverse(arr);\n        var y = long.Parse(new string(arr));\n \
    \       var result = (y / (long)Math.Pow(10, shift)) +\n            ((y % (long)Math.Pow(10,\
    \ shift)) * (long)Math.Pow(10, x.ToString().Length - shift));\n        return\
    \ result.ToString();", "        string s = x.ToString();\n        shift = shift\
    \ % s.Length;\n        shift = s.Length - shift;\n        if (shift == s.Length)\
    \ return s;\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);",
  "        string shiftX = x.ToString();\n        int len = shiftX.Length;\n     \
    \   int digits = (int) (Math.Log10(x) + 1);\n        if (shift >= digits) {\n\
    \            // handle more shifts than there are digits\n            return new\
    \ string(shiftX.Reverse().ToArray());\n        }\n        // shift digits within\
    \ the integer\n        string s = \"\";\n        s += shiftX.Substring(len - (int)\
    \ shift);\n        s += shiftX.Substring(0, len - (int) shift);\n        return\
    \ s;", "        string s = x.ToString();\n        return new string(CircularShift(s.ToCharArray(),\
    \ shift));", "        string s = x.ToString();\n        if (shift > s.Length)\
    \ {\n            string rs = s.ToCharArray().Reverse().Aggregate(\"\", (a, b)\
    \ => a + b);\n            return rs;\n        }\n        string l = s.Substring(0,\
    \ (int)shift);\n        string r = s.Substring((int)shift);\n        return r\
    \ + l;", "        List<char> tmp = Convert.ToString(x).ToList();\n        int\
    \ len = tmp.Count;\n        if (shift == len)\n            return new string(tmp.ToArray());\n\
    \        if (shift > len) {\n            tmp.Reverse();\n            return new\
    \ string(tmp.ToArray());\n        }\n        var output = tmp.GetRange(len - (int)shift,\
    \ (int)shift);\n        output.AddRange(tmp.GetRange(0, len - (int)shift));\n\
    \        return new string(output.ToArray());", "        string y = x.ToString();\n\
    \        if (shift >= y.Length)\n            return new string(y.Reverse().ToArray());\n\
    \        return y.Substring((int)shift) + y.Substring(0, (int)shift);", '        return
    new string(x.ToString().Substring((int)shift) + x.ToString().Substring(0, (int)shift));',
  "        var s = x.ToString();\n        if (shift >= s.Length)\n            return\
    \ new string(s.Reverse().ToArray());\n        var shift_left = s.Substring(0,\
    \ (int)shift);\n        var shift_right = s.Substring((int)shift);\n        return\
    \ shift_right + shift_left;", "        string str = x.ToString();\n        if\
    \ (shift > str.Length) {\n            return new string(str.Reverse().ToArray());\n\
    \        }\n        else {\n            return str.Substring(str.Length - (int)shift)\
    \ + str.Substring(0, str.Length - (int)shift);\n        }", "        string str\
    \ = x.ToString();\n        shift = shift % str.Length;\n        string shifted\
    \ = str.Substring((int)shift) + str.Substring(0, (int)shift);\n        return\
    \ shifted;", "        if (shift == 0) {\n            return x.ToString();\n  \
    \      }\n        string s = x.ToString();\n        int n = s.Length;\n      \
    \  shift = shift % n;\n        if (shift == 0) {\n            return s;\n    \
    \    }\n        // shift left\n        s = s.Substring(n - shift) + s.Substring(0,\
    \ n - shift);\n        return s;", "        if (shift == 0) return x.ToString();\n\
    \        if (shift >= x.ToString().Length) return new string(x.ToString().Reverse().ToArray());\n\
    \        string s = x.ToString();\n        string a = s.Substring(0, (int)(shift));\n\
    \        string b = s.Substring((int)(shift));\n        return b + a;", "    \
    \    string digits = x.ToString();\n        string result = digits;\n        long\
    \ i = 0;\n        while (i < shift) {\n            i++;\n            result =\
    \ result.Substring(1) + result[0];\n        }\n        return result;", "    \
    \    string input = x.ToString();\n        if (shift == 0) return input;\n   \
    \     string shifted;\n        if (shift > input.Length)\n            shifted\
    \ = new string(input.Reverse().ToArray());\n        else\n            shifted\
    \ = input.Substring(input.Length - (int)shift) + input.Substring(0, input.Length\
    \ - (int)shift);\n        // Debug.WriteLine(shifted);\n        return shifted;",
  "        var d = x.ToString().ToCharArray();\n        if (shift >= d.Length) {\n\
    \            Array.Reverse(d);\n            return new string(d);\n        }\n\
    \        var s = d.Skip((int)shift).ToArray();\n        var e = d.Take((int)shift).ToArray();\n\
    \        return new string(s) + new string(e);", "        string digits = x.ToString();\n\
    \        if (shift > digits.Length) {\n            return new string(digits.Reverse().ToArray());\n\
    \        }\n        return digits.Substring((int)shift) + digits.Substring(0,\
    \ (int)shift);", "        if (shift == 0) {\n            return x.ToString();\n\
    \        }\n        char[] digits = x.ToString().ToCharArray();\n        char[]\
    \ r = new char[digits.Length];\n        for (int i = 0; i < digits.Length; i++)\
    \ {\n            r[i] = digits[(i + (int)shift) % digits.Length];\n        }\n\
    \        return new string(r);", "        int s = Math.Max(0, Convert.ToInt32(shift));\n\
    \        if (s < 2) {\n            return x.ToString();\n        } else {\n  \
    \          return new string(x.ToString().Reverse().ToArray());\n        }", " \
    \       var n = (int)BigInteger.Log10(x) + 1;\n        shift %= n;\n        if\
    \ (shift == 0) {\n            return x.ToString();\n        }\n        if (shift\
    \ < 0) {\n            shift += n;\n        }\n        return (x.ToString().Substring(n\
    \ - shift) + x.ToString().Substring(0, n - shift));", "        string s = x.ToString();\n\
    \        shift = shift % s.Length;\n        if (shift == 0) {\n            return\
    \ s;\n        }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);",
  "        if (shift == 0) return x.ToString();\n        long digits = (long)Math.Floor(Math.Log10(x)\
    \ + 1);\n        string xs = x.ToString();\n        if (shift < digits) {\n  \
    \          xs = xs.Substring((int)shift) + xs.Substring(0, (int)shift);\n    \
    \    } else {\n            xs = xs.Reverse().ToString();\n        }\n        return\
    \ xs;", "        return new string(x.ToString().Substring((int)shift).Reverse().ToArray())\
    \ +\n                new string(x.ToString().Substring(0, (int)shift).Reverse().ToArray());",
  "        var str = x.ToString();\n        if (shift < str.Length) {\n          \
    \  var index = str.Length - (int)shift;\n            return str.Substring(index)\
    \ + str.Substring(0, index);\n        } else {\n            return new string(str.Reverse().ToArray());\n\
    \        }", "        if (shift < 0) {\n            throw new System.ArgumentException(\"\
    shift must be non-negative.\");\n        }\n        string s = x.ToString();\n\
    \        if (shift >= s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        return s.Substring(shift) + s.Substring(0, shift);", "   \
    \     int digits = (int)Math.Ceiling(Math.Log10(x));\n        int rotations =\
    \ (int)(shift % digits);\n        if (rotations == 0) return x.ToString();\n \
    \       if (rotations == digits) return Reverse(x.ToString());\n        string\
    \ s = x.ToString();\n        return (s.Substring(rotations) + s.Substring(0, rotations));",
  "        string s = x.ToString();\n        int len = s.Length;\n        shift =\
    \ shift % len;\n        if (shift == 0) return s;\n        if (shift > len) return\
    \ new string(s.Reverse().ToArray());\n        return s.Substring(len - (int)shift)\
    \ + s.Substring(0, len - (int)shift);", "        string s = x.ToString();\n  \
    \      if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);",
  "        string digits = x.ToString();\n        string shifted = digits.Substring((int)shift)\
    \ + digits.Substring(0, (int)shift);\n        return digits.Length == shifted.Length\
    \ ? shifted : new string(shifted.Reverse().ToArray());", "        var s = x.ToString();\n\
    \        shift = shift % s.Length;\n        var xl = s.Length;\n        var y\
    \ = s.Substring((int)shift) + s.Substring(0, (int)shift);\n        var yl = y.Length;\n\
    \        return y;", "        var digits = x.ToString().ToCharArray();\n     \
    \   shift = shift % digits.Length;\n        shift = shift < 0 ? digits.Length\
    \ + shift : shift;\n        return new string(digits.Skip((int)shift).Concat(digits.Take((int)shift)).ToArray());",
  "        shift = shift % (int)Math.Log10(x) + 1;\n        string s = x.ToString();\n\
    \        if (shift >= s.Length) {\n            return string.Join(\"\", s.Reverse());\n\
    \        }\n        return s.Substring(s.Length - (int)shift) + s.Substring(0,\
    \ s.Length - (int)shift);", "        char[] a = x.ToString().ToCharArray();\n\
    \        int size = a.Length;\n        // Convert the integer to a string of digits,\
    \ reversing the order.\n        for (int i = 0; i < size / 2; i++) {\n       \
    \     char temp = a[i];\n            a[i] = a[size - i - 1];\n            a[size\
    \ - i - 1] = temp;\n        }\n        // Shift the digits right by shift modulo\
    \ the number of digits.\n        for (int i = 0; i < shift % size; i++) {\n  \
    \          char temp = a[size - 1];\n            for (int j = size - 1; j > 0;\
    \ j--) {\n                a[j] = a[j - 1];\n            }\n            a[0] =\
    \ temp;\n        }\n        // Convert the result back to a string and return\
    \ it.\n        return new string(a);", "        string digits = x.ToString();\n\
    \        shift = shift % digits.Length;\n        if (shift == 0) {\n         \
    \   return digits;\n        }\n        int start = digits.Length - (int)shift;\n\
    \        return digits.Substring(start) + digits.Substring(0, start);", "    \
    \    var num = (int)Math.Log10(x) + 1;\n        shift = shift % num;\n       \
    \ if (shift == 0) {\n            return x.ToString();\n        }\n        var\
    \ l = (int)(x / Math.Pow(10, shift));\n        var r = (int)(x % Math.Pow(10,\
    \ shift));\n        return (r.ToString() + l.ToString());", "        int ndigits\
    \ = x.ToString().Length;\n        int rshift = (int)(shift % ndigits);\n     \
    \   string xs = x.ToString();\n        if (rshift == 0) return xs;\n        return\
    \ xs.Substring(ndigits - rshift) + xs.Substring(0, ndigits - rshift);", "    \
    \    if (shift <= 0) return x.ToString();\n        string s = x.ToString();\n\
    \        if (shift > s.Length) return new string(s.Reverse().ToArray());\n   \
    \     return s.Substring(s.Length - (int)shift) + s.Substring(0, s.Length - (int)shift);",
  "        string s = x.ToString();\n        if (shift > s.Length) {\n           \
    \ string temp = \"\";\n            for (int i = s.Length - 1; i >= 0; i--) {\n\
    \                temp += s[i];\n            }\n            return temp;\n    \
    \    }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);",
  "        var digits = new List<int>();\n        while (x > 0) {\n            digits.Add((int)(x\
    \ % 10));\n            x /= 10;\n        }\n        while (shift > digits.Count)\n\
    \            shift -= digits.Count;\n        if (shift == digits.Count)\n    \
    \        shift = 0;\n        var shiftedDigits = new List<int>();\n        for\
    \ (int i = digits.Count - shift; i < digits.Count; i++)\n            shiftedDigits.Add(digits[i]);\n\
    \        for (int i = 0; i < digits.Count - shift; i++)\n            shiftedDigits.Add(digits[i]);\n\
    \        var result = new StringBuilder();\n        foreach (var digit in shiftedDigits)\n\
    \            result.Append(digit);\n        return result.ToString();", "    \
    \    string str = x.ToString();\n        string result = str.Substring((int)shift,\
    \ str.Length - (int)shift) + str.Substring(0, (int)shift);\n        if (shift\
    \ > result.Length) {\n            return new string(result.Reverse().ToArray());\n\
    \        }\n        return result;", "        string s = x.ToString();\n     \
    \   shift = shift % s.Length;\n        string a = s.Substring(0, s.Length - (int)shift);\n\
    \        string b = s.Substring(s.Length - (int)shift);\n        return b + a;",
  "        var s = x.ToString();\n        return (shift >= s.Length ? new string(s.Reverse().ToArray())\
    \ : (s.Substring(s.Length - (int)shift) + s.Substring(0, s.Length - (int)shift)));",
  "        string str = x.ToString();\n        long digits = str.Length;\n       \
    \ if (shift == digits) {\n            return str;\n        }\n        else if\
    \ (shift > digits) {\n            return new string(str.Reverse().ToArray());\n\
    \        }\n        else {\n            string str1 = str.Substring(0, (int)shift);\n\
    \            string str2 = str.Substring((int)shift);\n            return str2\
    \ + str1;\n        }", "        string xstring = x.ToString();\n        if (shift\
    \ > xstring.Length)\n            return new string(xstring.Reverse().ToArray());\n\
    \        return xstring.Substring((int)shift) + xstring.Substring(0, (int)shift);",
  "        shift = shift % x.ToString().Length;\n        if (shift == 0) return x.ToString();\n\
    \        return x.ToString().Substring((int)shift) + x.ToString().Substring(0,\
    \ (int)shift);", "        string str = x.ToString();\n        if (shift > str.Length)\
    \ {\n            return new string(str.Reverse().ToArray());\n        }\n    \
    \    return str.Substring((int)shift) + str.Substring(0, (int)shift);", "    \
    \    string s = x.ToString();\n        if (shift > s.Length) {\n            return\
    \ new string(s.Reverse().ToArray());\n        }\n        return s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);", "        var numDigits = (int)Math.Floor(Math.Log10(x)\
    \ + 1);\n        if (shift >= numDigits)\n            return new string(x.ToString().Reverse().ToArray());\n\
    \        var offset = x / (long)Math.Pow(10, shift);\n        var suffix = x %\
    \ (long)Math.Pow(10, shift);\n        return suffix.ToString() + offset.ToString();",
  "        // Handle shifts that are too big.\n        if (shift > NumDigits(x)) {\n\
    \            return ReverseDigits(x);\n        }\n        // Create a reversed\
    \ version of the number.\n        string reversed = ReverseDigits(x);\n      \
    \  // Shift the reversed digits, then reverse them back.\n        return ReverseDigits(Int64.Parse(reversed.Substring((int)shift)));",
  "        int num_digits = (int) Math.Floor(Math.Log10(x) + 1);\n        shift =\
    \ shift % num_digits;\n        if (shift == 0) return x.ToString();\n        if\
    \ (shift < 0) shift += num_digits;\n        var s = new StringBuilder();\n   \
    \     var x_str = x.ToString();\n        for (int i = 0; i < num_digits; i++)\
    \ {\n            s.Append(x_str[(int) ((i + shift) % num_digits)]);\n        }\n\
    \        return s.ToString();", '        return ReverseDigits(RotateRight(x, shift));',
  "        string s = x.ToString();\n        if (shift < s.Length) {\n           \
    \ string a = s.Substring(0, (int) shift);\n            string b = s.Substring((int)\
    \ shift);\n            return b + a;\n        } else {\n            return new\
    \ string(s.Reverse().ToArray());\n        }", "        var s = x.ToString();\n\
    \        if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        var s0 = s.Substring(0, (int)shift);\n        var s1 = s.Substring((int)shift);\n\
    \        return s1 + s0;", "        var v = x.ToString();\n        shift = shift\
    \ % v.Length;\n        var v2 = v.Substring((int)shift) + v.Substring(0, (int)shift);\n\
    \        return v2;", "        if (shift > Math.Log10(x)) {\n            char[]\
    \ digits = x.ToString().ToCharArray();\n            Array.Reverse(digits);\n \
    \           return new string(digits);\n        } else {\n            char[] digits\
    \ = x.ToString().ToCharArray();\n            Array.Reverse(digits);\n        \
    \    char[] shifted = new char[digits.Length];\n            Array.Copy(digits,\
    \ shifted, digits.Length);\n            Array.Copy(digits, 0, shifted, digits.Length\
    \ - shift, shift);\n            Array.Reverse(shifted);\n            return new\
    \ string(shifted);\n        }", "        string s = x.ToString();\n        string\
    \ r = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            r += s[(i\
    \ + (int)shift) % s.Length];\n        }\n        return r;", "        var digits\
    \ = new List<int>();\n        while (x > 0) {\n            digits.Add((int)(x\
    \ % 10));\n            x /= 10;\n        }\n        digits.Reverse();\n      \
    \  var result = new StringBuilder();\n        var shiftIndex = 0;\n        while\
    \ (shiftIndex < shift) {\n            if (shiftIndex >= digits.Count) {\n    \
    \            result.Append(digits[shiftIndex - digits.Count]);\n            }\
    \ else {\n                result.Append(digits[shiftIndex]);\n            }\n\
    \            shiftIndex++;\n        }\n        for (var i = 0; i < digits.Count;\
    \ i++) {\n            if (shiftIndex >= digits.Count) {\n                result.Append(digits[shiftIndex\
    \ - digits.Count]);\n            } else {\n                result.Append(digits[shiftIndex]);\n\
    \            }\n            shiftIndex++;\n        }\n        return result.ToString();",
  "        string digits = x.ToString();\n        string circular = \"\";\n      \
    \  for (int i = 0; i < shift; i++) {\n            circular = circular + digits[digits.Length\
    \ - 1];\n            digits = digits.Substring(0, digits.Length - 1);\n      \
    \  }\n        return circular + digits;", "        string s = x.ToString();\n\
    \        char[] chars = s.ToCharArray();\n        char[] res = new char[chars.Length];\n\
    \        if (shift > chars.Length) {\n            return new string(chars.Reverse().ToArray());\n\
    \        }\n        else {\n            shift = shift % chars.Length;\n      \
    \      for (int i = 0; i < chars.Length; i++) {\n                res[i] = chars[(i\
    \ + shift) % chars.Length];\n            }\n            return new string(res);\n\
    \        }", "        var s = x.ToString();\n        shift = shift % s.Length;\n\
    \        return s.Substring((int)shift) + s.Substring(0, (int)shift);", "    \
    \    string tmp = x.ToString();\n        if (shift > tmp.Length) {\n         \
    \   tmp = new string(tmp.Reverse().ToArray());\n        } else {\n           \
    \ shift = tmp.Length - shift;\n            tmp = tmp.Substring(shift) + tmp.Substring(0,\
    \ shift);\n        }\n        return tmp;", "        string digits = x.ToString();\n\
    \        if (shift > digits.Length) {\n            return new string(digits.Reverse().ToArray());\n\
    \        }\n        return digits.Substring((int)shift) + digits.Substring(0,\
    \ (int)shift);", "        string s = x.ToString();\n        shift = shift % s.Length;\n\
    \        s = s.Substring((int)shift) + s.Substring(0, (int)shift);\n        if\
    \ (shift > s.Length) {\n            return s.Reverse();\n        }\n        return\
    \ s;", "        string r = x.ToString();\n        long m = r.Length;\n       \
    \ shift = shift % m;\n        if (shift == 0) {\n            return r;\n     \
    \   }\n        return r.Substring((int)shift) + r.Substring(0, (int)shift);",
  "        string s = x.ToString();\n        return shift >= s.Length ? new string(s.Reverse().ToArray())\
    \ : s.Substring(s.Length - (int)shift) + s.Substring(0, s.Length - (int)shift);",
  "        if (shift == 0) return x.ToString();\n        int len = (int)Math.Floor(Math.Log10(x))\
    \ + 1;\n        shift = shift % len;\n        string s = x.ToString();\n     \
    \   return s.Substring((int)shift) + s.Substring(0, (int)shift);", '        return
    String.Join("", x.ToString().Skip((int)shift).Reverse().Concat(x.ToString().Take((int)shift).Reverse()));',
  "        var digits = x.ToString().ToCharArray();\n        if (shift > digits.Length)\
    \ {\n            Array.Reverse(digits);\n            return new string(digits);\n\
    \        }\n        var outdigits = new char[digits.Length];\n        for (var\
    \ i = 0; i < digits.Length; i++) {\n            outdigits[i] = digits[(i + shift)\
    \ % digits.Length];\n        }\n        return new string(outdigits);", "    \
    \    string s = x.ToString();\n        if (shift >= s.Length) {\n            return\
    \ new string(s.Reverse().ToArray());\n        }\n        else {\n            return\
    \ s.Substring(shift) + s.Substring(0, shift);\n        }", "        string s =\
    \ x.ToString();\n        if (shift >= s.Length) {\n            s = Reverse(s);\n\
    \        } else {\n            s = s.Substring(s.Length - (int)shift) + s.Substring(0,\
    \ s.Length - (int)shift);\n        }\n        return s;", "        string s =\
    \ x.ToString();\n        long n = s.Length;\n        if (shift >= n) {\n     \
    \       var chars = s.ToCharArray();\n            Array.Reverse(chars);\n    \
    \        return new string(chars);\n        }\n        var t = new char[n];\n\
    \        var sb = new StringBuilder();\n        for (long i = 0; i < n; i++) {\n\
    \            t[(i + shift) % n] = s[i];\n        }\n        for (long i = 0; i\
    \ < n; i++) {\n            sb.Append(t[i]);\n        }\n        return sb.ToString();",
  "        string s = x.ToString();\n        if (shift > s.Length)\n            return\
    \ new string(s.Reverse().ToArray());\n        return s.Substring((int)shift) +\
    \ s.Substring(0, (int)shift);", "        long n = (long)Math.Floor(Math.Log10(x))\
    \ + 1;\n        if (shift >= n) {\n            return ReverseDigits(x);\n    \
    \    }\n        string s = x.ToString();\n        return s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);", "        if (shift == 0) {\n            return\
    \ x.ToString();\n        }\n        int len = x.ToString().Length;\n        if\
    \ (shift >= len) {\n            return new string(x.ToString().Reverse().ToArray());\n\
    \        }\n        string s = x.ToString();\n        return s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);", "        string s = x.ToString();\n        if\
    \ (shift > s.Length) {\n            var rev = s.Reverse();\n            return\
    \ new string(rev.ToArray());\n        }\n        var right = s.Substring(0, s.Length\
    \ - (int)shift);\n        var left = s.Substring((int)shift);\n        return\
    \ string.Format(\"{0}{1}\", left, right);", "        string s = x.ToString();\n\
    \        if (shift > s.Length) {\n            return string.Join(\"\", s.Reverse());\n\
    \        }\n        char[] r = s.ToCharArray();\n        Array.Reverse(r);\n \
    \       return string.Join(\"\", r.Skip((int)shift).Concat(r.Take((int)shift)));",
  "        string s = x.ToString();\n        if (shift >= s.Length) {\n          \
    \  return new string(s.Reverse().ToArray());\n        }\n        return s.Substring(s.Length\
    \ - (int)shift) + s.Substring(0, s.Length - (int)shift);", "        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        string s = x.ToString();\n\
    \        if (shift > s.Length) {\n            string t = new string(s.Reverse().ToArray());\n\
    \            return t;\n        }\n        string t1 = s.Substring(0, (int)shift);\n\
    \        string t2 = s.Substring((int)shift);\n        return t2 + t1;", "   \
    \     string s = x.ToString();\n        if (shift > s.Length) {\n            return\
    \ new string(s.Reverse().ToArray());\n        }\n        else {\n            return\
    \ s.Substring(s.Length - (int)shift) + s.Substring(0, s.Length - (int)shift);\n\
    \        }", "        string s = x.ToString();\n        if (shift >= s.Length)\
    \ {\n            return new string(s.Reverse().ToArray());\n        }\n      \
    \  s = s.Substring(0, (int) shift) + new string(s.Substring((int) shift).Reverse().ToArray());\n\
    \        return s;", "        long digits = (long)Math.Floor(Math.Log10(x)) +\
    \ 1;\n        if (shift >= digits) {\n            return new string(x.ToString().Reverse().ToArray());\n\
    \        }\n        long shift_divisor = (long)Math.Pow(10, digits - shift);\n\
    \        long right = x % shift_divisor;\n        long left = x / shift_divisor;\n\
    \        return (right * (long)Math.Pow(10, shift) + left).ToString();", "   \
    \     if (shift == 0) return x.ToString();\n        string str = x.ToString();\n\
    \        if (shift >= str.Length) return str.Reverse().ToString();\n        return\
    \ str.Substring(str.Length - (int)shift) + str.Substring(0, str.Length - (int)shift);",
  "        var s = x.ToString();\n        if (shift > s.Length) {\n            var\
    \ a = s.ToCharArray();\n            Array.Reverse(a);\n            return new\
    \ string(a);\n        }\n        else {\n            var a = s.ToCharArray();\n\
    \            Array.Reverse(a);\n            Array.Reverse(a, 0, (int)shift);\n\
    \            Array.Reverse(a, (int)shift, (int)(s.Length - shift));\n        \
    \    return new string(a);\n        }", "        shift = shift % (int)Math.Log10(x)\
    \ + 1; // shift % number of digits\n        long result = x % (long)Math.Pow(10,\
    \ shift);\n        x /= (long)Math.Pow(10, shift);\n        result *= (long)Math.Pow(10,\
    \ (int)Math.Log10(x) + 1);\n        result += x;\n        return result.ToString();",
  "        long digs = (long)Math.Ceiling(Math.Log10(x));\n        string s = x.ToString();\n\
    \        if (shift == digs) {\n            return string.Join(\"\", s.Reverse());\n\
    \        }\n        if (shift > digs) {\n            string t = CircularShift(x,\
    \ shift - digs);\n            return string.Join(\"\", t.Reverse());\n       \
    \ }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);", " \
    \       string ret = x.ToString();\n        if (shift < ret.Length) {\n      \
    \      ret = ret.Substring((int)shift) + ret.Substring(0, (int)shift);\n     \
    \   } else {\n            ret = new string(ret.Reverse().ToArray());\n       \
    \ }\n        return ret;", "        var digits = x.ToString().ToCharArray();\n\
    \        var shifts = shift.ToString().ToCharArray();\n        var m = shifts.Length\
    \ - 1;\n        if (digits.Length < m) {\n            Array.Reverse(digits);\n\
    \            return new string(digits);\n        } else {\n            var n =\
    \ digits.Length - m;\n            var y = new char[digits.Length];\n         \
    \   for (var i = 0; i < m; i++)\n                y[i] = digits[n + i];\n     \
    \       for (var i = 0; i < n; i++)\n                y[m + i] = digits[i];\n \
    \           return new string(y);\n        }", "        string result = x.ToString();\n\
    \        if (shift > result.Length) {\n            char[] ca = result.ToCharArray();\n\
    \            Array.Reverse(ca);\n            return new string(ca);\n        }\n\
    \        return result.Substring(shift, result.Length - shift) + result.Substring(0,\
    \ shift);", "        string digits = x.ToString();\n        int length = digits.Length;\n\
    \        if (shift > length) {\n            return Reverse(digits);\n        }\n\
    \        else {\n            string new_digits = digits.Substring((int)shift,\
    \ (int)(length - shift)) + digits.Substring(0, (int)shift);\n            return\
    \ new_digits;\n        }", "        string s = x.ToString();\n        int len\
    \ = s.Length;\n        if (shift < len) {\n            return s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);\n        } else {\n            char[] c = s.ToCharArray();\n\
    \            Array.Reverse(c);\n            return new string(c);\n        }",
  "        string s = x.ToString();\n        if (shift >= s.Length)\n            return\
    \ ReverseString(s);\n        string a = s.Substring(0, (int)shift);\n        string\
    \ b = s.Substring((int)shift);\n        return b + a;", "        if (shift ==\
    \ 0) return x.ToString();\n        string digits = x.ToString();\n        if (shift\
    \ > digits.Length) {\n            char[] temp = digits.ToCharArray();\n      \
    \      Array.Reverse(temp);\n            return new string(temp);\n        }\n\
    \        return digits.Substring(digits.Length - (int)shift) + digits.Substring(0,\
    \ digits.Length - (int)shift);", "        var sb = new StringBuilder();\n    \
    \    var s = x.ToString();\n        if (shift > s.Length) {\n            sb.Append(new\
    \ string(s.Reverse().ToArray()));\n        } else {\n            var start = (int)(s.Length\
    \ - shift);\n            sb.Append(s.Substring(start));\n            sb.Append(s.Substring(0,\
    \ start));\n        }\n        return sb.ToString();", "        int shiftLength\
    \ = x.ToString().Length;\n        if (shift > shiftLength) {\n            return\
    \ x.ToString().Reverse().ToArray().ToString();\n        } else {\n           \
    \ string num = x.ToString();\n            string output = \"\";\n            int\
    \ l = num.Length;\n            for (int i = 0; i < l; i++) {\n               \
    \ output += num[(l - shift + i) % l];\n            }\n            return output;\n\
    \        }", "        if (shift > Utils.NumDigits(x)) {\n            return Utils.ReverseDigits(x);\n\
    \        }\n        var digits = Utils.Digits(x);\n        for (int i = 0; i <\
    \ shift; i++) {\n            var lastDigit = digits[digits.Count - 1];\n     \
    \       digits.RemoveAt(digits.Count - 1);\n            digits.Insert(0, lastDigit);\n\
    \        }\n        return Utils.DigitsToString(digits);", "        int[] bits\
    \ = new int[64];\n        int n = 0;\n        for (; x > 0; x /= 10)\n       \
    \     bits[n++] = (int)(x % 10);\n        if (shift >= n) {\n            string\
    \ result = \"\";\n            for (int i = n - 1; i >= 0; i--)\n             \
    \   result += \"\" + bits[i];\n            return result;\n        }\n       \
    \ string result2 = \"\";\n        for (int i = 0; i < n; i++)\n            result2\
    \ += \"\" + bits[(n - (int)shift + i) % n];\n        return result2;", "     \
    \   string y = x.ToString();\n        if (shift == 0) {\n            return y;\n\
    \        }\n        int len = y.Length;\n        if (shift > len) {\n        \
    \    shift %= len;\n        }\n        string f = y.Substring(0, (int)shift);\n\
    \        string s = y.Substring((int)shift);\n        return s + f;", "      \
    \  // number of digits in x\n        long n = 1 + (long)Math.Floor(Math.Log10(x));\n\
    \        // check for shift > number of digits\n        if (shift >= n) {\n  \
    \          return new string(x.ToString().Reverse().ToArray());\n        }\n \
    \       // shift the digits\n        else {\n            // separate the digits\n\
    \            string s = x.ToString();\n            string newString = s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);\n            return newString;\n        }", " \
    \       int nd = x.ToString().Length;\n        if (shift >= nd) {\n          \
    \  return new string(x.ToString().Reverse().ToArray());\n        }\n        string\
    \ s = x.ToString();\n        string left = s.Substring(0, (int)shift);\n     \
    \   string right = s.Substring((int)shift);\n        return right + left;", " \
    \       if (shift == 0) {\n            return x.ToString();\n        }\n     \
    \   int l = (int)Math.Log10(x) + 1;\n        if (shift > l) {\n            return\
    \ new string(x.ToString().Reverse().ToArray());\n        }\n        string s =\
    \ x.ToString();\n        s = s.Substring(0, l - (int)shift) + new string(s.Substring((int)shift).Reverse().ToArray());\n\
    \        return s;", "        string xs = x.ToString();\n        if (shift >=\
    \ xs.Length) {\n            return new string(xs.Reverse().ToArray());\n     \
    \   }\n        return xs.Substring((int)shift) + xs.Substring(0, (int)shift);",
  "        if (shift == 0) return x.ToString();\n        var s = x.ToString();\n \
    \       if (shift >= s.Length) {\n            var r = s.Reverse().ToArray();\n\
    \            return new string(r);\n        }\n        var t = s.Substring(s.Length\
    \ - (int)shift);\n        var u = s.Substring(0, s.Length - (int)shift);\n   \
    \     return t + u;", "        string s = x.ToString();\n        shift = shift\
    \ % s.Length;\n        if (shift == 0) return s;\n        return s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);", "        string s = x.ToString();\n        if\
    \ (shift >= s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        return s.Substring(s.Length - (int)shift) + s.Substring(0,\
    \ s.Length - (int)shift);", "        var s = x.ToString();\n        shift = shift\
    \ % s.Length;\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);",
  "        if (shift < 0) {\n            throw new InvalidOperationException(\"shift\
    \ < 0\");\n        }\n        if (shift == 0) {\n            return x.ToString();\n\
    \        }\n        string s = x.ToString();\n        if (shift > s.Length) {\n\
    \            return new string(s.Reverse().ToArray());\n        }\n        return\
    \ s.Substring(s.Length - (int)shift) + s.Substring(0, s.Length - (int)shift);",
  "        string output = x.ToString();\n        long N = output.Length;\n      \
    \  if (shift >= N) {\n            output = new string(output.Reverse().ToArray());\n\
    \        } else {\n            string head = output.Substring(0, (int)shift);\n\
    \            string tail = output.Substring((int)shift);\n            output =\
    \ tail + head;\n        }\n        return output;", "        var digits = x.ToString().ToCharArray();\n\
    \        var result = new char[digits.Length];\n        var offset = shift % digits.Length;\n\
    \        for (var i = 0; i < digits.Length; i++) {\n            result[i] = digits[(i\
    \ + offset) % digits.Length];\n        }\n        return new string(result);",
  "        if (shift == 0) {\n            return x.ToString();\n        }\n      \
    \  int y = (int)x;\n        int e = y;\n        int digits = 0;\n        while\
    \ (e > 0) {\n            e /= 10;\n            digits++;\n        }\n        shift\
    \ %= digits;\n        if (shift == 0) {\n            return x.ToString();\n  \
    \      }\n        int d = y % (int)Math.Pow(10, shift);\n        int d2 = y /\
    \ (int)Math.Pow(10, shift);\n        return (d * (int)Math.Pow(10, digits - shift)\
    \ + d2).ToString();", "        var digitstr = x.ToString();\n        var shift2\
    \ = shift % digitstr.Length;\n        return digitstr.Substring((int)shift2) +\
    \ digitstr.Substring(0, (int)shift2);", "        // Write your code here\n   \
    \     string s = x.ToString();\n        int N = s.Length;\n        if (shift >=\
    \ N) {\n            char[] rev = s.ToCharArray();\n            Array.Reverse(rev);\n\
    \            return new string(rev);\n        }\n        else {\n            return\
    \ s.Substring((int)shift) + s.Substring(0, (int)shift);\n        }", "       \
    \ var digits = new List<long>();\n        var base10 = BigInteger.Pow(10, shift);\n\
    \        var remainder = x;\n        while (remainder > 0) {\n            digits.Add(remainder\
    \ % 10);\n            remainder /= 10;\n        }\n        if (shift > digits.Count)\
    \ {\n            shift = digits.Count;\n        }\n        var temp = digits.GetRange((int)shift,\
    \ (int)(digits.Count - shift));\n        temp.AddRange(digits.GetRange(0, (int)shift));\n\
    \        var result = string.Join(\"\", temp);\n        return result;", "   \
    \     string result = x.ToString();\n        shift = shift % result.Length;\n\
    \        if (shift == 0) {\n            return result;\n        }\n        result\
    \ = result.Substring((int)shift) + result.Substring(0, (int)shift);\n        return\
    \ result;", "        string tmp = x.ToString();\n        if (shift >= tmp.Length)\
    \ {\n            tmp = new string(tmp.Reverse().ToArray());\n        } else {\n\
    \            tmp = tmp.Substring(tmp.Length - (int)shift) + tmp.Substring(0, tmp.Length\
    \ - (int)shift);\n        }\n        return tmp;", "        // Write your code\
    \ here\n        string s = x.ToString();\n        return (s.Substring(s.Length\
    \ - (int)shift) + s.Substring(0, s.Length - (int)shift));", "        string s\
    \ = x.ToString();\n        long digitcount = s.Length;\n        // If the number\
    \ of digits is less than the shift, reverse the number and shift\n        if (digitcount\
    \ < shift) {\n            char[] ca = s.ToCharArray();\n            Array.Reverse(ca);\n\
    \            s = new string(ca);\n            shift = digitcount - shift;\n  \
    \      }\n        string front = s.Substring(0, (int)shift);\n        string back\
    \ = s.Substring((int)shift);\n        return (back + front);", "        if (shift\
    \ < 0) {\n            throw new ArgumentException(\"Cannot shift less than 0\"\
    );\n        }\n        var digits = x.ToString().Select(y => int.Parse(y.ToString())).ToList();\n\
    \        if (shift > digits.Count) {\n            digits.Reverse();\n        \
    \    return string.Join(\"\", digits);\n        }\n        var result = digits.GetRange(digits.Count\
    \ - (int)shift, (int)shift);\n        result.AddRange(digits.GetRange(0, digits.Count\
    \ - (int)shift));\n        return string.Join(\"\", result);", "        char[]\
    \ digits = x.ToString().ToCharArray();\n        if (shift >= digits.Length) {\n\
    \            Array.Reverse(digits);\n            return new string(digits);\n\
    \        }\n        char[] tmp = new char[digits.Length];\n        Array.Copy(digits,\
    \ shift, tmp, 0, digits.Length - shift);\n        Array.Copy(digits, 0, tmp, digits.Length\
    \ - shift, shift);\n        return new string(tmp);", "        string x_str =\
    \ x.ToString();\n        if (shift >= x_str.Length) {\n            return new\
    \ string(x_str.Reverse().ToArray());\n        }\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < x_str.Length; i++) {\n       \
    \     int index = (i + (int)shift) % x_str.Length;\n            sb.Append(x_str[index]);\n\
    \        }\n        return sb.ToString();", "        var s = x.ToString();\n \
    \       if (shift > s.Length) {\n            return String.Join(\"\", s.Reverse());\n\
    \        }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);",
  "        long digits = 0;\n        long result = 0;\n        long x1 = x;\n    \
    \    while (x1 > 0) {\n            digits += 1;\n            x1 /= 10;\n     \
    \   }\n        if (shift > digits) {\n            for (int i = 0; i < digits;\
    \ i++) {\n                result = result * 10 + x % 10;\n                x /=\
    \ 10;\n            }\n        } else {\n            for (int i = 0; i < shift;\
    \ i++) {\n                result = result * 10 + x % 10;\n                x /=\
    \ 10;\n            }\n            for (int i = 0; i < digits - shift; i++) {\n\
    \                result = result * 10 + x % 10;\n                x /= 10;\n  \
    \          }\n        }\n        return result.ToString();", "        string digits\
    \ = x.ToString();\n        string result = \"\";\n        shift = shift % digits.Length;\n\
    \        if (shift > 0) {\n            // shift right\n            result = digits.Substring((int)shift)\
    \ + digits.Substring(0, (int)shift);\n        } else {\n            // shift left\n\
    \            shift = digits.Length + shift;\n            result = digits.Substring((int)shift)\
    \ + digits.Substring(0, (int)shift);\n        }\n        return result;", "  \
    \      string S = x.ToString();\n        int L = S.Length;\n        shift = shift\
    \ % L;\n        if (shift == 0) return S;\n        string A = S.Substring(0, shift);\n\
    \        string B = S.Substring(shift);\n        return B + A;", "        string\
    \ x_str = x.ToString();\n        string[] x_str_arr = x_str.Select(y => y.ToString()).ToArray();\n\
    \        string[] shifted_arr = new string[x_str_arr.Length];\n        if (shift\
    \ > x_str_arr.Length) {\n            for (int i = 0; i < x_str_arr.Length; i++)\
    \ {\n                shifted_arr[i] = x_str_arr[x_str_arr.Length - i - 1];\n \
    \           }\n        } else {\n            for (int i = 0; i < x_str_arr.Length;\
    \ i++) {\n                shifted_arr[i] = x_str_arr[(int)((i + shift) % x_str_arr.Length)];\n\
    \            }\n        }\n        string res = string.Join(\"\", shifted_arr);\n\
    \        return res;", "        var n = x.ToString().Length;\n        if (shift\
    \ >= n) {\n            return String.Join(\"\", x.ToString().Reverse());\n   \
    \     }\n        var l = String.Join(\"\", x.ToString().Substring(0, (int)shift).Reverse());\n\
    \        var r = String.Join(\"\", x.ToString().Substring((int)shift).Reverse());\n\
    \        return l + r;", "        string s = x.ToString();\n        if (shift\
    \ >= s.Length) {\n            char[] ca = s.ToCharArray();\n            Array.Reverse(ca);\n\
    \            return new string(ca);\n        }\n        return s.Substring((int)shift)\
    \ + s.Substring(0, (int)shift);", "        string digits = x.ToString();\n   \
    \     long n = digits.Length;\n        if (shift > n) {\n            return digits.Reverse().Join();\n\
    \        }\n        return digits.Substring((int)shift) + digits.Substring(0,\
    \ (int)shift);", "        string digits = x.ToString();\n        if (shift >=\
    \ digits.Length)\n            return new string(digits.Reverse().ToArray());\n\
    \        return digits.Substring((int)shift) + digits.Substring(0, (int)shift);",
  "        string s = x.ToString();\n        int n = s.Length;\n        shift = shift\
    \ % n;\n        if (shift == 0) return s;\n        if (shift < 0) shift += n;\n\
    \        return s.Substring((int)shift) + s.Substring(0, (int)shift);", "    \
    \    if (shift == 0) return x.ToString();\n        if (shift >= x.ToString().Length)\
    \ {\n            char[] charArray = x.ToString().ToCharArray();\n            Array.Reverse(charArray);\n\
    \            return new string(charArray);\n        }\n        return x.ToString().Substring((int)shift)\
    \ + x.ToString().Substring(0, (int)shift);", "        string s = x.ToString();\n\
    \        string srev = s.Reverse();\n        return (shift <= s.Length ? s.Substring(shift)\
    \ + s.Substring(0, shift) : srev.Substring(srev.Length - shift) + srev.Substring(0,\
    \ srev.Length - shift));", "        string s = x.ToString();\n        char[] a\
    \ = s.ToCharArray();\n        int n = a.Length;\n        for (int i = 0; i < shift;\
    \ i++) {\n            char t = a[n - 1];\n            Array.Copy(a, 0, a, 1, n\
    \ - 1);\n            a[0] = t;\n        }\n        return new string(a);", " \
    \       var digits = new string(x.ToString().Reverse().ToArray());\n        if\
    \ (shift >= digits.Length)\n            return digits;\n        return digits.Substring((int)shift)\
    \ + digits.Substring(0, (int)shift);", "        var digits = new List<long>();\n\
    \        while (x > 0) {\n            digits.Add(x % 10);\n            x /= 10;\n\
    \        }\n        if (shift > digits.Count) {\n            digits.Reverse();\n\
    \        } else {\n            shift = digits.Count - shift;\n            var\
    \ temp = digits.GetRange((int)shift, (int)(digits.Count - shift));\n         \
    \   temp.AddRange(digits.GetRange(0, (int)shift));\n            digits = temp;\n\
    \        }\n        return string.Join(\"\", digits);", "        string ret =\
    \ x.ToString();\n        if (shift > ret.Length) {\n            return new string(ret.Reverse().ToArray());\n\
    \        }\n        ret = ret.Substring(ret.Length - (int)shift, (int)shift) +\
    \ ret.Substring(0, ret.Length - (int)shift);\n        return ret;", "        var\
    \ numDigits = ((int)Math.Floor(Math.Log10(x) + 1));\n        shift = (shift %\
    \ numDigits);\n        if (shift == 0) {\n            return x.ToString();\n \
    \       }\n        var str = x.ToString();\n        return (str.Substring((int)shift,\
    \ (int)(numDigits - shift)) + str.Substring(0, (int)shift));", "        if (shift\
    \ > 0) {\n            string d = x.ToString();\n            for (int i = 0; i\
    \ < shift; i++) {\n                d = d.Substring(1) + d[0];\n            }\n\
    \            return d;\n        } else {\n            return x.ToString();\n \
    \       }", "        string xs = x.ToString();\n        if (shift > xs.Length)\
    \ {\n            // Reverse digits, zero pad\n            xs = new string(xs.Reverse().ToArray());\n\
    \            xs = xs.PadLeft(shift.ToString().Length, '0');\n        } else {\n\
    \            // Shift digits\n            xs = xs.Substring(shift) + xs.Substring(0,\
    \ shift);\n        }\n        return xs;", "        string s = x.ToString();\n\
    \        if (shift >= s.Length) {\n            s = new string(s.Reverse().ToArray());\n\
    \        } else {\n            s = s.Substring(s.Length - (int)shift) + s.Substring(0,\
    \ s.Length - (int)shift);\n        }\n        return s;", "        if (shift ==\
    \ 0) {\n            return x.ToString();\n        }\n        string s = x.ToString();\n\
    \        var l = s.Length;\n        if (shift >= l) {\n            return Reverse(s);\n\
    \        }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);",
  '        return new string(x.ToString().Substring((int)shift).Reverse().ToArray())
    + new string(x.ToString().Substring(0, (int)shift).Reverse().ToArray());', " \
    \       var xString = x.ToString();\n        if (shift >= xString.Length) {\n\
    \            return new string(xString.Reverse().ToArray());\n        }\n    \
    \    else {\n            return xString.Substring((int)shift) + xString.Substring(0,\
    \ (int)shift);\n        }", "        string s = x.ToString();\n        shift =\
    \ shift % s.Length;\n        if (shift == 0) return s;\n        if (shift < 0)\
    \ shift += s.Length;\n        if (shift == s.Length) return ReverseString(s);\n\
    \        return s.Substring((int)shift) + s.Substring(0, (int)shift);", "    \
    \    if (shift == 0) {\n            return x.ToString();\n        } else {\n \
    \           int num_digits = 0;\n            long tmp = x;\n            while\
    \ (tmp > 0) {\n                tmp /= 10;\n                num_digits++;\n   \
    \         }\n            shift %= num_digits;\n            if (shift == 0) {\n\
    \                return x.ToString();\n            } else {\n                long\
    \ tmp2 = 0;\n                long digit = 0;\n                for (int i = 0;\
    \ i < num_digits; i++) {\n                    digit = x % 10;\n              \
    \      x /= 10;\n                    tmp2 = tmp2 * 10 + digit;\n             \
    \   }\n                tmp = tmp2;\n                for (int i = 0; i < shift;\
    \ i++) {\n                    digit = tmp % 10;\n                    tmp /= 10;\n\
    \                    tmp2 = tmp2 * 10 + digit;\n                }\n          \
    \      return tmp2.ToString();\n            }\n        }", "        long digits\
    \ = (long)Math.Log10(x) + 1;\n        if (shift > digits) {\n            return\
    \ new string(x.ToString().Reverse().ToArray());\n        }\n        var s = x.ToString();\n\
    \        return s.Substring((int)shift) + s.Substring(0, (int)shift);", "    \
    \    var xString = x.ToString();\n        var xLength = xString.Length;\n    \
    \    var shiftLength = shift % xLength;\n        if (shiftLength == 0) {\n   \
    \         return xString;\n        }\n        return xString.Substring((int)shiftLength)\
    \ + xString.Substring(0, (int)shiftLength);", "        if (shift == 0) {\n   \
    \         return x.ToString();\n        }\n        string s = x.ToString();\n\
    \        if (shift > s.Length) {\n            char[] ss = s.ToCharArray();\n \
    \           Array.Reverse(ss);\n            return new string(ss);\n        }\n\
    \        string end = s.Substring(0, (int)shift);\n        string start = s.Substring((int)shift);\n\
    \        return start + end;", "        string s = x.ToString();\n        if (shift\
    \ > s.Length) {\n            return new string(s.Reverse().ToArray());\n     \
    \   }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);",
  "        var b = new char[shift];\n        for (int i = 0; i < shift; i++) {\n \
    \           b[i] = (char)('0' + (x % 10));\n            x /= 10;\n        }\n\
    \        return new string(b.Reverse().ToArray());", "        int len = (int)\
    \ Math.Log10(x) + 1;\n        if (shift > len) {\n            char[] chars = x.ToString().ToCharArray();\n\
    \            Array.Reverse(chars);\n            return new string(chars);\n  \
    \      }\n        else {\n            char[] chars = x.ToString().ToCharArray();\n\
    \            for (int i = 0; i < shift; i++) {\n                char first = chars[0];\n\
    \                for (int j = 0; j < len - 1; j++) {\n                    chars[j]\
    \ = chars[j + 1];\n                }\n                chars[len - 1] = first;\n\
    \            }\n            return new string(chars);\n        }", "        string\
    \ s = x.ToString();\n        shift = shift % s.Length;\n        string s1 = s.Substring(0,\
    \ (int)shift);\n        string s2 = s.Substring((int)shift);\n        return s2\
    \ + s1;", "        long temp = x;\n        int shiftTimes = 0;\n        while\
    \ (temp > 0) {\n            temp /= 10;\n            shiftTimes++;\n        }\n\
    \        shift %= shiftTimes;\n        while (shift > 0) {\n            x = (x\
    \ % 10) * (long)Math.Pow(10, shiftTimes - 1) + x / 10;\n            shift--;\n\
    \        }\n        return x.ToString();", "        string s = x.ToString();\n\
    \        long n = s.Length;\n        if (shift >= n) {\n            return new\
    \ string(s.Reverse().ToArray());\n        }\n        string y = s.Substring((int)shift,\
    \ (int)(n - shift));\n        y += s.Substring(0, (int)shift);\n        return\
    \ y;", "        int len = (int)Math.Log10(x);\n        string[] tmp = new string[len\
    \ + 1];\n        for (int i = 0; i <= len; i++) {\n            tmp[(i + len -\
    \ (int)shift) % (len + 1)] = ((char)((x / (long)Math.Pow(10, i)) % 10 + '0')).ToString();\n\
    \        }\n        return string.Join(\"\", tmp);", "        string r = x.ToString();\n\
    \        if (shift < r.Length) {\n            r = r.Substring((int)shift, (int)(r.Length\
    \ - shift)) + r.Substring(0, (int)shift);\n        } else {\n            r = r.Reverse();\n\
    \        }\n        return r;", "        string digits = x.ToString();\n     \
    \   if (shift > digits.Length) {\n            digits = digits.Reverse().ToString();\n\
    \        } else {\n            digits = digits.Substring(digits.Length - shift,\
    \ shift) + digits.Substring(0, digits.Length - shift);\n        }\n        return\
    \ digits;", "        int len = x.ToString().Length;\n        shift = shift % len;\n\
    \        if (shift == 0) return x.ToString();\n        if (shift == len) return\
    \ new string(x.ToString().Reverse().ToArray());\n        int[] x_digits = new\
    \ int[len];\n        for (int i = 0; i < len; i++) {\n            x_digits[(i\
    \ + shift) % len] = (int)(x % 10);\n            x /= 10;\n        }\n        return\
    \ new string(x_digits.Select(y => (char)(y + '0')).ToArray());", "        string\
    \ res = x.ToString();\n        shift = shift % res.Length;\n        if (shift\
    \ == 0) {\n            return res;\n        }\n        var a = res.Substring(res.Length\
    \ - shift);\n        var b = res.Substring(0, res.Length - shift);\n        return\
    \ a + b;", "        long digits = (long) Math.Floor(Math.Log10(x)) + 1;\n    \
    \    if (shift >= digits) {\n            return Reverse(x);\n        }\n     \
    \   long rem = x % ((long) Math.Pow(10, shift));\n        long div = x / ((long)\
    \ Math.Pow(10, shift));\n        return (rem.ToString() + div.ToString());", " \
    \       long len = (long)Math.Floor(Math.Log10(x) + 1);\n        if (shift >=\
    \ len)\n            return String.Join(\"\", x.ToString().Reverse());\n      \
    \  else\n            return x.ToString().Substring((int)shift) + x.ToString().Substring(0,\
    \ (int)shift);", "        // Length of the integer.\n        int n = 0;\n    \
    \    for (long u = x; u > 0; u /= 10) n++;\n        shift %= n;\n        if (shift\
    \ == 0) return x.ToString();\n        var t = new StringBuilder();\n        for\
    \ (long u = x; u > 0; u /= 10) t.Append((u % 10).ToString());\n        t.Append(t.ToString());\n\
    \        return t.ToString().Substring((int)shift, n);", "        char[] c = x.ToString().ToCharArray();\n\
    \        if (shift > c.Length) {\n            Array.Reverse(c);\n            return\
    \ new string(c);\n        }\n        while (shift-- > 0) {\n            char b\
    \ = c[c.Length - 1];\n            Array.Copy(c, 0, c, 1, c.Length - 1);\n    \
    \        c[0] = b;\n        }\n        return new string(c);", "        string\
    \ result = x.ToString();\n        if (shift >= result.Length) {\n            return\
    \ new string(result.Reverse().ToArray());\n        }\n        return result.Substring((int)shift)\
    \ + result.Substring(0, (int)shift);", "        string s = x.ToString();\n   \
    \     shift = shift % s.Length;\n        char[] a = s.ToCharArray();\n       \
    \ Array.Reverse(a, 0, a.Length);\n        Array.Reverse(a, 0, (int)shift);\n \
    \       Array.Reverse(a, (int)shift, a.Length - (int)shift);\n        return new\
    \ string(a);", "        string xs = x.ToString();\n        int xslen = xs.Length;\n\
    \        shift = shift % xslen;\n        if (shift == 0) {\n            return\
    \ xs;\n        }\n        if (shift < 0) {\n            shift += xslen;\n    \
    \    }\n        return xs.Substring((int)shift) + xs.Substring(0, (int)shift);",
  "        // Convert x to a string\n        string xs = x.ToString();\n        int\
    \ len = xs.Length;\n        int shift1 = (int)(shift % len);\n        if (shift1\
    \ == 0) {\n            return xs;\n        }\n        string xs1 = xs.Substring(len\
    \ - shift1);\n        string xs2 = xs.Substring(0, len - shift1);\n        return\
    \ xs1 + xs2;", "        int n = x.ToString().Length;\n        shift = shift %\
    \ n;\n        if (shift == 0) {\n            return x.ToString();\n        }\n\
    \        string s = x.ToString();\n        return s.Substring((int)shift) + s.Substring(0,\
    \ (int)shift);", "        var xs = x.ToString();\n        var l = xs.Length;\n\
    \        if (shift >= l) {\n            return ReverseString(xs);\n        }\n\
    \        return xs.Substring((int)shift) + xs.Substring(0, (int)shift);", "  \
    \      if (shift == 0) return x.ToString();\n        int i = 0;\n        char[]\
    \ a = x.ToString().ToCharArray();\n        // Shift right.\n        while (i <\
    \ shift) {\n            var t = a[a.Length - 1];\n            for (int j = a.Length\
    \ - 1; j > 0; j--)\n                a[j] = a[j - 1];\n            a[0] = t;\n\
    \            i++;\n        }\n        return new string(a);", "        // The\
    \ number of digits in the integer x.\n        var n = 0;\n        var t = x;\n\
    \        while (t > 0) {\n            n += 1;\n            t /= 10;\n        }\n\
    \        if (shift > n) {\n            // We are shifting more digits than exist\
    \ in the integer, so just\n            // reverse the digits.\n            string\
    \ result = \"\";\n            while (x > 0) {\n                var digit = x %\
    \ 10;\n                result += digit.ToString();\n                x /= 10;\n\
    \            }\n            return result;\n        }\n        // We need to shift\
    \ shift digits.\n        // Find the leftmost shift digits of x.\n        var\
    \ left = 0;\n        t = x;\n        while (shift > 0) {\n            left = 10\
    \ * left + (t % 10);\n            t /= 10;\n            shift -= 1;\n        }\n\
    \        // The rightmost n - shift digits of x.\n        var right = t;\n   \
    \     // Reverse the digits of left.\n        var left_rev = 0;\n        while\
    \ (left > 0) {\n            left_rev = 10 * left_rev + (left % 10);\n        \
    \    left /= 10;\n        }\n        return left_rev.ToString() + right.ToString();",
  "        string val = x.ToString();\n        shift = shift % val.Length;\n     \
    \   return val.Substring((int)shift) + val.Substring(0, (int)shift);", "     \
    \   string res = x.ToString();\n        while (shift > 0) {\n            if (res.Length\
    \ <= 1) {\n                return new string(res.Reverse().ToArray());\n     \
    \       }\n            res = res.Substring(1) + res[0];\n            shift--;\n\
    \        }\n        return res;", "        if (shift <= 0) {\n            throw\
    \ new System.Exception(\"Shift must be positive\");\n        }\n        if (x\
    \ == 0) {\n            return \"0\";\n        }\n        var num_digits = (int)Math.Floor(Math.Log10(x)\
    \ + 1);\n        if (shift >= num_digits) {\n            return Reverse(x);\n\
    \        }\n        var y = x / (long)Math.Pow(10, shift);\n        var z = x\
    \ % (long)Math.Pow(10, shift);\n        return (z.ToString() + y.ToString());",
  "        string digits = x.ToString();\n        shift = shift % digits.Length;\n\
    \        if (shift == 0) {\n            return digits;\n        }\n        return\
    \ digits.Substring((int)shift) + digits.Substring(0, (int)shift);", "        List<long>\
    \ digits = new List<long>();\n        while (x > 0) {\n            digits.Add(x\
    \ % 10);\n            x /= 10;\n        }\n        int n = digits.Count;\n   \
    \     if (shift >= n) {\n            digits.Reverse();\n            return digits.Aggregate(\"\
    \", (total, y) => (total + Convert.ToString(y)));\n        }\n        List<long>\
    \ res = new List<long>();\n        for (int i = n - shift; i < n; i++) {\n   \
    \         res.Add(digits[i]);\n        }\n        for (int i = 0; i < n - shift;\
    \ i++) {\n            res.Add(digits[i]);\n        }\n        return res.Aggregate(\"\
    \", (total, y) => (total + Convert.ToString(y)));", "        if (shift <= 0)\n\
    \            return \"\" + x;\n        char[] digits = \"\" + x;\n        if (shift\
    \ >= digits.Length) {\n            Array.Reverse(digits);\n            return\
    \ new string(digits);\n        }\n        long first = digits.Length - shift;\n\
    \        StringBuilder sb = new StringBuilder();\n        for (long i = first;\
    \ i < digits.Length; i++)\n            sb.Append(digits[i]);\n        for (long\
    \ i = 0; i < first; i++)\n            sb.Append(digits[i]);\n        return sb.ToString();",
  "        int digits = (int)Math.Floor(Math.Log10(x) + 1);\n        //if (shift >=\
    \ digits) return ReverseDigits(x);\n        if (shift >= digits) return ReverseDigits(x);\n\
    \        int d = (int)(shift % digits);\n        long A = (long)Math.Pow(10, d);\n\
    \        //>>> (A)\n        //(1000)\n        long B = (long)Math.Pow(10, digits\
    \ - d);\n        //>>> (B)\n        //(10)\n        long T = x % A;\n        //>>>\
    \ (T)\n        //(200)\n        long tmp = T * B;\n        //>>> (tmp)\n     \
    \   //(2000)\n        long tmp2 = x / A;\n        //>>> (tmp2)\n        //(1)\n\
    \        long tmp3 = tmp + tmp2;\n        //>>> (tmp3)\n        //(2100)\n   \
    \     return tmp3.ToString();", "        var n = (int)Math.Floor(Math.Log10(x))\
    \ + 1;\n        shift = shift % n;\n        if (shift == 0) return x.ToString();\n\
    \        var s = x.ToString();\n        var result = new StringBuilder();\n  \
    \      for (int i = 0; i < n; i++) {\n            result.Append(s[(i + n - (int)shift)\
    \ % n]);\n        }\n        return result.ToString();", "        if (shift ==\
    \ 0) {\n            return x.ToString();\n        }\n        string res = x.ToString();\n\
    \        if (shift >= res.Length) {\n            char[] arr = res.ToCharArray();\n\
    \            Array.Reverse(arr);\n            return new string(arr);\n      \
    \  }\n        return res.Substring(res.Length - (int)shift) + res.Substring(0,\
    \ res.Length - (int)shift);", "        string s = x.ToString();\n        if (shift\
    \ > s.Length) {\n            return new string(s.Reverse().ToArray());\n     \
    \   }\n        return s.Substring((int)shift) + s.Substring(0, (int)shift);",
  "        if (shift < 0L)\n            throw new Exception();\n        char[] str\
    \ = x.ToString().ToCharArray();\n        Array.Reverse(str);\n        if (shift\
    \ >= str.Length)\n            return new string(str);\n        string s = new\
    \ string(str);\n        string y = s.Substring(0, str.Length - (int)shift);\n\
    \        string z = s.Substring(str.Length - (int)shift);\n        return z +\
    \ y;"]
stop_tokens:
- "\n    }\n"
