language: cs
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           var current = numbers[i];\n            if (current > max) {\n                max
    = current;\n            }\n            result.Add(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <026ee10b44f54e97beb781ad1885904c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <026ee10b44f54e97beb781ad1885904c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <026ee10b44f54e97beb781ad1885904c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <026ee10b44f54e97beb781ad1885904c>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rollingMax = new List<long>();\n        rollingMax.Add(numbers[0]);\n
    \       for (int i = 1; i < numbers.Count; i++) {\n            rollingMax.Add(Math.Max(rollingMax[i
    - 1], numbers[i]));\n        }\n        return rollingMax;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <36211c01562d4349a7de7f6872896733>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <36211c01562d4349a7de7f6872896733>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <36211c01562d4349a7de7f6872896733>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <36211c01562d4349a7de7f6872896733>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        if (numbers.Count() == 0) {\n            return new List<long>();\n
    \       }\n        if (numbers.Count() == 1) {\n            return new List<long>(new
    long[]{ numbers[0] });\n        }\n        long prevMax = numbers[0];\n        List<long>
    r = new List<long>();\n        r.Add(prevMax);\n        for (int i = 1; i < numbers.Count();
    i++) {\n            if (numbers[i] > prevMax) {\n                prevMax = numbers[i];\n
    \           }\n            r.Add(prevMax);\n        }\n        return r;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ddccb79e6db6401590a1296d192e1f0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ddccb79e6db6401590a1296d192e1f0a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        // Use a stack to keep track of maximum values we have seen
    so far.\n        // The idea here is that for each new number we can find out
    its maximum by examining\n        // the numbers in our stack. We only need to
    insert a number in our stack if it is\n        // larger than the top of the stack
    (as a smaller number will never be used to calculate\n        // the maximum).
    But we can't just insert it at the top, because if there's a larger\n        //
    number already in the stack we don't want to forget about it.\n        // So we
    pop of numbers larger than the current one until we either reach the stack's\n
    \       // bottom or a number that is smaller or equal than the current number.
    Now we know\n        // that if we insert the current number into the stack, the
    top of the stack will give\n        // us the maximum value of all numbers that
    have been processed so far.\n        // Then we simply step through the original
    list and insert all numbers. Then we can\n        // just read the top of the
    stack for each number, which gives us the maximum for that\n        // number
    and all prior numbers.\n        Stack<long> stack = new Stack<long>();\n        List<long>
    result = new List<long>();\n        foreach (long number in numbers) {\n            while
    (stack.Count > 0 && stack.Peek() < number) {\n                stack.Pop();\n            }\n
    \           stack.Push(number);\n            result.Add(stack.Peek());\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <717b39bef9f1463baf207c5efc189170>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <717b39bef9f1463baf207c5efc189170>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        // >>> max1 = max2 = numbers[0]\n        long max1 = numbers[0];\n
    \       long max2 = numbers[0];\n        // >>> foreach n in numbers[1:]:\n        var
    n = numbers.GetEnumerator();\n        n.MoveNext();\n        n.MoveNext();\n        while
    (n.MoveNext()) {\n            long n1 = n.Current;\n            // >>> max1 =
    max(max1, n)\n            max1 = ((max1 > n1) ? max1 : n1);\n            // >>>
    max2 = max(max2, max1)\n            max2 = ((max2 > max1) ? max2 : max1);\n        }\n
    \       return numbers;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <3d1c3bd6868748fcb8e0ab9ffbfcf978>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3d1c3bd6868748fcb8e0ab9ffbfcf978>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <3d1c3bd6868748fcb8e0ab9ffbfcf978>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3d1c3bd6868748fcb8e0ab9ffbfcf978>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> res = new List<long>();\n        long max = numbers[0];\n
    \       res.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n            if
    (numbers[i] > max) {\n                max = numbers[i];\n            }\n            res.Add(max);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e69d82e48fb64dd6ba80c775e145fa1b>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e69d82e48fb64dd6ba80c775e145fa1b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e69d82e48fb64dd6ba80c775e145fa1b>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e69d82e48fb64dd6ba80c775e145fa1b>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        // >>> numbers\n        // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)2L, (long)3L, (long)4L, (long)2L}))\n        List<long>
    maxs = new List<long>();\n        // >>> maxs\n        // (new List<long>(new
    long[]{}))\n        long curMax = numbers[0];\n        // >>> curMax\n        //
    (long)1L\n        maxs.Add(curMax);\n        // >>> maxs\n        // (new List<long>(new
    long[]{(long)1L}))\n        int len = numbers.Count;\n        // >>> len\n        //
    (int)7\n        for (int i = 1; i < len; i++) {\n            // >>> curMax\n            //
    (long)1L\n            // >>> numbers[i]\n            // (long)2L\n            if
    (numbers[i] > curMax) {\n                // >>> numbers[i]\n                //
    (long)2L\n                curMax = numbers[i];\n                // >>> curMax\n
    \               // (long)2L\n            }\n            // >>> curMax\n            //
    (long)2L\n            maxs.Add(curMax);\n            // >>> maxs\n            //
    (new List<long>(new long[]{(long)1L, (long)2L}))\n        }\n        // >>> maxs\n
    \       // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L,
    (long)3L, (long)4L, (long)4L}))\n        return maxs;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f4ccc45be4d44846b5d463d2aa472f41>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f4ccc45be4d44846b5d463d2aa472f41>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f4ccc45be4d44846b5d463d2aa472f41>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f4ccc45be4d44846b5d463d2aa472f41>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rolling = new List<long>();\n        long currentMax =
    numbers[0];\n        rolling.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            rolling.Add(currentMax);\n        }\n
    \       return rolling;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <61c5c43bd74a400a8027aeb57c1e0e01>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <61c5c43bd74a400a8027aeb57c1e0e01>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <61c5c43bd74a400a8027aeb57c1e0e01>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <61c5c43bd74a400a8027aeb57c1e0e01>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        for (int i
    = 0; i < numbers.Count; i++) {\n            long maxUntilNow = numbers[i];\n            for
    (int j = 0; j < i; j++) {\n                if (numbers[j] > maxUntilNow)\n                    maxUntilNow
    = numbers[j];\n            }\n            result.Add(maxUntilNow);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cb87f85f36d4e71ab7878a8d23b6be1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cb87f85f36d4e71ab7878a8d23b6be1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rollingMax = new List<long>();\n        long maxSoFar
    = numbers[0];\n        for (int i = 0; i < numbers.Count; i++) {\n            maxSoFar
    = Math.Max(maxSoFar, numbers[i]);\n            rollingMax.Add(maxSoFar);\n        }\n
    \       return rollingMax;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2a42634b16ce44fd9889be2aa6606a3c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2a42634b16ce44fd9889be2aa6606a3c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2a42634b16ce44fd9889be2aa6606a3c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2a42634b16ce44fd9889be2aa6606a3c>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        return numbers.Select((cur,idx) => numbers.Take(idx+1).Max()).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca1c3d64933045e887932f3f8c769e04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca1c3d64933045e887932f3f8c769e04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        // >>> RollingMax((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)2L, (long)3L, (long)4L, (long)2L})))\n        // (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n
    \       if (((numbers == null) || ((numbers.Count) == (0)))) {\n            return
    (new List<long>(new long[] { }));\n        } else {\n            var currentMax
    = numbers[0];\n            var result = new List<long> { };\n            foreach
    (var n in numbers) {\n                result.Add(currentMax);\n                if
    ((n > currentMax)) {\n                    currentMax = n;\n                }\n
    \           }\n            return result;\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <18f43e26ee694d3e9a0f9fc4be35cc75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <18f43e26ee694d3e9a0f9fc4be35cc75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var output = new List<long>();\n        long currentMax =
    long.MinValue;\n        foreach (var number in numbers) {\n            if (number
    > currentMax) {\n                currentMax = number;\n            }\n            output.Add(currentMax);\n
    \       }\n        return output;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c387f7382d84b9f88a9ce24fd304a10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c387f7382d84b9f88a9ce24fd304a10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> res = new List<long>();\n        long curr = numbers[0];\n
    \       res.Add(curr);\n        for (int i = 1; i < numbers.Count; i++) {\n            if
    (numbers[i] > curr) {\n                curr = numbers[i];\n            }\n            res.Add(curr);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <c0664db8574e446abad6d5877bd7ba84>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <c0664db8574e446abad6d5877bd7ba84>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <c0664db8574e446abad6d5877bd7ba84>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <c0664db8574e446abad6d5877bd7ba84>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var m = (long)0L;\n
    \       foreach (var i in numbers) {\n            if (i > m) {\n                m
    = i;\n            }\n            result.Add(m);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45001ddb874644dd992a375f36f33970>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45001ddb874644dd992a375f36f33970>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = 0;\n        foreach (long number in numbers) {\n            currentMax = Math.Max(currentMax,
    number);\n            result.Add(currentMax);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bce35df6ca47f9a29160ec3c321e5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bce35df6ca47f9a29160ec3c321e5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008823
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        return numbers.Select((x, i) => numbers.Take(i + 1).Max()).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3f66e925ce2486f902c755888ff2752>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3f66e925ce2486f902c755888ff2752>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = new List<long>();\n        var maxValue = numbers[0];\n
    \       for (var i = 0; i < numbers.Count; i++) {\n            maxValue = Math.Max(maxValue,
    numbers[i]);\n            max.Add(maxValue);\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <77df85c896704ce29837b663714bd2a7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <77df85c896704ce29837b663714bd2a7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <77df85c896704ce29837b663714bd2a7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <77df85c896704ce29837b663714bd2a7>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        return RollingMax(numbers, 0, numbers.Count);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq9iaakry.cs(14,16): error CS1501: No overload for method ''RollingMax''
    takes 3 arguments

    '
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = numbers[0];\n        List<long> result = new List<long>();\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <8d3b371b2f1a4f578587b64f4580673c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8d3b371b2f1a4f578587b64f4580673c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <8d3b371b2f1a4f578587b64f4580673c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8d3b371b2f1a4f578587b64f4580673c>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long _rolling_max = numbers[0];\n        var solution = new
    List<long> {_rolling_max};\n        for (int ix = 1; ix < numbers.Count; ix++)
    {\n            _rolling_max = Math.Max(_rolling_max, numbers[ix]);\n            solution.Add(_rolling_max);\n
    \       }\n        return solution;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <d797f271fcbd4a3093332c607cf98db1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d797f271fcbd4a3093332c607cf98db1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <d797f271fcbd4a3093332c607cf98db1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d797f271fcbd4a3093332c607cf98db1>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> maxes = new List<long>();\n        maxes.Add(numbers[0]);\n
    \       for (int i = 1; i < numbers.Count; i++) {\n            long max = maxes[i
    - 1];\n            long candidate = numbers[i];\n            if (candidate > max)
    {\n                max = candidate;\n            }\n            maxes.Add(max);\n
    \       }\n        return maxes;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <58dd7b2bac894dc2bde1011238d6f08b>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <58dd7b2bac894dc2bde1011238d6f08b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <58dd7b2bac894dc2bde1011238d6f08b>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <58dd7b2bac894dc2bde1011238d6f08b>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> results = new List<long>();\n        long maximum
    = numbers[0];\n        results.Add(maximum);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > maximum) {\n                maximum = numbers[i];\n
    \           }\n            results.Add(maximum);\n        }\n        return results;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <35b491a4d31842a5bdba45d62a3c74ce>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <35b491a4d31842a5bdba45d62a3c74ce>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <35b491a4d31842a5bdba45d62a3c74ce>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <35b491a4d31842a5bdba45d62a3c74ce>:0
    \n"
  stdout: ''
  timestamp: 1660008823
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> res = new List<long>();\n        long currMax =
    numbers[0];\n        res.Add(currMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            currMax = Math.Max(currMax, numbers[i]);\n            res.Add(currMax);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <593cd1abbc154d3abb306e3bfbb1c8ce>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <593cd1abbc154d3abb306e3bfbb1c8ce>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <593cd1abbc154d3abb306e3bfbb1c8ce>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <593cd1abbc154d3abb306e3bfbb1c8ce>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> maxSoFar = new List<long>();\n        long currentMax
    = long.MinValue;\n        foreach (long number in numbers) {\n            currentMax
    = Math.Max(currentMax, number);\n            maxSoFar.Add(currentMax);\n        }\n
    \       return maxSoFar;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21cbdc5644434e2bb4840933fd46a52d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21cbdc5644434e2bb4840933fd46a52d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var res = new List<long>();\n
    \       res.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n            if
    (numbers[i] > max) {\n                max = numbers[i];\n            }\n            res.Add(max);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <9e39da0c8b534950b9d91116d3c5ed6f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9e39da0c8b534950b9d91116d3c5ed6f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <9e39da0c8b534950b9d91116d3c5ed6f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9e39da0c8b534950b9d91116d3c5ed6f>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long maximum
    = numbers[0];\n        for (int i = 0; i < numbers.Count; i++) {\n            if
    (numbers[i] > maximum) maximum = numbers[i];\n            result.Add(maximum);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <1f682a94c618467d99fe3d1088e9a7cb>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <1f682a94c618467d99fe3d1088e9a7cb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <1f682a94c618467d99fe3d1088e9a7cb>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <1f682a94c618467d99fe3d1088e9a7cb>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> maxes = new List<long>();\n        long best =
    0;\n        numbers.ForEach(val => {\n            best = Math.Max(best, val);\n
    \           maxes.Add(best);\n        });\n        return maxes;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11a1a1c984864df29dbeb10c07594c58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11a1a1c984864df29dbeb10c07594c58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long mx = numbers[0];\n        List<long> res = new List<long>();\n
    \       res.Add(mx);\n        for (int i = 1; i < numbers.Count; i++) {\n            if
    (numbers[i] > mx)\n                mx = numbers[i];\n            res.Add(mx);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <52a283aead314a9f8cba9509cd77c85f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <52a283aead314a9f8cba9509cd77c85f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <52a283aead314a9f8cba9509cd77c85f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <52a283aead314a9f8cba9509cd77c85f>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long N = numbers.Count;\n        var maxs = new List<long>();\n
    \       long max = numbers[0];\n        maxs.Add(max);\n        for (long i =
    1; i < N; i++) {\n            max = Math.Max(max, numbers[(int)i]);\n            maxs.Add(max);\n
    \       }\n        return maxs;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000f] in <74db0fcc7c8140638595649318f1b8c6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <74db0fcc7c8140638595649318f1b8c6>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000f] in <74db0fcc7c8140638595649318f1b8c6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <74db0fcc7c8140638595649318f1b8c6>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = (long)0L;\n        for (int i = 0; i < numbers.Count; i++) {\n            currentMax
    = Math.Max(currentMax, numbers[i]);\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <256db445029f4765bc9a19d38b30da20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <256db445029f4765bc9a19d38b30da20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long rollingMax =
    long.MinValue;\n        for (int i = 0; i < numbers.Count; i++) {\n            rollingMax
    = Math.Max(rollingMax, numbers[i]);\n            result.Add(rollingMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cd9417e81384ec98988d89fb94284ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cd9417e81384ec98988d89fb94284ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (long i = (long)1L; i < numbers.Count; i++)
    {\n            if (numbers[(int)i] > max) {\n                max = numbers[(int)i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <602ae6ef4dd14f05b9f3276f5c367f68>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <602ae6ef4dd14f05b9f3276f5c367f68>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <602ae6ef4dd14f05b9f3276f5c367f68>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <602ae6ef4dd14f05b9f3276f5c367f68>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max_up_to = new List<long>();\n        long current_max
    = long.MinValue;\n        foreach (var num in numbers) {\n            if (num
    > current_max) {\n                current_max = num;\n            }\n            max_up_to.Add(current_max);\n
    \       }\n        return max_up_to;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49a633c97c9d496c804fd6ef018cdb45>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49a633c97c9d496c804fd6ef018cdb45>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3dcd2e3fe7bc4d5682c3508fbd2ff2d4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3dcd2e3fe7bc4d5682c3508fbd2ff2d4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3dcd2e3fe7bc4d5682c3508fbd2ff2d4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3dcd2e3fe7bc4d5682c3508fbd2ff2d4>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> maximums = new List<long>();\n        long max
    = numbers[0];\n        maximums.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            maximums.Add(max);\n
    \       }\n        return maximums;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b6567b8c0f734c2384776042936ababd>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b6567b8c0f734c2384776042936ababd>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b6567b8c0f734c2384776042936ababd>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b6567b8c0f734c2384776042936ababd>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        // Make a copy of the passed sequence\n        // >>> list_copy
    = (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L,
    (long)4L, (long)2L}))\n        List<long> list_copy = numbers;\n        // Build
    a result array\n        // >>> result = (new List<long>(new long[]{}))\n        List<long>
    result = new List<long>();\n        // Iterate over the list\n        // >>> for
    ((long)iL in (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L, (long)6L})))\n        for (long iL = 0; iL < list_copy.Count;
    iL++) {\n            // >>> result.add((long)Math.Max((long)list_copy[(long)iL],
    (long)list_copy[(long)0L]))\n            result.Add(Math.Max(list_copy[(int)iL],
    list_copy[0]));\n            // >>> list_copy[(long)0L] = (long)Math.Max((long)list_copy[(long)0L],
    (long)list_copy[(long)iL])\n            list_copy[0] = Math.Max(list_copy[0],
    list_copy[(int)iL]);\n        }\n        // >>> return result\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3cb1f34e96c40398786db6b2570bd1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3cb1f34e96c40398786db6b2570bd1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    0;\n        foreach (long n in numbers) {\n            max = Math.Max(max, n);\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cd8ec90dcb84645932e71a20ddeb0c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cd8ec90dcb84645932e71a20ddeb0c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rolling_max = new List<long>();\n        long max = numbers[0];\n
    \       for (int j = 0; j < numbers.Count; j++) {\n            if (numbers[j]
    > max) {\n                max = numbers[j];\n            }\n            rolling_max.Add(max);\n
    \       }\n        return rolling_max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <931f234ea9c14bd382335af54ec6cb6e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <931f234ea9c14bd382335af54ec6cb6e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <931f234ea9c14bd382335af54ec6cb6e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <931f234ea9c14bd382335af54ec6cb6e>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = numbers[0];\n        List<long> maximums = new
    List<long>();\n        for (int i = 0; i < numbers.Count; i++) {\n            max
    = (long)Math.Max(max, numbers[i]);\n            maximums.Add(max);\n        }\n
    \       return maximums;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <aecbf68821154a87be70da6e15e578e3>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <aecbf68821154a87be70da6e15e578e3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <aecbf68821154a87be70da6e15e578e3>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <aecbf68821154a87be70da6e15e578e3>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = numbers[0];\n        List<long> result = new List<long>();\n
    \       result.Add(max);\n        foreach (long i in numbers.Skip(1)) {\n            max
    = Math.Max(max, i);\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <1ab53ba60a6c4dd29d62f013c1d48a7a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <1ab53ba60a6c4dd29d62f013c1d48a7a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <1ab53ba60a6c4dd29d62f013c1d48a7a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <1ab53ba60a6c4dd29d62f013c1d48a7a>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long currMax = 0;\n
    \       foreach (var num in numbers) {\n            if (num > currMax) {\n                currMax
    = num;\n            }\n            result.Add(currMax);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c3c6f1be7c74567ab8d7fb5a4048cc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c3c6f1be7c74567ab8d7fb5a4048cc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> ret = new List<long>();\n        long max = 0;\n
    \       for (int i = 0; i < numbers.Count; i++) {\n            max = Math.Max(max,
    numbers[i]);\n            ret.Add(max);\n        }\n        return ret;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01ea975882184ca486e30ce1ff716ed0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01ea975882184ca486e30ce1ff716ed0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long maxSoFar = numbers[0];\n        List<long> res = new
    List<long>();\n        res.Add(maxSoFar);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            maxSoFar = Math.Max(maxSoFar, numbers[i]);\n            res.Add(maxSoFar);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <711e6c7b7ab542ada019dd829457e927>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <711e6c7b7ab542ada019dd829457e927>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <711e6c7b7ab542ada019dd829457e927>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <711e6c7b7ab542ada019dd829457e927>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var ret = new List<long>();\n        for (var i = 0; i < numbers.Count;
    i++) {\n            var max = numbers[i];\n            for (var j = 0; j <= i;
    j++) {\n                if (numbers[j] > max) {\n                    max = numbers[j];\n
    \               }\n            }\n            ret.Add(max);\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e1584645144444881b860fbae1bc5dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e1584645144444881b860fbae1bc5dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> maxes = new List<long>();\n        long max = numbers[0];\n
    \       maxes.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n            long
    n = numbers[i];\n            if (n > max) {\n                max = n;\n            }\n
    \           maxes.Add(max);\n        }\n        return maxes;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <774c0ca9dbf546baa600e45cada034d7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <774c0ca9dbf546baa600e45cada034d7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <774c0ca9dbf546baa600e45cada034d7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <774c0ca9dbf546baa600e45cada034d7>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> maximums = new List<long>();\n        long max
    = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n            max = Math.Max(max,
    numbers[i]);\n            maximums.Add(max);\n        }\n        return maximums;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01b53ca719b845e89524a85129b2fca6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01b53ca719b845e89524a85129b2fca6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> rolling = new List<long>();\n        long max =
    numbers[0];\n        rolling.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max)\n                max = numbers[i];\n
    \           rolling.Add(max);\n        }\n        return rolling;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b215285dad4d43ec90f86496d8848993>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b215285dad4d43ec90f86496d8848993>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b215285dad4d43ec90f86496d8848993>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b215285dad4d43ec90f86496d8848993>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rollingMaximum = new List<long>();\n        rollingMaximum.Add(numbers[0]);\n
    \       for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]
    > rollingMaximum[i - 1]) {\n                rollingMaximum.Add(numbers[i]);\n
    \           } else {\n                rollingMaximum.Add(rollingMaximum[i - 1]);\n
    \           }\n        }\n        return rollingMaximum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e7f4826a69764feb84ff06ea41830aab>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e7f4826a69764feb84ff06ea41830aab>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e7f4826a69764feb84ff06ea41830aab>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e7f4826a69764feb84ff06ea41830aab>:0
    \n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long n = (long)numbers.Count;\n        List<long> result =
    new List<long>((int)n);\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n
    \       for (long i = (long)1L; i < n; i++) {\n            currentMax = Math.Max(currentMax,
    numbers[(int)i]);\n            result.Add(currentMax);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00011] in <cd789466ced74604aea39cf40f6ebc49>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <cd789466ced74604aea39cf40f6ebc49>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00011] in <cd789466ced74604aea39cf40f6ebc49>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <cd789466ced74604aea39cf40f6ebc49>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long currentMaximum
    = long.MinValue;\n        foreach (var number in numbers) {\n            if (number
    > currentMaximum)\n                currentMaximum = number;\n            result.Add(currentMaximum);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b19de02280a413fa7710a252b3ce188>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b19de02280a413fa7710a252b3ce188>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> ans = new List<long>();\n        long maxSoFar
    = numbers[0];\n        ans.Add(maxSoFar);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            maxSoFar = Math.Max(maxSoFar, numbers[i]);\n            ans.Add(maxSoFar);\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <98617c1e490446d98f3532bd0f23ad43>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <98617c1e490446d98f3532bd0f23ad43>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <98617c1e490446d98f3532bd0f23ad43>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <98617c1e490446d98f3532bd0f23ad43>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        // They are in non-decreasing order\n        List<long> result
    = new List<long>();\n        long max = long.MinValue;\n        for (int i = 0;
    i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n                max
    = numbers[i];\n            }\n            result.Add(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1a190d81f34c4523a7802111698ff030>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1a190d81f34c4523a7802111698ff030>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var cnt = numbers.Count;\n        var maxs = new List<long>();\n
    \       var max = numbers[0];\n        for (int i = 0; i < cnt; i++) {\n            max
    = Math.Max(max, numbers[i]);\n            maxs.Add(max);\n        }\n        return
    maxs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000e] in <2259e2f4c2c94e0bb993ac4953064d65>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2259e2f4c2c94e0bb993ac4953064d65>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000e] in <2259e2f4c2c94e0bb993ac4953064d65>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2259e2f4c2c94e0bb993ac4953064d65>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> ans = new List<long>();\n        long m = numbers[0];\n
    \       ans.Add(m);\n        foreach (long n in numbers.Skip(1)) {\n            if
    (n > m) {\n                m = n;\n            }\n            ans.Add(m);\n        }\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e8064e5f8bcf499b988f9c34f0b53402>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e8064e5f8bcf499b988f9c34f0b53402>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e8064e5f8bcf499b988f9c34f0b53402>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e8064e5f8bcf499b988f9c34f0b53402>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long previous
    = numbers[0];\n        result.Add(previous);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > previous) {\n                previous = numbers[i];\n
    \           }\n            result.Add(previous);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <d14f90fb9ab44023b0516e16d32a4cba>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d14f90fb9ab44023b0516e16d32a4cba>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <d14f90fb9ab44023b0516e16d32a4cba>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d14f90fb9ab44023b0516e16d32a4cba>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long count = numbers.Count;\n        List<long> rollingMax
    = new List<long>();\n        for (int i = 0; i < count; i++) {\n            rollingMax.Add(Max(numbers.Take(i
    + 1)));\n        }\n        return rollingMax;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp_u7zder.cs(17,28): error CS0103: The name ''Max'' does not exist in the
    current context

    '
  timestamp: 1660008824
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        if (numbers.Count
    == 0) {\n            return result;\n        }\n        result.Add(numbers[0]);\n
    \       for (long i = 1; i < numbers.Count; i++) {\n            result.Add(Math.Max(result[(int)(i
    - 1)], numbers[(int)(i)]));\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a3d959f6cfe48d1be78e72a11ec3624>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a3d959f6cfe48d1be78e72a11ec3624>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> max = new List<long>();\n        long max_value
    = numbers[0];\n        max.Add(max_value);\n        int n = numbers.Count;\n        for
    (int i = 1; i < n; i++) {\n            if (numbers[i] > max_value) {\n                max_value
    = numbers[i];\n            }\n            max.Add(max_value);\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <dee3105eb26e4a968548adf065bb8e90>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <dee3105eb26e4a968548adf065bb8e90>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <dee3105eb26e4a968548adf065bb8e90>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <dee3105eb26e4a968548adf065bb8e90>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long number in numbers) {\n            max = Math.Max(max, number);\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7aa4d8b43304b39a22bf49ee39c82c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7aa4d8b43304b39a22bf49ee39c82c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var res = new List<long>();\n        long max = 0;\n        foreach
    (var num in numbers) {\n            if (num > max) {\n                max = num;\n
    \           }\n            res.Add(max);\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7d88ae5de42476a99d15e8c03c58054>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7d88ae5de42476a99d15e8c03c58054>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <d9bc4b772227430a8f36780725c101dd>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d9bc4b772227430a8f36780725c101dd>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <d9bc4b772227430a8f36780725c101dd>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d9bc4b772227430a8f36780725c101dd>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var rolling_max =
    0L;\n        foreach (var i in numbers) {\n            rolling_max = Math.Max(rolling_max,
    i);\n            result.Add(rolling_max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32d2f64ff34541faabd3ee6111b86fde>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32d2f64ff34541faabd3ee6111b86fde>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var currentMax = numbers[0];\n
    \       result.Add(currentMax);\n        foreach (var num in numbers.Skip(1))
    {\n            if (num > currentMax) {\n                currentMax = num;\n            }\n
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b18cb9e5c1184b2dbaafda60309459bd>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b18cb9e5c1184b2dbaafda60309459bd>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b18cb9e5c1184b2dbaafda60309459bd>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b18cb9e5c1184b2dbaafda60309459bd>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var N = numbers.Count;\n        List<long> res = new List<long>();\n
    \       for (int i = 0; i < N; i++) {\n            var max = numbers[i];\n            for
    (int j = 0; j <= i; j++) {\n                max = Math.Max(max, numbers[j]);\n
    \           }\n            res.Add(max);\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <509e34b072d74b2ead102549eb834096>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <509e34b072d74b2ead102549eb834096>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        for (int i = 0; i < numbers.Count; i++) {\n            max
    = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5fb2fc16807844b0afb23ac9cf822e99>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5fb2fc16807844b0afb23ac9cf822e99>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5fb2fc16807844b0afb23ac9cf822e99>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5fb2fc16807844b0afb23ac9cf822e99>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rmax = new List<long>();\n        if (numbers.Count <
    1) return rmax;\n        var maxsofar = numbers[0];\n        rmax.Add(maxsofar);\n
    \       foreach (var n in numbers.Skip(1)) {\n            maxsofar = Math.Max(maxsofar,
    n);\n            rmax.Add(maxsofar);\n        }\n        return rmax;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <243fd231abdc4cbdb9cf9ff6d4aad1d3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <243fd231abdc4cbdb9cf9ff6d4aad1d3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var maxSoFar = numbers[0];\n
    \       result.Add(maxSoFar);\n        for (int i = 1; i < numbers.Count; i++)
    {\n            if (numbers[i] > maxSoFar) {\n                maxSoFar = numbers[i];\n
    \           }\n            result.Add(maxSoFar);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0f924e529e904471879bf8f5a5084571>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0f924e529e904471879bf8f5a5084571>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0f924e529e904471879bf8f5a5084571>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0f924e529e904471879bf8f5a5084571>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        // https://cses.fi/problemset/task/1752/\n        var result
    = new List<long>();\n        var stack = new Stack<long>();\n        for (var
    i = 0; i < numbers.Count; i++) {\n            var n = numbers[i];\n            if
    (stack.Count == 0) {\n                result.Add(n);\n                stack.Push(n);\n
    \           } else {\n                if (n >= stack.Peek()) {\n                    result.Add(n);\n
    \                   stack.Push(n);\n                } else {\n                    while
    (stack.Count > 0 && n < stack.Peek()) {\n                        stack.Pop();\n
    \                   }\n                    if (stack.Count == 0) {\n                        result.Add(n);\n
    \                       stack.Push(n);\n                    } else {\n                        result.Add(stack.Peek());\n
    \                   }\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2440c752175470ea7ea231d8e5cf24a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2440c752175470ea7ea231d8e5cf24a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long Max = long.MinValue;\n
    \       foreach (var number in numbers) {\n            if (number > Max) {\n                Max
    = number;\n            }\n            result.Add(Max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7adff096c6a4bcbb4e74efbd20f38a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7adff096c6a4bcbb4e74efbd20f38a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        result.Add(numbers[0]);\n
    \       long max = numbers[0];\n        for (int i = 1; i < numbers.Count; i++)
    {\n            if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f196413d07f6443fb237d71251ba6ce8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f196413d07f6443fb237d71251ba6ce8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f196413d07f6443fb237d71251ba6ce8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f196413d07f6443fb237d71251ba6ce8>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        result.Add(numbers[0]);\n
    \       for (int i = 1; i < numbers.Count; i++) {\n            long currentMax
    = result[i - 1];\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <ac9d7cde7cda45e098533419bd03b493>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ac9d7cde7cda45e098533419bd03b493>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <ac9d7cde7cda45e098533419bd03b493>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ac9d7cde7cda45e098533419bd03b493>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = long.MinValue;\n
    \       for (int i = 0; i < numbers.Count; i++) {\n            if (numbers[i]
    > max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9086f07e432434fa36801d91063a9e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9086f07e432434fa36801d91063a9e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        foreach (var n in numbers.Skip(1)) {\n            if
    (n > max) {\n                max = n;\n            }\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <7fad7e09623442bf8551708c5dd0589b>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <7fad7e09623442bf8551708c5dd0589b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <7fad7e09623442bf8551708c5dd0589b>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <7fad7e09623442bf8551708c5dd0589b>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMaximum
    = numbers[0];\n        result.Add(currentMaximum);\n        for (long i = 1; i
    < numbers.Count; i++) {\n            if (numbers[(int)i] > currentMaximum) {\n
    \               currentMaximum = numbers[(int)i];\n            }\n            result.Add(currentMaximum);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <771476113830450691078734b9e5fdbc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <771476113830450691078734b9e5fdbc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <771476113830450691078734b9e5fdbc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <771476113830450691078734b9e5fdbc>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var temp = new List<long>();\n
    \       var numbersOrdered = numbers.OrderBy(x => x).ToList();\n        foreach
    (var num in numbersOrdered) {\n            while (temp.Count > 0 && temp[temp.Count
    - 1] <= num) {\n                temp.RemoveAt(temp.Count - 1);\n            }\n
    \           temp.Add(num);\n            result.Add(temp[0]);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb958778c15447b897602a3586545f7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fb958778c15447b897602a3586545f7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var len = numbers.Count;\n        var m   = numbers[0];\n
    \       var rollingMax = new List<long> {m};\n        for (var i = 1; i < len;
    i++) {\n            var n = numbers[i];\n            rollingMax.Add(Math.Max(m,
    n));\n            m = rollingMax[i];\n        }\n        return rollingMax;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00008] in <18a343d6cff542c8a150da1a63a9fba5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <18a343d6cff542c8a150da1a63a9fba5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00008] in <18a343d6cff542c8a150da1a63a9fba5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <18a343d6cff542c8a150da1a63a9fba5>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long acc = long.MinValue;\n        List<long> accs = new List<long>();\n
    \       foreach (long v in numbers) {\n            acc = Math.Max(acc, v);\n            accs.Add(acc);\n
    \       }\n        return accs;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc8bfcc289e94cf8b7ddc20b3814500f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc8bfcc289e94cf8b7ddc20b3814500f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            currentMax = Math.Max(currentMax, numbers[i]);\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <a758f0c8f54f45e29af30d0434888484>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <a758f0c8f54f45e29af30d0434888484>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <a758f0c8f54f45e29af30d0434888484>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <a758f0c8f54f45e29af30d0434888484>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> answer = new List<long>();\n        long max =
    0;\n        foreach (long number in numbers) {\n            max = Math.Max(max,
    number);\n            answer.Add(max);\n        }\n        return answer;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db493e641fa94fc99f399bfd4760750a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db493e641fa94fc99f399bfd4760750a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        if (numbers.Count == 0) {\n            return numbers;\n        }\n
    \       List<long> maxList = new List<long>();\n        maxList.Add(numbers[0]);\n
    \       long max = numbers[0];\n        foreach (long num in numbers) {\n            if
    (num > max) {\n                max = num;\n            }\n            maxList.Add(max);\n
    \       }\n        return maxList;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e9205b9d189462d9bc865d3b91576e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e9205b9d189462d9bc865d3b91576e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long curMax = numbers[0];\n        List<long> maxUntil = new
    List<long>();\n        maxUntil.Add(curMax);\n        int n = numbers.Count;\n
    \       for (int i = 1; i < n; i++) {\n            curMax = Math.Max(curMax, numbers[i]);\n
    \           maxUntil.Add(curMax);\n        }\n        return maxUntil;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <bdbd05f646c04e87ab20d1545203a826>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <bdbd05f646c04e87ab20d1545203a826>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <bdbd05f646c04e87ab20d1545203a826>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <bdbd05f646c04e87ab20d1545203a826>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long rollingMax =
    numbers[0];\n        result.Add(rollingMax);\n        for (long j = 1L; j < numbers.Count;
    j++) {\n            rollingMax = Math.Max(rollingMax, numbers[(int)j]);\n            result.Add(rollingMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <799739d0b9264bcf859dfc6593778541>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <799739d0b9264bcf859dfc6593778541>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <799739d0b9264bcf859dfc6593778541>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <799739d0b9264bcf859dfc6593778541>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> res = new List<long>();\n        foreach (var i
    in numbers) {\n            var last = res.LastOrDefault();\n            if (last
    < i) {\n                res.Add(i);\n            } else {\n                res.Add(last);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9fe071ba5474616ac524a4a368e21b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9fe071ba5474616ac524a4a368e21b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var list = new List<long>();\n        var maxValue = 0L;\n
    \       foreach (var number in numbers) {\n            if (number > maxValue)
    {\n                maxValue = number;\n            }\n            list.Add(maxValue);\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e074a71b8b646b78181cc9831cf2c52>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e074a71b8b646b78181cc9831cf2c52>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> rollingMax = new List<long>();\n        long currentMax
    = numbers[0];\n        rollingMax.Add(currentMax);\n        for (int i = 1; i
    < numbers.Count; i++) {\n            currentMax = Math.Max(currentMax, numbers[i]);\n
    \           rollingMax.Add(currentMax);\n        }\n        return rollingMax;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <eeae9f2875614124a41403335fc9f7dd>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <eeae9f2875614124a41403335fc9f7dd>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <eeae9f2875614124a41403335fc9f7dd>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <eeae9f2875614124a41403335fc9f7dd>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var retval = new List<long>();\n        long currMax = 0;\n
    \       foreach (var currNum in numbers) {\n            currMax = Math.Max(currNum,
    currMax);\n            retval.Add(currMax);\n        }\n        return retval;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029bc10586da4917bffae7f5e6b6a6e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029bc10586da4917bffae7f5e6b6a6e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        result.Add(numbers[0]);\n
    \       for (int i = 1; i < numbers.Count; i++) {\n            result.Add(Math.Max(result[i
    - 1], numbers[i]));\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <865881609b7742e7908e5c6108162c3a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <865881609b7742e7908e5c6108162c3a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <865881609b7742e7908e5c6108162c3a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <865881609b7742e7908e5c6108162c3a>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(max);\n        foreach (var num in numbers.Skip(1)) {\n            if
    (num > max) {\n                max = num;\n            }\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <820940f51e6f454c849e52da429a8adf>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <820940f51e6f454c849e52da429a8adf>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <820940f51e6f454c849e52da429a8adf>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <820940f51e6f454c849e52da429a8adf>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long maxValue
    = numbers[0];\n        result.Add(maxValue);\n        for (long i = (long)1L;
    i < numbers.Count; i++) {\n            maxValue = Math.Max(maxValue, numbers[(int)i]);\n
    \           result.Add(maxValue);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <dc0b0cdd617546f197157825845db2ef>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <dc0b0cdd617546f197157825845db2ef>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <dc0b0cdd617546f197157825845db2ef>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <dc0b0cdd617546f197157825845db2ef>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        for (int i = 0; i < numbers.Count; i++) {\n            if
    (numbers[i] > max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b9061656da4e45b595ebb18358a0f400>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b9061656da4e45b595ebb18358a0f400>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b9061656da4e45b595ebb18358a0f400>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b9061656da4e45b595ebb18358a0f400>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        // >>> RollingMax((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)2L, (long)3L, (long)4L, (long)2L})))\n        // (new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n
    \       List<long> result = new List<long>();\n        for (int i = 0; i < numbers.Count;
    i++) {\n            long max = numbers[i];\n            for (int j = 0; j <= i;
    j++) {\n                if (numbers[j] > max) {\n                    max = numbers[j];\n
    \               }\n            }\n            result.Add(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <824e8ca6649e45328da1df92d63125dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <824e8ca6649e45328da1df92d63125dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> answer = new List<long>();\n        long maxElem
    = numbers[0];\n        answer.Add(maxElem);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            long nextElem = numbers[i];\n            maxElem = Math.Max(maxElem,
    nextElem);\n            answer.Add(maxElem);\n        }\n        return answer;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <fc20a01712c245a0afcaf897371766c4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <fc20a01712c245a0afcaf897371766c4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <fc20a01712c245a0afcaf897371766c4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <fc20a01712c245a0afcaf897371766c4>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        if (numbers.Count == 0) {\n            return new List<long>();\n
    \       }\n        List<long> ans = new List<long>();\n        ans.Add(numbers[0]);\n
    \       long current = numbers[0];\n        for (int i = 1; i < numbers.Count;
    i++) {\n            current = Math.Max(current, numbers[i]);\n            ans.Add(current);\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ccc6c7e82504b27a2dee3d1982e549e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ccc6c7e82504b27a2dee3d1982e549e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var answer = new List<long>();\n        long max = 0;\n        foreach
    (var i in numbers) {\n            max = Math.Max(max, i);\n            answer.Add(max);\n
    \       }\n        return answer;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a119b79ae2444b6aa7294b543ff0c31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a119b79ae2444b6aa7294b543ff0c31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> max = new List<long>();\n        // Fill out the
    max array\n        foreach (long num in numbers) {\n            if (max.Count
    == 0) {\n                max.Add(num);\n            } else {\n                max.Add(Math.Max(max[max.Count
    - 1], num));\n            }\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d6aeacb757b408eb4edb9eb184a1b51>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d6aeacb757b408eb4edb9eb184a1b51>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var longest = new List<long>();\n        var max = numbers[0];\n
    \       longest.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           longest.Add(max);\n        }\n        return longest;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <8e08642819c64d8b9838be1ae5313bb5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8e08642819c64d8b9838be1ae5313bb5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <8e08642819c64d8b9838be1ae5313bb5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8e08642819c64d8b9838be1ae5313bb5>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        // You need to replace this with your code\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <b4cbf9752c144117891d3a176b9287ff>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <b4cbf9752c144117891d3a176b9287ff>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long current = (long)0L;\n        List<long> ret = new List<long>();\n
    \       for (int i = 0; i < numbers.Count; i++) {\n            if (numbers[i]
    > current) {\n                current = numbers[i];\n            }\n            ret.Add(current);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2342072bbcee49c38d4f9c8501f0a375>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2342072bbcee49c38d4f9c8501f0a375>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        var s = new
    Stack<Tuple<long, long>>();\n        for (long i = 0; i < numbers.Count; i++)
    {\n            var n = numbers[(int)i];\n            while (s.Count > 0 && s.Peek().Item1
    < n) {\n                s.Pop();\n            }\n            s.Push(Tuple.Create(n,
    i));\n            result.Add(s.Peek().Item1);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acc5929e44e441d1940aa367adb5ded1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acc5929e44e441d1940aa367adb5ded1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        return numbers.Select((number, idx) =>\n            numbers.Take(idx
    + 1).Max()\n        ).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d6194622d0442ceb9e88a9711f35114>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d6194622d0442ceb9e88a9711f35114>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        if(numbers.Count == 0) {\n            return numbers;\n        }\n
    \       List<long> results = new List<long>();\n        long max = numbers[0];\n
    \       results.Add(max);\n        for(int i = 1; i < numbers.Count; i++) {\n
    \           max = Max(max, numbers[i]);\n            results.Add(max);\n        }\n
    \       return results;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1p7wv6iy.cs(21,19): error CS0103: The name ''Max'' does not exist in the
    current context

    '
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> ret = new List<long>();\n        long maxx = numbers[0];\n
    \       ret.Add(maxx);\n        for (int i = 1; i < numbers.Count; i++) {\n            maxx
    = Math.Max(maxx, numbers[i]);\n            ret.Add(maxx);\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <342ba037e8f14602af32096bd7741701>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <342ba037e8f14602af32096bd7741701>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <342ba037e8f14602af32096bd7741701>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <342ba037e8f14602af32096bd7741701>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var ret = new List<long>();\n        long max = numbers[0];\n
    \       ret.Add(max);\n        foreach (var num in numbers.Skip(1)) {\n            if
    (num > max) {\n                max = num;\n            }\n            ret.Add(max);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <4986e2ab86614db58afed67fb1af166a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <4986e2ab86614db58afed67fb1af166a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <4986e2ab86614db58afed67fb1af166a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <4986e2ab86614db58afed67fb1af166a>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = 0;\n        List<long> r = new List<long>();\n
    \       foreach (long n in numbers) {\n            max = Math.Max(max, n);\n            r.Add(max);\n
    \       }\n        return r;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a3b88a2ff634efeb169743528e744b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a3b88a2ff634efeb169743528e744b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rolling = new List<long>();\n        var max = numbers[0];\n
    \       for (int i = 0; i < numbers.Count; i++) {\n            max = Math.Max(max,
    numbers[i]);\n            rolling.Add(max);\n        }\n        return rolling;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5ac4b11a6b2e42e8957f2fe00f8d2cc8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5ac4b11a6b2e42e8957f2fe00f8d2cc8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5ac4b11a6b2e42e8957f2fe00f8d2cc8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5ac4b11a6b2e42e8957f2fe00f8d2cc8>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        if (numbers.Count == 0) {\n            return numbers;\n        }\n
    \       List<long> result = new List<long>();\n        result.Add(numbers[0]);\n
    \       long max = numbers[0];\n        for (int i = 1; i < numbers.Count; i++)
    {\n            if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0298373f21ca47548ca6e7995ed66a7e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0298373f21ca47548ca6e7995ed66a7e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = numbers[0];\n        List<long> result = new List<long>();\n
    \       result.Add(max);\n        foreach (long e in numbers.Skip(1)) {\n            if
    (e > max) {\n                max = e;\n            }\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <20ff50e96d7b47348e97dc2227793089>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <20ff50e96d7b47348e97dc2227793089>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <20ff50e96d7b47348e97dc2227793089>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <20ff50e96d7b47348e97dc2227793089>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long largestSoFar
    = 0;\n        foreach (long x in numbers) {\n            if (x > largestSoFar)
    {\n                largestSoFar = x;\n            }\n            result.Add(largestSoFar);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb8d6b18f05047499d2041189899c8f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb8d6b18f05047499d2041189899c8f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var maxSoFar = new List<long>();\n        long? currentMax
    = null;\n        foreach (var n in numbers) {\n            if (currentMax == null
    || n > currentMax) {\n                currentMax = n;\n            }\n            maxSoFar.Add(currentMax.Value);\n
    \       }\n        return maxSoFar;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33a798585f0b47c68e06d0c63023d6ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33a798585f0b47c68e06d0c63023d6ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var currentMax = numbers[0];\n
    \       result.Add(currentMax);\n        for (var i = 1; i < numbers.Count; i++)
    {\n            if (numbers[i] > currentMax) {\n                currentMax = numbers[i];\n
    \           }\n            result.Add(currentMax);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3306bafc22724373a8c2a240ceb99bcb>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3306bafc22724373a8c2a240ceb99bcb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3306bafc22724373a8c2a240ceb99bcb>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3306bafc22724373a8c2a240ceb99bcb>:0
    \n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> ans = new List<long>();\n        foreach (var n
    in numbers) {\n            if (ans.Count == 0) {\n                ans.Add(n);\n
    \           } else {\n                ans.Add(Math.Max(ans[ans.Count - 1], n));\n
    \           }\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfcfd636b37a441899d529c7a8b08a5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfcfd636b37a441899d529c7a8b08a5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = long.MinValue;\n        foreach (long n in numbers) {\n            currentMax
    = Math.Max(currentMax, n);\n            result.Add(currentMax);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d47ff3225b884f5ca475859ec444bda1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d47ff3225b884f5ca475859ec444bda1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> rolling = new List<long>();\n        long largest
    = long.MinValue;\n        for (int i = 0; i < numbers.Count; i++) {\n            largest
    = Math.Max(largest, numbers[i]);\n            rolling.Add(largest);\n        }\n
    \       return rolling;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8367da72dcc347b7ac535655ca873d11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8367da72dcc347b7ac535655ca873d11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        foreach (var number
    in numbers) {\n            if (result.Count == 0) {\n                result.Add(number);\n
    \           } else {\n                result.Add(Math.Max(result[result.Count
    - 1], number));\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a83cde9b6554b46be45f0c315a4dad2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a83cde9b6554b46be45f0c315a4dad2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long curMax = numbers[0];\n        List<long> res = new List<long>();\n
    \       res.Add(curMax);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           curMax = Math.Max(curMax, numbers[i]);\n            res.Add(curMax);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <9cfd4e58c25f475786312be682959a63>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9cfd4e58c25f475786312be682959a63>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <9cfd4e58c25f475786312be682959a63>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9cfd4e58c25f475786312be682959a63>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> output = new List<long>();\n        long max =
    numbers[0];\n        output.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            output.Add(max);\n        }\n        return output;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <74444e1ebba243d5825480ce1ee1a319>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <74444e1ebba243d5825480ce1ee1a319>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <74444e1ebba243d5825480ce1ee1a319>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <74444e1ebba243d5825480ce1ee1a319>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rmax = new List<long>();\n        long max = numbers[0];\n
    \       rmax.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n            if
    (numbers[i] > max) {\n                max = numbers[i];\n            }\n            rmax.Add(max);\n
    \       }\n        return rmax;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <108811dbbdcd46cf8e7d0a57df45085e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <108811dbbdcd46cf8e7d0a57df45085e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <108811dbbdcd46cf8e7d0a57df45085e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <108811dbbdcd46cf8e7d0a57df45085e>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long currentMax =
    long.MinValue;\n        foreach (var number in numbers) {\n            if (number
    > currentMax) {\n                currentMax = number;\n            }\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43324259193e4b6881fb1a4fd81a5c39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43324259193e4b6881fb1a4fd81a5c39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> currentMaximum = new List<long>();\n        long
    maximum = numbers[0];\n        currentMaximum.Add(maximum);\n        for (long
    i = 1; i < numbers.Count; i++) {\n            if (numbers[(int)i] > maximum) {\n
    \               maximum = numbers[(int)i];\n            }\n            currentMaximum.Add(maximum);\n
    \       }\n        return currentMaximum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f4b9b738c19e4ca1886183906bdba5c4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f4b9b738c19e4ca1886183906bdba5c4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f4b9b738c19e4ca1886183906bdba5c4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f4b9b738c19e4ca1886183906bdba5c4>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var n = numbers.Count;\n        var result = new List<long>(new
    long[n]);\n        var max = numbers[0];\n        result[0] = max;\n        for
    (int i = 1; i < n; i++) {\n            max = Math.Max(max, numbers[i]);\n            result[i]
    = max;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00014] in <944ae29367534b4a82209abaef15e70e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <944ae29367534b4a82209abaef15e70e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00014] in <944ae29367534b4a82209abaef15e70e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <944ae29367534b4a82209abaef15e70e>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var maxes = new List<long>();\n        long currentMax = long.MinValue;\n
    \       foreach (var n in numbers) {\n            if (n > currentMax) {\n                currentMax
    = n;\n            }\n            maxes.Add(currentMax);\n        }\n        return
    maxes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78267c66bdb4493cb89aaf7068aec30f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78267c66bdb4493cb89aaf7068aec30f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long best =
    numbers[0];\n        result.Add(best);\n        foreach (long number in numbers.Skip(1))
    {\n            best = Math.Max(best, number);\n            result.Add(best);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <92afa4ff98574770bb5ad1c9debad19f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <92afa4ff98574770bb5ad1c9debad19f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <92afa4ff98574770bb5ad1c9debad19f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <92afa4ff98574770bb5ad1c9debad19f>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long maximum
    = 0;\n        foreach (long num in numbers) {\n            maximum = Math.Max(maximum,
    num);\n            result.Add(maximum);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c4af6cdd44345f1a9427b7590611bb5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c4af6cdd44345f1a9427b7590611bb5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long maxSoFar = numbers[0];\n        List<long> result = new
    List<long>();\n        foreach (long n in numbers) {\n            maxSoFar = Math.Max(maxSoFar,
    n);\n            result.Add(maxSoFar);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <58bfb31e48174151a81a65522b172ee6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <58bfb31e48174151a81a65522b172ee6>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <58bfb31e48174151a81a65522b172ee6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <58bfb31e48174151a81a65522b172ee6>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var currentMax = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(currentMax);\n        foreach (var n in numbers.Skip(1)) {\n
    \           if (n > currentMax) {\n                currentMax = n;\n            }\n
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <a7267358b850411a8273fe1ca9a3b6bc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <a7267358b850411a8273fe1ca9a3b6bc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <a7267358b850411a8273fe1ca9a3b6bc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <a7267358b850411a8273fe1ca9a3b6bc>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = numbers[0];\n        for (long i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[(int)i]);\n            numbers[(int)i]
    = max;\n        }\n        return numbers;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <a05e96dc85044b4c9ac4c71ab111e66d>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <a05e96dc85044b4c9ac4c71ab111e66d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <a05e96dc85044b4c9ac4c71ab111e66d>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <a05e96dc85044b4c9ac4c71ab111e66d>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var acc = (long)0L;\n        var final = new List<long>();\n
    \       foreach (var n in numbers) {\n            acc = (long)Math.Max(acc, n);\n
    \           final.Add(acc);\n        }\n        return final;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <756cd5a5a802442b92005133d8772397>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <756cd5a5a802442b92005133d8772397>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        if(numbers.Count == 0) return numbers;\n        List<long>
    result = new List<long>();\n        long max = numbers[0];\n        result.Add(max);\n
    \       for(int i = 1; i < numbers.Count; i++) {\n            if(numbers[i] >
    max) max = numbers[i];\n            result.Add(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c450af3c0f1e4bc6b4e2c87d67f701dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c450af3c0f1e4bc6b4e2c87d67f701dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long currMax = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(currMax);\n        for (int i = 1; i < numbers.Count; i++)
    {\n            if (numbers[i] > currMax) {\n                currMax = numbers[i];\n
    \           }\n            result.Add(currMax);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <73e0ca890df441d18295dc938f8ee0da>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <73e0ca890df441d18295dc938f8ee0da>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <73e0ca890df441d18295dc938f8ee0da>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <73e0ca890df441d18295dc938f8ee0da>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> rolling = new List<long>();\n        rolling.Add(numbers[0]);\n
    \       foreach (var number in numbers.Skip(1)) {\n            rolling.Add(Math.Max(rolling.Last(),
    number));\n        }\n        return rolling;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df76bb3182954cdbb7726b84c929955a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df76bb3182954cdbb7726b84c929955a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df76bb3182954cdbb7726b84c929955a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df76bb3182954cdbb7726b84c929955a>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e5ddd3eaeb2a4e2fa23dd6b8fde03f59>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e5ddd3eaeb2a4e2fa23dd6b8fde03f59>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e5ddd3eaeb2a4e2fa23dd6b8fde03f59>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e5ddd3eaeb2a4e2fa23dd6b8fde03f59>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var ret = new List<long>();\n        long max_value = numbers[0];\n
    \       for (long i = 0; i < numbers.Count; i++) {\n            if (numbers[(int)i]
    > max_value) {\n                max_value = numbers[(int)i];\n            }\n
    \           ret.Add(max_value);\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <7c765da247f04c0ab25cecee19d565e2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <7c765da247f04c0ab25cecee19d565e2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <7c765da247f04c0ab25cecee19d565e2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <7c765da247f04c0ab25cecee19d565e2>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <135b4d5188084744963deef96bc076e4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <135b4d5188084744963deef96bc076e4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <135b4d5188084744963deef96bc076e4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <135b4d5188084744963deef96bc076e4>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        for (int i = 0; i < numbers.Count; i++) {\n            currentMax
    = Math.Max(currentMax, numbers[i]);\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <319ab405038a410ab76b6eaa9edc4273>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <319ab405038a410ab76b6eaa9edc4273>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <319ab405038a410ab76b6eaa9edc4273>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <319ab405038a410ab76b6eaa9edc4273>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long m = numbers[0];\n
    \       result.Add(m);\n        for (int i = 1; i < numbers.Count; i++) {\n            if
    (numbers[i] > m) {\n                m = numbers[i];\n            }\n            result.Add(m);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <343a9c3b2a9e4f749a83f341b445d02e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <343a9c3b2a9e4f749a83f341b445d02e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <343a9c3b2a9e4f749a83f341b445d02e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <343a9c3b2a9e4f749a83f341b445d02e>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var n = numbers.Count;\n        var ret = new List<long>();\n
    \       ret.Add(numbers[0]);\n        for (var i = 1; i < n; i++) {\n            ret.Add(System.Math.Max(ret[i
    - 1], numbers[i]));\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000e] in <c76978a0ccdc4011809a68163cb843a1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <c76978a0ccdc4011809a68163cb843a1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000e] in <c76978a0ccdc4011809a68163cb843a1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <c76978a0ccdc4011809a68163cb843a1>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> ret = new List<long>();\n        long maximum =
    0;\n        for (int i = 0; i < numbers.Count; i++) {\n            if (numbers[i]
    > maximum) {\n                maximum = numbers[i];\n            }\n            ret.Add(maximum);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4947bf1971d34682b67ec7a04bfa0b1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4947bf1971d34682b67ec7a04bfa0b1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long m = (long)0L;\n        var rm = new List<long>();\n        foreach
    (var _n in numbers)\n        {\n            if (_n > m)\n            {\n                m
    = _n;\n            }\n\n            rm.Add(m);\n\n        }\n\n        return
    rm;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79159522fd294171b84bd8ce5f700a87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79159522fd294171b84bd8ce5f700a87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        return numbers.Select((_, k) => numbers.Take(k + 1).Max()).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <740b84b175c34a4683ee827184fc232a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <740b84b175c34a4683ee827184fc232a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> rollingMax = new List<long>();\n        for (int
    i = 0; i < numbers.Count; i++) {\n            long maxNumber = numbers[i];\n            for
    (int j = 0; j <= i; j++) {\n                maxNumber = Math.Max(maxNumber, numbers[j]);\n
    \           }\n            rollingMax.Add(maxNumber);\n        }\n        return
    rollingMax;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d4d855ec9ef4512a3702c709d4f8a7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d4d855ec9ef4512a3702c709d4f8a7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long m = long.MinValue;\n
    \       foreach (long num in numbers) {\n            m = Math.Max(m, num);\n            result.Add(m);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43137767e82a41279283c3ce50b9d35d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43137767e82a41279283c3ce50b9d35d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> rollingMax = new List<long>();\n        long max
    = numbers[0];\n        rollingMax.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            rollingMax.Add(max);\n
    \       }\n        return rollingMax;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <03a2092a0a5a44228f0f34f62efbdd42>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <03a2092a0a5a44228f0f34f62efbdd42>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <03a2092a0a5a44228f0f34f62efbdd42>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <03a2092a0a5a44228f0f34f62efbdd42>:0
    \n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var maxSeen = -1L;\n
    \       for (int i = 0; i < numbers.Count; i++) {\n            maxSeen = Math.Max(maxSeen,
    numbers[i]);\n            result.Add(maxSeen);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <933f3541eb3547f5adf78af2d49be3c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <933f3541eb3547f5adf78af2d49be3c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = (long) 0L;\n        List<long> result = new List<long>();\n
    \       foreach (long n in numbers) {\n            max = Math.Max(max, n);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <480f6a9603114584afd672800fb261b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <480f6a9603114584afd672800fb261b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in numbers) {\n            if (i > max) {\n                max
    = i;\n            }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b8bcfaec2d147f780b60246b21a6959>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b8bcfaec2d147f780b60246b21a6959>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> ret = new List<long>();\n        ret.Add(numbers[0]);\n
    \       for (int i = 1; i < numbers.Count; i++) {\n            ret.Add(Math.Max(ret[i
    - 1], numbers[i]));\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5732cd5e6db941d0b846d1099be9cbf4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5732cd5e6db941d0b846d1099be9cbf4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5732cd5e6db941d0b846d1099be9cbf4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5732cd5e6db941d0b846d1099be9cbf4>:0
    \n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            long number = numbers[i];\n            if (number > max) {\n
    \               max = number;\n            }\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f6f4fdb47d274f98bd99d1d692ad8725>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f6f4fdb47d274f98bd99d1d692ad8725>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f6f4fdb47d274f98bd99d1d692ad8725>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f6f4fdb47d274f98bd99d1d692ad8725>:0
    \n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> maxes = new List<long>();\n        long currentMax
    = numbers[0];\n        maxes.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            maxes.Add(currentMax);\n        }\n
    \       return maxes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <d63a7df9b334412995291ae2a472b615>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d63a7df9b334412995291ae2a472b615>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <d63a7df9b334412995291ae2a472b615>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d63a7df9b334412995291ae2a472b615>:0
    \n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var counts = new List<long>();\n        long max = numbers[0];\n
    \       for (int i = 0; i < numbers.Count; i++) {\n            max = Math.Max(max,
    numbers[i]);\n            counts.Add(max);\n        }\n        return counts;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <114efcdea9514efa815de23ca2dc9c7f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <114efcdea9514efa815de23ca2dc9c7f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <114efcdea9514efa815de23ca2dc9c7f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <114efcdea9514efa815de23ca2dc9c7f>:0
    \n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = new List<long>();\n        var current = numbers[0];\n
    \       for (int i = 0; i < numbers.Count; i++) {\n            max.Add(current);\n
    \           if (numbers[i] > current) {\n                current = numbers[i];\n
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <911eeb37221744bd918bf91414bedee1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <911eeb37221744bd918bf91414bedee1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <911eeb37221744bd918bf91414bedee1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <911eeb37221744bd918bf91414bedee1>:0
    \n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> res = new List<long>();\n        long max = 0;\n
    \       foreach (long num in numbers) {\n            max = (num > max) ? num :
    max;\n            res.Add(max);\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e49d40fc4fbf4934b5c78b58dcddead1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e49d40fc4fbf4934b5c78b58dcddead1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        // Your code goes here.\n        return numbers;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5bd9227ae9d444cb971138c79f74bfa8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5bd9227ae9d444cb971138c79f74bfa8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> ret = new List<long>();\n        long max = numbers[0];\n
    \       ret.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n            if
    (numbers[i] > max) {\n                max = numbers[i];\n            }\n            ret.Add(max);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6efebb4147814d989677678bfcc2cfd8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <6efebb4147814d989677678bfcc2cfd8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6efebb4147814d989677678bfcc2cfd8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <6efebb4147814d989677678bfcc2cfd8>:0
    \n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        if (numbers.Count == 0) return numbers;\n        var numbersRolling
    = new List<long>();\n        var currentMaximum = numbers[0];\n        numbersRolling.Add(currentMaximum);\n
    \       for (int i = 1; i < numbers.Count; i++) {\n            var n = numbers[i];\n
    \           if (n > currentMaximum) {\n                currentMaximum = n;\n            }\n
    \           numbersRolling.Add(currentMaximum);\n        }\n        return numbersRolling;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8d6e3b71aed40868e9d0f96f8a23f91>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8d6e3b71aed40868e9d0f96f8a23f91>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long currentMax = numbers[0];\n        List<long> result =
    new List<long>();\n        result.Add(currentMax);\n        int n = numbers.Count;\n
    \       for (int i = 1; i < n; i++) {\n            currentMax = Math.Max(currentMax,
    numbers[i]);\n            result.Add(currentMax);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <c1617b88112c41ccb36d8ffdbf39271c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <c1617b88112c41ccb36d8ffdbf39271c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <c1617b88112c41ccb36d8ffdbf39271c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <c1617b88112c41ccb36d8ffdbf39271c>:0
    \n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long result = 0;\n        List<long> storage = new List<long>();\n
    \       for (int i = 0; i < numbers.Count; i++) {\n            if (numbers[i]
    > result) {\n                result = numbers[i];\n            }\n            storage.Add(result);\n
    \       }\n        return storage;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d5817c12d6a467e9580806ebfa3f75e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d5817c12d6a467e9580806ebfa3f75e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> maxs = new List<long>();\n        long max = numbers[0];\n
    \       maxs.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n            long
    num = numbers[i];\n            if (num > max) {\n                max = num;\n
    \           }\n            maxs.Add(max);\n        }\n        return maxs;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <7eceab220c284ea5a4f86a6d6d6c8c95>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <7eceab220c284ea5a4f86a6d6d6c8c95>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <7eceab220c284ea5a4f86a6d6d6c8c95>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <7eceab220c284ea5a4f86a6d6d6c8c95>:0
    \n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> res = new List<long>();\n        long currentMax
    = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n            currentMax
    = numbers[i] > currentMax ? numbers[i] : currentMax;\n            res.Add(currentMax);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ec9f821d704458096694f6b23aba895>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ec9f821d704458096694f6b23aba895>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> max = new List<long>();\n        long currentMax
    = numbers[0];\n        max.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            currentMax = Math.Max(currentMax, numbers[i]);\n            max.Add(currentMax);\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <fa2a850691164c4ab0e83361ad1002da>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <fa2a850691164c4ab0e83361ad1002da>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <fa2a850691164c4ab0e83361ad1002da>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <fa2a850691164c4ab0e83361ad1002da>:0
    \n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var ret = new List<long>();\n        long curr_max = numbers[0];\n
    \       ret.Add(curr_max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           curr_max = numbers[i] > curr_max ? numbers[i] : curr_max;\n            ret.Add(curr_max);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5fcf22fd2e344f4bbd4cb381fd05a2d1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5fcf22fd2e344f4bbd4cb381fd05a2d1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5fcf22fd2e344f4bbd4cb381fd05a2d1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5fcf22fd2e344f4bbd4cb381fd05a2d1>:0
    \n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rollmax = new List<long>();\n        long currentmax =
    numbers[0];\n        rollmax.Add(currentmax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            currentmax = (long)Math.Max(currentmax, numbers[i]);\n            rollmax.Add(currentmax);\n
    \       }\n        return rollmax;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <727bc3bb8e2042d8a1be72a704e6fa96>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <727bc3bb8e2042d8a1be72a704e6fa96>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <727bc3bb8e2042d8a1be72a704e6fa96>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <727bc3bb8e2042d8a1be72a704e6fa96>:0
    \n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <d9bc4b772227430a8f36780725c101dd>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d9bc4b772227430a8f36780725c101dd>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <d9bc4b772227430a8f36780725c101dd>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d9bc4b772227430a8f36780725c101dd>:0
    \n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var answer = new List<long>();\n        long max_number =
    0;\n        foreach (var i in numbers) {\n            max_number = Math.Max(max_number,
    i);\n            answer.Add(max_number);\n        }\n        return answer;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec2da5956df047589c9cc0da6d9b99e0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec2da5956df047589c9cc0da6d9b99e0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        // We are going to generate new list in reversed order, so
    we can use this\n        // list to always know what is the current maximum element.\n
    \       List<long> maximums = new List<long>();\n        maximums.Add(numbers[numbers.Count
    - 1]);\n        for (int i = numbers.Count - 2; i >= 0; i--) {\n            maximums.Add(Math.Max(maximums[maximums.Count
    - 1], numbers[i]));\n        }\n        // Now we can reverse this list and append
    elements in correct order.\n        maximums.Reverse();\n        // If a number
    is not equal to its maximum, we set it to 0.\n        for (int i = 0; i < numbers.Count;
    i++) {\n            if (numbers[i] != maximums[i]) {\n                numbers[i]
    = 0;\n            }\n        }\n        return numbers;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000f] in <7a053f77e6334e8da7628f3817f09796>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <7a053f77e6334e8da7628f3817f09796>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000f] in <7a053f77e6334e8da7628f3817f09796>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <7a053f77e6334e8da7628f3817f09796>:0
    \n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var rollmax = 0L;\n
    \       foreach (var number in numbers) {\n            rollmax = Math.Max(rollmax,
    number);\n            result.Add(rollmax);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56002fe8b1064fa4809500c7114e613e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56002fe8b1064fa4809500c7114e613e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        return Enumerable.Range(0, numbers.Count).Select(\n            i
    => numbers.Skip(i).Max()\n        ).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5fbf4d81eeac4c79b8f9edc2b0cf2c59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5fbf4d81eeac4c79b8f9edc2b0cf2c59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> res = new List<long>();\n        for (int i = 0;
    i < numbers.Count; i++) {\n            res.Add(numbers.GetRange(0, i + 1).Max());\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <050af12f769041b4a7b97b1962e249d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <050af12f769041b4a7b97b1962e249d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var revNumbers = new List<long>(numbers);\n        revNumbers.Reverse();\n
    \       long previousMax = long.MinValue;\n        List<long> result = new List<long>();\n
    \       foreach (var num in revNumbers) {\n            if (num > previousMax)
    {\n                previousMax = num;\n            }\n            result.Add(previousMax);\n
    \       }\n        result.Reverse();\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96eba07797fa471b987975b51bcf7754>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96eba07797fa471b987975b51bcf7754>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = new List<long>();\n        long m = 0;\n        foreach
    (var i in numbers) {\n            if (i > m) {\n                m = i;\n            }\n
    \           max.Add(m);\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a34ef2ceaaa491999d2136610ebeed8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a34ef2ceaaa491999d2136610ebeed8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var solution = new List<long>();\n        var buffer = new
    List<long>();\n        long max = (long)-1L;\n        var j = 0;\n        foreach
    (var i in numbers) {\n            while (buffer.Count > 0 && buffer[buffer.Count
    - 1] < i) {\n                buffer.RemoveAt(buffer.Count - 1);\n            }\n
    \           buffer.Add(i);\n            if (buffer[j] == numbers[j]) {\n                solution.Add(buffer[j]);\n
    \               j += 1;\n            }\n        }\n        return solution;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4fa99bb032848dda057c34b4496889a>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00067] in <e4fa99bb032848dda057c34b4496889a>:0
    \n  at Problem.Main (System.String[] args) [0x00031] in <e4fa99bb032848dda057c34b4496889a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00067] in <e4fa99bb032848dda057c34b4496889a>:0
    \n  at Problem.Main (System.String[] args) [0x00031] in <e4fa99bb032848dda057c34b4496889a>:0
    \n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        if (numbers.Count == 0) {\n            return new List<long>();\n
    \       }\n        List<long> ret = new List<long>();\n        long max_so_far
    = numbers[0];\n        ret.Add(max_so_far);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max_so_far = Math.Max(max_so_far, numbers[i]);\n            ret.Add(max_so_far);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7bb1a30e2a8145089ab84fd480c61fe2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7bb1a30e2a8145089ab84fd480c61fe2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rollingMax = new List<long>();\n        long currentMax
    = long.MinValue;\n        foreach (var number in numbers) {\n            if (number
    > currentMax) {\n                currentMax = number;\n            }\n            rollingMax.Add(currentMax);\n
    \       }\n        return rollingMax;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcb44e0909cd496cbe6c3bc870a856ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcb44e0909cd496cbe6c3bc870a856ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rollingMax = new List<long>();\n        rollingMax.Add(numbers[0]);\n
    \       for (long i = 1L; i < numbers.Count; i++) {\n            rollingMax.Add(Math.Max(rollingMax[(int)(i
    - 1L)], numbers[(int)(i)]));\n        }\n        return rollingMax;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <30d498a6755c4271842eccb6ab046049>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <30d498a6755c4271842eccb6ab046049>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <30d498a6755c4271842eccb6ab046049>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <30d498a6755c4271842eccb6ab046049>:0
    \n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var currentMax = 0L;\n
    \       for (int i = 0; i < numbers.Count; i++) {\n            if (numbers[i]
    > currentMax) {\n                currentMax = numbers[i];\n            }\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1bffe0c9cf74432babdc00ee06f5ca6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1bffe0c9cf74432babdc00ee06f5ca6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> rollingMax = new List<long>();\n        for (int
    i = 0; i < numbers.Count; i++) {\n            rollingMax.Add(0);\n        }\n
    \       long max = numbers[0];\n        rollingMax[0] = max;\n        for (int
    i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n                max
    = numbers[i];\n            }\n            rollingMax[i] = max;\n        }\n        return
    rollingMax;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00027] in <8ec6bf65a93b4a608a9d46b43a0bc785>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8ec6bf65a93b4a608a9d46b43a0bc785>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00027] in <8ec6bf65a93b4a608a9d46b43a0bc785>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8ec6bf65a93b4a608a9d46b43a0bc785>:0
    \n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long maximum = numbers[0];\n        List<long> result = new
    List<long>();\n        result.Add(maximum);\n        foreach (long num in numbers.Skip(1))
    {\n            maximum = Math.Max(maximum, num);\n            result.Add(maximum);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <74c6cd2b1f264cdcac4291cd83da315e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <74c6cd2b1f264cdcac4291cd83da315e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <74c6cd2b1f264cdcac4291cd83da315e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <74c6cd2b1f264cdcac4291cd83da315e>:0
    \n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var rollingMax = new List<long>();\n        var currentMax
    = numbers[0];\n        rollingMax.Add(currentMax);\n        for (int i = 1; i
    < numbers.Count; i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            rollingMax.Add(currentMax);\n        }\n
    \       return rollingMax;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <8c84101240424bf385d85a32f6ad5af9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8c84101240424bf385d85a32f6ad5af9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <8c84101240424bf385d85a32f6ad5af9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8c84101240424bf385d85a32f6ad5af9>:0
    \n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        if (((numbers.Count) == (0L))) {\n            return numbers;\n
    \       }\n        var ret = new List<long>();\n        ret.Add(numbers[0]);\n
    \       var currentMax = numbers[0];\n        for (var i = 1L; (i) < (numbers.Count);
    i += 1L) {\n            if ((numbers[i]) > (currentMax)) {\n                currentMax
    = numbers[i];\n            }\n            ret.Add(currentMax);\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuga2fhdw.cs(21,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpuga2fhdw.cs(22,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660008829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> max_so_far = new List<long>();\n        long current_max
    = 0;\n        foreach (long number in numbers) {\n            if (number > current_max)
    {\n                current_max = number;\n            }\n            max_so_far.Add(current_max);\n
    \       }\n        return max_so_far;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5a345be53324a23a5f3e50d4ec19d86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5a345be53324a23a5f3e50d4ec19d86>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <135b4d5188084744963deef96bc076e4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <135b4d5188084744963deef96bc076e4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <135b4d5188084744963deef96bc076e4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <135b4d5188084744963deef96bc076e4>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var res = new List<long> {max};\n
    \       foreach (var x in numbers.Skip(1)) {\n            max = Math.Max(max,
    x);\n            res.Add(max);\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <ae0d1404b2ef4d9cb61afc756d814410>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ae0d1404b2ef4d9cb61afc756d814410>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <ae0d1404b2ef4d9cb61afc756d814410>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ae0d1404b2ef4d9cb61afc756d814410>:0
    \n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max_numbers = new List<long>();\n        long current_max
    = numbers[0];\n        max_numbers.Add(current_max);\n        foreach (var n in
    numbers.Skip(1)) {\n            if (n > current_max) {\n                current_max
    = n;\n            }\n            max_numbers.Add(current_max);\n        }\n        return
    max_numbers;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <46e6defc7cde40838eb49e4d986a4313>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <46e6defc7cde40838eb49e4d986a4313>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <46e6defc7cde40838eb49e4d986a4313>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <46e6defc7cde40838eb49e4d986a4313>:0
    \n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> dp = new List<long>();\n        long max = numbers[0];\n
    \       for (int i = 0; i < numbers.Count; i++) {\n            max = Math.Max(max,
    numbers[i]);\n            dp.Add(max);\n        }\n        return dp;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <4b205a45fc354fe08eb9d9462cb167c4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <4b205a45fc354fe08eb9d9462cb167c4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <4b205a45fc354fe08eb9d9462cb167c4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <4b205a45fc354fe08eb9d9462cb167c4>:0
    \n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> r = new List<long>();\n        for (int i = 0;
    i < numbers.Count; i++) {\n            r.Add(numbers.GetRange(0, i + 1).Max());\n
    \       }\n        return r;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcc9ece156be49cc9b96668e4de25683>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcc9ece156be49cc9b96668e4de25683>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var m = numbers[0];\n        var r = new List<long>();\n        r.Add(m);\n
    \       foreach (var n in numbers.Skip(1)) {\n            if (n > m) {\n                m
    = n;\n            }\n            r.Add(m);\n        }\n        return r;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <70087070cbfd4678a46a93d7384dc420>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <70087070cbfd4678a46a93d7384dc420>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <70087070cbfd4678a46a93d7384dc420>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <70087070cbfd4678a46a93d7384dc420>:0
    \n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <135b4d5188084744963deef96bc076e4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <135b4d5188084744963deef96bc076e4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <135b4d5188084744963deef96bc076e4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <135b4d5188084744963deef96bc076e4>:0
    \n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> maxes = new List<long>();\n        long best =
    numbers[0];\n        maxes.Add(best);\n        for (long i = 1; i < numbers.Count;
    i++) {\n            if (numbers[(int)i] > best) {\n                best = numbers[(int)i];\n
    \           }\n            maxes.Add(best);\n        }\n        return maxes;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e4b4cd7cade240eab95662fc0ce07d00>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e4b4cd7cade240eab95662fc0ce07d00>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e4b4cd7cade240eab95662fc0ce07d00>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <e4b4cd7cade240eab95662fc0ce07d00>:0
    \n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = numbers[0];\n        List<long> res = new List<long>();\n
    \       foreach (long num in numbers) {\n            if (num > max) {\n                max
    = num;\n            }\n            res.Add(max);\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <257cec9aeb844f739a0fe0b42c10ac54>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <257cec9aeb844f739a0fe0b42c10ac54>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <257cec9aeb844f739a0fe0b42c10ac54>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <257cec9aeb844f739a0fe0b42c10ac54>:0
    \n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var N = numbers.Count;\n        var ret = new List<long>();\n
    \       var currentMax = numbers[0];\n        for (int i = 0; i < N; i++) {\n
    \           currentMax = Math.Max(currentMax, numbers[i]);\n            ret.Add(currentMax);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000e] in <d70f9cd0e3f9459bb5384eb6c542b415>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d70f9cd0e3f9459bb5384eb6c542b415>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x0000e] in <d70f9cd0e3f9459bb5384eb6c542b415>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <d70f9cd0e3f9459bb5384eb6c542b415>:0
    \n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c7463a7217c486f8c793101893ff9a5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c7463a7217c486f8c793101893ff9a5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c7463a7217c486f8c793101893ff9a5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c7463a7217c486f8c793101893ff9a5>:0
    \n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var maxes = new List<long>();\n        foreach (var number
    in numbers) {\n            if (maxes.Count == 0) {\n                maxes.Add(number);\n
    \           } else {\n                maxes.Add(Math.Max(maxes[maxes.Count - 1],
    number));\n            }\n        }\n        return maxes;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a9620a10d9f4d518a141f32b4ba1c2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a9620a10d9f4d518a141f32b4ba1c2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        for (int i = 0; i < numbers.Count; i++) {\n            max
    = numbers[i] > max ? numbers[i] : max;\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <bae04cc15438427c8b92cf10c794f20a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <bae04cc15438427c8b92cf10c794f20a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <bae04cc15438427c8b92cf10c794f20a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <bae04cc15438427c8b92cf10c794f20a>:0
    \n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long max = numbers[0];\n        List<long> result = new List<long>()
    { (long)1L };\n        for (long i = (long)1L; i < numbers.Count; i++) {\n            if
    (numbers[(int)i] > max) {\n                max = numbers[(int)i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <74c92e251a90420f9c03405a029d8c89>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <74c92e251a90420f9c03405a029d8c89>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <74c92e251a90420f9c03405a029d8c89>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <74c92e251a90420f9c03405a029d8c89>:0
    \n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long temp =
    numbers[0];\n        for (int i = 0; i < numbers.Count; i++) {\n            if
    (numbers[i] > temp) {\n                temp = numbers[i];\n            }\n            result.Add(temp);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cbfcbf14475d4818a405b581e557fd2f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <cbfcbf14475d4818a405b581e557fd2f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cbfcbf14475d4818a405b581e557fd2f>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <cbfcbf14475d4818a405b581e557fd2f>:0
    \n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> ret = new List<long>();\n        long max = 0;\n
    \       foreach (long n in numbers) {\n            max = Math.Max(max, n);\n            ret.Add(max);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c51e76476506474f8e9f9b98523db9e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c51e76476506474f8e9f9b98523db9e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> results = new List<long>();\n        long currentMax
    = numbers[0];\n        for (int i = 0; i < numbers.Count; i++) {\n            results.Add(currentMax);\n
    \           if (numbers[i] > currentMax) {\n                currentMax = numbers[i];\n
    \           }\n        }\n        return results;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <9b8c6f7635ac4e7d98c0d0f5eee5515e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9b8c6f7635ac4e7d98c0d0f5eee5515e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <9b8c6f7635ac4e7d98c0d0f5eee5515e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9b8c6f7635ac4e7d98c0d0f5eee5515e>:0
    \n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var res = new List<long>();\n        var m = 0L;\n        foreach
    (var n in numbers) {\n            m = Math.Max(m, n);\n            res.Add(m);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9451662685a4a47ba6bd90ffffd8f35>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9451662685a4a47ba6bd90ffffd8f35>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008830
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        long current = (long)0L;\n        var result = new List<long>();\n
    \       var __enumerator1 = (numbers).GetEnumerator();\n        while (__enumerator1.MoveNext())
    {\n            var number = (long)__enumerator1.Current;\n            if ((number
    > current)) {\n                current = number;\n            }\n            result.Add(current);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3a9a2a1a566401e8caef2fec2a0daa9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3a9a2a1a566401e8caef2fec2a0daa9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008830
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max_so_far = new List<long>();\n        long curr_max
    = long.MinValue;\n        foreach (var number in numbers) {\n            if (number
    > curr_max) {\n                curr_max = number;\n            }\n            max_so_far.Add(curr_max);\n
    \       }\n        return max_so_far;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4bff85e11f8148f88baf7364047f9269>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4bff85e11f8148f88baf7364047f9269>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660008830
